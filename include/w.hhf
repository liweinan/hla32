#if( !@defined( w_hhf) )
val
	w_hhf := true;


namespace w; @fast;

//;---------------------------------------------------------------------------
//;            Windows Include File for MASM & TASM Version 1.10
//;                            22 March 1999
//;              This file contains the equates and structures
//;             for writing 32 bit assembler language programs
//;
//;        This version of WINDOWS.INC is a joint project maintained by
//;                    Iczelion < Iczelion@galaxycorp.com >
//;                        hutch < hutch@pbq.com.au > 
//;
//;              Iczelion's homepage: http://win32asm.cjb.net
//;        hutch's homepage: http://www.pbq.com.au/home/hutch/masm.htm
//;--------------------------------------------------------------------------
//; v1.09: Add equates for Structured Exception Handling (excpt.h)
//; v1.10: Add equates and structures from winuser.h
//; ------------------------- win32api equates -------------------------------
//
//
//	Please excuse the format of this file.  It was generated by machine
// with a bunch of hand tweaks.
//
//	The original code (as the notice above indicates) was MASM32 equates
//	that were prepared by Steve Hutch.  A short HLA program translated
//	that MASM32 code to a partial-HLA form and then corrections where manually
//	made so that this code would compile correctly.
//
//	No warranties of any kind accompany this code.  There are, undoubtedly,
//	some errors in the original source as well as new errors introduced by
//	the conversion process.  If you find any incorrect entries, I'd appreciate
//	an email to randyhyde@earthlink.net that states the problem,
//	Thanks,
//	Randy Hyde

// CALLBACK typedef proto stdcall
// WINAPI typedef proto stdcall

type
	ATOM:			word;	
	BOOL: 			dword;
	LPBYTE: 		pointer to byte;
	LPDWORD: 		pointer to dword;
	LPVOID: 		pointer to byte;
	LPCVOID: 		pointer to byte;
	LPSTR: 			dword;
	LPCSTR: 		dword;
	LCID:			dword;

	UINT: 			dword;
	LONG: 			dword;

	handle_t: 		dword;
	hwnd_t:			dword;
	hglobal_t: 		dword;
	hgdiobj_t: 		dword;
	haccel_t: 		dword;
	hbitmap_t: 		dword;
	hbrush_t: 		dword;
	hdc_t: 			dword;
	hfont_t: 		dword;
	hicon_t:		dword;
	hmenu_t:		dword;
	hinstance_t:	dword;
	hrgn_t:			dword;
	hrsrc_t:		dword;
	hcursor_t: 		dword;

	COLORREF: 		dword;
	CALID:			dword;
	CALTYPE:		dword;
	SIZE_T:			dword;

	FINDEX_INFO_LEVELS:		dword;
	FINDEX_SEARCH_OPS:		dword;

	PROGRESS_ROUTINE:		procedure;
	FIBER_START_ROUTINE:	procedure;
	THREAD_START_ROUTINE:	procedure;
	CALINFO_ENUMPROC:		procedure;
	CALINFO_ENUMPROCEX:		procedure;
	DATEFMT_ENUMPROC:		procedure;
	DATEFMT_ENUMPROCEX:		procedure;
	ENUMRESNAMEPROC:		procedure;
	ENUMRESLANGPROC:		procedure;
	ENUMRESTYPEPROC:		procedure;
	CODEPAGE_ENUMPROC:		procedure;
	LOCALE_ENUMPROC:		procedure;
	TIMEFMT_ENUMPROC:		procedure;

	MCIDEVICEID: 	dword;
	ACCESS_MASK: 	dword;
	UCHAR: 			byte;
	FILEOP_FLAGS: 	word;
	//WCHAR: 		WORD;

//;-------------------------- wsock32 equates -------------------------------

type	
	SOCKET_T: 				dword;
	HDWP: 					dword;
	HFILE: 					dword;
	TCHAR: 					wchar;
	OLECHAR: 				CHAR;
	LPOLESTR: 				LPSTR;
	LPCOLESTR: 				LPCSTR;
	FLOAT: 					dword;
	USHORT: 				word;
	ULONG: 					dword;
	DOUBLE: 				qword;
	GET_FILEEX_INFO_LEVELS: dword;
	LCTYPE:					dword;

 	POINT: 
		record
			x: dword;
			y: dword;
		endrecord;


 	POINTS: 
		record
			x: word;
			y: word;
		endrecord;


	POINTL :POINT;

 	RECT: 
 		record
			left: 	dword;
			top: 	dword;
			right: 	dword;
			bottom: dword;
		endrecord;


 	SIZE: 
 		record
			_cx: 	dword;
			_cy: 	dword;
		endrecord;


 	INITCOMMONCONTROLSEX: 
		record
			dwSize: dword;
			dwICC: 	dword;
		endrecord;


 	REBARINFO: 
		record
			cbSize: dword;
			fMask: 	dword;
			himl: 	dword;
		endrecord;


 	REBARBANDINFO: 
		record
			cbSize: 	dword;
			fMask: 		dword;
			fStyle: 	dword;
			clrFore: 	dword;
			clrBack: 	dword;
			lpText: 	dword;
			cch: 		dword;
			iImage: 	dword;
			hwndChild: 	dword;
			cxMinChild: dword;
			cyMinChild: dword;
			lx: 		dword;
			hbmBack: 	dword;
			wID: 		dword;
			cyChild: 	dword;
			cyMaxChild: dword;
			cyIntegral: dword;
			cxIdeal: 	dword;
			lParam: 	dword;
			cxHeader: 	dword;
		endrecord;


 	NMHDR: 
		record
			hwndFrom: 	dword;
			idFrom: 	dword;
			code: 		dword;
		endrecord;


 	NMREBARCHILDSIZE: 
		record
			hdr: 		NMHDR;
			uBand: 		dword;
			wID: 		dword;
			rcChild: 	RECT;
			rcBand: 	RECT;
		endrecord;


 	NMREBAR: 
		record
			hdr: 	NMHDR;
			dwMask: dword;
			uBand: 	dword;
			fStyle: dword;
			wID: 	dword;
			lParam: dword;
		endrecord;


 	NMRBAUTOSIZE: 
		record
			hdr: 		NMHDR;
			fChanged: 	dword;
			rcTarget:	RECT;
			rcActual: 	RECT;
		endrecord;


 	RBHITTESTINFO: 
		record
			pt: 	POINT;
			flags: 	dword;
			iBand: 	dword;
		endrecord;


 	IMAGEINFO: 
		record
			hbmImage: 	hbitmap_t;
			hbmMask: 	hbitmap_t;
			Unused1: 	dword;
			Unused2: 	dword;
			rcImage: 	RECT;
		endrecord;


 	HD_ITEM: 
		record
			imask: 		dword;
			lxy: 		dword;
			pszText: 	dword;
			hbm: 		dword;
			cchTextMax: dword;
			fmt: 		dword;
			lParam: 	dword;
			iImage: 	dword;
			iOrder: 	dword;
		endrecord;


 	HD_LAYOUT: 
		record
			prc: dword;
			pwpos: dword;
		endrecord;


 	HD_HITTESTINFO: 
		record
			pt: POINT;
			flags: dword;
			iItem: dword;
		endrecord;


 	NMHEADER: 
		record
			hdr: NMHDR;
			iItem: dword;
			iButton: dword;
			pitem: dword;
		endrecord;


	HD_NOTIFY :NMHEADER;

 	TBBUTTON: 
 		record
			iBitmap: 	dword;
			idCommand: 	dword;
			fsState: 	byte;
			fsStyle: 	byte;
			dwData: 	dword;
			iString: 	dword;
		endrecord;


 	COLORMAP: 
 		record
			FromColor: 	dword;
			ToColor: 	dword;
		endrecord;


 	TBADDBITMAP: 
 		record
			hInst: 		dword;
			nID: 		dword;
		endrecord;


 	TBSAVEPARAMS: 
 		record
			hkr: 			dword;
			pszSubKey: 		dword;
			pszValueName:	dword;
		endrecord;


 	TBREPLACEBITMAP: 
 		record
			hInstOld: 	dword;
			nIdOld: 	dword;
			hInstNew: 	dword;
			nIdNew: 	dword;
			nButtons: 	dword;
		endrecord;



 	NMTOOLBAR: 
 		record
			hdr: 		NMHDR;
			iItem: 		dword;
			_tbButton:	TBBUTTON;
			cchText: 	dword;
			pszText: 	dword;
		endrecord;


	TBNOTIFY :NMTOOLBAR;

 	TOOLINFO: 
 		record
			cbSize: 	dword;
			uFlags: 	dword;
			hWnd: 		dword;
			uId: 		dword;
			_rect: 		RECT;
			hInst: 		dword;
			lpszText: 	dword;
			lParam: 	dword;
		endrecord;


 	TT_HITTESTINFO: 
 		record
			hWnd: 	dword;
			pt: 	POINT;
			ti: 	TOOLINFO;
		endrecord;


 	NMTTDISPINFO: 
 		record
			hdr: 		NMHDR;
			lpszText: 	dword;
			szText: 	byte[80];
			hInst: 		dword;
			uFlags: 	dword;
			lParam: 	dword;
		endrecord;


	TOOLTIPTEXT :NMTTDISPINFO;

 	DRAGLISTINFO: 
 		record
			uNotification: 	dword;
			hWnd: 			dword;
			ptCursor: 		POINT;
		endrecord;


 	UDACCEL: 
 		record
			nSec: dword;
			nInc: dword;
		endrecord;


 	NM_UPDOWN: 
 		record
			hdr: 	NMHDR;
			iPos: 	dword;
			iDelta: dword;
		endrecord;


	NMUPDOWN :NM_UPDOWN;

 	LV_ITEM: 
 		record
			imask: 		dword;
			iItem: 		dword;
			iSubItem: 	dword;
			state: 		dword;
			stateMask: 	dword;
			pszText: 	dword;
			cchTextMax: dword;
			iImage: 	dword;
			lParam: 	dword;
			iIndent: 	dword;
		endrecord;


	LVITEM :LV_ITEM;

 	LV_FINDINFO: 
 		record
			flags: 			dword;
			psz: 			dword;
			lParam: 		dword;
			pt: 			POINT;
			vkDirection: 	dword;
		endrecord;


	LVFINDINFO :LV_FINDINFO;

 	LV_HITTESTINFO: 
 		record
			pt: 		POINT;
			flags: 		dword;
			iItem: 		dword;
			iSubItem:	dword;
		endrecord;


	LVHITTESTINFO:LV_HITTESTINFO;

 	LV_COLUMN: 
 		record
			imask: 		dword;
			fmt: 		dword;
			lx: 		dword;
			pszText: 	dword;
			cchTextMax: dword;
			iSubItem: 	dword;
			iImage: 	dword;
			iOrder: 	dword;
		endrecord;


	LVCOLUMN :LV_COLUMN;

 	NM_LISTVIEW: 
 		record
			hdr: 		NMHDR;
			iItem: 		dword;
			iSubItem: 	dword;
			uNewState: 	dword;
			uOldState: 	dword;
			uChanged: 	dword;
			ptAction: 	POINT;
			lParam: 	dword;
		endrecord;


	NMLISTVIEW :NM_LISTVIEW;

 	LV_DISPINFO: 
 		record
			hdr: 	NMHDR;
			item: 	LV_ITEM;
		endrecord;


 	LV_KEYDOWN: 
 		record
			hdr: 	NMHDR;
			wVKey: 	word;
			flags: 	dword;
		endrecord;


	NMLVKEYDOWN :LV_KEYDOWN;

 	TV_ITEM: 
 		record
			imask: 			dword;
			hItem: 			dword;
			state: 			dword;
			stateMask: 		dword;
			pszText: 		dword;
			cchTextMax: 	dword;
			iImage: 		dword;
			iSelectedImage: dword;
			cChildren: 		dword;
			lParam: 		dword;
		endrecord;


	TVITEM :TV_ITEM;

 	TV_ITEMEX: 
 		record
			imask: 			dword;
			hItem: 			dword;
			state: 			dword;
			stateMask: 		dword;
			pszText: 		dword;
			cchTextMax: 	dword;
			iImage: 		dword;
			iSelectedImage: dword;
			cChildren: 		dword;
			lParam: 		dword;
			iIntegral: 		dword;
		endrecord;


	TVITEMEX :TV_ITEMEX;

 	ITEMTYPE: 
 		union
			itemex: 	TV_ITEMEX;
			item: 		TV_ITEM;
		endunion;


 	TV_INSERTSTRUCT: 
 		record
			hParent: 		dword;
			hInsertAfter: 	dword;
			u: 				ITEMTYPE;
		endrecord;


 	TV_HITTESTINFO: 
 		record
			pt: 	POINT;
			flags: 	dword;
			hItem: 	dword;
		endrecord;


	TVHITTESTINFO	:TV_HITTESTINFO;

 	TV_SORTCB: 
 		record
			hParent: 		dword;
			lpfnCompare: 	dword;
			lParam: 		dword;
		endrecord;


	TVSORTCB :TV_SORTCB;

 	NM_TREEVIEW: 
 		record
			hdr: 		NMHDR;
			action: 	dword;
			itemOld: 	TV_ITEM;
			itemNew: 	TV_ITEM;
			ptDrag: 	POINT;
		endrecord;


	NMTREEVIEW :NM_TREEVIEW;

 	TV_DISPINFO: 
 		record
			hdr: 	NMHDR;
			item: 	TV_ITEM;
		endrecord;


	NMTVDISPINFO :TV_DISPINFO;

 	TV_KEYDOWN: 
 		record
			hdr: 	NMHDR;
			wVKey: 	word;
			flags: 	dword;
		endrecord;


	NMTVKEYDOWN :TV_KEYDOWN;

 	TC_ITEMHEADER: 
 		record
			imask: 			dword;
			lpReserved1: 	dword;
			lpReserved2: 	dword;
			pszText: 		dword;
			cchTextMax: 	dword;
			iImage: 		dword;
		endrecord;


	TCITEMHEADER :TC_ITEMHEADER;

 	TC_ITEM: 
 		record
			imask: 			dword;
			lpReserved1:	dword;
			lpReserved2:	dword;
			pszText:		dword;
			cchTextMax: 	dword;
			iImage: 		dword;
			lParam: 		dword;
		endrecord;


	TCITEM :TC_ITEM;

 	TC_HITTESTINFO: 
 		record
			pt: 	POINT;
			flags: 	dword;
		endrecord;


	TCHITTESTINFO :TC_HITTESTINFO;

 	TC_KEYDOWN: 
 		record
			hdr: 	NMHDR;
			wVKey: 	word;
			flags: 	dword;
		endrecord;


	NMTCKEYDOWN :TC_KEYDOWN;

//; -------------------------- comdlg structures ----------------------------

 	
	CHOOSECOLOR: 
		record
			lStructSize: 	dword;
			hwndOwner: 		dword;
			hInstance: 		dword;
			rgbResult: 		dword;
			lpCustColors: 	dword;
			Flags: 			dword;
			lCustData: 		dword;
			lpfnHook: 		dword;
			lpTemplateName: dword;
		endrecord;


	CHOOSECOLORA :CHOOSECOLOR;

 	FINDREPLACE: 
 		record
			lStructSize:		dword;
			hWndOwner:			dword;
			hInstance:			dword;
			Flags:				dword;
			lpstrFindWhat:		dword;
			lpstrReplaceWith:	dword;
			wFindWhatLen:		word;
			wReplaceWithLen: 	word;
			lCustData: 			dword;
			lpfnHook: 			dword;
			lpTemplateName:		dword;
		endrecord;


	FINDREPLACEA: FINDREPLACE;

 	CHOOSEFONT: 
 		record
			lStructSize: 	dword;
			hWndOwner: 		dword;
			hDC: 			dword;
			lpLogFont: 		dword;
			iPointSize: 	dword;
			Flags: 			dword;
			rgbColors: 		dword;
			lCustData: 		dword;
			lpfnHook: 		dword;
			lpTemplateName: dword;
			hInstance: 		dword;
			lpszStyle: 		dword;
			nFontType: 		word;
			Alignment: 		word;
			nSizeMin: 		dword;
			nSizeMax: 		dword;
		endrecord;


	CHOOSEFONTA: CHOOSEFONT;

 	DEVNAMES: 
 		record
			wDriverOffset: 	word;
			wDeviceOffset: 	word;
			wOutputOffset: 	word;
			wDefault: 		word;
		endrecord;


 	PRINTDLG: 
 		record
			lStructSize:				dword;
			hWndOwner:					dword;
			hDevMode: 					dword;
			hDevNames: 					dword;
			hDC: 						dword;
			Flags: 						dword;
			nFromPage: 					word;


			nToPage: 					word;
			nMinPage: 					word;
			nMaxPage: 					word;
			nCopies: 					word;
			hInstance: 					dword;
			lCustData: 					dword;
			lpfnPrintHook: 				dword;
			lpfnSetupHook: 				dword;
			lpPrintTemplateName:		dword;
			lpSetupTemplateName:		dword;
			hPrintTemplate: 			dword;
			hSetupTemplate: 			dword;
		endrecord;


	PRINTDLGA: PRINTDLG;

 	OPENFILENAME: 
 		record
			lStructSize: 		dword;
			hWndOwner: 			dword;
			hInstance: 			dword;
			lpstrFilter: 		dword;
			lpstrCustomFilter: 	dword;
			nMaxCustFilter: 	dword;
			nFilterIndex: 		dword;
			lpstrFile: 			dword;
			nMaxFile: 			dword;
			lpstrFileTitle: 	dword;
			nMaxFileTitle: 		dword;
			lpstrInitialDir: 	dword;
			lpstrTitle: 		dword;
			Flags: 				dword;
			nFileOffset: 		word;
			nFileExtension: 	word;
			lpstrDefExt: 		dword;
			lCustData: 			dword;
			lpfnHook: 			dword;
			lpTemplateName:		dword;
		endrecord;


	OPENFILENAMEA: OPENFILENAME;


//; -------------------------- riched structures -----------------------------

const
	LF_FACESIZE                    := 32;
	LF_FULLFACESIZE                := 64;

type 	
	CHARFORMAT: 
		record
			cbSize: 			dword;
			_wPad1: 			dword;
			dwMask: 			dword;
			dwEffects: 			dword;
			yHeight: 			dword;
			yOffset: 			dword;
			crTextColor: 		COLORREF;
			bCharSet: 			byte;
			bPitchAndFamily:	byte;
			szFaceName: 		byte[LF_FACESIZE];
			_wPad2: 			dword;
		endrecord;


	CHARFORMATA:CHARFORMAT;

 	CHARRANGE: 
 		record
			cpMin: dword;
			cpMax: dword;
		endrecord;


 	TEXTRANGE: 
 		record
			chrg: 		CHARRANGE;
			lpstrText: 	dword;
		endrecord;


	TEXTRANGEA:TEXTRANGE;

 	EDITSTREAM: 
 		record
			dwCookie: 		dword;
			dwError: 		dword;
			pfnCallback: 	dword;
		endrecord;


 	FINDTEXT: 
 		record
			chrg: 		CHARRANGE;
			lpstrText:	dword;
		endrecord;


	FINDTEXTA:FINDTEXT;

 	FINDTEXTEX: 
 		record
			chrg: CHARRANGE;
			lpstrText: dword;
			chrgText: CHARRANGE;
		endrecord;


	FINDTEXTEXA:FINDTEXTEX;

 	FORMATRANGE: 
 		record
			hdc: dword;
			hdcTarget: dword;
			rc: RECT;
			rcPage: RECT;
			chrg: CHARRANGE;
		endrecord;

const
	MAX_TAB_STOPS                  := 32;

type 	
	PARAFORMAT: 
		record
			cbSize: 		dword;
			_wPad1: 		dword;
			dwMask: 		dword;
			wNumbering: 	word;
			wEffects: 		word;
			dxStartIndent: 	dword;
			dxRightIndent: 	dword;
			dxOffset: 		dword;
			wAlignment: 	word;
			cTabCount: 		word;
			rgxTabs: 		dword[MAX_TAB_STOPS];
		endrecord;


 	MSGFILTER: 
 		record
			_nmhdr: NMHDR;
			msg: 	dword;
			_wPad1: dword;
			wParam: dword;
			_wPad2: dword;
			lParam: dword;
		endrecord;


 	REQRESIZE: 
 		record
			_nmhdr: NMHDR;
			rc: 	RECT;
		endrecord;


 	SELCHANGE: 
 		record
			_nmhdr: 	NMHDR;
			chrg: 		CHARRANGE;
			seltyp: 	word;
		endrecord;


 	ENDROPFILES: 
 		record
			_nmhdr: 	NMHDR;
			hDrop: 		dword;
			cp: 		dword;
			fProtected: dword;
		endrecord;


 	ENPROTECTED: 
 		record
			_nmhdr:		NMHDR;
			msg: 		dword;
			wPad1: 		dword;
			wParam: 	dword;
			wPad2: 		dword;
			lParam: 	dword;
			chrg: 		CHARRANGE;
		endrecord;


 	ENSAVECLIPBOARD: 
 		record
			_nmhdr: 		NMHDR;
			cObjectCount:	dword;
			cch: 			dword;
		endrecord;


 	ENOLEOPFAILED: 
 		record
			_nmhdr: 	NMHDR;
			iob: 		dword;
			lOper: 		dword;
			hr: 		dword;
		endrecord;


 	ENCORRECTTEXT: 
 		record
			_nmhdr: 	NMHDR;
			chrg: 		CHARRANGE;
			seltyp: 	word;
		endrecord;


 	PUNCTUATION: 
 		record
			iSize: 			dword;
			szPunctuation:	dword;
		endrecord;


 	COMPCOLOR: 
 		record
			crText: 		dword;
			crBackground: 	dword;
			dwEffects: 		dword;
		endrecord;


 	REPASTESPECIAL: 
 		record
			dwAspect: 	dword;
			dwParam: 	dword;
		endrecord;


 	GETTEXTEX: 
 		record
			cb: 			dword;
			flags: 			dword;
			codepage: 		dword;
			lpDefaultChar: 	dword;
			lpUsedDefChar: 	dword;
		endrecord;



//; ----------------------- win32api structures -----------------------------

type 	
	SIZEL: 
		record
			x: dword;
			y: dword;
		endrecord;


	_SIZE:SIZEL;

 	MSG: 
 		record
			hwnd: 		dword;
			message: 	dword;
			wParam: 	dword;
			lParam: 	dword;
			time: 		dword;
			pt: 		POINT;
		endrecord;


 	SID_AND_ATTRIBUTES: 
 		record
			Sid: 		dword;
			Attributes: dword;
		endrecord;


 	SID_IDENTIFIER_AUTHORITY: 
 		record
			Value: byte[6];
		endrecord;


 	OVERLAPPED: 
 		record
			Internal: 		dword;
			InternalHigh: 	dword;
			loffset: 		dword;
			OffsetHigh: 	dword;
			hEvent: 		dword;
		endrecord;


 	SECURITY_ATTRIBUTES: 
 		record
			niLength: 				dword;
			lpSecurityDescriptor: 	dword;
			bInheritHandle: 		dword;
		endrecord;


 	PROCESS_INFORMATION: 
 		record
			hProcess: 		dword;
			hThread: 		dword;
			dwProcessId: 	dword;
			dwThreadId: 	dword;
		endrecord;


 	FILETIME: 
 		record
			dwLowDateTime: 	dword;
			dwHighDateTime: dword;
		endrecord;


 	SYSTEMTIME: 
 		record
			wYear: 			word;
			wMonth: 		word;
			wDayOfWeek: 	word;
			wDay: 			word;
			wHour: 			word;
			wMinute: 		word;
			wSecond: 		word;
			wMilliseconds: 	word;
		endrecord;


 	COMMPROP: 
 		record
			wPacketiLength: 		word;
			wPacketVersion: 		word;
			dwServiceMask: 			dword;
			dwReserved1: 			dword;
			dwMaxTxQueue: 			dword;
			dwMaxRxQueue: 			dword;
			dwMaxBaud: 				dword;
			dwProvSubType: 			dword;
			dwProvCapabilities: 	dword;
			dwSettableParams: 		dword;
			dwSettableBaud: 		dword;
			wSettableData: 			word;
			wSettableStopParity: 	word;
			dwCurrentTxQueue: 		dword;
			dwCurrentRxQueue: 		dword;
			dwProvSpec1: 			dword;
			dwProvSpec2: 			dword;
			wcProvChar: 			word;
		endrecord;



// COMRECORD record fCtsHold:1, fDsrHold:1,fRlsdHold:1,fXoffHold:1,fXoffSent:1,fEof:1,fTxim:1,fReserved:25

type	COMRECORD: dword; 
	 	COMSTAT: 
	 		record
				comrec: COMRECORD;
				cbInQue: dword;
				cbOutQue: dword;
			endrecord;


// BITRECORD record fBinary:1,fParity:1,fOutxCtsFlow:1,fOutxDsrFlow:1,fDtrControl:2,fDsrSensitivity:1,fTXContinueOnXoff:1,fOutX:1,fInX:1,fErrorChar:1,fNull:1,fRtsControl:2,fAbortOnError:1,fDummy2:17

 BITRECORD:dword;

 	DCB: 
 		record
			DCBlength: 	dword;
			BaudRate: 	dword;
			fbits: 		BITRECORD;
			wReserved: 	word;
			XonLim: 	word;
			XoffLim: 	word;
			ByteSize: 	byte;
			Parity: 	byte;
			StopBits: 	byte;
			XonChar: 	byte;
			XoffChar: 	byte;
			ErrorChar: 	byte;
			EofChar: 	byte;
			EvtChar: 	byte;
			wReserved1: word;
		endrecord;


 	COMMTIMEOUTS: 
 		record
			ReadIntervalTimeout: 			dword;
			ReadTotalTimeoutMultiplier: 	dword;
			ReadTotalTimeoutConstant: 		dword;
			WriteTotalTimeoutMultiplier: 	dword;
			WriteTotalTimeoutConstant: 		dword;
		endrecord;


 	SYSTEM_INFO: 
 		record
			wProcessorArchitecture: 		word;
			wReserved: 						word;
			dwPageSize: 					dword;
			lpMinimumApplicationAddress: 	dword;
			lpMaximumApplicationAddress: 	dword;
			dwActiveProcessorMask: 			dword;
			dwNumberOfProcessors: 			dword;
			dwProcessorType: 				dword;
			dwAllocationGranularity: 		dword;
			wProcessorLevel: 				word;
			wProcessorRevision: 			word;
		endrecord;


 	MEMORYSTATUS: 
 		record
			dwLength: 			dword;
			dwMemoryLoad: 		dword;
			dwTotalPhys: 		dword;
			dwAvailPhys: 		dword;
			dwTotalPageFile: 	dword;
			dwAvailPageFile: 	dword;
			dwTotalVirtual: 	dword;
			dwAvailVirtual: 	dword;
		endrecord;


 	MEMORYSTATUSEX: 
 		record
			dwLength: 					dword;
			dwMemoryLoad: 				dword;
			ullTotalPhys: 				qword;
			ullAvailPhys: 				qword;
			ullTotalPageFile: 			qword;
			ullAvailPageFile: 			qword;
			ullTotalVirtual: 			qword;
			ullAvailVirtual: 			qword;
			ullAvailExtendedVirtual:	qword;
		endrecord;



	PROCESS_HEAP_ENTRY: 
		record
			lpData:			dword;
			cbData:			dword;
			cbOverhead:		byte;
			iRegionIndex:	byte;
			wFlags:			word;
			union

				Block: record

					hMem:		dword;
					dwReserved:	dword[3];

				endrecord;

				Region: record

					dwComittedSize:		dword;
					dwUnComittedSize:	dword;
					lpFirstBlock:		dword;
					lpLastBlock:		dword;

				endrecord;

			endunion;

		endrecord;

 	TPMPARAMS: 
 		record
			cbSize: 	dword;
			rcExclude: 	RECT;
		endrecord;



 	GENERIC_MAPPING: 
 		record
			GenericRead: 	dword;
			GenericWrite: 	dword;
			GenericExecute: dword;
			GenericAll: 	dword;
		endrecord;


 	LUID: 
 		record
			LowPart: 	dword;
			HighPart: 	dword;
		endrecord;


//;LUID_AND_ATTRIBUTES STRUCT DWORD
//;  Luid          LUID <>
//;  Attributes    DWORD      ?
//;LUID_AND_ATTRIBUTES ENDS

type 
	LUID_AND_ATTRIBUTES:
		record
			LuidVal: 	LUID;
			Attributes:	dword;
		endrecord;

 	ACL: 
 		record
			AclRevision:	byte;
			Sbz1: 			byte;
			AclSize: 		word;
			AceCount: 		word;
			Sbz2: 			word;
		endrecord;


 	ACE_HEADER: 
 		record
			AceType: byte;
			AceFlags: byte;
			AceSize: word;
		endrecord;


 	ACCESS_ALLOWED_ACE: 
 		record
			Header: 	ACE_HEADER;
			imask: 		dword;
			SidStart: 	dword;
		endrecord;


 	ACCESS_DENIED_ACE: 
 		record
			Header: 	ACE_HEADER;
			imask: 		dword;
			SidStart: 	dword;
		endrecord;


 	SYSTEM_AUDIT_ACE: 
 		record
			Header: 	ACE_HEADER;
			imask: 		dword;
			SidStart:	dword;
		endrecord;


 	SYSTEM_ALARM_ACE: 
 		record
			Header: 	ACE_HEADER;
			imask: 		dword;
			SidStart: 	dword;
		endrecord;


 	ACL_REVISION_INFORMATION: 
 		record
			AclRevision: dword;
		endrecord;


 	ACL_SIZE_INFORMATION: 
 		record
			AceCount: 		dword;
			AclBytesInUse: 	dword;
			AclBytesFree: 	dword;
		endrecord;


 	SECURITY_DESCRIPTOR: 
 		record
			Revision: 	byte;
			Sbz1: 		byte;
			Control: 	word;
			Owner: 		dword;
			lGroup: 	dword;
			Sacl: 		dword;
			Dacl: 		dword;
		endrecord;


const
	ANYSIZE_ARRAY := 1;


type 	
	PRIVILEGE_SET: 
		record
			PrivilegeCount: dword;
			Control: 		dword;
			Privilege: 		LUID_AND_ATTRIBUTES[ANYSIZE_ARRAY];
		endrecord;

const
	EXCEPTION_MAXIMUM_PARAMETERS   := 15;

type 	
	EXCEPTION_RECORD: 
		record
			ExceptionCode: 			dword;
			ExceptionFlags: 		dword;
			pExceptionRecord: 		dword;
			ExceptionAddress: 		dword;
			NumberParameters: 		dword;
			ExceptionInformation: 	dword[EXCEPTION_MAXIMUM_PARAMETERS];
		endrecord;


type 	
	EXCEPTION_DEBUG_INFO: 
		record
			pExceptionRecord:	EXCEPTION_RECORD;
			dwFirstChance: 		dword;
		endrecord;


 	CREATE_THREAD_DEBUG_INFO: 
 		record
			hThread: 			dword;
			lpThreadLocalBase:	dword;
			lpStartAddress:		dword;
		endrecord;


 	CREATE_PROCESS_DEBUG_INFO: 
 		record
			_hFile: 				dword;
			hProcess: 				dword;
			hThread: 				dword;
			lpBaseOfImage: 			dword;
			dwDebugInfoFileOffset: 	dword;
			nDebugInfoSize: 		dword;
			lpThreadLocalBase: 		dword;
			lpStartAddress: 		dword;
			lpImageName: 			dword;
			fUnicode: 				word;
		endrecord;


 	EXIT_THREAD_DEBUG_INFO: 
 		record
			dwExitCode: dword;
		endrecord;


 	EXIT_PROCESS_DEBUG_INFO: 
 		record
			dwExitCode: dword;
		endrecord;


 	LOAD_DLL_DEBUG_INFO: 
 		record
			_hFile: 				dword;
			lpBaseOfDll: 			dword;
			dwDebugInfoFileOffset: 	dword;
			nDebugInfoSize: 		dword;
			lpImageName: 			dword;
			fUnicode: 				word;
		endrecord;


 	UNLOAD_DLL_DEBUG_INFO: 
 		record
			lpBaseOfDll: dword;
		endrecord;


 	OUTPUT_DEBUG_STRING_INFO: 
 		record
			lpDebugStringData: 		dword;
			fUnicode: 				word;
			nDebugStringiLength: 	word;
		endrecord;


 	RIP_INFO: 
 		record
			dwError: 	dword;
			dwType: 	dword;
		endrecord;

const
	OFS_MAXPATHNAME := 128;


type 	
	OFSTRUCT: 
		record
			cBytes: byte;
			fFixedDisk: byte;
			nErrCode: word;
			Reserved1: word;
			Reserved2: word;
			szPathName: byte[OFS_MAXPATHNAME];
		endrecord;

	WNDPROC:
		procedure
		( 
			var	lpPrevWndFunc	:var; 
				hWnd			:dword; 
				Msg				:dword; 
				_wParam			:dword; 
				_lParam			:dword
		);
			@stdcall;
			@returns( "eax" );




 	WNDCLASSEX: 
 		record
			cbSize			: dword;
			style			: dword;
			lpfnWndProc		: WNDPROC;
			cbClsExtra		: dword;
			cbWndExtra		: dword;
			hInstance		: dword;
			hIcon			: dword;
			hCursor			: dword;
			hbrBackground	: dword;
			lpszMenuName	: string;
			lpszClassName	: string;
			hIconSm			: dword;
		endrecord;


 	WNDCLASS: 
 		record
			style: 			dword;
			lpfnWndProc: 	dword;
			cbClsExtra: 	dword;
			cbWndExtra: 	dword;
			hInstance: 		dword;
			hIcon: 			dword;
			hCursor: 		dword;
			hbrBackground: 	dword;
			lpszMenuName: 	dword;
			lpszClassName: 	dword;
		endrecord;


	WNDCLASSA:WNDCLASS;

 	RTL_CRITICAL_SECTION: 
 		record
			DebugInfo: 		dword;
			LockCount: 		LONG;
			RecursionCount: LONG;
			OwningThread: 	handle_t;
			LockSemaphore: 	handle_t;
			SpinCount: 		dword;
		endrecord;


	CRITICAL_SECTION:RTL_CRITICAL_SECTION;

 	BY_HANDLE_FILE_INFORMATION: 
 		record
			dwFileAttributes: 		dword;
			ftCreationTime: 		FILETIME;
			ftLastAccessTime: 		FILETIME;
			ftLastWriteTime: 		FILETIME;
			dwVolumeSerialNumber: 	dword;
			nFileSizeHigh: 			dword;
			nFileSizeLow: 			dword;
			nNumberOfLinks: 		dword;
			nFileIndexHigh: 		dword;
			nFileIndexLow: 			dword;
		endrecord;


 	MEMORY_BASIC_INFORMATION: 
 		record
			BaseAddress: 		dword;
			AllocationBase: 	dword;
			AllocationProtect: 	dword;
			RegionSize: 		dword;
			State: 				dword;
			Protect: 			dword;
			lType: 				dword;
		endrecord;


 	EVENTLOGRECORD: 
 		record
			iLength: 				dword;
			Reserved: 				dword;
			RecordNumber: 			dword;
			TimeGenerated: 			dword;
			TimeWritten:			dword;
			EventID: 				dword;
			EventType: 				word;
			NumStrings: 			word;
			EventCategory: 			word;
			ReservedFlags: 			word;
			ClosingRecordNumber: 	dword;
			StringOffset: 			dword;
			UserSidiLength: 		dword;
			UserSidOffset: 			dword;
			DataiLength: 			dword;
			DataOffset: 			dword;
		endrecord;


 	TOKEN_GROUPS: 
 		record
			GroupCount: dword;
			Groups: 	SID_AND_ATTRIBUTES[ANYSIZE_ARRAY];
		endrecord;


 	TOKEN_PRIVILEGES: 
 		record
			PrivilegeCount: dword;
			Privileges: 	LUID_AND_ATTRIBUTES[ANYSIZE_ARRAY];
		endrecord;

const
	SIZE_OF_80387_REGISTERS 	:= 80;
	MAXIMUM_SUPPORTED_EXTENSION := 512;


type 	
	FLOATING_SAVE_AREA: 
		record
			ControlWord: 	dword;
			StatusWord: 	dword;
			TagWord: 		dword;
			ErrorOffset: 	dword;
			ErrorSelector: 	dword;
			DataOffset: 	dword;
			DataSelector: 	dword;
			RegisterArea: 	byte[SIZE_OF_80387_REGISTERS];
			Cr0NpxState: 	dword;
		endrecord;

 	CONTEXT: 
 		record
			ContextFlags: 		dword;
			iDr0: 				dword;
			iDr1: 				dword;
			iDr2: 				dword;
			iDr3: 				dword;
			iDr6: 				dword;
			iDr7: 				dword;
			FloatSave: 			FLOATING_SAVE_AREA;
			regGs: 				dword;
			regFs: 				dword;
			regEs: 				dword;
			regDs: 				dword;
			regEdi: 			dword;
			regEsi: 			dword;
			regEbx: 			dword;
			regEdx: 			dword;
			regEcx: 			dword;
			regEax: 			dword;
			regEbp: 			dword;
			regEip: 			dword;
			regCs: 				dword;
			regFlag: 			dword;
			regEsp: 			dword;
			regSs: 				dword;
			ExtendedRegisters: 	byte[MAXIMUM_SUPPORTED_EXTENSION];
		endrecord;


 	EXCEPTION_POINTERS: 
 		record
			pExceptionRecord: 	dword;
			ContextRecord: 		dword;
		endrecord;


 	LDT_BYTES: 
 		record
			BaseMid: 	byte;
			Flags1: 	byte;
			Flags2: 	byte;
			BaseHi: 	byte;
		endrecord;


//;LDT_ENTRY STRUCT DWORD
//;  LimitLow  WORD      ?
//;  BaseLow   WORD      ?
//;  HiWord   DWORD      ?
//;LDT_ENTRY ENDS

type 	
	TIME_ZONE_INFORMATION: 
		record
			Bias: 			dword;
			StandardName: 	word[32];
			StandardDate: 	SYSTEMTIME;
			StandardBias: 	dword;
			DaylightName: 	word[32];
			DaylightDate: 	SYSTEMTIME;
			DaylightBias: 	dword;
		endrecord;


 	LARGE_INTEGER: 
 		record
			QuadPart: QWORD;
		endrecord;


 	WIN32_STREAM_ID: 
 		record
			dwStreamID: 		dword;
			dwStreamAttributes: dword;
			dwSize: 			LARGE_INTEGER;
			dwStreamNameSize: 	dword;
			cStreamName: 		byte[ANYSIZE_ARRAY];
		endrecord;


 	STARTUPINFO: 
 		record
			cb: 				dword;
			lpReserved: 		dword;
			lpDesktop: 			dword;
			lpTitle: 			dword;
			dwX: 				dword;
			dwY: 				dword;
			dwXSize: 			dword;
			dwYSize: 			dword;
			dwXCountChars: 		dword;
			dwYCountChars: 		dword;
			dwFillAttribute: 	dword;
			dwFlags: 			dword;
			wShowWindow: 		word;
			cbReserved2: 		word;
			lpReserved2: 		dword;
			hStdInput: 			dword;
			hStdOutput: 		dword;
			hStdError: 			dword;
		endrecord;

const
	MAX_PATH := 260;

type 	
	WIN32_FIND_DATA: 
		record
			dwFileAttributes: 	dword;
			ftCreationTime: 	FILETIME;
			ftLastAccessTime: 	FILETIME;
			ftLastWriteTime: 	FILETIME;
			nFileSizeHigh: 		dword;
			nFileSizeLow: 		dword;
			dwReserved0: 		dword;
			dwReserved1: 		dword;
			cFileName: 			byte[MAX_PATH];
			cAlternate: 		byte[14];
		endrecord;

const
	MAX_DEFAULTCHAR := 2;
	MAX_LEADBYTES   := 12;

type 	
	CPINFO: 
		record
			MaxCharSize: 	dword;
			DefaultChar: 	byte[MAX_DEFAULTCHAR];
			LeadByte: 		byte[MAX_LEADBYTES];
		endrecord;


type   
	CPINFOEX: 
		record
			MaxCharSize:		uns32;
			DefaultChar:		char[ MAX_DEFAULTCHAR ];
			LeadByte:			byte[ MAX_LEADBYTES ];
			UnicodeDefaultChar:	word;
			CodePage:			uns32;
			CodePageName:		char[ MAX_PATH ];
		endrecord;




 	NUMBERFMT: 
 		record
			NumDigits: 		dword;
			LeadingZero: 	dword;
			Grouping: 		dword;
			lpDecimalSep: 	dword;
			lpThousandSep: 	dword;
			NegativeOrder: 	dword;
		endrecord;


	NUMBERFMTA:NUMBERFMT;

 	CURRENCYFMT: 
 		record
			NumDigits: 			dword;
			LeadingZero: 		dword;
			Grouping: 			dword;
			lpDecimalSep: 		dword;
			lpThousandSep: 		dword;
			NegativeOrder: 		dword;
			PositiveOrder: 		dword;
			lpCurrencySymbol: 	dword;
		endrecord;


	CURRENCYFMTA :CURRENCYFMT;

 	COORD: 
 		record
			x: word;
			y: word;
		endrecord;


 	SMALL_RECT: 
 		record
			Left: 	word;
			Top: 	word;
			Right: 	word;
			Bottom: word;
		endrecord;


 	CHARTYPE: 
 		union
			UnicodeChar:	word;
			AsciiChar: 		byte;
		endunion;


 	KEY_EVENT_RECORD: 
 		record
			bKeyDown: 			dword;
			wRepeatCount: 		word;
			wVirtualKeyCode: 	word;
			wVirtualScanCode: 	word;
			_uChar: 			CHARTYPE;
			dwControlKeyState: 	dword;
		endrecord;


 	MOUSE_EVENT_RECORD: 
 		record
			dwMousePosition: 	COORD;
			dwButtonState: 		dword;
			dwControlKeyState: 	dword;
			dwEventFlags: 		dword;
		endrecord;


 	WINDOW_BUFFER_SIZE_RECORD: 
 		record
			dwSize: COORD;
		endrecord;


 	MENU_EVENT_RECORD: 
 		record
			dwCommandId: dword;
		endrecord;


 	FOCUS_EVENT_RECORD: 
 		record
			bSetFocus: dword;
		endrecord;
	
	INPUT_RECORD: 
		record
			EventType:	word;
			_padding_:	word;
			Event:union
			
				KeyEvent				:KEY_EVENT_RECORD;
				MouseEvent				:MOUSE_EVENT_RECORD;
				WindowBufferSizeEvent	:WINDOW_BUFFER_SIZE_RECORD;
				FocusEvent				:FOCUS_EVENT_RECORD;
				
			endunion;
		endrecord;
			


 	CHAR_INFO: 
 		record
			CharVal: 	CHARTYPE;
			Attributes: word;
		endrecord;


 	CONSOLE_SCREEN_BUFFER_INFO: 
 		record
			dwSize: 				COORD;
			dwCursorPosition: 		COORD;
			wAttributes:			word;
			srWindow: 				SMALL_RECT;
			dwMaximumWindowSize: 	COORD;
		endrecord;


 	CONSOLE_CURSOR_INFO: 
 		record
			dwSize: 	dword;
			bVisible: 	dword;
		endrecord;


 	XFORM: 
 		record
			eM11: 	dword;
			eM12: 	dword;
			eM21: 	dword;
			eM22: 	dword;
			ex: 	dword;
			ey: 	dword;
		endrecord;


 	BITMAP: 
 		record
			bmType: 		dword;
			bmWidth: 		dword;
			bmHeight: 		dword;
			bmWidthBytes: 	dword;
			bmPlanes: 		word;
			bmBitsPixel: 	word;
			bmBits: 		dword;
		endrecord;


 	RGBTRIPLE: 
 		record
			rgbtBlue: 	byte;
			rgbtGreen: 	byte;
			rgbtRed: 	byte;
		endrecord;


 	RGBQUAD: 
 		record
			rgbBlue: 		byte;
			rgbGreen: 		byte;
			rgbRed: 		byte;
			rgbReserved: 	byte;
		endrecord;


 	BITMAPCOREHEADER: 
 		record
			bcSize: 	dword;
			bcWidth: 	word;
			bcHeight: 	word;
			bcPlanes: 	word;
			bcBitCount: word;
		endrecord;


 	BITMAPINFOHEADER: 
 		record
			biSize: 			dword;
			biWidth: 			dword;
			biHeight: 			dword;
			biPlanes: 			word;
			biBitCount: 		word;
			biCompression: 		dword;
			biSizeImage: 		dword;
			biXPelsPerMeter: 	dword;
			biYPelsPerMeter: 	dword;
			biClrUsed: 			dword;
			biClrImportant: 	dword;
		endrecord;


 	BITMAPINFO: 
 		record
			bmiHeader: BITMAPINFOHEADER;
			bmiColors: RGBQUAD;
		endrecord;


 	BITMAPCOREINFO: 
 		record
			bmciHeader: BITMAPCOREHEADER;
			bmciColors: RGBTRIPLE;
		endrecord;


 	BITMAPFILEHEADER: 
 		record
			bfType: 		word;
			bfSize: 		dword;
			bfReserved1: 	word;
			bfReserved2: 	word;
			bfOffBits: 		dword;
		endrecord;


 	HANDLETABLE: 
 		record
			objectHandle: dword;
		endrecord;


 	METARECORD: 
 		record
			rdSize: 	dword;
			rdFunction: word;
			rdParm1: 	word;
		endrecord;


 	METAFILEPICT: 
 		record
			imm: 	dword;
			xExt: 	dword;
			yExt: 	dword;
			hMF: 	dword;
		endrecord;


 	METAHEADER: 
 		record
			mtType: 		word;
			mtHeaderSize: 	word;
			mtVersion: 		word;
			mtSize: 		dword;
			mtNoObjects: 	word;
			mtMaxRecord: 	dword;
			mtNoParameters: word;
		endrecord;


 	ENHMETARECORD: 
 		record
			iType: 	dword;
			nSize: 	dword;
			dParm1: dword;
		endrecord;


 	RECTL: 
 		record
			left: 	LONG;
			top: 	LONG;
			right: 	LONG;
			bottom: LONG;
		endrecord;


 	ENHMETAHEADER: 
 		record								
			iType: 			dword;
			nSize: 			dword;
			rclBounds: 		RECTL;
			rclFrame: 		RECTL;
			dSignature: 	dword;
			nVersion: 		dword;
			nBytes: 		dword;
			nRecords: 		dword;
			nHandles: 		word;
			sReserved: 		word;
			nDescription: 	dword;
			offDescription: dword;
			nPalEntries: 	dword;
			szlDevice: 		SIZEL;
			szlMillimeters: SIZEL;
			cbPixelFormat: 	dword;
			offPixelFormat: dword;
			bOpenGL: 		dword;
		endrecord;


 	TEXTMETRIC: 
 		record
			tmHeight: 			dword;
			tmAscent: 			dword;
			tmDescent: 			dword;
			tmInternalLeading: 	dword;
			tmExternalLeading: 	dword;
			tmAveCharWidth: 	dword;
			tmMaxCharWidth: 	dword;
			tmWeight: 			dword;
			tmOverhang: 		dword;
			tmDigitizedAspectX: dword;
			tmDigitizedAspectY: dword;
			tmFirstChar: 		byte;
			tmLastChar: 		byte;
			tmDefaultChar: 		byte;
			tmBreakChar: 		byte;
			tmItalic: 			byte;
			tmUnderlined: 		byte;
			tmStruckOut: 		byte;
			tmPitchAndFamily: 	byte;
			tmCharSet: 			byte;
		endrecord;


		TEXTMETRICA:TEXTMETRIC;

 	NEWTEXTMETRIC: 
 		record
			tmHeight: 			dword;
			tmAscent: 			dword;
			tmDescent: 			dword;
			tmInternalLeading: 	dword;
			tmExternalLeading: 	dword;
			tmAveCharWidth: 	dword;
			tmMaxCharWidth: 	dword;
			tmWeight: 			dword;
			tmOverhang: 		dword;
			tmDigitizedAspectX: dword;
			tmDigitizedAspectY: dword;
			tmFirstChar: 		byte;
			tmLastChar: 		byte;
			tmDefaultChar: 		byte;
			tmBreakChar: 		byte;
			tmItalic: 			byte;
			tmUnderlined: 		byte;
			tmStruckOut: 		byte;
			tmPitchAndFamily: 	byte;
			tmCharSet: 			byte;
			ntmFlags: 			dword;
			ntmSizeEM: 			dword;
			ntmCellHeight: 		dword;
			ntmAveWidth: 		dword;
		endrecord;


	NEWTEXTMETRICA:NEWTEXTMETRIC;

 	PELARRAY: 
 		record
			paXCount: 	dword;
			paYCount: 	dword;
			paXExt: 	dword;
			paYExt: 	dword;
			paRGBs: 	byte;
		endrecord;


 	LOGBRUSH: 
 		record
			lbStyle: dword;
			lbColor: dword;
			lbHatch: dword;
		endrecord;	


 	LOGPEN: 
 		record
			lopnStyle: dword;
			lopnWidth: POINT;
			lopnColor: dword;
		endrecord;


 	EXTLOGPEN: 
 		record
			elpPenStyle: 	dword;
			elpWidth: 		dword;
			elpBrushStyle: 	dword;
			elpColor: 		dword;
			elpHatch: 		dword;
			elpNumEntries: 	dword;
			elpStyleEntry: 	dword;
		endrecord;


 	PALETTEENTRY: 
 		record
			peRed: 		byte;
			peGreen: 	byte;
			peBlue: 	byte;
			peFlags: 	byte;
		endrecord;


 	LOGPALETTE: 
 		record
			palVersion: 	word;
			palNumEntries: 	word;
			palPalEntry: 	PALETTEENTRY;
		endrecord;


 	LOGFONT: 
 		record
			lfHeight: 			dword;
			lfWidth: 			dword;
			lfEscapement: 		dword;
			lfOrientation: 		dword;
			lfWeight: 			dword;
			lfItalic: 			byte;
			lfUnderline: 		byte;
			lfStrikeOut: 		byte;
			lfCharSet: 			byte;
			lfOutPrecision: 	byte;
			lfClipPrecision: 	byte;
			lfQuality: 			byte;
			lfPitchAndFamily: 	byte;
			lfFaceName: 		byte[LF_FACESIZE];
		endrecord;


	LOGFONTA:LOGFONT;

 	NONCLIENTMETRICS:
 		record
			cbSize: 			dword;
			iBorderWidth: 		dword;
			iScrollWidth: 		dword;
			iScrollHeight: 		dword;
			iCaptionWidth: 		dword;
			iCaptionHeight: 	dword;
			lfCaptionFont: 		LOGFONT;
			iSMCaptionWidth: 	dword;
			iSMCaptionHeight: 	dword;
			lfSMCaptionFont: 	LOGFONT;
			iMenuWidth: 		dword;
			iMenuHeight: 		dword;
			lfMenuFont: 		LOGFONT;
			lfStatusFont: 		LOGFONT;
			lfMessageFont: 		LOGFONT;
	endrecord;


	NONCLIENTMETRICSA:NONCLIENTMETRICS;

 	ENUMLOGFONT: 
 		record
			elfLogFont: 	LOGFONT;
			elfFullName: 	byte[LF_FULLFACESIZE];
			elfStyle: 		byte[LF_FACESIZE];
		endrecord;


	ENUMLOGFONTA:ENUMLOGFONT;

 	PANOSE: 
 		record
			bFamilyType: 		byte;
			bSerifStyle: 		byte;
			bWeight: 			byte;
			bProportion: 		byte;
			bContrast: 			byte;
			bStrokeVariation: 	byte;
			bArmStyle: 			byte;
			bLetterform: 		byte;
			bMidline: 			byte;
			bXHeight: 			byte;
		endrecord;

const
	ELF_VENDOR_SIZE   := 4;
	ELF_VERSION       := 0;
	ELF_CULTURE_LATIN := 0;


type 	
	EXTLOGFONT: 
		record
			elfLogFont: 	LOGFONT;
			elfFullName: 	byte[LF_FULLFACESIZE];
			elfStyle: 		byte[LF_FACESIZE];
			elfVersion: 	dword;
			elfStyleSize: 	dword;
			elfMatch: 		dword;
			elfReserved: 	dword;
			elfVendorId: 	byte[ELF_VENDOR_SIZE];
			elfCulture: 	dword;
			elfPanose: 		PANOSE;
		endrecord;


	EXTLOGFONTA:EXTLOGFONT;

 	ORIENTATION: 
 		record
			dmOrientation: 	word;
			dmPaperSize: 	word;
			dmPaperLength: 	word;
			dmPaperWidth: 	word;
		endrecord;


 	POSITION_ORIENTATION: 
 		union
			Orient: ORIENTATION;
			dmPosition: POINT;
		endunion;


const
	CCHDEVICENAME := 32;
	CCHFORMNAME   := 32;

type 	
	DEVMODE: 
		record
			dmDeviceName: 		byte[CCHDEVICENAME];
			dmSpecVersion: 		word;
			dmDriverVersion: 	word;
			dmSize: 			word;
			dmDriverExtra: 		word;
			dmFields: 			dword;
			dmOrientPosition: 	POSITION_ORIENTATION;
			dmScale: 			word;
			dmCopies: 			word;
			dmDefaultSource: 	word;
			dmPrintQuality: 	word;
			dmColor: 			word;
			dmDuplex: 			word;
			dmYResolution:		word;
			dmTTOption: 		word;
			dmCollate: 			word;
			dmFormName: 		byte[CCHFORMNAME];
			dmLogPixels: 		word;
			dmBitsPerPel: 		dword;
			dmPelsWidth: 		dword;
			dmPelsHeight: 		dword;
			dmDisplayFlags: 	dword;
			dmDisplayFrequency: dword;
			dmICMMethod: 		dword;
			dmICMIntent: 		dword;
			dmMediaType: 		dword;
			dmDitherType: 		dword;
			dmReserved1: 		dword;
			dmReserved2: 		dword;
		// ; if (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)
			dmPanningWidth: 	dword;
			dmPanningHeight:	dword;
		endrecord;


 	RGNDATAHEADER: 
 		record
			dwSize: 	dword;
			iType: 		dword;
			nCount: 	dword;
			nRgnSize: 	dword;
			rcBound: 	RECT;
		endrecord;


 	RGNDATA: 
 		record
			rdh: 	RGNDATAHEADER;
			Buffer: byte;
		endrecord;


 	ABC: 
 		record
			abcA: dword;
			abcB: dword;
			abcC: dword;
		endrecord;


 	ABCFLOAT: 
 		record
			abcfA: dword;
			abcfB: dword;
			abcfC: dword;
		endrecord;


 	OUTLINETEXTMETRIC: 
 		record
			otmSize: 				dword;
			otmTextMetrics: 		TEXTMETRIC;
			otmFiller: 				byte;
			otmPanoseNumber: 		PANOSE;
			otmfsSelection: 		dword;
			otmfsType: 				dword;
			otmsCharSlopeRise: 		dword;
			otmsCharSlopeRun: 		dword;
			otmItalicAngle: 		dword;
			otmEMSquare: 			dword;
			otmAscent: 				dword;
			otmDescent: 			dword;
			otmLineGap: 			dword;
			otmsCapEmHeight: 		dword;
			otmsXHeight: 			dword;
			otmrcFontBox: 			RECT;
			otmMacAscent: 			dword;
			otmMacDescent: 			dword;
			otmMacLineGap: 			dword;
			otmusMinimumPPEM: 		dword;
			otmptSubscriptSize: 	POINT;
			otmptSubscriptOffset: 	POINT;
			otmptSuperscriptSize: 	POINT;
			otmptSuperscriptOffset: POINT;
			otmsStrikeoutSize: 		dword;
			otmsStrikeoutPosition: 	dword;
			otmsUnderscoreSize: 	dword;
			otmsUnderscorePosition: dword;
			otmpFamilyName: 		dword;
			otmpFaceName: 			dword;
			otmpStyleName: 			dword;
			otmpFullName: 			dword;
		endrecord;


	OUTLINETEXTMETRICA:OUTLINETEXTMETRIC;

 	POLYTEXT: 
 		record
			x: 			dword;
			y: 			dword;
			n: 			dword;
			_lpStr: 	dword;
			uiFlags: 	dword;
			icl: 		RECT;
			pdx: 		dword;
		endrecord;


	POLYTEXTA:POLYTEXT;

 	FIXED: 
 		record
			fract: word;
			Value: word;
		endrecord;


 	MAT2: 
 		record
			eM11: FIXED;
			eM12: FIXED;
			eM21: FIXED;
			eM22: FIXED;
		endrecord;


 	GLYPHMETRICS: 
 		record
			gmBlackBoxX: 		dword;
			gmBlackBoxY: 		dword;
			gmptGlyphOrigin: 	POINT;
			gmCellIncX: 		word;
			gmCellIncY: 		word;
		endrecord;



	WCRANGE:	
		record
			wcLow	:wchar;
			cGlyphs	:word;
		endrecord;
		
		

	GLYPHSET: 	
		record
			cbThis				:dword;
			flAccel				:dword;
			cGlyphsSupported	:dword;
			cRanges				:dword;
			ranges				:WCRANGE;
		endrecord;
			

 	POINTFX: 
 		record
			x: FIXED;
			y: FIXED;
		endrecord;


 	TTPOLYCURVE: 
 		record
			wType: 	word;
			cpfx: 	word;
			apfx:	POINTFX;
		endrecord;


 	TTPOLYGONHEADER: 
 		record
			cb: 		dword;
			dwType: 	dword;
			pfxStart: 	POINTFX;
		endrecord;


 	RASTERIZER_STATUS: 
 		record
			nSize: 			word;
			wFlags: 		word;
			nLanguageID:	word;
		endrecord;


 	COLORADJUSTMENT: 
 		record
			caSize: 			word;
			caFlags: 			word;
			caIlluminantIndex: 	word;
			caRedGamma: 		word;
			caGreenGamma: 		word;
			caBlueGamma: 		word;
			caReferenceBlack: 	word;
			caReferenceWhite: 	word;
			caContrast: 		word;
			caBrightness: 		word;
			caColorfulness: 	word;
			caRedGreenTint: 	word;
		endrecord;


 	DOCINFO: 
 		record
			cbSize: 		dword;
			lpszDocName: 	dword;
			lpszOutput: 	dword;
			lpszDatatype: 	dword;
			fwType: 		dword;
		endrecord;


	DOCINFOA:DOCINFO;

 	KERNINGPAIR: 
 		record
			wFirst: 		word;
			wSecond: 		word;
			iKernAmount: 	dword;
		endrecord;


 	EMR: 
 		record
			iType: dword;
			nSize: dword;
		endrecord;


 	EMRTEXT: 
 		record
			ptlReference: 	POINT;
			nchars: 		dword;
			offString: 		dword;
			fOptions: 		dword;
			ircl: 			RECTL;
			offDx: 			dword;
		endrecord;


 	EMRABORTPATH: 
 		record
			_emr: EMR;
		endrecord;


	EMRBEGINPATH:EMRABORTPATH;

	EMRENDPATH:EMRABORTPATH;

	EMRCLOSEFIGURE:EMRABORTPATH;

	EMRFLATTENPATH:EMRABORTPATH;

	EMRWIDENPATH:EMRABORTPATH;

	EMRSETMETARGN:EMRABORTPATH;

	EMREMRSAVEDC:EMRABORTPATH;

	EMRREALIZEPALETTE:EMRABORTPATH;

 	EMRSELECTCLIPPATH: 
 		record
			_emr: 	EMR;
			iMode: 	dword;
		endrecord;


	EMRSETBKMODE:EMRSELECTCLIPPATH;

	EMRSETMAPMODE:EMRSELECTCLIPPATH;

	EMRSETPOLYFILLMODE:EMRSELECTCLIPPATH;

	EMRSETROP2:EMRSELECTCLIPPATH;

	EMRSETSTRETCHBLTMODE:EMRSELECTCLIPPATH;

	EMRSETTEXTALIGN:EMRSELECTCLIPPATH;

 	EMRSETMITERLIMIT: 
 		record
			_emr: 			EMR;
			eMiterLimit: 	dword;
		endrecord;


 	EMRRESTOREDC: 
 		record
			_emr: 		EMR;
			iRelative: 	dword;
		endrecord;


 	EMRSETARCDIRECTION: 
 		record
			_emr: 			EMR;
			iArcDirection: 	dword;
		endrecord;


 	EMRSETMAPPERFLAGS: 
 		record
			_emr: 		EMR;
			dwFlags: 	dword;
		endrecord;


 	EMRSETTEXTCOLOR: 
 		record
			_emr: 		EMR;
			crColor: 	COLORREF;
		endrecord;


	EMRSETBKCOLOR:EMRSETTEXTCOLOR;

 	EMRSELECTOBJECT: 
 		record
			_emr: 		EMR;
			ihObject: 	dword;
		endrecord;


	EMRDELETEOBJECT:EMRSELECTOBJECT;

 	EMRSELECTCOLORSPACE: 
 		record
			_emr: EMR;
			ihCS: dword;
		endrecord;


	EMRDELETECOLORSPACE:EMRSELECTCOLORSPACE;

 	EMRSELECTPALETTE: 
 		record
			_emr: 	EMR;
			ihPal: 	dword;
		endrecord;


 	EMRRESIZEPALETTE: 
 		record
			_emr: 		EMR;
			ihPal: 		dword;
			cEntries: 	dword;
		endrecord;


 	EMRSETPALETTEENTRIES: 
 		record
			_emr: 			EMR;
			ihPal: 			dword;
			iStart: 		dword;
			cEntries: 		dword;
			aPalEntries: 	PALETTEENTRY;
		endrecord;


 	EMRSETCOLORADJUSTMENT: 
 		record
			_emr: 				EMR;
			_ColorAdjustment:	COLORADJUSTMENT;
		endrecord;


 	EMRGDICOMMENT: 
 		record
			_emr: 	EMR;
			cbData: dword;
			xData1: byte;
		endrecord;


 	EMREOF: 
 		record
			_emr: 			EMR;
			nPalEntries: 	dword;
			offPalEntries: 	dword;
			nSizeLast: 		dword;
		endrecord;


 	EMRLINETO: 
 		record
			_emr:	EMR;
			ptl:	POINT;
		endrecord;


	EMRMOVETOEX:EMRLINETO;

 	EMROFFSETCLIPRGN: 
 		record
			_emr: 		EMR;
			ptlOffset: 	POINT;
		endrecord;


 	EMRFILLPATH: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
		endrecord;


	EMRSTROKEANDFILLPATH:EMRFILLPATH;

	EMRSTROKEPATH:EMRFILLPATH;

 	EMREXCLUDECLIPRECT: 
 		record
			_emr: 		EMR;
			rclClip: 	RECTL;
		endrecord;


	EMRINTERSECTCLIPRECT:EMREXCLUDECLIPRECT;

 	EMRSETVIEWPORTORGEX: 
 		record
			_emr: 		EMR;
			ptlOrigin: 	POINT;
		endrecord;


	EMRSETWINDOWORGEX:EMRSETVIEWPORTORGEX;

	EMRSETBRUSHORGEX:EMRSETVIEWPORTORGEX;

 	EMRSETVIEWPORTEXTEX: 
 		record
			_emr: 		EMR;
			szlExtent: 	SIZEL;
		endrecord;


	EMRSETWINDOWEXTEX:EMRSETVIEWPORTEXTEX;

 	EMRSCALEVIEWPORTEXTEX: 
 		record
			_emr: 	EMR;
			xNum: 	dword;
			xDenom: dword;
			yNum: 	dword;
			yDemon: dword;
		endrecord;


	EMRSCALEWINDOWEXTEX:EMRSCALEVIEWPORTEXTEX;

 	EMRSETWORLDTRANSFORM: 
 		record
			_emr: 	EMR;
			_xform: XFORM;
		endrecord;


 	EMRMODIFYWORLDTRANSFORM: 
 		record
			_emr: 	EMR;
			_xform: XFORM;
			iMode: 	dword;
		endrecord;


 	EMRSETPIXELV: 
 		record
			_emr: 		EMR;
			ptlPixel: 	POINT;
			crColor:	COLORREF;
		endrecord;


 	EMREXTFLOODFILL: 
 		record
			_emr: 		EMR;
			ptlStart: 	POINT;
			crColor: 	COLORREF;
			iMode: 		dword;
		endrecord;


 	EMRELLIPSE: 
 		record
			_emr: 	EMR;
			rclBox: RECTL;
		endrecord;


	EMRRECTANGLE:EMRELLIPSE;

 	EMRROUNDRECT: 
 		record
			_emr: 		EMR;
			rclBox: 	RECTL;
			szlCorner: 	SIZEL;
		endrecord;


 	EMRARC: 
 		record
			_emr: 		EMR;
			rclBox: 	RECTL;
			ptlStart: 	POINT;
			ptlEnd: 	POINT;
		endrecord;


	EMRARCTO:EMRARC;

	EMRCHORD:EMRARC;

	EMRPIE:EMRARC;

 	EMRANGLEARC: 
 		record
			_emr: 			EMR;
			ptlCenter: 		POINT;
			nRadius: 		dword;
			eStartAngle: 	real32;
			eSweepAngle: 	real32;
		endrecord;


 	EMRPOLYLINE: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cptl: 		dword;
			aptl: 		POINT;
		endrecord;


	EMRPOLYBEZIER:EMRPOLYLINE;

	EMRPOLYGON:EMRPOLYLINE;

	EMRPOLYBEZIERTO:EMRPOLYLINE;

 	EMRPOLYLINE16: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cpts: 		dword;
			apts: 		POINTS;
		endrecord;


	EMRPOLYBEZIER16:EMRPOLYLINE16;

	EMRPOLYGON16:EMRPOLYLINE16;

	EMRPLOYBEZIERTO16:EMRPOLYLINE16;

	EMRPOLYLINETO16:EMRPOLYLINE16;

 	EMRPOLYDRAW: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cptl: 		dword;
			aptl: 		POINT;
			abTypes1:	byte;
		endrecord;


 	EMRPOLYDRAW16: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cpts: 		dword;
			apts: 		POINTS;
			abTypes: 	byte;
		endrecord;


 	EMRPOLYPOLYLINE: 
 		record
			_emr: 			EMR;
			rclBounds: 		RECTL;
			nPolys: 		dword;
			cptl: 			dword;
			aPolyCounts: 	dword;
			aptl: 			POINT;
		endrecord;


	EMRPOLYPOLYGON:EMRPOLYPOLYLINE;

 	EMRPOLYPOLYLINE16: 
 		record
			_emr: 			EMR;
			rclBounds: 		RECTL;
			nPolys: 		dword;
			cpts: 			dword;
			aPolyCounts: 	dword;
			apts: 			POINTS;
		endrecord;


	EMRPOLYPOLYGON16:EMRPOLYPOLYLINE16;

 	EMRINVERTRGN: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cbRgnData: 	dword;
			_RgnData: 	byte;
		endrecord;


	EMRPAINTRGN:EMRINVERTRGN;

 	EMRFILLRGN: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cbRgnData: 	dword;

			ihBrush: 	dword;
			_RgnData: 	byte;
		endrecord;


 	EMRFRAMERGN: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			cbRgnData: 	dword;
			ihBrush: 	dword;
			szlStroke: 	SIZEL;
			_RgnData: 	byte;
		endrecord;


 	EMREXTSELECTCLIPRGN: 
 		record
			_emr: 		EMR;
			cbRgnData: 	dword;
			iMode: 		dword;
			_RgnData: 	byte;
		endrecord;


 	EMREXTTEXTOUT: 
 		record
			_emr: 			EMR;
			rclBounds: 		RECTL;
			iGraphicsMode: 	dword;
			exScale: 		dword;
			eyScale: 		dword;
			_emrtext: 		EMRTEXT;
		endrecord;


	EMREXTTEXTOUTA:EMREXTTEXTOUT;

 	EMRBITBLT: 
 		record
			_emr: 			EMR;
			rclBounds:		RECTL;
			xDest:			dword;
			yDest: 			dword;
			cxDest: 		dword;
			cyDest: 		dword;
			dwRop: 			dword;
			xSrc: 			dword;
			ySrc: 			dword;
			xformSrc: 		XFORM;
			crBkColorSrc: 	COLORREF;
			iUsageSrc: 		dword;
			offBmiSrc: 		dword;
			cbBmiSrc: 		dword;
			offBitsSrc: 	dword;
			cbBitsSrc: 		dword;
		endrecord;


 	EMRSTRETCHBLT: 
 		record
			_emr: 			EMR;
			rclBounds: 		RECTL;
			xDest: 			dword;
			yDest: 			dword;
			cxDest: 		dword;
			cyDest: 		dword;
			dwRop: 			dword;
			xSrc: 			dword;
			ySrc: 			dword;
			xformSrc: 		XFORM;
			crBkColorSrc: 	COLORREF;
			iUsageSrc: 		dword;
			offBmiSrc: 		dword;
			cbBmiSrc: 		dword;
			offBitsSrc: 	dword;
			cbBitsSrc: 		dword;
			cxSrc: 			dword;
			cySrc: 			dword;
		endrecord;


 	EMRMASKBLT: 
 		record
			_emr: 			EMR;
			rclBounds: 		RECTL;
			xDest: 			dword;
			yDest: 			dword;
			cxDest: 		dword;
			cyDest: 		dword;
			dwRop: 			dword;
			xSrc2: 			dword;
			cyDest2: 		dword;
			dwRop2: 		dword;
			xSrc: 			dword;
			ySrc: 			dword;
			xformSrc: 		XFORM;
			crBkColorSrc: 	COLORREF;
			iUsageSrc: 		dword;
			offBmiSrc: 		dword;
			cbBmiSrc: 		dword;
			offBitsSrc: 	dword;
			cbBitsSrc: 		dword;
			xMask: 			dword;
			yMask: 			dword;
			iUsageMask: 	dword;
			offBmiMask: 	dword;
			cbBmiMask: 		dword;
			offBitsMask: 	dword;
			cbBitsMask: 	dword;
		endrecord;


 	EMRPLGBLT: 
 		record
			_emr: 			EMR;
			rclBounds: 		RECTL;
			aptlDest: 		POINT[3];
			xSrc: 			dword;
			ySrc: 			dword;
			cxSrc: 			dword;
			cySrc: 			dword;
			xformSrc: 		XFORM;
			crBkColorSrc: 	COLORREF;
			iUsageSrc: 		dword;
			offBmiSrc: 		dword;
			cbBmiSrc: 		dword;
			offBitsSrc: 	dword;
			cbBitsSrc: 		dword;
			xMask: 			dword;
			yMask: 			dword;
			iUsageMask: 	dword;
			offBmiMask: 	dword;
			cbBmiMask: 		dword;
			offBitsMask: 	dword;
			cbBitsMask: 	dword;
		endrecord;


 	EMRSETDIBITSTODEVICE: 
 		record
			_emr: 		EMR;
			rclBounds: 	RECTL;
			xDest: 		dword;
			yDest: 		dword;
			xSrc: 		dword;
			ySrc: 		dword;
			cxSrc: 		dword;
			cySrc: 		dword;
			offBmiSrc: 	dword;
			cbBmiSrc: 	dword;
			offBitsSrc: dword;
			cbBitsSrc: 	dword;
			iUsageSrc: 	dword;
			iStartScan: dword;
			cScans: 	dword;
		endrecord;


 	EMRSTRETCHDIBITS: 
 		record
			_emr: 		EMR;
			rclBounds:	RECTL;
			xDest: 		dword;
			yDest: 		dword;
			xSrc: 		dword;
			ySrc: 		dword;
			cxSrc: 		dword;
			cySrc: 		dword;
			offBmiSrc: 	dword;
			cbBmiSrc: 	dword;
			offBitsSrc: dword;
			cbBitsSrc: 	dword;
			iUsageSrc: 	dword;
			dwRop: 		dword;
			cxDest: 	dword;
			cyDest: 	dword;
		endrecord;


 	EMRCREATEPALETTE: 
 		record
			_emr: 	EMR;
			ihPal: 	dword;
			lgpl: 	LOGPALETTE;
		endrecord;


 	EMRCREATEPEN: 
 		record
			_emr: 	EMR;
			ihPen: 	dword;
			lopn: 	LOGPEN;
		endrecord;


 	EMREXTCREATEPEN: 
 		record
			_emr: 		EMR;
			ihPen: 		dword;
			offBmi: 	dword;
			cbBmi: 		dword;
			offBits: 	dword;
			cbBits: 	dword;
			elp: 		EXTLOGPEN;
		endrecord;


 	EMRCREATEBRUSHINDIRECT: 
 		record
			_emr: 		EMR;
			ihBrush: 	dword;
			lb: 		LOGBRUSH;
		endrecord;


 	EMRCREATEMONOBRUSH: 
 		record
			_emr: 		EMR;
			ihBrush: 	dword;
			iUsage: 	dword;
			offBmi: 	dword;
			cbBmi: 		dword;
			offBits: 	dword;
			cbBits: 	dword;
		endrecord;


 	EMRCREATEDIBPATTERNBRUSHPT: 
 		record
			_emr: 		EMR;
			ihBursh: 	dword;
			iUsage: 	dword;
			offBmi: 	dword;
			cbBmi: 		dword;
			offBits: 	dword;
			cbBits: 	dword;
		endrecord;


 	CIEXYZ: 
 		record
			ciexyzX: dword;
			ciexyzY: dword;
			ciexyzZ: dword;
		endrecord;


 	CIEXYZTRIPLE: 
 		record
			ciexyzRed: 		CIEXYZ;
			ciexyzGreen: 	CIEXYZ;
			ciexyzBlue: 	CIEXYZ;
		endrecord;


 	BITMAPV4HEADER: 
 		record
			bV4Size:			dword;
			bV4Width: 			dword;
			bV4Height: 			dword;
			bV4Planes: 			word;
			bV4BitCount: 		word;
			bV4V4Compression: 	dword;
			bV4SizeImage: 		dword;
			bV4XPelsPerMeter: 	dword;
			bV4YPelsPerMeter: 	dword;
			bV4ClrUsed: 		dword;
			bV4ClrImportant: 	dword;
			bV4RedMask: 		dword;
			bV4GreenMask: 		dword;
			bV4BlueMask: 		dword;
			bV4AlphaMask: 		dword;
			bV4CSType: 			dword;
			bV4Endpoints: 		CIEXYZTRIPLE;
			bV4GammaRed: 		dword;
			bV4GammaGreen: 		dword;
			bV4GammaBlue: 		dword;
		endrecord;


 	BITMAPV4HEADER: 
 		record
			bV5Size: 			dword;
			bV5Width: 			dword;
			bV5Height: 			dword;
			bV5Planes: 			word;
			bV5BitCount: 		word;
			bV5V4Compression: 	dword;
			bV5SizeImage: 		dword;
			bV5XPelsPerMeter: 	dword;
			bV5YPelsPerMeter: 	dword;
			bV5ClrUsed: 		dword;
			bV5ClrImportant: 	dword;
			bV5RedMask: 		dword;
			bV5GreenMask: 		dword;
			bV5BlueMask: 		dword;
			bV5AlphaMask: 		dword;
			bV5CSType: 			dword;
			bV5Endpoints: 		CIEXYZTRIPLE;
			bV5GammaRed: 		dword;
			bV5GammaGreen: 		dword;
			bV5GammaBlue: 		dword;
			bV5Intent:			dword;
			bV5ProfileData:		dword;
			bV5ProfileSize:		dword;
			bV5Reserved:		dword;
		endrecord;


 	FONTSIGNATURE: 
 		record
			fsUsb4: dword[4];
			fsCsb2: dword[2];
		endrecord;


 	CHARSETINFO: 
 		record
			ciCharset: 	dword;
			ciACP: 		dword;
			xlfs: 		FONTSIGNATURE;
		endrecord;


 	LOCALESIGNATURE: 
 		record
			lsUsb4: 		dword[4];
			lsCsbDefault: 	dword[2];
			lsCsbSupported: dword[2];
		endrecord;


 	NEWTEXTMETRICEX: 
 		record
			ntmTm: 		NEWTEXTMETRIC;
			ntmFontSig: FONTSIGNATURE;
		endrecord;


	NEWTEXTMETRICEXA:NEWTEXTMETRICEX;

 	ENUMLOGFONTEX: 
 		record
			elfLogFont: 	LOGFONT;
			elfFullName: 	byte[LF_FULLFACESIZE];
			elfStyle: 		byte[LF_FACESIZE];
			elfScript: 		byte[LF_FACESIZE];
		endrecord;


	ENUMLOGFONTEXA:ENUMLOGFONTEX;

 	GCP_RESULTSA: 
 		record
			lStructSize: 	dword;
			lpOutString: 	dword;
			lpOrder: 		dword;
			lpDX: 			dword;
			lpCaretPos: 	dword;
			lpClass: 		dword;
			lpGlyphs: 		dword;
			nGlyphs: 		dword;
			nMaxFit: 		dword;
		endrecord;

const	MM_MAX_NUMAXES            := 16;
type	
	DESIGNVECTOR: 
		record
			dvReserved	:dword;
			dvNumAxes	:dword;
			dvValues	:uns32[MM_MAX_NUMAXES];
		endrecord;
		

	ENUMLOGFONTEXDV: 
		record
			elfEnumLogfontEx	:ENUMLOGFONTEX;
			elfDesignVector		:DESIGNVECTOR;
		endrecord;
	
	
	GCP_RESULTS:GCP_RESULTSA;

 	LOGCOLORSPACEA: 
 		record
			lcsSignature: 	dword;
			lcsVersion: 	dword;
			lcsSize: 		dword;
			lcsCSType: 		dword;
			lcsIntent: 		dword;
			lcsEndPoints: 	CIEXYZTRIPLE;
			lcsGammaRed: 	dword;
			lcsGammaGreen: 	dword;
			lcsGammaBlue: 	dword;
			lcsFileName: 	byte[MAX_PATH];
		endrecord;


 	LOGCOLORSPACEW: 
 		record
			lcsSignature:	dword;
			lcsVersion: 	dword;
			lcsSize: 		dword;
			lcsCSType: 		dword;
			lcsIntent: 		dword;
			lcsEndpoints: 	CIEXYZTRIPLE;
			lcsGammaRed: 	dword;
			lcsGammaGreen: 	dword;
			lcsGammaBlue: 	dword;
			lcsFilename: 	word[MAX_PATH];
		endrecord;


	LOGCOLORSPACE: 
		record
	    	lcsSignature	:DWORD; 
	    	lcsVersion		:DWORD; 
	    	lcsSize			:DWORD; 
			lcsCSType		:dword; 
			lcsIntent		:dword; 
			lcsEndpoints	:CIEXYZTRIPLE;
			lcsGammaRed		:DWORD;
			lcsGammaGreen	:DWORD; 
			lcsGammaBlue	:DWORD;
			lcsFilename		:wchar[MAX_PATH];
		endrecord;

 	EMRCREATECOLORSPACE: 
 		record
			_emr: 	EMR;
			ihCS: 	dword;
			lcs: 	LOGCOLORSPACEW;
		endrecord;


 	CBTACTIVATESTRUCT: 
 		record
			fMouse: 	dword;
			hWndActive: dword;
		endrecord;




 	EVENTMSG: 
 		record
			message: 	dword;
			paramL: 	dword;
			paramH: 	dword;
			time: 		dword;
			hwnd: 		dword;
		endrecord;


 	CWPSTRUCT: 
 		record
			lParam: 	dword;
			wParam: 	dword;
			message:	dword;
			hwnd: 		dword;
		endrecord;


 	DEBUGHOOKINFO: 
 		record
			hModuleHook: 	dword;
			Reserved: 		dword;
			lParam: 		dword;
			wParam: 		dword;
			code: 			dword;
		endrecord;


 	MOUSEHOOKSTRUCT: 
 		record
			pt: 			POINT;
			hwnd: 			dword;
			wHitTestCode: 	dword;
			dwExtraInfo: 	dword;
		endrecord;


 	MINMAXINFO: 
 		record
		ptReserved: 	POINT;
		ptMaxSize: 		POINT;
		ptMaxPosition: 	POINT;
		ptMinTrackSize: POINT;
		ptMaxTrackSize: POINT;
	endrecord;


 	COPYDATASTRUCT: 
 		record
			dwData: dword;
			cbData: dword;
			lpData: dword;
		endrecord;


 	WINDOWPOS: 
 		record
			hwnd: 				dword;
			hWndInsertAfter: 	dword;
			x: 					dword;
			y: 					dword;
			lx: 				dword;
			cy: 				dword;
			flags: 				dword;
		endrecord;


 	ACCEL: 
 		record
			fVirt: 	byte;
			key: 	word;
			cmd: 	word;
		endrecord;


 	PAINTSTRUCT: 
 		record
			hdc: 			dword;
			fErase: 		dword;
			rcPaint: 		RECT;
			fRestore: 		dword;
			fIncUpdate: 	dword;
			rgbReserved: 	byte[32];
		endrecord;


 	CREATESTRUCT: 
 		record
			lpCreateParams:	dword;
			hInstance: 		dword;
			hMenu: 			dword;
			hWndParent: 	dword;
			ly: 			dword;
			lx: 			dword;
			y: 				dword;
			x: 				dword;
			style: 			dword;
			lpszName: 		dword;
			lpszClass: 		dword;
			ExStyle: 		dword;
		endrecord;


	CREATESTRUCTA:CREATESTRUCT;

 	CBT_CREATEWND: 
 		record
			lpcs: 				dword;
			hWndInsertAfter: 	dword;
		endrecord;


	CBT_CREATEWNDA:CBT_CREATEWND;

 	WINDOWPLACEMENT: 
 		record
			iLength: 			dword;
			flags: 				dword;
			showCmd: 			dword;
			ptMinPosition: 		POINT;
			ptMaxPosition: 		POINT;
			rcNormalPosition: 	RECT;
		endrecord;


 	MEASUREITEMSTRUCT: 
 		record
			CtlType: 	dword;
			CtlID: 		dword;
			itemID: 	dword;
			itemWidth: 	dword;
			itemHeight: dword;
			itemData: 	dword;
		endrecord;


 	DRAWITEMSTRUCT: 
 		record
			CtlType: 	dword;
			CtlID: 		dword;
			itemID: 	dword;
			itemAction: dword;
			itemState: 	dword;
			hwndItem: 	dword;
			hdc: 		dword;
			rcItem: 	RECT;
			itemData: 	dword;
		endrecord;


 	DELETEITEMSTRUCT: 
 		record
			CtlType: 	dword;
			CtlID: 		dword;
			itemID: 	dword;
			hwndItem: 	dword;
			itemData: 	dword;
		endrecord;


 	COMPAREITEMSTRUCT: 
 		record
			CtlType: 	dword;
			CtlID: 		dword;
			hwndItem: 	dword;
			itemID1: 	dword;
			itemData1: 	dword;
			itemID2: 	dword;
			itemData2: 	dword;
			dwLocaleId: dword;
		endrecord;


 	DLGTEMPLATE: 
 		record
			style: 				dword;
			dwExtendedStyle:	dword;
			cdit: 				word;
			x: 					word;
			y: 					word;
			lx: 				word;
			ly: 				word;
		endrecord;


 	DLGITEMTEMPLATE: 
 		record
			style: 				dword;
			dwExtendedStyle: 	dword;
			x: 					word;
			y: 					word;
			lx: 				word;
			cy: 				word;
			id: 				word;
		endrecord;
	
	DLGPROC:
		procedure
		( 
			hwndDlg:dword; 
			uMsg:dword; 
			_wParam:dword; 
			_lParam:dword 
		);
		@stdcall;



 	MENUITEMTEMPLATEHEADER: 
 		record
			versionNumber:	word;
			loffset: 		word;
		endrecord;




 	ICONINFO: 
 		record
			fIcon: 		dword;
			xHotspot: 	dword;
			yHotspot: 	dword;
			hbmMask: 	dword;
			hbmColor: 	dword;
		endrecord;


 	MDICREATESTRUCT: 
 		record
			szClass: 	dword;
			szTitle: 	dword;
			hOwner: 	dword;
			x: 			dword;
			y: 			dword;
			lx: 		dword;
			ly: 		dword;
			style: 		dword;
			lParam: 	dword;
		endrecord;


	MDICREATESTRUCTA:MDICREATESTRUCT;

 	CLIENTCREATESTRUCT: 
 		record
			hWindowMenu: 	dword;
			idFirstChild: 	dword;
		endrecord;


 	MULTIKEYHELP: 
 		record
			mkSize: 		dword;
			mkKeylist: 		byte;
			szKeyphrase: 	byte;
		endrecord;


	MULTIKEYHELPA:MULTIKEYHELP;

 	HELPWININFO: 
 		record
			wStructSize:	dword;
			x: 				dword;
			y: 				dword;
			lx: 			dword;
			ly: 			dword;
			wMax: 			dword;
			rgchMember: 	byte[2];
		endrecord;


	HELPWININFOA:HELPWININFO;

 	DDEACK: 
 		record
			dummy:word;
		endrecord;


 	DDEADVISE: 
 		record
			dummy:dword;
		endrecord;


 	DDEDATA: 
 		record
			dummyd:dword;
			dummyb:byte;
		endrecord;


 	DDEPOKE: 
 		record
			dummyd:dword;
			dummyb:byte;
		endrecord;


 	DDELN: 
 		record
			dummyd:dword;
		endrecord;


 	DDEUP: 
 		record
			dummyd:dword;
			dummyb:byte;
		endrecord;
	
	PFNCALLBACK:
		procedure
		(
			uType	:dword;
			uFmt	:dword;
			hconv	:dword;
			hsz1	:dword;
			hsz2	:dword;
			hdata	:dword;
			dwData1	:dword;
			dwData2	:dword
		);
		@stdcall;
		

	DRAWSTATEPROC:
		procedure
		(
			hdc		:dword;
			lData	:dword;
			wData	:dword;
			_cx		:dword;
			_cy		:dword
		);
		@stdcall;
		
	WNDENUMPROC:	
		procedure
		(
			hwnd	:dword;
			_lParam	:dword
		);
		@stdcall;
		
	WINENUMPROC:	
		procedure
		(
			hwnd	:dword;
			_lParam	:dword
		);
		@stdcall;
		
	DESKTOPENUMPROC:
		procedure
		(
			lpszDesktop	:string;
			_lParam		:dword
		);
		@stdcall;
		
	MONITORENUMPROC:
		procedure
		(
				hMonitor	:dword;
				hdcMonitor	:dword;
			var	lprcMonitor	:RECT;
				_lParam		:dword
		);
		@stdcall;
		
	PROPENUMPROC:
		procedure
		(
			hwnd		:dword;
			lpszString	:string;
			hData		:dword
		);
		@stdcall;

	WINSTAENUMPROC:
		procedure
		(
			lpszWindowStation	:string;
			_lParam				:dword
		);
		@stdcall;
		
		
	ALTTABLINFO:
		record
		    cbSize		:dword;
		    cItems		:dword;
		    cColumns	:dword;
		    cRows		:dword;
		    iColFocus	:dword;
		    iRowFocus	:dword;
		    cxItem		:dword;
		    cyItem		:dword;
		    ptStart		:POINT;
		endrecord;
	
	COMBOBOXINFO:
		record
			cbSize		:dword;
			rcItem		:RECT;
			rcButton	:RECT;
			stateButton	:dword;
			hwndCombo	:dword;
			hwndItem	:dword;
			hwndList	:dword;
		endrecord;

	CURSORINFO:
		record
			cbSize		:dword;
			flags		:dword;
			hCursor		:dword;
			ptScreenPos	:POINT;
		endrecord;
	
	GUITHREADINFO:
		record
			cbSize			:dword;
			flags			:dword;
			hwndActive		:dword;
			hwndFocus		:dword;
			hwndCapture		:dword;
			hwndMenuOwner	:dword;
			hwndMoveSize	:dword;
			hwndCaret		:dword;
			rcCaret			:RECT;
		endrecord;
	
	LASTINPUTINFO:
		record
			cbSize		:dword;
			dwTime		:dword;
		endrecord;
	
	MENUBARINFO:
		record
		  cbSize	:dword;
		  rcBar		:RECT;
		  hMenu		:dword;
		  hwndMenu	:dword;
		  //BOOL  fBarFocused:1;
		  //BOOL  fFocused:1;
		  focus		:boolean;
		endrecord;
	
	MENUINFO:
		record
			cbSize			:dword;
			fMask			:dword;
			dwStyle			:dword;
			cyMax			:dword;
			hbrBack			:dword;
			dwContextHelpID	:dword;
			dwMenuData		:dword;
		endrecord;
	
	MONITORINFO:
		record
		    cbSize		:dword; 
		    rcMonitor	:RECT; 
		    rcWork		:RECT; 
		    dwFlags		:dword; 
		endrecord; 
	
	MONITORINFOEX:
		record  
		    cbSize		:dword; 
		    rcMonitor	:RECT; 
		    rcWork		:RECT; 
		    dwFlags		:dword; 
			szDevice	:char[CCHDEVICENAME];
		endrecord; 
		
const
	CCHILDREN_TITLEBAR             := 5;
	CCHILDREN_SCROLLBAR            := 5;

type	SCROLLBARINFO:record
		    cbSize			:dword;
		    rcScrollBar		:RECT;
		    dxyLineButton	:dword;
		    xyThumbTop		:dword;
		    xyThumbBottom	:dword;
		    reserved		:dword;
		    rgstate			:dword[CCHILDREN_SCROLLBAR+1];
			align(4);
		endrecord;
		
type	TITLEBARINFO:record
		    cbSize		:dword;
		    rcTitleBar	:RECT;
		    rgstate		:dword[CCHILDREN_TITLEBAR+1];
			align(4);
		endrecord;
		
type	WINDOWINFO:record
		    cbSize			:dword;
		    rcWindow		:RECT;
		    rcClient		:RECT;
		    dwStyle			:dword;
		    dwExStyle		:dword;
		    dwWindowStatus	:dword;
		    cxWindowBorders	:dword;
		    cyWindowBorders	:dword;
		    atomWindowType	:ATOM;
		    wCreatorVersion	:word;
			align(4);
		endrecord;


		
type	OUTPUTPROC:	
			procedure
			(
				hdc		:dword;
				lpData	:dword;
				cchData	:dword
			);
			@stdcall;


type	MENUTEMPLATE:record
			versionNumber	:word;
			offset			:word;
		endrecord;
		
type	MENUITEMTEMPLATE:record
			mtOption		:word;
			mtID			:word;
			mtString		:wchar;
			align(4);
		endrecord;
		
type	MENUEX_TEMPLATE_HEADER:record
			wVersion	:word;
			wOffset		:word;
			dwHelpID	:dword;
		endrecord;
		
type	MENUEX_TEMPLATE_ITEM:record 
			dwHelpId	:dword; 
			dwType		:dword; 
			dwState		:dword; 
			menuId		:dword; 
  			bResInfo	:word;
  			szText		:wchar; 
		endrecord;
		
type	MOUSEINPUT:record
		  _dx			:dword;
		  _dy			:dword;
		  mouseData		:dword;
		  dwFlags		:dword;
		  time			:dword;
		  dwExtraInfo	:dword;
		 endrecord;
		 
		 
type	KEYBDINPUT:record
			wVk			:word;
			wScan		:word;
			dwFlags		:dword;
			time		:dword;
			dwExtraInfo	:dword;
		endrecord;
		
		KEYBOARDINPUT :  KEYBDINPUT;
		
type	HARDWAREINPUT:record
			uMsg		:dword;
			wParamL		:word;
			wParamH		:word;
		endrecord;
		
		 

type	INPUT:record
			_type	:dword;
			union
				mi	:MOUSEINPUT;
				ki	:KEYBOARDINPUT;
				hi	:HARDWAREINPUT;
			endunion;
		endrecord;
		
type	SENDASYNCPROC:
			procedure
			(
				hwnd	:dword;
				uMsg	:dword;
				dwData	:dword;
				lResult	:dword
			);
			@stdcall;

type	TIMERPROC:
			procedure
			(
				hwnd		:dword;
				uMsg		:dword;
				idEvent		:dword;
				dwTime		:dword
			);
			@stdcall;

type	HOOKPROC:
			procedure
			(
				nCode	:dword;
				_wParam	:dword;
				_lParam	:dword
			);
			@stdcall;

type	_TRACKMOUSEEVENT:record
			cbSize		:dword;
			dwFlags		:dword;
			hwndTrack	:dword;
			dwHoverTime	:dword;
		endrecord;
		
		
		


		
	

		

							




type 	HSZPAIR: record
			hszSvc: dword;
			hszTopic: dword;
			align(4);	
		endrecord;


type 	SECURITY_QUALITY_OF_SERVICE: record
		iLength: dword;
		Impersonationlevel: dword;
		ContextTrackingMode: byte;
		EffectiveOnly: byte;
		align(4);
		endrecord;


type 	CONVCONTEXT: record
		cb: dword;
		wFlags: dword;
		wCountryID: dword;
		iCodePage: dword;
		dwLangID: dword;
		dwSecurity: dword;
		qos: SECURITY_QUALITY_OF_SERVICE;
		align(4);
		endrecord;


type 	CONVINFO: record
		cb: dword;
		hUser: dword;
		hConvPartner: dword;
		hszSvcPartner: dword;
		hszServiceReq: dword;
		hszTopic: dword;
		hszItem: dword;
		wFmt: dword;
		wType: dword;
		wStatus: dword;
		wConvst: dword;
		wLastError: dword;
		hConvList: dword;
		ConvCtxt: CONVCONTEXT;
		hwnd: dword;
		hwndPartner: dword;
		align(4);
		endrecord;


type 	DDEML_MSG_HOOK_DATA: record
		uiLo: dword;
		uiHi: dword;
		cbData: dword;
		xData: dword[8];
		align(4);
		endrecord;


type 	MONMSGSTRUCT: record
		cb: dword;
		hwndTo: dword;
		dwTime: dword;
		htask: dword;
		wMsg: dword;
		wParam: dword;
		lParam: dword;
		dmhd: DDEML_MSG_HOOK_DATA;
		align(4);
		endrecord;


type 	MONCBSTRUCT: record
		cb: dword;
		dwTime: dword;
		htask: dword;
		dwRet: dword;
		wType: dword;
		wFmt: dword;
		hConv: dword;
		hsz1: dword;
		hsz2: dword;
		hData: dword;
		dwData1: dword;
		dwData2: dword;
		cc: CONVCONTEXT;
		cbData: dword;
		xData8: dword;
		align(4);
		endrecord;


type 	MONHSZSTRUCT: record
		cb: dword;
		fsAction: dword;
		dwTime: dword;
		hsz: dword;
		htask: dword;
		xstr: byte;
		align(4);
		endrecord;


		MONHSZSTRUCTA:MONHSZSTRUCT;

type 	MONERRSTRUCT: record
		cb: dword;
		wLastError: dword;
		dwTime: dword;
		htask: dword;
		align(4);
		endrecord;


type 	MONLINKSTRUCT: record
		cb: dword;
		dwTime: dword;
		htask: dword;
		fEstablished: dword;
		fNoData: dword;
		hszSvc: dword;
		hszTopic: dword;
		hszItem: dword;
		wFmt: dword;
		fServer: dword;
		hConvServer: dword;
		hConvClient: dword;
		align(4);
		endrecord;


type 	MONCONVSTRUCT: record
		cb: dword;
		fConnect: dword;
		dwTime: dword;
		htask: dword;
		hszSvc: dword;
		hszTopic: dword;
		hConvClient: dword;
		hConvServer: dword;
		align(4);
		endrecord;


type 	smpte: record
		hour: byte;
		minute: byte;
		sec: byte;
		frame: byte;
		fps: byte;
		dummy: byte;
		pad: byte[2];
		align(4);
		endrecord;


type 	midi: record
		songptrpos: dword;
		align(4);
		endrecord;


type 	MMUNION: union
		ms: dword;
		sample: dword;
		cb: dword;
		ticks: dword;
		smp: smpte;
		midi1: midi;
	endunion;


type 	MMTIME: record
		wType: dword;
		u: MMUNION;
		align(4);
		endrecord;


type 	MIDIEVENT: record
		dwDeltaTime: dword;
		dwStreamID: dword;
		dwEvent: dword;
		dwParms: dword;
		align(4);
		endrecord;


type 	MIDISTRMBUFFVER: record
		dwVersion: dword;
		dwMid: dword;
		dwOEMVersion: dword;
		align(4);
		endrecord;


type 	MIDIPROPTIMEDIV: record
		cbStruct: dword;
		dwTimeDiv: dword;
		align(4);
		endrecord;


type 	MIDIPROPTEMPO: record
		cbStruct: dword;
		dwTempo: dword;
		align(4);
		endrecord;


const
	MAXPNAMELEN                    := 32;
	MAXERRORLENGTH                 := 128;

type 	MIXERCAPSA: record
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		fdwSupport: dword;
		cDestinations: dword;
		align(4);
		endrecord;


		MIXERCAPS:MIXERCAPSA;

type 	Target: record
		dwType: dword;
		dwDeviceID: dword;
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		align(4);
		endrecord;



type 	CONTROLIDTYPE: union
		dwControlID: dword;
		dwControlType: dword;
	endunion;


type 	MIXERLINECONTROLS: record
		cbStruct: dword;
		dwLineID: dword;
		dwControl: CONTROLIDTYPE;
		cControls: dword;
		cbmxctrl: dword;
		pamxctrl: dword;
		align(4);
		endrecord;


		MIXERLINECONTROLSA:MIXERLINECONTROLS;

type 	OWNERITEMS: union
		hwndOwner: dword;
		cMultipleItems: dword;
	endunion;


type 	MIXERCONTROLDETAILS: record
		cbStruct: dword;
		dwControlID: dword;
		cChannels: dword;
		item: OWNERITEMS;
		cbDetails: dword;
		paDetails: dword;
		align(4);
		endrecord;


type 	MIXERCONTROLDETAILS_BOOLEAN: record
		fValue: dword;
		align(4);
		endrecord;


type 	MIXERCONTROLDETAILS_SIGNED: record
		lValue: dword;
		align(4);
		endrecord;


type 	MIXERCONTROLDETAILS_UNSIGNED: record
		dwValue: dword;
		align(4);
		endrecord;


type 	JOYINFOEX: record
		dwSize: dword;
		dwFlags: dword;
		dwXpos: dword;
		dwYpos: dword;
		dwZpos: dword;
		dwRpos: dword;
		dwUpos: dword;
		dwVpos: dword;
		dwButtons: dword;
		dwButtonNumber: dword;
		dwPOV: dword;
		dwReserved1: dword;
		dwReserved2: dword;
		align(4);
		endrecord;


type 	DRVCONFIGINFO: record
		dwDCISize: dword;
		lpszDCISectionName: dword;
		lpszDCIAliasName: dword;
		dnDevNode: dword;
		align(4);
		endrecord;


type 	WAVEHDR: record
		lpData: dword;
		dwBufferiLength: dword;
		dwBytesRecorded: dword;
		dwUser: dword;
		dwFlags: dword;
		dwLoops: dword;
		lpNext: dword;
		Reserved: dword;
		align(4);
		endrecord;


type 	WAVEOUTCAPS: record
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		dwFormats: dword;
		wChannels: word;
		wReserved1: word;
		dwSupport: dword;
		align(4);
		endrecord;


		WAVEOUTCAPSA:WAVEOUTCAPS;

type 	WAVEINCAPS: record
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		dwFormats: dword;
		wChannels: word;
		wReserved1: word;
		align(4);
		endrecord;


		WAVEINCAPSA:WAVEINCAPS;

type 	WAVEFORMAT: record
		wFormatTag: word;
		nChannels: word;
		nSamplesPerSec: dword;
		nAvgBytesPerSec: dword;
		nBlockAlign: word;
		align(4);
		endrecord;


type 	PCMWAVEFORMAT: record
		wf: WAVEFORMAT;
		wBitsPerSample: word;
		align(4);
		endrecord;


type 	MIDIOUTCAPS: record
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		wTechnology: word;
		wVoices: word;
		wNotes: word;
		wChannelMask: word;
		dwSupport: dword;
		align(4);
		endrecord;


		MIDIOUTCAPSA:MIDIOUTCAPS;

type 	MIDIINCAPS: record
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		dwSupport: dword;
		align(4);
		endrecord;


		MIDIINCAPSA:MIDIINCAPS;

type 	MIDIHDR: record
		lpData: dword;
		dwBufferiLength: dword;
		dwBytesRecorded: dword;
		dwUser: dword;
		dwFlags: dword;
		lpNext: dword;
		Reserved: dword;
		dwOffset: dword;
		dwReserved: dword[8];
		align(4);
		endrecord;


type 	AUXCAPS: record
		wMid: word;
		wPid: word;
		vDriverVersion: dword;
		szPname: byte[MAXPNAMELEN];
		wTechnology: word;
		dwSupport: dword;
		align(4);
		endrecord;


		AUXCAPSA:AUXCAPS;

type 	TIMECAPS: record
		wPeriodMin: dword;
		wPeriodMax: dword;
		align(4);
		endrecord;

const
	MAX_JOYSTICKOEMVXDNAME         := 260;

type 	JOYCAPS: record
		wMid: word;
		wPid: word;
		szPname: byte[MAXPNAMELEN];
		wXmin: word;
		wXmax: word;
		wYmin: word;
		wYmax: word;
		wZmin: word;
		wZmax: word;
		wNumButtons: word;
		wPeriodMin: word;
		wPeriodMax: word;
		wRmin: dword;
		wRmax: dword;
		wUmin: dword;
		wUmax: dword;
		wVmin: dword;
		wVmax: dword;
		wCaps: dword;
		wMaxAxes: dword;
		wNumAxes: dword;
		wMaxButtons: dword;
		szRegKey: byte[MAXPNAMELEN];
		szOEMVxD: byte[MAX_JOYSTICKOEMVXDNAME];
		align(4);
		endrecord;


		JOYCAPSA:JOYCAPS;

type 	JOYINFO: record
		wXpos: word;
		wYpos: word;
		wZpos: word;
		wButtons: word;
		align(4);
		endrecord;


type 	MMIOINFO: record
		dwFlags: dword;
		fccIOProc: dword;
		pIOProc: dword;
		wErrorRet: dword;
		htask: dword;
		cchBuffer: dword;
		pchBuffer: dword;
		pchNext: dword;
		pchEndRead: dword;
		pchEndWrite: dword;
		lBufOffset: dword;
		lDiskOffset: dword;
		adwInfo: dword[3];
		dwReserved1: dword;
		dwReserved2: dword;
		hmmio: dword;
		align(4);
		endrecord;


type 	MMCKINFO: record
		ckid: dword;
		ckSize: dword;
		fccType: dword;
		dwDataOffset: dword;
		dwFlags: dword;
		align(4);
		endrecord;


type 	MCI_GENERIC_PARMS: record
		dwCallback: dword;
		align(4);
		endrecord;


type 	MCI_OPEN_PARMS: record
		dwCallback: dword;
		wDeviceID: dword;
		lpstrDeviceType: dword;
		lpstrElementName: dword;
		lpstrAlias: dword;
		align(4);
		endrecord;


type 	MCI_PLAY_PARMS: record
		dwCallback: dword;
		dwFrom: dword;
		dwTo: dword;
		align(4);
		endrecord;


type 	MCI_SEEK_PARMS: record
		dwCallback: dword;
		dwTo: dword;
		align(4);
		endrecord;


type 	MCI_STATUS_PARMS: record
		dwCallback: dword;
		dwReturn: dword;
		dwItem: dword;
		dwTrack: word;
		align(4);
		endrecord;


type 	MCI_INFO_PARMS: record
		dwCallback: dword;
		lpstrReturn: dword;
		dwRetSize: dword;
		align(4);
		endrecord;


		MCI_INFO_PARMSA:MCI_INFO_PARMS;

type 	MCI_GETDEVCAPS_PARMS: record
		dwCallback: dword;
		dwReturn: dword;
		dwIten: dword;
		align(4);
		endrecord;


type 	MCI_SYSINFO_PARMS: record
		dwCallback: dword;
		lpstrReturn: dword;
		dwRetSize: dword;
		dwNumber: dword;
		wDeviceType: dword;
		align(4);
		endrecord;


		MCI_SYSINFO_PARMSA:MCI_SYSINFO_PARMS;

type 	MCI_SET_PARMS: record
		dwCallback: dword;
		dwTimeFormat: dword;
		dwAudio: dword;
		align(4);
		endrecord;


type 	MCI_BREAK_PARMS: record
		dwCallback: dword;
		nVirtKey: dword;
		hwndBreak: dword;
		align(4);
		endrecord;


type 	MCI_SOUND_PARMS: record
		dwCallback: dword;
		lpstrSoundName: dword;
		align(4);
		endrecord;


type 	MCI_SAVE_PARMS: record
		dwCallback: dword;
		lpFileName: dword;
		align(4);
		endrecord;


		MCI_SAVE_PARMSA:MCI_SAVE_PARMS;

type 	MCI_LOAD_PARMS: record
		dwCallback: dword;
		lpFileName: dword;
		align(4);
		endrecord;


		MCI_LOAD_PARMSA:MCI_LOAD_PARMS;

type 	MCI_RECORD_PARMS: record
		dwCallback: dword;
		dwFrom: dword;
		dwTo: dword;
		align(4);
		endrecord;


type 	MCI_VD_PLAY_PARMS: record
		dwCallback: dword;
		dwFrom: dword;
		dwTo: dword;
		dwSpeed: dword;
		align(4);
		endrecord;


type 	MCI_VD_STEP_PARMS: record
		dwCallback: dword;
		dwFrames: dword;
		align(4);
		endrecord;


type 	MCI_VD_ESCAPE_PARMS: record
		dwCallback: dword;
		lpstrCommand: dword;
		align(4);
		endrecord;


		MCI_VD_ESCAPE_PARMSA:MCI_VD_ESCAPE_PARMS;

type 	MCI_WAVE_OPEN_PARMS: record
		dwCallback: dword;
		wDeviceID: dword;
		lpstrDeviceType: dword;
		lpstrElementName: dword;
		lpstrAlias: dword;
		dwBufferSeconds: dword;
		align(4);
		endrecord;


		MCI_WAVE_OPEN_PARMSA:MCI_WAVE_OPEN_PARMS;

type 	MCI_WAVE_DELETE_PARMS: record
		dwCallback: dword;
		dwFrom: dword;
		dwTo: dword;
		align(4);
		endrecord;


type 	MCI_WAVE_SET_PARMS: record
		dwCallback: dword;
		dwTimeFormat: dword;
		dwAudio: dword;
		wInput: dword;
		wOutput: dword;
		wFormatTag: word;
		wReserved2: word;
		nChannels: word;
		wReserved3: word;
		nSamplesPerSec: dword;
		nAvgBytesPerSec: dword;
		nBlockAlign: word;
		wReserved4: word;
		wBitsPerSample: word;
		wReserved5: word;
		align(4);
		endrecord;


type 	MCI_SEQ_SET_PARMS: record
		dwCallback: dword;
		dwTimeFormat: dword;
		dwAudio: dword;
		dwTempo: dword;
		dwPort: dword;
		dwSlave: dword;
		dwMaster: dword;
		dwOffset: dword;
		align(4);
		endrecord;


type 	MCI_ANIM_OPEN_PARMS: record
		dwCallback: dword;
		wDeviceID: dword;
		lpstrDeviceType: dword;
		lpstrElementName: dword;
		lpstrAlias: dword;
		dwStyle: dword;
		hWndParent: dword;
		align(4);
		endrecord;


		MCI_ANIM_OPEN_PARMSA:MCI_ANIM_OPEN_PARMS;

type 	MCI_ANIM_PLAY_PARMS: record
		dwCallback: dword;
		dwFrom: dword;
		dwTo: dword;
		dwSpeed: dword;
		align(4);
		endrecord;


type 	MCI_ANIM_STEP_PARMS: record
		dwCallback: dword;
		dwFrames: dword;
		align(4);
		endrecord;


type 	MCI_ANIM_WINDOW_PARMS: record
		dwCallback: dword;
		hwnd: dword;
		nCmdShow: dword;
		lpstrText: dword;
		align(4);
		endrecord;


type 	MCI_ANIM_RECT_PARMS: record
		dwCallback: dword;
		rc: RECT;
		align(4);
		endrecord;


type 	MCI_ANIM_UPDATE_PARMS: record
		dwCallback: dword;
		rc: RECT;
		hdc: dword;
		align(4);
		endrecord;


type 	MCI_OVLY_OPEN_PARMS: record
		dwCallback: dword;
		wDeviceID: dword;
		lpstrDeviceType: dword;
		lpstrElementName: dword;
		lpstrAlias: dword;
		dwStyle: dword;
		hWndParent: dword;
		align(4);
		endrecord;


		MCI_OVLY_OPEN_PARMSA:MCI_OVLY_OPEN_PARMS;

type 	MCI_OVLY_WINDOW_PARMS: record
		dwCallback: dword;
		hwnd: dword;
		nCmdShow: dword;
		lpstrText: dword;
		align(4);
		endrecord;


		MCI_OVLY_WINDOW_PARMSA:MCI_OVLY_WINDOW_PARMS;

type 	MCI_OVLY_RECT_PARMS: record
		dwCallback: dword;
		rc: RECT;
		align(4);
		endrecord;


type 	MCI_OVLY_SAVE_PARMS: record
		dwCallback: dword;
		lpFileName: dword;
		rc: RECT;
		align(4);
		endrecord;


		MCI_OVLY_SAVE_PARMSA:MCI_OVLY_SAVE_PARMS;

type 	MCI_OVLY_LOAD_PARMS: record
		dwCallback: dword;
		lpFileName: dword;
		rc: RECT;
		align(4);
		endrecord;


		MCI_OVLY_LOAD_PARMSA:MCI_OVLY_LOAD_PARMS;

type 	PRINTER_INFO_1: record
		flags: dword;
		pDescription: dword;
		pName: dword;
		pComment: dword;
		align(4);
		endrecord;


		PRINTER_INFO_1A:PRINTER_INFO_1;

type 	PRINTER_INFO_2: record
		pServerName: dword;
		pPrinterName: dword;
		pShareName: dword;
		pPortName: dword;
		pDriverName: dword;
		pComment: dword;
		pLocation: dword;
		pDevMode: dword;
		pSepFile: dword;
		pPrintProcessor: dword;
		pDatatype: dword;
		pParameters: dword;
		pSecurityDescriptor: dword;
		Attributes: dword;
		Priority: dword;
		DefaultPriority: dword;
		StartTime: dword;
		UntilTime: dword;
		Status: dword;
		cJobs: dword;
		AveragePPM: dword;
		align(4);
		endrecord;


		PRINTER_INFO_2A:PRINTER_INFO_2;

type 	PRINTER_INFO_3: record
		pSecurityDescriptor: dword;
		align(4);
		endrecord;


type 	PRINTER_INFO_4: record
		pPrinterName: dword;
		pServerName: dword;
		Attributes: dword;
		align(4);
		endrecord;


		PRINTER_INFO_4A:PRINTER_INFO_4;

type 	JOB_INFO_1: record
		JobId: dword;
		pPrinterName: dword;
		pMachineName: dword;
		pUserName: dword;
		pDocument: dword;
		pDatatype: dword;
		pStatus: dword;
		Status: dword;
		Priority: dword;
		Position: dword;
		TotalPages: dword;
		PagesPrinted: dword;
		Submitted: SYSTEMTIME;
		align(4);
		endrecord;


		JOB_INFO_1A:JOB_INFO_1;

type 	JOB_INFO_2: record
		JobId: dword;
		pPrinterName: dword;
		pMachineName: dword;
		pUserName: dword;
		pDocument: dword;
		pNotifyName: dword;
		pDatatype: dword;
		pPrintProcessor: dword;
		pParameters: dword;
		pDriverName: dword;
		pDevMode: dword;
		pStatus: dword;
		pSecurityDescriptor: dword;
		Status: dword;
		Priority: dword;
		Position: dword;
		StartTime: dword;
		UntilTime: dword;
		TotalPages: dword;
		isize: dword;
		Submitted: SYSTEMTIME;
		time: dword;
		PagesPrinted: dword;
		align(4);
		endrecord;


		JOB_INFO_2A:JOB_INFO_2;

type 	ADDJOB_INFO_1: record
		Path: dword;
		JobId: dword;
		align(4);
		endrecord;


		ADDJOB_INFO_1A:ADDJOB_INFO_1;

type 	DRIVER_INFO_1: record
		pName: dword;
		align(4);
		endrecord;


		DRIVER_INFO_1A:DRIVER_INFO_1;

type 	DRIVER_INFO_2: record
		cVersion: dword;
		pName: dword;
		pEnvironment: dword;
		pDriverPath: dword;
		pDataFile: dword;
		pConfigFile: dword;
		align(4);
		endrecord;


		DRIVER_INFO_2A:DRIVER_INFO_2;

type 	DOC_INFO_1: record
		pDocName: dword;
		pOutputFile: dword;
		pDatatype: dword;
		align(4);
		endrecord;


		DOC_INFO_1A:DOC_INFO_1;

type 	FORM_INFO_1: record
		Flags: dword;
		pName: dword;
		iSize: SIZEL;
		ImageableArea: RECTL;
		align(4);
		endrecord;


		FORM_INFO_1A:FORM_INFO_1;

type 	PRINTPROCESSOR_INFO_1: record
		pName: dword;
		align(4);
		endrecord;


		PRINTPROCESSOR_INFO_1A:PRINTPROCESSOR_INFO_1;

type 	PORT_INFO_1: record
		pName: dword;
		align(4);
		endrecord;


		PORT_INFO_1A:PORT_INFO_1;

type 	MONITOR_INFO_1: record
		pName: dword;
		align(4);
		endrecord;


		MONITOR_INFO_1A:MONITOR_INFO_1;

type 	MONITOR_INFO_2: record
		pName: dword;
		pEnvironment: dword;
		pDLLName: dword;
		align(4);
		endrecord;


		MONITOR_INFO_2A:MONITOR_INFO_2;

type 	DATATYPES_INFO_1: record
		pName: dword;
		align(4);
		endrecord;


		DATATYPES_INFO_1A:DATATYPES_INFO_1;

type 	PRINTER_DEFAULTS: record
		pDatatype: dword;
		pDevMode: dword;
		DesiredAccess: ACCESS_MASK;
		align(4);
		endrecord;


		PRINTER_DEFAULTSA:PRINTER_DEFAULTS;

type 	PRINTER_INFO_5: record
		pPrinterName: dword;
		pPortName: dword;
		Attributes: dword;
		DeviceNotSelectedTimeout: dword;
		TransmissionRetryTimeout: dword;
		align(4);
		endrecord;


		PRINTER_INFO_5A:PRINTER_INFO_5;

type 	DRIVER_INFO_3: record
		cVersion: dword;
		pName: dword;
		pEnvironment: dword;
		pDriverPath: dword;
		pDataFile: dword;
		pConfigFile: dword;
		pHelpFile: dword;
		pDependentFiles: dword;
		pMonitorName: dword;
		pDefaultDataType: dword;
		align(4);
		endrecord;


		DRIVER_INFO_3A:DRIVER_INFO_3;

type 	DOC_INFO_2: record
		pDocName: dword;
		pOutputFile: dword;
		pDatatype: dword;
		dwMode: dword;
		JobId: dword;
		align(4);
		endrecord;


		DOC_INFO_2A:DOC_INFO_2;

type 	PORT_INFO_2: record
		pPortName: dword;
		pMonitorName: dword;
		pDescription: dword;
		fPortType: dword;
		Reserved: dword;
		align(4);
		endrecord;


		PORT_INFO_2A:PORT_INFO_2;

type 	PROVIDOR_INFO_1: record
		pName: dword;
		pEnvironment: dword;
		pDLLName: dword;
		align(4);
		endrecord;


		PROVIDOR_INFO_1A:PROVIDOR_INFO_1;

type 	NETRESOURCE: record
		dwScope: dword;
		dwType: dword;
		dwDisplayType: dword;
		dwUsage: dword;
		lpLocalName: dword;
		lpRemoteName: dword;
		lpComment: dword;
		lpProvider: dword;
		align(4);
		endrecord;


		NETRESOURCEA:NETRESOURCE;

const
	NCBNAMSZ                       := 16;

type 	NCB: record
		ncb_command: byte;
		ncb_retcode: byte;
		ncb_lsn: byte;
		ncb_num: byte;
		ncb_buffer: dword;
		ncb_length: word;
		ncb_callname: byte[NCBNAMSZ];
		ncb_name: byte[NCBNAMSZ];
		ncb_rto: byte;
		ncb_sto: byte;
		ncb_post: dword;
		ncb_lana_num: byte;
		ncb_cmd_cplt: byte;
		ncb_reserve: byte[10];
		ncb_event: dword;
		align(4);
		endrecord;


type 	ADAPTER_STATUS: record
		adapter_address: byte[6];
		rev_major: byte;
		reserved0: byte;
		adapter_type: byte;
		rev_minor: byte;
		duration: word;
		frmr_recv: word;
		frmr_xmit: word;
		iframe_recv_err: word;
		xmit_aborts: word;
		xmit_success: dword;
		recv_success: dword;
		iframe_xmit_err: word;
		recv_buff_unavail: word;
		t1_timeouts: word;
		ti_timeouts: word;
		rserved1: dword;
		free_ncbs: word;
		max_cfg_ncbs: word;
		max_ncbs: word;
		xmit_buf_unavail: word;
		max_dgram_isize: word;
		pending_sess: word;
		max_cfg_sess: word;
		max_sess: word;
		max_sess_pkt_isize: word;
		name_count: word;
		align(4);
		endrecord;


type 	NAME_BUFFER: record
		xname: byte[NCBNAMSZ];
		name_num: byte;
		name_flags: byte;
		align(4);
		endrecord;


type 	SESSION_HEADER: record
		sess_name: byte;
		num_sess: byte;
		rcv_dg_outstanding: byte;
		rcv_any_outstanding: byte;
		align(4);
		endrecord;


type 	SESSION_BUFFER: record
		lsn: byte;
		State: byte;
		local_name: byte[NCBNAMSZ];
		remote_name: byte[NCBNAMSZ];
		rcvs_outstanding: byte;
		sends_outstanding: byte;
		align(4);
		endrecord;

const
	MAX_LANA                       := 254;

type 	LANA_ENUM: record
		iLength: byte;
		lana: byte[MAX_LANA+1];
		align(4);
		endrecord;


type 	FIND_NAME_HEADER: record
		node_count: word;
		Reserved: byte;
		unique_group: byte;
		align(4);
		endrecord;


type 	FIND_NAME_BUFFER: record
		iLength: byte;
		access_control: byte;
		frame_control: byte;
		destination_addr: byte[6];
		source_addr: byte[6];
		routing_info: byte[18];
		align(4);
		endrecord;


type 	ACTION_HEADER: record
		transport_id: dword;
		action_code: word;
		Reserved: word;
		align(4);
		endrecord;


type 	CRGB: record
		bRed: byte;
		bGreen: byte;
		bBlue: byte;
		bExtra: byte;
		align(4);
		endrecord;


type 	SERVICE_STATUS: record
		dwServiceType: dword;
		dwCurrentState: dword;
		dwControlsAccepted: dword;
		dwWin32ExitCode: dword;
		dwServiceSpecificExitCode: dword;
		dwCheckPoint: dword;
		dwWaitHint: dword;
		align(4);
		endrecord;


type 	ENUM_SERVICE_STATUS: record
		lpServiceName: dword;
		lpDisplayName: dword;
		ServiceStatus: SERVICE_STATUS;
		align(4);
		endrecord;


		ENUM_SERVICE_STATUSA:ENUM_SERVICE_STATUS;

type 	QUERY_SERVICE_LOCK_STATUS: record
		fIsLocked: dword;
		lpLockOwner: dword;
		dwLockDuration: dword;
		align(4);
		endrecord;


		QUERY_SERVICE_LOCK_STATUSA:QUERY_SERVICE_LOCK_STATUS;

type 	QUERY_SERVICE_CONFIG: record
		dwServiceType: dword;
		dwStartType: dword;
		dwErrorControl: dword;
		lpBinaryPathName: dword;
		lpLoadOrderGroup: dword;
		dwTagId: dword;
		lpDependencies: dword;
		lpServiceStartName: dword;
		lpDisplayName: dword;
		align(4);
		endrecord;


		QUERY_SERVICE_CONFIGA:QUERY_SERVICE_CONFIG;

type 	SERVICE_TABLE_ENTRY: record
		lpServiceName: dword;
		lpServiceProc: dword;
		align(4);
		endrecord;


		SERVICE_TABLE_ENTRYA:SERVICE_TABLE_ENTRY;

type 	PERF_DATA_BLOCK: record
		Signature: word[4];
		LittleEndian: dword;
		Version: dword;
		Revision: dword;
		TotalByteiLength: dword;
		HeaderiLength: dword;
		NumObjectTypes: dword;
		DefaultObject: dword;
		_SystemTime: SYSTEMTIME;
		Padding: dword;
		PerfTime: LARGE_INTEGER;
		PerfFreq: LARGE_INTEGER;
		PerTime100nSec: LARGE_INTEGER;
		SystemNameiLength: dword;
		SystemNameOffset: dword;
		align(4);
		endrecord;


type 	PERF_OBJECT_TYPE: record
		TotalByteiLength: dword;
		DefinitioniLength: dword;
		HeaderiLength: dword;
		ObjectNameTitleIndex: dword;
		ObjectNameTitle: dword;
		ObjectHelpTitleIndex: dword;
		ObjectHelpTitle: dword;
		DetailLevel: dword;
		NumCounters: dword;
		DefaultCounter: dword;
		NumInstances: dword;
		CodePage: dword;
		PerfTime: LARGE_INTEGER;
		PerfFreq: LARGE_INTEGER;
		align(4);
		endrecord;


type 	PERF_COUNTER_DEFINITION: record
		ByteiLength: dword;
		CounterNameTitleIndex: dword;
		CounterNameTitle: dword;
		CounterHelpTitleIndex: dword;
		CounterHelpTitle: dword;
		DefaultScale: dword;
		DetailLevel: dword;
		CounterType: dword;
		CounterSize: dword;
		CounterOffset: dword;
		align(4);
		endrecord;


type 	PERF_INSTANCE_DEFINITION: record
		ByteiLength: dword;
		ParentObjectTitleIndex: dword;
		ParentObjectInstance: dword;
		UniqueID: dword;
		NameOffset: dword;
		NameiLength: dword;
		align(4);
		endrecord;


type 	PERF_COUNTER_BLOCK: record
		ByteiLength: dword;
		align(4);
		endrecord;


type 	COMPOSITIONFORM: record
		dwStyle: dword;
		ptCurrentPos: POINT;
		rcArea: RECT;
		align(4);
		endrecord;


type 	CANDIDATEFORM: record
		dwIndex: dword;
		dwStyle: dword;
		ptCurrentPos: POINT;
		rcArea: RECT;
		align(4);
		endrecord;


type 	CANDIDATELIST: record
		dwSize: dword;
		dwStyle: dword;
		dwCount: dword;
		dwSelection: dword;
		dwPageStart: dword;
		dwPageSize: dword;
		dwOffset1: dword;
		align(4);
		endrecord;


const
	STYLE_DESCRIPTION_SIZE         := 32;

type 	STYLEBUF: record
		dwStyle: dword;
		szDescription: byte[STYLE_DESCRIPTION_SIZE];
		align(4);
		endrecord;


		STYLEBUFA:STYLEBUF;

type 	MODEMDEVCAPS: record
		dwActualSize: dword;
		dwRequiredSize: dword;
		dwDevSpecificOffset: dword;
		dwDevSpecificSize: dword;
		dwModemProviderVersion: dword;
		dwModemManufacturerOffset: dword;
		dwModemManufacturerSize: dword;
		dwModemModelOffset: dword;
		dwModemModelSize: dword;
		dwModemVersionOffset: dword;
		dwModemVersionSize: dword;
		dwDialOptions: dword;
		dwCallSetupFailTimer: dword;
		dwInactivityTimeout: dword;
		dwSpeakerVolume: dword;
		dwSpeakerMode: dword;
		dwModemOptions: dword;
		dwMaxDTERate: dword;
		dwMaxDCERate: dword;
		abVariablePortion: byte;
		align(4);
		endrecord;


type 	MODEMSETTINGS: record
		dwActualSize: dword;
		dwRequiredSize: dword;
		dwDevSpecificOffset: dword;
		dwDevSpecificSize: dword;
		dwCallSetupFailTimer: dword;
		dwInactivityTimeout: dword;
		dwSpeakerVolume: dword;
		dwSpeakerMode: dword;
		dwPreferredModemOptions: dword;
		dwNegotiatedModemOptions: dword;
		dwNegotiatedDCERate: dword;
		abVariablePortion: byte;
		align(4);
		endrecord;


type 	DRAGINFO: record
		uSize: dword;
		pt: POINT;
		fNC: dword;
		lpFileList: dword;
		grfKeyState: dword;
		align(4);
		endrecord;


		DRAGINFOA:DRAGINFO;

type 	APPBARDATA: record
		cbSize: dword;
		hwnd: dword;
		uCallbackMessage: dword;
		uEdge: dword;
		rc: RECT;
		lParam: dword;
		align(4);
		endrecord;


type 	SHFILEOPSTRUCT: record
		hwnd: dword;
		wFunc: dword;
		pFrom: dword;
		pTo: dword;
		fFlags: FILEOP_FLAGS;
		fAnyOperationsAborted: dword;
		hNameMappings: dword;
		lpszProgressTitle: dword;
		align(4);
		endrecord;


		SHFILEOPSTRUCTA:SHFILEOPSTRUCT;

type 	SHNAMEMAPPING: record
		pszOldPath: dword;
		pszNewPath: dword;
		cchOldPath: dword;
		cchNewPath: dword;
		align(4);
		endrecord;


		SHNAMEMAPPINGA:SHNAMEMAPPING;

type 	ICONORMONITOR: union
		hIcon: dword;
		hMonitor: dword;
	endunion;


type 	SHELLEXECUTEINFO: record
		cbSize: dword;
		fMask: dword;
		hwnd: dword;
		lpVerb: dword;
		lpFile: dword;
		lpParameters: dword;
		lpDirectory: dword;
		nShow: dword;
		hInstApp: dword;
		lpIDList: dword;
		lpClass: dword;
		hkeyClass: dword;
		dwHotKey: dword;
		_IconOrMonitor: ICONORMONITOR;
		hProcess: dword;
		align(4);
		endrecord;


		SHELLEXECUTEINFOA:SHELLEXECUTEINFO;

type 	NOTIFYICONDATA: record
		cbSize: dword;
		hwnd: dword;
		uID: dword;
		uFlags: dword;
		uCallbackMessage: dword;
		hIcon: dword;
		szTip: byte[64];
		align(4);
		endrecord;


		NOTIFYICONDATAA:NOTIFYICONDATA;

type 	SHFILEINFO: record
		hIcon: dword;
		iIcon: dword;
		dwAttributes: dword;
		szDisplayName: byte[MAX_PATH];
		szTypeName: byte[80];
		align(4);
		endrecord;


		SHFILEINFOA:SHFILEINFO;

type 	VS_FIXEDFILEINFO: record
		dwSignature: dword;
		dwStrucVersion: dword;
		dwFileVersionMS: dword;
		dwFileVersionLS: dword;
		dwProductVersionMS: dword;
		dwProductVersionLS: dword;
		dwFileFlagsMask: dword;
		dwFileFlags: dword;
		dwFileOS: dword;
		dwFileType: dword;
		dwFileSubtype: dword;
		dwFileDateMS: dword;
		dwFileDateLS: dword;
		align(4);
		endrecord;


type 	ICONMETRICS: record
		cbSize: dword;
		iHorzSpacing: dword;
		iVertSpacing: dword;
		iTitleWrap: dword;
		lfFont: LOGFONT;
		align(4);
		endrecord;


		ICONMETRICSA:ICONMETRICS;

type 	HELPINFO: record
		cbSize: dword;
		iContextType: dword;
		iCtrlId: dword;
		hItemHandle: dword;
		dwContextId: dword;
		MousePos: POINT;
		align(4);
		endrecord;


type 	ANIMATIONINFO: record
		cbSize: dword;
		iMinAnimate: dword;
		align(4);
		endrecord;


type 	MINIMIZEDMETRICS: record
		cbSize: dword;
		iWidth: dword;
		iHorzGap: dword;
		iVertGap: dword;
		iArrange: dword;
		align(4);
		endrecord;


type 	OSVERSIONINFO: record
		dwOSVersionInfoSize: dword;
		dwMajorVersion: dword;
		dwMinorVersion: dword;
		dwBuildNumber: dword;
		dwPlatformId: dword;
		szCSDVersion: byte[128];
		align(4);
		endrecord;


		OSVERSIONINFOA:OSVERSIONINFO;

type 	SYSTEM_POWER_STATUS: record
		ACLineStatus: byte;
		BatteryFlag: byte;
		BatteryLifePercent: byte;
		Reserved1: byte;
		BatteryLifeTime: dword;
		BatteryFullLifeTime: dword;
		align(4);
		endrecord;



type 	PAGESETUPDLG: record
		lStructSize: dword;
		hwndOwner: dword;
		hDevMode: dword;
		hDevNames: dword;
		flags: dword;
		ptPaperSize: POINT;
		rtMinMargin: RECT;
		rtMargin: RECT;
		hInstance: dword;
		lCustData: dword;
		lpfnPageSetupHook: dword;
		lpfnPagePaintHook: dword;
		lpPageSetupTemplateName: dword;
		hPageSetupTemplate: dword;
		align(4);
		endrecord;


		PAGESETUPDLGA:PAGESETUPDLG;

type 	COMMCONFIG: record
		dwSize: dword;
		wVersion: word;
		wReserved: word;
		dcbx: DCB;
		dwProviderSubType: dword;
		dwProviderOffset: dword;
		dwProviderSize: dword;
		wcProviderData: word;
		align(4);
		endrecord;


type 	PIXELFORMATDESCRIPTOR: record
		nSize: word;
		nVersion: word;
		dwFlags: dword;
		iPixelType: byte;
		cColorBits: byte;
		cRedBits: byte;
		cRedShift: byte;
		cGreenBits: byte;
		cGreenShift: byte;
		cBlueBits: byte;
		cBlueShift: byte;
		cAlphaBits: byte;
		cAlphaShift: byte;
		cAccumBits: byte;
		cAccumRedBits: byte;
		cAccumGreenBits: byte;
		cAccumBlueBits: byte;
		cAccumAlphaBits: byte;
		cDepthBits: byte;
		cStencilBits: byte;
		cAuxBuffers: byte;
		iLayerType: byte;
		bReserved: byte;
		dwLayerMask: dword;
		dwVisibleMask: dword;
		dwDamageMask: dword;
		align(4);
		endrecord;


type 	DRAWTEXTPARAMS: record
		cbSize: dword;
		iTabiLength: dword;
		iLeftMargin: dword;
		iRightMargin: dword;
		uiiLengthDrawn: dword;
		align(4);
		endrecord;


type 	MENUITEMINFO: record
		cbSize: dword;
		fMask: dword;
		fType: dword;
		fState: dword;
		wID: dword;
		hSubMenu: dword;
		hbmpChecked: dword;
		hbmpUnchecked: dword;
		dwItemData: dword;
		dwTypeData: dword;
		cch: dword;
		align(4);
		endrecord;


		MENUITEMINFOA:MENUITEMINFO;

type 	SCROLLINFO: record
		cbSize: dword;
		fMask: dword;
		nMin: dword;
		nMax: dword;
		nPage: dword;
		nPos: dword;
		nTrackPos: dword;
		align(4);
		endrecord;


type 	MSGBOXPARAMS: record
		cbSize: dword;
		hwndOwner: dword;
		hInstance: dword;
		lpszText: dword;
		lpszCaption: dword;
		dwStyle: dword;
		lpszIcon: dword;
		dwContextHelpId: dword;
		lpfnMsgBoxCallback: dword;
		dwLanguageId: dword;
		align(4);
		endrecord;


		MSGBOXPARAMSA:MSGBOXPARAMS;

type 	DEBUGSTRUCT: union
			theException:      EXCEPTION_DEBUG_INFO;
			CreateThread:      CREATE_THREAD_DEBUG_INFO;
			CreateProcessInfo: CREATE_PROCESS_DEBUG_INFO;
			ExitThread:        EXIT_THREAD_DEBUG_INFO;
			ExitProcess:       EXIT_PROCESS_DEBUG_INFO;
			LoadDll:           LOAD_DLL_DEBUG_INFO;
			UnloadDll:         UNLOAD_DLL_DEBUG_INFO;
			DebugString:       OUTPUT_DEBUG_STRING_INFO;
			RipInfo:           RIP_INFO;
	endunion;


type 	DEBUG_EVENT: record
		dwDebugEventCode: dword;
		dwProcessId: dword;
		dwThreadId: dword;
		u: DEBUGSTRUCT;
		align(4);
		endrecord;


//; COLORMAP STRUCT DWORD
//;   cmFrom  COLORREF  ?
//;   cmTo  COLORREF ?
//; COLORMAP ENDS

//;AuxVol STRUCT DWORD
//;  vLow  WORD      ?
//;  vHigh  WORD      ?
//;AuxVol ENDS

//;HITTESTINFO STRUCT DWORD
//;  hwnd  DWORD      ?
//;  pt  POINT <>
//;  ti  POINT <>
//;HITTESTINFO ENDS

//;DBGTHREAD STRUCT DWORD
//;  hThread  DWORD      ?
//;  lpStartAddress  DWORD      ?
//;  bfState  DWORD      ?
//;  nNext  QWORD      ?
//;DBGTHREAD ENDS

//;DbgProcess STRUCT DWORD
//;  hDbgHeap         DWORD      ?
//;  dwProcessID      DWORD      ?
//;  dwThreadID       DWORD      ?
//;  hProcess         DWORD      ?
//;  hFile            DWORD      ?
//;  lpImage          DWORD      ?
//;DbgProcess ENDS

type 	IMAGE_DATA_DIRECTORY: record
			VirtualAddress	: dword;
			isize			: dword;
			align(4);
		endrecord;

const
	IMAGE_NUMBEROF_DIRECTORY_ENTRIES := 16;

type 	IMAGE_OPTIONAL_HEADER32: record
			Magic						: word;
			MajorLinkerVersion			: byte;
			MinorLinkerVersion			: byte;
			SizeOfCode					: dword;
			SizeOfInitializedData		: dword;
			SizeOfUninitializedData		: dword;
			AddressOfEntryPoint			: dword;
			BaseOfCode					: dword;
			BaseOfData					: dword;
			ImageBase					: dword;
			SectionAlignment			: dword;
			FileAlignment				: dword;
			MajorOperatingSystemVersion	: word;
			MinorOperatingSystemVersion	: word;
			MajorImageVersion			: word;
			MinorImageVersion			: word;
			MajorSubsystemVersion		: word;
			MinorSubsystemVersion		: word;
			Win32VersionValue			: dword;
			SizeOfImage					: dword;
			SizeOfHeaders				: dword;
			CheckSum					: dword;
			Subsystem					: word;
			DllCharacteristics			: word;
			SizeOfStackReserve			: dword;
			SizeOfStackCommit			: dword;
			SizeOfHeapReserve			: dword;
			SizeOfHeapCommit			: dword;
			LoaderFlags					: dword;
			NumberOfRvaAndSizes			: dword;
			DataDirectory				: IMAGE_DATA_DIRECTORY
											[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
			align(4);
		endrecord;



		IMAGE_OPTIONAL_HEADER:IMAGE_OPTIONAL_HEADER32;

type 	IMAGE_FILE_HEADER: record
			Machine					:word;
			NumberOfSections		:word;
			TimeDateStamp			:dword;
			PointerToSymbolTable	:dword;
			NumberOfSymbols			:dword;
			SizeOfOptionalHeader	:word;
			Characteristics			:word;
		align(4);
		endrecord;


type 	IMAGE_NT_HEADERS: record
			Signature		:dword;
			FileHeader		:IMAGE_FILE_HEADER;
			OptionalHeader	:IMAGE_OPTIONAL_HEADER32;
			align(4);
		endrecord;


type 	IMAGE_EXPORT_DIRECTORY: record
			Characteristics			:dword;
			TimeDateStamp			:dword;
			MajorVersion			:word;
			MinorVersion			:word;
			nName					:dword;
			nBase					:dword;
			NumberOfFunctions		:dword;
			NumberOfNames			:dword;
			AddressOfFunctions		:dword;
			AddressOfNames			:dword;
			AddressOfNameOrdinals	:dword;
			align(4);
		endrecord;


type 	IMAGE_DOS_HEADER: record
			e_magic		:word;
			e_cblp		:word;
			e_cp		:word;
			e_crlc		:word;
			e_cparhdr	:word;
			e_minalloc	:word;
			e_maxalloc	:word;
			e_ss		:word;
			e_sp		:word;
			e_csum		:word;
			e_ip		:word;
			e_cs		:word;
			e_lfarlc	:word;
			e_ovno		:word;
			e_res		:word[4];
			e_oemid		:word;
			e_oeminfo	:word;
			e_res2		:word[10];
			e_lfanew	:dword;
			align(4);
		endrecord;


type 	USER_INFO_3: record
			uName			:dword;
			Password		:dword;
			PasswordAge		:dword;
			Privilege		:dword;
			HomeDir			:dword;
			Comment			:dword;
			Flags			:dword;
			ScriptPath		:dword;
			AuthFlags		:dword;
			FullName		:dword;
			UserComment		:dword;
			Parms			:dword;
			Workstations	:dword;
			LastLogon		:dword;
			LastLogoff		:dword;
			AcctExpires		:dword;
			MaxStorage		:dword;
			UnitsPerWeek	:dword;
			LogonHours		:dword;
			BadPwCount		:dword;
			NumLogons		:dword;
			LogonServer		:dword;
			CountryCode		:dword;
			CodePage		:dword;
			UserID			:dword;
			PrimaryGroupID	:dword;
			Profile			:dword;
			HomeDirDrive	:dword;
			PasswordExpired	:dword;
			align(4);
		endrecord;


type 	GROUP_INFO_2: record
		uName: dword;
		Comment: dword;
		GroupID: dword;
		Attributes: dword;
		align(4);
		endrecord;


//; ------------------------ wsock32 structures -----------------------------

const
	FD_SETSIZE                     := 64;

type 	fd_set: record
		fd_count: dword;
		fd_array: SOCKET_T[FD_SETSIZE];
		align(4);
		endrecord;


type 	timeval: record
		tv_sec: dword;
		tv_usec: dword;
		align(4);
		endrecord;


type 	S_UN_B: record
		s_b1: byte;
		s_b2: byte;
		s_b3: byte;
		s_b4: byte;
	endrecord;


type 	S_UN_W: 
			record
				s_w1: word;
				s_w2: word;
			endrecord;


type 	ADDRESS_UNION: 
			union
				_S_un_b: S_UN_B;
				_S_un_w: S_UN_W;
				S_addr: dword;
			endunion;


type 	in_addr: 
			record
				S_un: ADDRESS_UNION;
			endrecord;


type 	sockaddr_in: 
			record
				sin_family: word;
				sin_port: word;
				sin_addr: in_addr;
				sin_zero: byte[8];
				align(4);
			endrecord;


type 	sockaddr: 
			record
				sa_family: word;
				sa_data: byte[14];
				align(4);
			endrecord;


const
	WSADESCRIPTION_LEN             := 256;
	WSASYS_STATUS_LEN              := 128;

type 	WSADATA: 
			record
				wVersion: word;
				wHighVersion: word;
				szDescription: byte[WSADESCRIPTION_LEN + 1];
				szSystemStatus: byte[WSASYS_STATUS_LEN + 1];
				iMaxSockets: word;
				iMaxUdpDg: word;
				lpVendorInfo: dword;
				align(4);
			endrecord;


type 	sockproto: record
		sp_family: word;
		sp_protocol: word;
		align(4);
		endrecord;


type 	linger: record
		l_onoff: word;
		l_linger: word;
		align(4);
		endrecord;


type 	hostent: record
			h_name	: dword;
			h_alias	: dword;
			h_addr	: word;
			h_len	: word;
			h_list	: dword;
		align(4);
		endrecord;


type 	netent: record
		n_name: dword;
		n_aliases: dword;
		n_addrtype: word;
		n_net: dword;
		align(4);
		endrecord;


type 	servent: record
		s_name: dword;
		s_aliases: dword;
		s_port: word;
		s_proto: dword;
		align(4);
		endrecord;


type 	icmp_hdr: record
		icmp_type: byte;
		icmp_code: byte;
		icmp_cksum: word;
		icmp_id: word;
		icmp_seq: word;
		icmp_data: byte;
		align(4);
		endrecord;


type 	ip_hdr: record
		ip_hlv: byte;
		ip_tos: byte;
		ip_len: word;
		ip_id: word;
		ip_off: word;
		ip_ttl: byte;
		ip_p: byte;
		ip_cksum: word;
		ip_src: dword;
		ip_dest: dword;
		align(4);
		endrecord;


type 	ICMP_OPTIONS: record
		Ttl: byte;
		Tos: byte;
		Flags: byte;
		OptionsSize: byte;
		OptionsData: dword;
		align(4);
		endrecord;


type 	ICMP_ECHO_REPLY: record
		Address: dword;
		Status: dword;
		RoundTripTime: dword;
		DataSize: word;
		Reserved: word;
		DataPointer: dword;
		Options: dword;
		zData: byte[250];
		align(4);
		endrecord;

//;------------------------------ ToolHelp 32 equates ---------------------
const	MAX_MODULE_NAME32         := 255;
const	TH32CS_SNAPHEAPLIST       := 1;
const	TH32CS_SNAPPROCESS        := 2;
const	TH32CS_SNAPTHREAD         := 4;
const	TH32CS_SNAPMODULE         := 8;
const	TH32CS_SNAPALL            :=  TH32CS_SNAPHEAPLIST + TH32CS_SNAPPROCESS + TH32CS_SNAPTHREAD + TH32CS_SNAPMODULE;
const	TH32CS_INHERIT            := $80000000;
const	HF32_DEFAULT              :=  1; // process's default heap;
const	HF32_SHARED               :=  2;  // is shared heap;
const	LF32_FIXED                := 1;
const	LF32_FREE                 := 2;
const	LF32_MOVEABLE             := 4;

type 	HEAPLIST32: record
		dwSize: dword;
	    th32ProcessID: dword; // owning process
     	th32HeapID: dword;    // heap (in owning process's context!)
		dwFlags: dword;
		align(4);
		endrecord;


type 	HEAPENTRY32: record
		dwSize: dword;
		hHandle: dword;			// Handle of this heap block
		dwAddress: dword;		// Linear address of start of block
		dwBlockSize: dword;		// Size of block in bytes
		dwFlags: dword;
		dwLockCount: dword;
		dwResvd: dword;
		th32ProcessID: dword;	// owning process
		th32HeapID: dword;		// heap block is in
		align(4);
		endrecord;


type 	PROCESSENTRY32: record
			dwSize: dword;
			cntUsage: dword;
			th32ProcessID: dword;		// this process
			th32DefaultHeapID: dword;
			th32ModuleID: dword;		// associated exe
			cntThreads: dword;
			th32ParentProcessID: dword;	// this process's parent process
			pcPriClassBase: dword;		// Base priority of process's threads
			dwFlags: dword;
			szExeFile: byte[ MAX_PATH];	// Path
			align(4);	
		endrecord;


type 	THREADENTRY32: record
		dwSize: dword;
		cntUsage: dword;
		th32ThreadID: dword;		// this thread
		th32OwnerProcessID: dword;	//Process this thread is associated with
		tpBasePri: dword;
		tpDeltaPri: dword;
		dwFlags: dword;
		align(4);	
		endrecord;


type 	MODULEENTRY32: record
		dwSize: dword;
		th32ModuleID: dword;	//This module
		th32ProcessID: dword;	// owning process
		GlblcntUsage: dword;	//Global usage count on the module
		ProccntUsage: dword;	//Module usage count in th32ProcessID's context
		modBaseAddr: dword;		//Base address of module in th32ProcessID's context
		modBaseSize: dword;		//Size in bytes of module starting at modBaseAddr
		hModule: dword;			//The hModule of this module in th32ProcessID's context
		szModule: byte[MAX_MODULE_NAME32+1];
		szExePath: byte[MAX_PATH];
		align(4);
		endrecord;


//;--------- These are the equates & structures for property sheets ---------


type	LPFNPSPCALLBACK: dword; //pointer to FNPSPCALLBACKA;


type 	PROPSHEETPAGE: record
			dwSize: dword;
			dwFlags: dword;
			hInstance: dword;
			union	//  
				pszTemplate: dword;
				pResource: dword;
			endunion;

			union	//  
				hIcon: dword;
				pszIcon: dword;
			endunion;

			pszTitle: dword;
			pfnDlgProc: dword;
			lParam: dword;
			_pfnCallback: dword;
			pcRefParent: dword;
			pszHeaderTitle: dword;
			pszHeaderSubTitle: dword;
			align(4);
		endrecord;


		PROPSHEETPAGEA:PROPSHEETPAGE;
		LPPROPSHEETPAGE:dword;		//pointer to PROPSHEETPAGEA;
		LPCPROPSHEETPAGE:dword;		//pointer to CPROPSHEETPAGEA;
		//PROPSHEETPAGE_V1_SIZE:PROPSHEETPAGEA_V1_SIZE;


type 	PROPSHEETHEADER: record
			dwSize: dword;
			dwFlags: dword;
			hwndParent: dword;
			hInstance: dword;
			union	//  
				hIcon: dword;
				pszIcon: dword;
			endunion;

			pszCaption: dword;
			nPages: dword;
			union	//  
				nStartPage: dword;
				pStartPage: dword;
			endunion;

			union	//  
				ppsp: dword;
				phpage: dword;
			endunion;

			_pfnCallback: dword;
			union	//  
				hbmWatermark: dword;
				pszbmWatermark: dword;
			endunion;

			hplWatermark: dword;
			union	//  
				hbmHeader: dword;
				pszbmHeader: dword;
			endunion;

	// 
			align(4);
		endrecord;


		PROPSHEETHEADERA:PROPSHEETHEADER;
		LPPROPSHEETHEADER: dword; //pointer to PROPSHEETHEADERA;

		LPCPROPSHEETHEADER: dword; //pointer to CPROPSHEETHEADERA;
		//PROPSHEETHEADER_V1_SIZE:PROPSHEETHEADERA_V1_SIZE;

const	PSCB_INITIALIZED          := 1;
const	PSCB_PRECREATE            := 2;

//type	CreatePropertySheetPage:CreatePropertySheetPageA;
//		PropertySheet:PropertySheetA;

type 	PSHNOTIFY: record
		hdr: NMHDR;
		lParam: dword;
		align(4);
		endrecord;



//; --------------------- equates & structures for WINNT ---------------------


type	EXECUTION_STATE: dword;


type 	LIST_ENTRY: record
		Flink: dword;
		Blink: dword;
		align(4);
		endrecord;


type 	SINGLE_LIST_ENTRY: record
		Next: dword;
		align(4);
		endrecord;


type dd:dword;
type dw:word;
type db:byte;

type 	GUID: record
		Data1:dword;
		Data2:word;
		Data3:word;
		Data4: db[8];
		align(4);
		endrecord;


	IID	: GUID;
	CLSID :GUID;


type 	OBJECTID: record
		Lineage: GUID;
		Uniquifier:dword;
		align(4);
		endrecord;


// LDTBits record rBaseHi:8, Granularity:1,Default_Big : 1,Reserved_0:1,Sys:1,LimitHi:4,Pres:1, Dpl:2, S_bit:1, Type1:4,rBaseMid:8

type	LDTBits:dword;

type 	LDT_ENTRY: record
		LimitLow:word;
		BaseLow:word;
		HighWord1:union	//  HighWord1
			Bytes: LDT_BYTES;
			Bits: LDTBits;
		endunion;

		align(4);
		endrecord;




type 	SID: record
		Revision:byte;
		SubAuthorityCount:byte;
		IdentifierAuthority: SID_IDENTIFIER_AUTHORITY;
		SubAuthority: dd[ANYSIZE_ARRAY];
		align(4);
		endrecord;


type 	ACCESS_ALLOWED_OBJECT_ACE: record
		Header: ACE_HEADER;
		Mask1:dword;
		Flags:dword;
		ObjectType: GUID;
		InheritedObjectType: GUID;
		SidStart:dword;
		align(4);
		endrecord;


type 	ACCESS_DENIED_OBJECT_ACE: record
		Header: ACE_HEADER;
		Mask1:dword;
		Flags:dword;
		ObjectType: GUID;
		InheritedObjectType: GUID;
		SidStart:dword;
		align(4);
		endrecord;


type 	SYSTEM_AUDIT_OBJECT_ACE: record
		Header: ACE_HEADER;
		Mask1:dword;
		Flags:dword;
		ObjectType: GUID;
		InheritedObjectType: GUID;
		SidStart:dword;
		align(4);
		endrecord;


type 	SYSTEM_ALARM_OBJECT_ACE: record
		Header: ACE_HEADER;
		Mask1:dword;
		Flags:dword;
		ObjectType: GUID;
		InheritedObjectType: GUID;
		SidStart:dword;
		align(4);
		endrecord;


type 	SECURITY_DESCRIPTOR_RELATIVE: record
		Revision:byte;
		Sbz1:byte;
		Control1:word;
		Owner:dword;
		Group1:dword;
		Sacl:dword;
		Dacl:dword;
		align(4);
		endrecord;


type 	OBJECT_TYPE_LIST: record
		Level:word;
		Sbz:word;
		ObjectType:dword;
		align(4);
		endrecord;


type 	TOKEN_USER: record
		User: SID_AND_ATTRIBUTES;
		align(4);
		endrecord;


type 	TOKEN_OWNER: record
		Owner:dword;
		align(4);
		endrecord;


type 	TOKEN_PRIMARY_GROUP: record
		PrimaryGroup:dword;
		align(4);
		endrecord;


type 	TOKEN_DEFAULT_DACL: record
		DefaultDacl:dword;
		align(4);
		endrecord;

const
	TOKEN_SOURCE_LENGTH            := 8;

type 	TOKEN_SOURCE: record
		SourceName: db[TOKEN_SOURCE_LENGTH];
		SourceIdentifier: LUID;
		align(4);
		endrecord;


type 	TOKEN_CONTROL: record
		TokenId: LUID;
		AuthenticationId: LUID;
		ModifiedId: LUID;
		TokenSource1: TOKEN_SOURCE;
		align(4);
		endrecord;


type 	NT_TIB: record
		ExceptionList:dword;
		StackBase:dword;
		StackLimit:dword;
		SubSystemTib:dword;
		union	// 
			FiberData:dword;
			Version:dword;
		endunion;

		ArbitraryUserPointer:dword;
		Self:dword;
		align(4);
		endrecord;


type 	FILE_NOTIFY_INFORMATION: record
		NextEntryOffset:dword;
		Action:dword;
		FileNameLength:dword;
		FileName:word;
		align(4);
		endrecord;



type 	REPARSE_DATA_BUFFER: record
		ReparseTag:dword;
		ReparseDataLength:word;
		Reserved:word;
		union	// 
			SymbolicLinkReparseBuffer: record	// SymbolicLinkReparseBuffer 
				SubstituteNameOffset:word;
				SubstituteNameLength:word;
				PrintNameOffset:word;
				PrintNameLength:word;
				PathBuffer:word;
			endrecord;

			MountPointReparseBuffer: record	//  MountPointReparseBuffer
				SubstituteNameOffset:word;
				SubstituteNameLength:word;
				PrintNameOffset:word;
				PrintNameLength:word;
				PathBuffer:word;
			endrecord;

			GenericReparseBuffer: record	//  GenericReparseBuffer
			DataBuffer:byte;
			endrecord;

		endunion;

		align(4);
		endrecord;


type 	REPARSE_GUID_DATA_BUFFER: record
		ReparseTag:dword;
		ReparseDataLength:word;
		Reserved:word;
		ReparseGuid: GUID;
		GenericReparseBuffer: record	// GenericReparseBuffer 
		DataBuffer:byte;
		endrecord;

		align(4);
		endrecord;



type 	REPARSE_POINT_INFORMATION: record
		ReparseDataLength:word;
		UnparsedNameLength:word;
		align(4);
		endrecord;


type 	POWER_DEVICE_TIMEOUTS: record
		ConservationIdleTime:dword;
		PerformanceIdleTime:dword;
		align(4);
		endrecord;


type 	IMAGE_VXD_HEADER: record
			e32_magic : 	word;             	// Magic number
			e32_border : 	byte;               // The byte ordering for the VXD
			e32_worder : 	byte;               // The word ordering for the VXD
			e32_level : 	dword;              // The EXE format level for now = 0
			e32_cpu :		word;               // The CPU type
			e32_os : 		word;               // The OS type
			e32_ver : 		dword;              // Module version
			e32_mflags : 	dword;              // Module flags
			e32_mpages : 	dword;              // Module # pages
			e32_startobj : 	dword;              // Object # for instruction pointer
			e32_eip : 		dword;              // Extended instruction pointer
			e32_stackobj : 	dword;              // Object # for stack pointer
			e32_esp : 		dword;              // Extended stack pointer
			e32_pagesize : 	dword;              // VXD page size
			e32_lastpagesize : dword;           // Last page size in VXD
			e32_fixupsize : dword;              // Fixup section size
			e32_fixupsum : 	dword;              // Fixup section checksum
			e32_ldrsize : 	dword;              // Loader section size
			e32_ldrsum : 	dword;              // Loader section checksum
			e32_objtab : 	dword;              // Object table offset
			e32_objcnt : 	dword;              // Number of objects in module
			e32_objmap : 	dword;              // Object page map offset
			e32_itermap : 	dword;              // Object iterated data map offset
			e32_rsrctab : 	dword;              // Offset of Resource Table
			e32_rsrccnt : 	dword;              // Number of resource entries
			e32_restab : 	dword;              // Offset of resident name table
			e32_enttab : 	dword;              // Offset of Entry Table
			e32_dirtab : 	dword;              // Offset of Module Directive Table
			e32_dircnt : 	dword;              // Number of module directives
			e32_fpagetab : 	dword;              // Offset of Fixup Page Table
			e32_frectab : 	dword;              // Offset of Fixup Record Table
			e32_impmod : 	dword;              // Offset of Import Module Name Table
			e32_impmodcnt : dword;              // Number of entries in Import Module Name Table
			e32_impproc : 	dword;              // Offset of Import Procedure Name Table
			e32_pagesum : 	dword;              // Offset of Per-Page Checksum Table
			e32_datapage : 	dword;              // Offset of Enumerated Data Pages
			e32_preload : 	dword;              // Number of preload pages
			e32_nrestab : 	dword;              // Offset of Non-resident Names Table
			e32_cbnrestab : dword;              // Size of Non-resident Name Table
			e32_nressum : 	dword;              // Non-resident Name Table Checksum
			e32_autodata : 	dword;              // Object # for automatic data object
			e32_debuginfo : dword;              // Offset of the debugging information
			e32_debuglen : 	dword;              // The length of the debugging info. in bytes
			e32_instpreload : dword;            // Number of instance pages in preload section of VXD file
			e32_instdemand : dword;             // Number of instance pages in demand load section of VXD file
			e32_heapsize : 	dword;              // Size of heap - for 16-bit apps
			e32_res3 :		byte[12];           // Reserved words
			e32_winresoff:  dword;
			e32_winreslen: 	dword;
			e32_devid : 	word;               // Device ID for VxD
			e32_ddkver : 	word;               // DDK version for VxD
			align(4);	
		endrecord;


type 	IMAGE_ROM_OPTIONAL_HEADER: record
			Magic					: word;
			MajorLinkerVersion		: byte;
			MinorLinkerVersion		: byte;
			SizeOfCode				: dword;
			SizeOfInitializedData	: dword;
			SizeOfUninitializedData	: dword;
			AddressOfEntryPoint		: dword;
			BaseOfCode				: dword;
			BaseOfData				: dword;
			BaseOfBss				: dword;
			GprMask					: dword;
			CprMask					: dword[4];
			GpValue					: dword;
		endrecord;


type 	IMAGE_ROM_HEADERS: record
			FileHeader		: IMAGE_FILE_HEADER;
			OptionalHeader	: IMAGE_ROM_OPTIONAL_HEADER;
		endrecord;


const
	IMAGE_SIZEOF_SHORT_NAME        := 8;
	IMAGE_SIZEOF_SYMBOL 	       := 18;

type 	IMAGE_SECTION_HEADER: record
			Name1					: db[IMAGE_SIZEOF_SHORT_NAME];
			Misc:
				union	//  Misc
					PhysicalAddress:dword;
					VirtualSize:dword;
				endunion;

			VirtualAddress			:dword;
			SizeOfRawData			:dword;
			PointerToRawData		:dword;
			PointerToRelocations	:dword;
			PointerToLinenumbers	:dword;
			NumberOfRelocations		:word;
			NumberOfLinenumbers		:word;
			Characteristics			:dword;
		endrecord;


type 	IMAGE_SYMBOL: record
			N:union	//  N
				ShortName		:byte[8];
				Name1: 
					record	//  Name1
						Short1	:dword;     // if 0, use LongName
						_Long	:dword;        // offset into string table
					endrecord;

				LongName		:dword[2];
			endunion;

			Value				:dword;
			SectionNumber		:word;
			Type1				:word;
			StorageClass		:byte;
			NumberOfAuxSymbols	:byte;
		endrecord;
		


type 	IMAGE_AUX_SYMBOL: union
			Sym:record	//  Sym
				TagIndex:dword;  // struct, union, or enum tag index
				Misc:union	//  Misc
					LnSz:record	//  LnSz
						Linenumber:word;		// declaration line number
						Size1:word;				//size of struct, union, or enum
					endrecord;

					TotalSize: dword;
				endunion;

				FcnAry:union	//  FcnAry
				Function:record	//  Function     if ISFCN, tag, or .bb
					PointerToLinenumber: dword;
					PointerToNextFunction: dword;
				endrecord;

					Array: record	//  Array        if ISARY, up to 4 dimension
						Dimension: word[4];
					endrecord;

				endunion;

				TvIndex: word;		// tv index
				
			endrecord;

		File: record	//  File
			Name1: byte[IMAGE_SIZEOF_SYMBOL];
		endrecord;

		Section: record	//  Section
			Length1				: dword;	// section length
			NumberOfRelocations	: word;		// number of relocation entries
			NumberOfLinenumbers	:word;		// number of line numbers
			CheckSum			:dword;		// checksum for communal
			Number				:dword;		// section number to associate with
			Selection			:byte;		// communal selection type
		endrecord;

	endunion;


type 	IMAGE_RELOCATION: record
			union	//  
				VirtualAddress	: dword;
				RelocCount		:dword;	// Set to the real count when IMAGE_SCN_LNK_NRELOC_OVFL is set
			endunion;

			SymbolTableIndex	: dword;
			Type1				: word;
		endrecord;


type 	IMAGE_LINENUMBER: record
			Type1: union	//  Type1
				SymbolTableIndex:dword;		// Symbol table index of function name if Linenumber is 0.
				VirtualAddress	:dword; 	// Virtual address of line number.
			endunion;

			Linenumber			:word;		// Line number.
		endrecord;



type 	IMAGE_BASE_RELOCATION: record
			VirtualAddress	:dword;
			SizeOfBlock		:dword;
			TypeOffset		:word;
		endrecord;


type 	IMAGE_ARCHIVE_MEMBER_HEADER: record
			Name1		:byte[16];     // File member name - `/' terminated.
			Date		:byte[12];     // File member date - decimal.
			UserID		:byte[6];      // File member user id - decimal.
			GroupID		:byte[6];      // File member group id - decimal.
			Mode		:byte[8];      // File member mode - octal.
			Size1		:byte[10];     // File member size - decimal.
			EndHeader	:byte[2];      // String to end header.
		endrecord;



type 	IMAGE_IMPORT_BY_NAME: record
			Hint	:word;
			Name1	:byte;
		endrecord;


type 	IMAGE_THUNK_DATA32: record
			u1: union	//  u1
				ForwarderString	:dword;
				Function		:dword;
				Ordinal			:dword;
				AddressOfData	:dword;
			endunion;

		endrecord;



type 	IMAGE_TLS_DIRECTORY32: record
			StartAddressOfRawData	:dword;
			EndAddressOfRawData		:dword;
			AddressOfIndex			:dword;
			AddressOfCallBacks		:dword;
			SizeOfZeroFill			:dword;
			Characteristics			:dword;
		endrecord;


		IMAGE_THUNK_DATA		:IMAGE_THUNK_DATA32;
		IMAGE_TLS_DIRECTORY		:IMAGE_TLS_DIRECTORY32;

type 	IMAGE_IMPORT_DESCRIPTOR: record
			union	// 
				Characteristics		:dword;	// 0 for terminating null import descriptor
				OriginalFirstThunk	:dword;	// RVA to original unbound IAT (PIMAGE_THUNK_DATA)
			endunion;

			TimeDateStamp		:dword;		// 0 if not bound,
//                                          // -1//   ;     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)
//                                          // O.W. date/time stamp of DLL bound to (Old BIND)
// 
			ForwarderChain		:dword;		// -1 if no forwarders
			Name1				:dword;
			FirstThunk			:dword;		// RVA to IAT (if bound this IAT has actual addresses)
		endrecord;


type 	IMAGE_BOUND_IMPORT_DESCRIPTOR: record
			TimeDateStamp				:dword;
			OffsetModuleName			:word;
			NumberOfModuleForwarderRefs	:word;
			align(4);
		endrecord;


type 	IMAGE_BOUND_FORWARDER_REF: record
			TimeDateStamp		:dword;
			OffsetModuleName	:word;
			Reserved			:word;
			align(4);
		endrecord;


type 	IMAGE_RESOURCE_DIRECTORY: record
			Characteristics			:dword;
			TimeDateStamp			:dword;
			MajorVersion			:word;
			MinorVersion			:word;
			NumberOfNamedEntries	:word;
			NumberOfIdEntries		:word;
			align(4);
		endrecord;


type 	IMAGE_RESOURCE_DIRECTORY_ENTRY: record
			union	// 
				//rName: RECORD NameIsString:1,NameOffset:31
				
				rName	:dword;
				Name1	:dword;
				Id		:word;
			endunion;

			union	// 
				OffsetToData	:dword;
//	 		  	rDirectory	RECORD DataIsDirectory:1,OffsetToDirectory:31
				rDirectory		:dword;
			endunion;

			align(4);
		endrecord;



type 	IMAGE_RESOURCE_DIRECTORY_STRING: record
			Length1		:word;
			NameString	:byte;
			align(4);
		endrecord;


type 	IMAGE_RESOURCE_DIR_STRING_U: record
		Length1:word;
		NameString:word;
		align(4);
		endrecord;



type 	IMAGE_RESOURCE_DATA_ENTRY: record
		OffsetToData:dword;
		Size1:dword;
		CodePage:dword;
		Reserved:dword;
		align(4);
		endrecord;


type 	IMAGE_LOAD_CONFIG_DIRECTORY: record
		Characteristics:dword;
		TimeDateStamp:dword;
		MajorVersion:word;
		MinorVersion:word;
		GlobalFlagsClear:dword;
		GlobalFlagsSet:dword;
		CriticalSectionDefaultTimeout:dword;
		DeCommitFreeBlockThreshold:dword;
		DeCommitTotalFreeThreshold:dword;
		LockPrefixTable:dword;
		MaximumAllocationSize:dword;
		VirtualMemoryThreshold:dword;
		ProcessHeapFlags:dword;
		ProcessAffinityMask:dword;
		CSDVersion:word;
		Reserved1:word;
		EditList:dword;
		Reserved:dword;
		align(4);
		endrecord;


type 	IMAGE_DEBUG_DIRECTORY: record
		Characteristics:dword;
		TimeDateStamp:dword;
		MajorVersion:word;
		MinorVersion:word;
		Type1:dword;
		SizeOfData:dword;
		AddressOfRawData:dword;
		PointerToRawData:dword;
		align(4);
		endrecord;


type 	IMAGE_COFF_SYMBOLS_HEADER: record
		NumberOfSymbols:dword;
		LvaToFirstSymbol:dword;
		NumberOfLinenumbers:dword;
		LvaToFirstLinenumber:dword;
		RvaToFirstByteOfCode:dword;
		RvaToLastByteOfCode:dword;
		RvaToFirstByteOfData:dword;
		RvaToLastByteOfData:dword;
		align(4);
		endrecord;


// FPOProlog record cbFrame  : 2, reserved : 1, fUseBP   : 1, fHasSEH  : 1, cbRegs   : 3, cbProlog : 8

type FPOProlog:word;

type 	FPO_DATA: record
			ulOffStart:dword;		// offset 1st byte of function code
			cbProcSize:dword;		// # bytes in function
			cdwLocals:dword;		// # bytes in locals/4
			cdwParams:dword;		// # bytes in params/4
			rProlog: FPOProlog;
			align(4);	
		endrecord;


type 	IMAGE_DEBUG_MISC: record
			DataType:dword;			// type of misc data, see defines
			Length1:dword;			// total length of record, rounded to four
			                        // byte multiple.
			Unicode:boolean;		// TRUE if data is unicode string
			Reserved: db[3];
			Data:byte;				// Actual data
			align(4);	
		endrecord;



type 	IMAGE_FUNCTION_ENTRY: record
		StartingAddress:dword;
		EndingAddress:dword;
		EndOfPrologue:dword;
		align(4);	
		endrecord;


type 	IMAGE_SEPARATE_DEBUG_HEADER: record
		Signature:word;
		Flags:word;
		Machine:word;
		Characteristics:word;
		TimeDateStamp:dword;
		CheckSum:dword;
		ImageBase:dword;
		SizeOfImage:dword;
		NumberOfSections:dword;
		ExportedNamesSize:dword;
		DebugDirectorySize:dword;
		SectionAlignment:dword;
		Reserved: dd[2];
		align(4);
		endrecord;



// ImportRec record Reserved : 11,NameType : 3,Type2 : 2

type	ImportRec: word;

type 	IMPORT_OBJECT_HEADER: record
			Sig1:word;				// Must be IMAGE_FILE_MACHINE_UNKNOWN
			Sig2:word;				// Must be IMPORT_OBJECT_HDR_SIG2.
			Version:word;
			Machine:word;
			TimeDateStamp:dword;	// Time/date stamp
			SizeOfData:dword;		// particularly useful for incremental links
			union	//  
			    Ordinal:word;		// if grf & IMPORT_OBJECT_ORDINAL
				Hint:word;
			endunion;

			rImport: ImportRec;
			align(4);	
		endrecord;


type 	MESSAGE_RESOURCE_ENTRY: record
		Length1:word;
		Flags:word;
		fText:byte;
		align(4);
		endrecord;


type 	MESSAGE_RESOURCE_BLOCK: record
		LowId:dword;
		HighId:dword;
		OffsetToEntries:dword;
		align(4);
		endrecord;


type 	MESSAGE_RESOURCE_DATA: record
		NumberOfBlocks:dword;
		Blocks: MESSAGE_RESOURCE_BLOCK;
		align(4);
		endrecord;


type 	RTL_CRITICAL_SECTION_DEBUG: record
		Type1:word;
		CreatorBackTraceIndex:word;
		CriticalSection:dword;
		ProcessLocksList: LIST_ENTRY;
		EntryCount:dword;
		ContentionCount:dword;
		Spare: dd[2];
		align(4);
		endrecord;

const
	MAXLOGICALLOGNAMESIZE          := 256;

type 	EVENTSFORLOGFILE: record
			ulSize:dword;
			szLogicalLogFile: word[ MAXLOGICALLOGNAMESIZE]; // name of the logical file-security/application/system
			ulNumRecords:dword;
			pEventLogRecords: EVENTLOGRECORD;
			align(4);	
		endrecord;


type 	PACKEDEVENTINFO: record
			ulSize:dword;					//total size of the structure
			ulNumEventsForLogFile:dword;	//number of EventsForLogFile structure that follow
			ulOffsets:dword;				//the offsets from the start of this structure to the EVENTSFORLOGFILE structure
			align(4);	
		endrecord;


type 	TAPE_ERASE: record
		Type1:dword;
		Immediate: BOOLEAN;
		align(4);
		endrecord;


type 	TAPE_PREPARE: record
		Operation:dword;
		Immediate: BOOLEAN;
		align(4);
		endrecord;


type 	TAPE_WRITE_MARKS: record
			Type1:dword;
			Count:dword;
			BOOLEAN_Immediate:boolean;
			align(4);	
		endrecord;


type 	TAPE_GET_POSITION: record
		Type1:dword;
		Partition:dword;
		Offset1: QWORD;
		align(4);	
		endrecord;


type 	TAPE_SET_POSITION: record
			fMethod:dword;
			Partition:dword;
			Offset1: qword;
			Immediate: boolean;
			align(4);	
		endrecord;


type 	TAPE_GET_DRIVE_PARAMETERS: record
		ECC: BOOLEAN;
		Compression: BOOLEAN;
		DataPadding: BOOLEAN;
		ReportSetmarks: BOOLEAN;
		DefaultBlockSize:dword;
		MaximumBlockSize:dword;
		MinimumBlockSize:dword;
		MaximumPartitionCount:dword;
		FeaturesLow:dword;
		FeaturesHigh:dword;
		EOTWarningZoneSize:dword;
		align(4);
		endrecord;


type 	TAPE_SET_DRIVE_PARAMETERS: record
		ECC: BOOLEAN;
		Compression: BOOLEAN;
		DataPadding: BOOLEAN;
		ReportSetmarks: BOOLEAN;
		EOTWarningZoneSize:dword;
		align(4);
		endrecord;


type 	TAPE_GET_MEDIA_PARAMETERS: record
		Capacity: QWORD;
		Remaining: QWORD;
		BlockSize:dword;
		PartitionCount:dword;
		WriteProtected: BOOLEAN;
		align(4);
		endrecord;


type 	TAPE_SET_MEDIA_PARAMETERS: record
		BlockSize:dword;
		align(4);	
		endrecord;


type 	TAPE_CREATE_PARTITION: record
			fMethod:dword;
			Count:dword;
			Size1:dword;
			align(4);	
		endrecord;


//; --------------------- Imagehlp.h EQUATES --------------------- 

//; --------------------- Imagehlp.h STRUCTURES --------------------- 

type 	LOADED_IMAGE: record
			ModuleName: dword;
			_hFile: dword;
			MappedAddress: dword;
			FileHeader: dword;
			LastRvaSection: dword;
			NumberOfSections: dword;
			Sections: dword;
			Characteristics: dword;
			fSystemImage: byte;
			align(4);
			fDOSImage: byte;
			Links: dword;
			SizeOfImage: dword;
			align(4);	
		endrecord;


type 	IMAGE_DEBUG_INFORMATION: record
		List: LIST_ENTRY;
		Size1: dword;
		MappedBase: dword;
		Machine: word;
		Characteristics: word;
		CheckSum: dword;
		ImageBase: dword;
		SizeOfImage: dword;
		NumberOfSections: dword;
		Sections: dword;
		ExportedNamesSize: dword;
		ExportedNames: dword;
		NumberOfFunctionTableEntries: dword;
		FunctionTableEntries: dword;
		LowestFunctionStartingAddress: dword;
		HighestFunctionEndingAddress: dword;
		NumberOfFpoTableEntries: dword;
		FpoTableEntries: dword;
		SizeOfCoffSymbols: dword;
		CoffSymbols: dword;
		SizeOfCodeViewSymbols: dword;
		CodeViewSymbols: dword;
		ImageFilePath: dword;
		ImageFileName: dword;
		DebugFilePath: dword;
		TimeDateStamp: dword;
		RomImage: byte;
		DebugDirectory: dword;
		NumberOfDebugDirectories: dword;
		Reserved: dword[3];
		align(4);
		endrecord;


type 	ADDRESS: record
		Offset1: dword;
		Segment1: word;
		Mode: dword;
		align(4);
		endrecord;


type 	KDHELP: record
		Thread: dword;
		ThCallbackStack: dword;
		NextCallback: dword;
		FramePointer: dword;
		KiCallUserMode: dword;
		KeUserCallbackDispatcher: dword;
		SystemRangeStart: dword;
		align(4);
		endrecord;


type 	STACKFRAME: record
		AddrPC: ADDRESS;
		AddrReturn: ADDRESS;
		AddrFrame: ADDRESS;

		AddrStack: ADDRESS;
//     FuncTableEntry  DWORD ?             ; LDWORD data type ?
		Params: dword[4];
		Far1: BOOL;
		Virtual: BOOL;
		Reserved: dword[3];
		_KdHelp: KDHELP;
	endrecord;


type 	API_VERSION: record
		MajorVersion: word;
		MinorVersion: word;
		Revision: word;
		Reserved: word;
		align(4);
		endrecord;


type 	IMAGEHLP_SYMBOL: record
		SizeOfStruct: dword;
		_Address: dword;
		Size1: dword;
		Flags: dword;
		MaxNameLength: dword;
		Name1:byte;
		align(4);
		endrecord;


type 	IMAGEHLP_MODULE: record
		SizeOfStruct: dword;
		BaseOfImage: dword;
		ImageSize: dword;
		TimeDateStamp: dword;
		CheckSum: dword;
		NumSyms: dword;
		SymType1: dword;
		ModuleName: byte[32];
		ImageName: byte[256];
		LoadedImageName: byte[256];
	endrecord;


type 	IMAGEHLP_LINE: record
		SizeOfStruct: dword;
		Key: dword;
		LineNumber: dword;
		FileName: dword;
		_Address: dword;
		align(4);
		endrecord;


type 	IMAGEHLP_DEFERRED_SYMBOL_LOAD: record
		SizeOfStruct: dword;
		BaseOfImage: dword;
		CheckSum: dword;
		TimeDateStamp: dword;
		FileName: byte[MAX_PATH];
		Reparse: byte;
		align(4);
		endrecord;


type 	IMAGEHLP_DUPLICATE_SYMBOL: record
		SizeOfStruct: dword;
		NumberOfDups: dword;
		Symbol: dword;
		SelectedSymbol: dword;
	endrecord;


//;--------------------------------------------------------------------------------------------
//;							Excpt.h
//;--------------------------------------------------------------------------------------------




//;-----------------------------------[ Winuser.h ]-------------------------------------------


//;-----------------------------------[ winuser.h - Structures ]---------------------------------
type 	CWPRETSTRUCT: record
		lResult: dword;
		lParam: dword;
		wParam: dword;
		message: dword;
		hwnd: dword;
		align(4);
		endrecord;


type 	HARDWAREHOOKSTRUCT: record
		hwnd: dword;
		message: dword;
		wParam: dword;
		lParam: dword;
		align(4);
		endrecord;


type 	USEROBJECTFLAGS: record
		fInherit: dword;
		fReserved: dword;
		dwFlags: dword;
		align(4);
		endrecord;


type 	MDINEXTMENU: record
		hmenuIn: dword;
		hmenuNext: dword;
		hwndNext: dword;
		align(4);
		endrecord;


type 	NCCALCSIZE_PARAMS: record
		rgrc: RECT[3];
		lppos: dword;
		align(4);
		endrecord;


type 	STYLESTRUCT: record
		styleOld: dword;
		styleNew: dword;
		align(4);
		endrecord;


type 	DROPSTRUCT: record
		hwndSource: dword;
		hwndSink: dword;
		wFmt: dword;
		dwData: dword;
		ptDrop: POINT;
		dwControlData: dword;
		align(4);
		endrecord;


type 	CURSORSHAPE: record
		xHotSpot: dword;
		yHotSpot: dword;
		regCx: dword;
		regCy: dword;
		cbWidth: dword;
		Planes:byte;
		BitsPixel:byte;
		align(4);
		endrecord;


type 	SERIALKEYS: record
		cbSize: dword;
		dwFlags: dword;
		lpszActivePort: dword;
		lpszPort: dword;
		iBaudRate: dword;
		iPortState: dword;
		iActive: dword;
		align(4);
		endrecord;


		SERIALKEYSA:SERIALKEYS;

type 	HIGHCONTRAST: record
		cbSize: dword;
		dwFlags: dword;
		lpszDefaultScheme: dword;
		align(4);
		endrecord;


		HIGHCONTRASTA:HIGHCONTRAST;

type 	FILTERKEYS: record
		cbSize: dword;
		dwFlags: dword;
		iWaitMSec: dword;
		iDelayMSec: dword;
		iRepeatMSec: dword;
		iBounceMSec: dword;
		align(4);
		endrecord;


type 	STICKYKEYS: record
		cbSize: dword;
		dwFlags: dword;
		align(4);
		endrecord;


type 	MOUSEKEYS: record
		cbSize: dword;
		dwFlags: dword;
		iMaxSpeed: dword;
		iTimeToMaxSpeed: dword;
		iCtrlSpeed: dword;
		dwReserved1: dword;
		dwReserved2: dword;
		align(4);
		endrecord;


type 	ACCESSTIMEOUT: record
		cbSize: dword;
		dwFlags: dword;
		iTimeOutMSec: dword;
		align(4);
		endrecord;


type 	SOUNDSENTRY: record
		cbSize: dword;
		dwFlags: dword;
		iFSTextEffect: dword;
		iFSTextEffectMSec: dword;
		iFSTextEffectColorBits: dword;
		iFSGrafEffect: dword;
		iFSGrafEffectMSec: dword;
		iFSGrafEffectColor: dword;
		iWindowsEffect: dword;
		iWindowsEffectMSec: dword;
		lpszWindowsEffectDLL: dword;
		iWindowsEffectOrdinal: dword;
		align(4);
		endrecord;


		SOUNDSENTRYA:SOUNDSENTRY;

type 	TOGGLEKEYS: record
		cbSize: dword;
		dwFlags: dword;
		align(4);
		endrecord;


//;-------------------------------------[ wtypes.h ]------------------------------



type 	RemHGLOBAL: record
		fNullHGlobal: dword;
		cbData: dword;
		data:byte;
		align(4);
		endrecord;


type 	RemHMETAFILEPICT: record
		imm: dword;
		xExt: dword;
		yExt: dword;
		cbData: dword;
		data:byte;
		align(4);
		endrecord;


type 	RemHENHMETAFILE: record
		cbData: dword;
		data:byte;
		align(4);
		endrecord;


type 	RemHBITMAP: record
		cbData: dword;
		data:byte;
		align(4);
		endrecord;


type 	RemHPALETTE: record
		cbData: dword;
		data:byte;
		align(4);
		endrecord;


type 	RemHBRUSH: record
		cbData: dword;
		data:byte;
		align(4);
		endrecord;


type 	COAUTHIDENTITY: record
		User: dword;
		UserLength: dword;
		Domain: dword;
		DomainLength: dword;
		Password: dword;
		PasswordLength: dword;
		Flags: dword;
		align(4);
		endrecord;



type 	COAUTHINFO: record
		dwAuthnSvc: dword;
		dwAuthzSvc: dword;
		pwszServerPrincName: dword;
		dwAuthnLevel: dword;
		dwImpersonationLevel: dword;
		pAuthIdentityData: dword;
		dwCapabilities: dword;
		align(4);
		endrecord;


type 	BYTE_BLOB: record
		clSize: dword;
		abData:byte;
		align(4);
		endrecord;


type 	WORD_BLOB: record
		clSize: dword;
		asData:word;
		align(4);
		endrecord;


type 	DWORD_BLOB: record
		clSize: dword;
		alData: dword;
		align(4);
		endrecord;


type 	FLAGGED_BYTE_BLOB: record
		fFlags: dword;
		clSize: dword;
		abData:byte;
		align(4);
		endrecord;


type 	FLAGGED_WORD_BLOB: record
		fFlags: dword;
		clSize: dword;
		asData:word;
		align(4);
		endrecord;


type 	BYTE_SIZEDARR: record
		clSize: dword;
		pData: dword;
		align(4);
		endrecord;


type 	WORD_SIZEDARR: record
		clSize: dword;
		pData: dword;
		align(4);
		endrecord;


type 	DWORD_SIZEDARR: record
		clSize: dword;
		pData: dword;
		align(4);
		endrecord;


type 	HYPER_SIZEDARR: record
		clSize: dword;
		pData: dword;
		align(4);
		endrecord;


type 	userCLIPFORMAT: record
		fContext: dword;
		u:union	//  u
			dwValue: dword;
			pwszName: dword;
		endunion;

		align(4);
		endrecord;


type 	GDI_NONREMOTE: record
		fContext: dword;
		u:union	//  u
			hInproc: dword;
			hRemote: dword;
		endunion;

		align(4);
		endrecord;


type 	userHGLOBAL: record
		fContext: dword;
		u: union	//  u
			hInproc: dword;
			hRemote: dword;
			hGlobal: dword;
		endunion;

		align(4);
		endrecord;


type 	userHMETAFILE: record
		fContext: dword;
		u: union	//  u
			hInproc: dword;
			hRemote: dword;
			hGlobal: dword;
		endunion;

		align(4);
		endrecord;


type 	remoteMETAFILEPICT: record
		imm: dword;
		xExt: dword;
		yExt: dword;
		hMF: dword;
		align(4);
		endrecord;


type 	userHMETAFILEPICT: record
		fContext: dword;
		u: union	//  u
			hInproc: dword;
			hRemote: dword;
			hGlobal: dword;
		endunion;

		align(4);
		endrecord;


type 	userHENHMETAFILE: record
		fContext: dword;
		u: union	//  u
			hInproc: dword;
			hRemote: dword;
			hGlobal: dword;
		endunion;

		align(4);
		endrecord;


type 	userBITMAP: record
		bmType: dword;
		bmWidth: dword;
		bmHeight: dword;
		bmWidthBytes: dword;
		bmPlanes:word;
		bmBitsPixel:word;
		cbSize: dword;
		pBuffer:byte;
		align(4);
		endrecord;


type 	userHBITMAP: record
		fContext: dword;
		u: union	//  u
			hInproc:dword;
			hRemote:dword;
			hGlobal:dword;
		endunion;

		align(4);
		endrecord;


type 	rpcLOGPALETTE: record
		palVersion:word;
		palNumEntries:word;
		palPalEntry: PALETTEENTRY;
		align(4);
		endrecord;


type 	userHPALETTE: record
		fContext:dword;
		u: union	//  u
			hInproc:dword;
			hRemote:dword;
			hGlobal:dword;
		endunion;

		align(4);
		endrecord;


type 	RemotableHandle: record

		fContext:dword;
		u: union	//  u
			hInproc:dword;
			hRemote:dword;
		endunion;

		align(4);
		endrecord;


type 	BSTRBLOB: record
		cbSize:dword;
		pData:dword;
		align(4);
		endrecord;


type 	BLOB: record
		cbSize:dword;
		pBlobData:dword;
		align(4);
		endrecord;


type 	CLIPDATA: record
		cbSize:dword;
		ulClipFmt:dword;
		pClipData:dword;
		align(4);
		endrecord;


type 	CSPLATFORM: record
		dwPlatformId:dword;
		dwVersionHi:dword;
		dwVersionLo:dword;
		dwProcessorArch:dword;
		align(4);
		endrecord;


type 	QUERYCONTEXT: record
		dwContext:dword;
		Platform: CSPLATFORM;
		Locale:dword;
		dwVersionHi:dword;
		dwVersionLo:dword;
		align(4);
		endrecord;


type 	uCLSSPEC: record
		tyspec:dword;
		u: union	//  tagged_union
			_clsid: GUID;
			_iid: GUID;
			typelibID: GUID;
			pFileExt:dword;
			pMimeType:dword;
			pProgId:dword;
			pFileName:dword;
			pJavaClassName:dword;
			pPackageName:dword;
		endunion;

		align(4);
		endrecord;


type 	PUBLISHEDAPPINFO: record
		pwszFileExtension:dword;
		pwszDisplayName:dword;
		pwszPackagePath:dword;
		align(4);
		endrecord;


type 	APPDETAIL: record
		AppID: GUID;
		cClasses:dword;
		prgClsIdList:dword;
		cTypeLibIds:dword;
		prgTypeLibIdList:dword;
		cServers:dword;
		prgServerNames:dword;
		align(4);
		endrecord;

type IMAGELISTDRAWPARAMS:
		record
		    cbSize	:dword;
		    himl	:dword;
		    i		:dword;
		    hdcDst	:dword;
		    x		:dword;
		    y		:dword;
		    _cx		:dword;
		    _cy		:dword;
		    xBitmap	:dword;
		    yBitmap	:dword;
		    rgbBk	:COLORREF;
		    rgbFg	:COLORREF;
		    fStyle	:dword;
		    dwRop	:dword;
		endrecord;





type FONTENUMPROC:
		procedure
		(
  			var lpelf	:ENUMLOGFONT;
			var	lpntm	:NEWTEXTMETRIC;
  			FontType	:dword;
  			lParam2		:dword
		);


type ICMENUMPROC:
		procedure
		(
  			var lpszFilename	:var;
  				lParam2			:dword
		);


type MFENUMPROC:
		procedure
		(
				hDC			:dword;
			var lpHTable	:dword;
			var lpMFR		:var;
				nObj		:dword;
				lpClientData:dword
		);

type GOBJENUMPROC:
		procedure
		(
			var	lpLogObject	:var;
				lpData		:dword
		);



const	
	Normal                         := $000000;
	cReadOnly                      := $000001;
	Hidden                         := $000010;
	System                         := $000100;
	vLabel                         := $001000;
	SubDir                         := $010000;
	Archive                        := $100000;
	Black                          := $000000;
	Blue                           := $0FF0000;
	Green                          := $00FF00;
	Cyan                           := $0FFFF00;
	Red                            := $0000FF;
	Magenta                        := $0FF00FF;
	Yellow                         := $00FFFF;
	White                          := $0FFFFFF;
	Gray                           := $080808;
	INVALID_HANDLE_VALUE           := -1;
	DELETE                         := $10000;
	READ_CONTROL                   := $20000;
	WRITE_DAC                      := $40000;
	WRITE_OWNER                    := $80000;
	SYNCHRONIZE                    := $100000;
	STANDARD_RIGHTS_READ           :=  READ_CONTROL;
	STANDARD_RIGHTS_WRITE          :=  READ_CONTROL;
	STANDARD_RIGHTS_EXECUTE        :=  READ_CONTROL;
	STANDARD_RIGHTS_REQUIRED       := $0F0000;
	STANDARD_RIGHTS_ALL            := $1F0000;
	SPECIFIC_RIGHTS_ALL            := $0FFFF;
	SID_REVISION                   := 1;
	SID_MAX_SUB_AUTHORITIES        := 15;
	SID_RECOMMENDED_SUB_AUTHORITIES := 1;
	SidTypeUser                    := 1;
	SidTypeGroup                   := 2;
	SidTypeDomain                  := 3;
	SidTypeAlias                   := 4;
	SidTypeWellKnownGroup          := 5;
	SidTypeDeletedAccount          := 6;
	SidTypeInvalid                 := 7;
	SidTypeUnknown                 := 8;
	SECURITY_NULL_RID              := $0;
	SECURITY_WORLD_RID             := $0;
	SECURITY_LOCAL_RID             := $0;
	SECURITY_CREATOR_OWNER_RID     := $0;
	SECURITY_CREATOR_GROUP_RID     := $1;
	SECURITY_DIALUP_RID            := $1;
	SECURITY_NETWORK_RID           := $2;
	SECURITY_BATCH_RID             := $3;
	SECURITY_INTERACTIVE_RID       := $4;
	SECURITY_SERVICE_RID           := $6;
	SECURITY_ANONYMOUS_LOGON_RID   := $7;
	SECURITY_LOGON_IDS_RID         := $5;
	SECURITY_LOCAL_SYSTEM_RID      := $12;
	SECURITY_NT_NON_UNIQUE         := $15;
	SECURITY_BUILTIN_DOMAIN_RID    := $20;
	DOMAIN_USER_RID_ADMIN          := $1F4;
	DOMAIN_USER_RID_GUEST          := $1F5;
	DOMAIN_GROUP_RID_ADMINS        := $200;
	DOMAIN_GROUP_RID_USERS         := $201;
	DOMAIN_GROUP_RID_GUESTS        := $202;
	DOMAIN_ALIAS_RID_ADMINS        := $220;
	DOMAIN_ALIAS_RID_USERS         := $221;
	DOMAIN_ALIAS_RID_GUESTS        := $222;
	DOMAIN_ALIAS_RID_POWER_USERS   := $223;
	DOMAIN_ALIAS_RID_ACCOUNT_OPS   := $224;
	DOMAIN_ALIAS_RID_SYSTEM_OPS    := $225;
	DOMAIN_ALIAS_RID_PRINT_OPS     := $226;
	DOMAIN_ALIAS_RID_BACKUP_OPS    := $227;
	DOMAIN_ALIAS_RID_REPLICATOR    := $228;
	SE_GROUP_MANDATORY             := $1;
	SE_GROUP_ENABLED_BY_DEFAULT    := $2;
	SE_GROUP_ENABLED               := $4;
	SE_GROUP_OWNER                 := $8;
	SE_GROUP_LOGON_ID              := $0C0000000;
	FILE_BEGIN                     := 0;
	FILE_CURRENT                   := 1;
	FILE_END                       := 2;
	FILE_FLAG_WRITE_THROUGH        := $80000000;
	FILE_FLAG_OVERLAPPED           := $40000000;
	FILE_FLAG_NO_BUFFERING         := $20000000;
	FILE_FLAG_RANDOM_ACCESS        := $10000000;
	FILE_FLAG_SEQUENTIAL_SCAN      := $8000000;
	FILE_FLAG_DELETE_ON_CLOSE      := $4000000;
	FILE_FLAG_BACKUP_SEMANTICS     := $2000000;
	FILE_FLAG_POSIX_SEMANTICS      := $1000000;
	CREATE_NEW                     := 1;
	CREATE_ALWAYS                  := 2;
	OPEN_EXISTING                  := 3;
	OPEN_ALWAYS                    := 4;
	TRUNCATE_EXISTING              := 5;
	PIPE_ACCESS_INBOUND            := $1;
	PIPE_ACCESS_OUTBOUND           := $2;
	PIPE_ACCESS_DUPLEX             := $3;
	PIPE_CLIENT_END                := $0;
	PIPE_SERVER_END                := $1;
	PIPE_WAIT                      := $0;
	PIPE_NOWAIT                    := $1;
	PIPE_READMODE_BYTE             := $0;
	PIPE_READMODE_MESSAGE          := $2;
	PIPE_TYPE_BYTE                 := $0;
	PIPE_TYPE_MESSAGE              := $4;
	PIPE_UNLIMITED_INSTANCES       := 255;
	SECURITY_CONTEXT_TRACKING      := $40000;
	SECURITY_EFFECTIVE_ONLY        := $80000;
	SECURITY_SQOS_PRESENT          := $100000;
	SECURITY_VALID_SQOS_FLAGS      := $1F0000;
	SP_SERIALCOMM                  := $1;
	PST_UNSPECIFIED                := $0;
	PST_RS232                      := $1;
	PST_PARALLELPORT               := $2;
	PST_RS422                      := $3;
	PST_RS423                      := $4;
	PST_RS449                      := $5;
	PST_FAX                        := $21;
	PST_SCANNER                    := $22;
	PST_NETWORK_BRIDGE             := $100;
	PST_LAT                        := $101;
	PST_TCPIP_TELNET               := $102;
	PST_X25                        := $103;
	PCF_DTRDSR                     := $1;
	PCF_RTSCTS                     := $2;
	PCF_RLSD                       := $4;
	PCF_PARITY_CHECK               := $8;
	PCF_XONXOFF                    := $10;
	PCF_SETXCHAR                   := $20;
	PCF_TOTALTIMEOUTS              := $40;
	PCF_INTTIMEOUTS                := $80;
	PCF_SPECIALCHARS               := $100;
	PCF_16BITMODE                  := $200;
	DLL_PROCESS_DETACH             := 0;
	DLL_PROCESS_ATTACH             := 1;
	DLL_THREAD_ATTACH              := 2;
	DLL_THREAD_DETACH              := 3;
	SP_PARITY                      := $1;
	SP_BAUD                        := $2;
	SP_DATABITS                    := $4;
	SP_STOPBITS                    := $8;
	SP_HANDSHAKING                 := $10;
	SP_PARITY_CHECK                := $20;
	SP_RLSD                        := $40;
	BAUD_075                       := $1;
	BAUD_110                       := $2;
	BAUD_134_5                     := $4;
	BAUD_150                       := $8;
	BAUD_300                       := $10;
	BAUD_600                       := $20;
	BAUD_1200                      := $40;
	BAUD_1800                      := $80;
	BAUD_2400                      := $100;
	BAUD_4800                      := $200;
	BAUD_7200                      := $400;
	BAUD_9600                      := $800;
	BAUD_14400                     := $1000;
	BAUD_19200                     := $2000;
	BAUD_38400                     := $4000;
	BAUD_56K                       := $8000;
	BAUD_128K                      := $10000;
	BAUD_115200                    := $20000;
	BAUD_57600                     := $40000;
	BAUD_USER                      := $10000000;
	DATABITS_5                     := $1;
	DATABITS_6                     := $2;
	DATABITS_7                     := $4;
	DATABITS_8                     := $8;
	DATABITS_16                    := $10;
	DATABITS_16X                   := $20;
	STOPBITS_10                    := $1;
	STOPBITS_15                    := $2;
	STOPBITS_20                    := $4;
	PARITY_NONE                    := $100;
	PARITY_ODD                     := $200;
	PARITY_EVEN                    := $400;
	PARITY_MARK                    := $800;
	PARITY_SPACE                   := $1000;
	DTR_CONTROL_DISABLE            := $0;
	DTR_CONTROL_ENABLE             := $1;
	DTR_CONTROL_HANDSHAKE          := $2;
	RTS_CONTROL_DISABLE            := $0;
	RTS_CONTROL_ENABLE             := $1;
	RTS_CONTROL_HANDSHAKE          := $2;
	RTS_CONTROL_TOGGLE             := $3;
	GMEM_FIXED                     := $0;
	GMEM_MOVEABLE                  := $2;
	GMEM_NOCOMPACT                 := $10;
	GMEM_NODISCARD                 := $20;
	GMEM_ZEROINIT                  := $40;
	GMEM_MODIFY                    := $80;
	GMEM_DISCARDABLE               := $100;
	GMEM_NOT_BANKED                := $1000;
	GMEM_SHARE                     := $2000;
	GMEM_DDESHARE                  := $2000;
	GMEM_NOTIFY                    := $4000;
	GMEM_LOWER                     :=  GMEM_NOT_BANKED;
	GMEM_VALID_FLAGS               := $7F72;
	GMEM_INVALID_HANDLE            := $8000;
	GMEM_DISCARDED                 := $4000;
	GMEM_LOCKCOUNT                 := $0FF;
	GHND                           :=  GMEM_MOVEABLE | GMEM_ZEROINIT;
	GPTR                           :=  GMEM_FIXED | GMEM_ZEROINIT;
	LMEM_FIXED                     := $0;
	LMEM_MOVEABLE                  := $2;
	LMEM_NOCOMPACT                 := $10;
	LMEM_NODISCARD                 := $20;
	LMEM_ZEROINIT                  := $40;
	LMEM_MODIFY                    := $80;
	LMEM_DISCARDABLE               := $0F00;
	LMEM_VALID_FLAGS               := $0F72;
	LMEM_INVALID_HANDLE            := $8000;
	LHND                           :=  LMEM_MOVEABLE + LMEM_ZEROINIT;
	LPTR                           :=  LMEM_FIXED + LMEM_ZEROINIT;
	NONZEROLHND                    :=  LMEM_MOVEABLE;
	NONZEROLPTR                    :=  LMEM_FIXED;
	LMEM_DISCARDED                 := $4000;
	LMEM_LOCKCOUNT                 := $0FF;
	DEBUG_PROCESS                  := $1;
	DEBUG_ONLY_THIS_PROCESS        := $2;
	CREATE_SUSPENDED               := $4;
	CREATE_SEPARATE_WOW_VDM        := $800;
	DETACHED_PROCESS               := $8;
	CREATE_NEW_CONSOLE             := $10;
	NORMAL_PRIORITY_CLASS          := $20;
	IDLE_PRIORITY_CLASS            := $40;
	HIGH_PRIORITY_CLASS            := $80;
	REALTIME_PRIORITY_CLASS        := $100;
	CREATE_NEW_PROCESS_GROUP       := $200;
	CREATE_NO_WINDOW               := $8000000;
	PROFILE_USER                   := $10000000;
	PROFILE_KERNEL                 := $20000000;
	PROFILE_SERVER                 := $40000000;
	MAXLONG                        := $7FFFFFFF;
	THREAD_BASE_PRIORITY_MIN       := 2;
	THREAD_BASE_PRIORITY_MAX       := 2;
	THREAD_BASE_PRIORITY_LOWRT     := 15;
	THREAD_BASE_PRIORITY_IDLE      := 15;
	THREAD_PRIORITY_LOWEST         :=  THREAD_BASE_PRIORITY_MIN;
	THREAD_PRIORITY_BELOW_NORMAL   :=  THREAD_PRIORITY_LOWEST + 1;
	THREAD_PRIORITY_NORMAL         := 0;
	THREAD_PRIORITY_HIGHEST        :=  THREAD_BASE_PRIORITY_MAX;
	THREAD_PRIORITY_ABOVE_NORMAL   :=  THREAD_PRIORITY_HIGHEST - 1;
	THREAD_PRIORITY_ERROR_RETURN   :=  MAXLONG;
	THREAD_PRIORITY_TIME_CRITICAL  :=  THREAD_BASE_PRIORITY_LOWRT;
	THREAD_PRIORITY_IDLE           :=  THREAD_BASE_PRIORITY_IDLE;
	APPLICATION_ERROR_MASK         := $20000000;
	MINCHAR                        := $80;
	MAXCHAR                        := $7F;
	MINSHORT                       := $8000;
	MAXSHORT                       := $7FFF;
	MINLONG                        := $80000000;
	MAXBYTE                        := $0FF;
	MAXWORD                        := $0FFFF;
	MAXDWORD                       := $0FFFFFFFF;
	LANG_NEUTRAL                   := $0;
	LANG_BULGARIAN                 := $2;
	LANG_CHINESE                   := $4;
	LANG_CROATIAN                  := $1A;
	LANG_CZECH                     := $5;
	LANG_DANISH                    := $6;
	LANG_DUTCH                     := $13;
	LANG_ENGLISH                   := $9;
	LANG_FINNISH                   := $0B;
	LANG_FRENCH                    := $0C;
	LANG_GERMAN                    := $7;
	LANG_GREEK                     := $8;
	LANG_HUNGARIAN                 := $0E;
	LANG_ICELANDIC                 := $0F;
	LANG_ITALIAN                   := $10;
	LANG_JAPANESE                  := $11;
	LANG_KOREAN                    := $12;
	LANG_NORWEGIAN                 := $14;
	LANG_POLISH                    := $15;
	LANG_PORTUGUESE                := $16;
	LANG_ROMANIAN                  := $18;
	LANG_RUSSIAN                   := $19;
	LANG_SLOVAK                    := $1B;
	LANG_SLOVENIAN                 := $24;
	LANG_SPANISH                   := $0A;
	LANG_SWEDISH                   := $1D;
	LANG_TURKISH                   := $1F;
	SUBLANG_NEUTRAL                := $0;
	SUBLANG_DEFAULT                := $1;
	SUBLANG_SYS_DEFAULT            := $2;
	SUBLANG_CHINESE_TRADITIONAL    := $1;
	SUBLANG_CHINESE_SIMPLIFIED     := $2;
	SUBLANG_CHINESE_HONGKONG       := $3;
	SUBLANG_CHINESE_SINGAPORE      := $4;
	SUBLANG_DUTCH                  := $1;
	SUBLANG_DUTCH_BELGIAN          := $2;
	SUBLANG_ENGLISH_US             := $1;
	SUBLANG_ENGLISH_UK             := $2;
	SUBLANG_ENGLISH_AUS            := $3;
	SUBLANG_ENGLISH_CAN            := $4;
	SUBLANG_ENGLISH_NZ             := $5;
	SUBLANG_ENGLISH_EIRE           := $6;
	SUBLANG_FRENCH                 := $1;
	SUBLANG_FRENCH_BELGIAN         := $2;
	SUBLANG_FRENCH_CANADIAN        := $3;
	SUBLANG_FRENCH_SWISS           := $4;
	SUBLANG_GERMAN                 := $1;
	SUBLANG_GERMAN_SWISS           := $2;
	SUBLANG_GERMAN_AUSTRIAN        := $3;
	SUBLANG_ITALIAN                := $1;
	SUBLANG_ITALIAN_SWISS          := $2;
	SUBLANG_NORWEGIAN_BOKMAL       := $1;
	SUBLANG_NORWEGIAN_NYNORSK      := $2;
	SUBLANG_PORTUGUESE             := $2;
	SUBLANG_PORTUGUESE_BRAZILIAN   := $1;
	SUBLANG_SPANISH                := $1;
	SUBLANG_SPANISH_MEXICAN        := $2;
	SUBLANG_SPANISH_MODERN         := $3;
	FILE_READ_DATA                 := $1;
	FILE_LIST_DIRECTORY            := $1;
	FILE_WRITE_DATA                := $2;
	FILE_ADD_FILE                  := $2;
	FILE_APPEND_DATA               := $4;
	FILE_ADD_SUBDIRECTORY          := $4;
	FILE_CREATE_PIPE_INSTANCE      := $4;
	FILE_READ_EA                   := $8;
	FILE_READ_PROPERTIES           :=  FILE_READ_EA;
	FILE_WRITE_EA                  := $10;
	FILE_WRITE_PROPERTIES          :=  FILE_WRITE_EA;
	FILE_EXECUTE                   := $20;
	FILE_TRAVERSE                  := $20;
	FILE_DELETE_CHILD              := $40;
	FILE_READ_ATTRIBUTES           := $80;
	FILE_WRITE_ATTRIBUTES          := $100;
	FILE_ALL_ACCESS                :=  STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | $1FF;
	FILE_GENERIC_READ              :=  STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES | FILE_READ_EA | SYNCHRONIZE;
	FILE_GENERIC_WRITE             :=  STANDARD_RIGHTS_WRITE | FILE_WRITE_DATA | FILE_WRITE_ATTRIBUTES | FILE_WRITE_EA | FILE_APPEND_DATA | SYNCHRONIZE;
	FILE_GENERIC_EXECUTE           :=  STANDARD_RIGHTS_EXECUTE | FILE_READ_ATTRIBUTES | FILE_EXECUTE | SYNCHRONIZE;
	FILE_SHARE_READ                := $1;
	FILE_SHARE_WRITE               := $2;
	FILE_ATTRIBUTE_READONLY        := $1;
	FILE_ATTRIBUTE_HIDDEN          := $2;
	FILE_ATTRIBUTE_SYSTEM          := $4;
	FILE_ATTRIBUTE_DIRECTORY       := $10;
	FILE_ATTRIBUTE_ARCHIVE         := $20;
	FILE_ATTRIBUTE_NORMAL          := $80;
	FILE_ATTRIBUTE_TEMPORARY       := $100;
	FILE_ATTRIBUTE_COMPRESSED      := $800;
	FILE_NOTIFY_CHANGE_FILE_NAME   := $1;
	FILE_NOTIFY_CHANGE_DIR_NAME    := $2;
	FILE_NOTIFY_CHANGE_ATTRIBUTES  := $4;
	FILE_NOTIFY_CHANGE_SIZE        := $8;
	FILE_NOTIFY_CHANGE_LAST_WRITE  := $10;
	FILE_NOTIFY_CHANGE_SECURITY    := $100;
	MAILSLOT_NO_MESSAGE            := 1;
	MAILSLOT_WAIT_FOREVER          := 1;
	FILE_CASE_SENSITIVE_SEARCH     := $1;
	FILE_CASE_PRESERVED_NAMES      := $2;
	FILE_UNICODE_ON_DISK           := $4;
	FILE_PERSISTENT_ACLS           := $8;
	FILE_FILE_COMPRESSION          := $10;
	FILE_VOLUME_IS_COMPRESSED      := $8000;
	IO_COMPLETION_MODIFY_STATE     := $2;
	IO_COMPLETION_ALL_ACCESS       :=  STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | $3;
	DUPLICATE_CLOSE_SOURCE         := $1;
	DUPLICATE_SAME_ACCESS          := $2;
	ACCESS_SYSTEM_SECURITY         := $1000000;
	MAXIMUM_ALLOWED                := $2000000;
	GENERIC_READ                   := $80000000;
	GENERIC_WRITE                  := $40000000;
	GENERIC_EXECUTE                := $20000000;
	GENERIC_ALL                    := $10000000;
	ACL_REVISION                   := 2;
	ACL_REVISION1                  := 1;
	ACL_REVISION2                  := 2;
	ACCESS_ALLOWED_ACE_TYPE        := $0;
	ACCESS_DENIED_ACE_TYPE         := $1;
	SYSTEM_AUDIT_ACE_TYPE          := $2;
	SYSTEM_ALARM_ACE_TYPE          := $3;
	HELPINFO_WINDOW                := 1;
	HELPINFO_MENUITEM              := 2;
	OBJECT_INHERIT_ACE             := $1;
	CONTAINER_INHERIT_ACE          := $2;
	NO_PROPAGATE_INHERIT_ACE       := $4;
	INHERIT_ONLY_ACE               := $8;
	VALID_INHERIT_FLAGS            := $0F;
	SUCCESSFUL_ACCESS_ACE_FLAG     := $40;
	FAILED_ACCESS_ACE_FLAG         := $80;
	AclRevisionInformation         := 1;
	AclSizeInformation             := 2;
	SECURITY_DESCRIPTOR_REVISION   := 1;
	SECURITY_DESCRIPTOR_REVISION1  := 1;
	SECURITY_DESCRIPTOR_MIN_LENGTH := 20;
	SE_OWNER_DEFAULTED             := $1;
	SE_GROUP_DEFAULTED             := $2;
	SE_DACL_PRESENT                := $4;
	SE_DACL_DEFAULTED              := $8;
	SE_SACL_PRESENT                := $10;
	SE_SACL_DEFAULTED              := $20;
	SE_SELF_RELATIVE               := $8000;
	SE_PRIVILEGE_ENABLED_BY_DEFAULT := $1;
	SE_PRIVILEGE_ENABLED           := $2;
	SE_PRIVILEGE_USED_FOR_ACCESS   := $80000000;
	PRIVILEGE_SET_ALL_NECESSARY    := 1;
	SecurityAnonymous              := 1;
	SecurityIdentification         := 2;
	REG_OPTION_RESERVED            := 0;
	REG_OPTION_NON_VOLATILE        := 0;
	REG_OPTION_VOLATILE            := 1;
	REG_OPTION_CREATE_LINK         := 2;
	REG_OPTION_BACKUP_RESTORE      := 4;
	REG_NONE                       := 0;
	REG_SZ                         := 1;
	REG_EXPAND_SZ                  := 2;
	REG_BINARY                     := 3;
	REG_DWORD                      := 4;
	REG_DWORD_LITTLE_ENDIAN        := 4;
	REG_DWORD_BIG_ENDIAN           := 5;
	REG_LINK                       := 6;
	REG_MULTI_SZ                   := 7;
	REG_RESOURCE_LIST              := 8;
	REG_FULL_RESOURCE_DESCRIPTOR   := 9;
	REG_RESOURCE_REQUIREMENTS_LIST := 10;
	REG_CREATED_NEW_KEY            := $1;
	REG_OPENED_EXISTING_KEY        := $2;
	REG_WHOLE_HIVE_VOLATILE        := $1;
	REG_REFRESH_HIVE               := $2;
	REG_NOTIFY_CHANGE_NAME         := $1;
	REG_NOTIFY_CHANGE_ATTRIBUTES   := $2;
	REG_NOTIFY_CHANGE_LAST_SET     := $4;
	REG_NOTIFY_CHANGE_SECURITY     := $8;
	REG_LEGAL_CHANGE_FILTER        :=  REG_NOTIFY_CHANGE_NAME | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET | REG_NOTIFY_CHANGE_SECURITY;
	REG_LEGAL_OPTION               :=  REG_OPTION_RESERVED | REG_OPTION_NON_VOLATILE | REG_OPTION_VOLATILE | REG_OPTION_CREATE_LINK | REG_OPTION_BACKUP_RESTORE;
	KEY_QUERY_VALUE                := $1;
	KEY_SET_VALUE                  := $2;
	KEY_CREATE_SUB_KEY             := $4;
	KEY_ENUMERATE_SUB_KEYS         := $8;
	KEY_NOTIFY                     := $10;
	KEY_CREATE_LINK                := $20;
	KEY_READ                       :=  STANDARD_RIGHTS_READ | KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY &! SYNCHRONIZE;
	KEY_WRITE                      :=  STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY &! SYNCHRONIZE;
	KEY_EXECUTE                    :=  KEY_READ;
	KEY_ALL_ACCESS                 :=  STANDARD_RIGHTS_ALL | KEY_QUERY_VALUE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY | KEY_CREATE_LINK &! SYNCHRONIZE;
	EXCEPTION_DEBUG_EVENT          := 1;
	CREATE_THREAD_DEBUG_EVENT      := 2;
	CREATE_PROCESS_DEBUG_EVENT     := 3;
	EXIT_THREAD_DEBUG_EVENT        := 4;
	EXIT_PROCESS_DEBUG_EVENT       := 5;
	LOAD_DLL_DEBUG_EVENT           := 6;
	UNLOAD_DLL_DEBUG_EVENT         := 7;
	OUTPUT_DEBUG_STRING_EVENT      := 8;
	RIP_EVENT                      := 9;
	DRIVE_REMOVABLE                := 2;
	DRIVE_FIXED                    := 3;
	DRIVE_REMOTE                   := 4;
	DRIVE_CDROM                    := 5;
	DRIVE_RAMDISK                  := 6;
	FILE_TYPE_UNKNOWN              := $0;
	FILE_TYPE_DISK                 := $1;
	FILE_TYPE_CHAR                 := $2;
	FILE_TYPE_PIPE                 := $3;
	FILE_TYPE_REMOTE               := $8000;
	STD_INPUT_HANDLE               := -10;
	STD_OUTPUT_HANDLE              := -11;
	STD_ERROR_HANDLE               := -12;
	NOPARITY                       := 0;
	ODDPARITY                      := 1;
	EVENPARITY                     := 2;
	MARKPARITY                     := 3;
	SPACEPARITY                    := 4;
	ONESTOPBIT                     := 0;
	ONE5STOPBITS                   := 1;
	TWOSTOPBITS                    := 2;
	IGNORE                         := 0;
	INFINITE                       := -1;
	CBR_110                        := 110;
	CBR_300                        := 300;
	CBR_600                        := 600;
	CBR_1200                       := 1200;
	CBR_2400                       := 2400;
	CBR_4800                       := 4800;
	CBR_9600                       := 9600;
	CBR_14400                      := 14400;
	CBR_19200                      := 19200;
	CBR_38400                      := 38400;
	CBR_56000                      := 56000;
	CBR_57600                      := 57600;
	CBR_115200                     := 115200;
	CBR_128000                     := 128000;
	CBR_256000                     := 256000;
	CE_RXOVER                      := $1;
	CE_OVERRUN                     := $2;
	CE_RXPARITY                    := $4;
	CE_FRAME                       := $8;
	CE_BREAK                       := $10;
	CE_TXFULL                      := $100;
	CE_PTO                         := $200;
	CE_IOE                         := $400;
	CE_DNS                         := $800;
	CE_OOP                         := $1000;
	CE_MODE                        := $8000;
	IE_BADID                       := 1;
	IE_OPEN                        := 2;
	IE_NOPEN                       := 3;
	IE_MEMORY                      := 4;
	IE_DEFAULT                     := 5;
	IE_HARDWARE                    := 10;
	IE_BYTESIZE                    := 11;
	IE_BAUDRATE                    := 12;
	EV_RXCHAR                      := $1;
	EV_RXFLAG                      := $2;
	EV_TXEMPTY                     := $4;
	EV_CTS                         := $8;
	EV_DSR                         := $10;
	EV_RLSD                        := $20;
	EV_BREAK                       := $40;
	EV_ERR                         := $80;
	EV_RING                        := $100;
	EV_PERR                        := $200;
	EV_RX80FULL                    := $400;
	EV_EVENT1                      := $800;
	EV_EVENT2                      := $1000;
	SETXOFF                        := 1;
	SETXON                         := 2;
	SETRTS                         := 3;
	CLRRTS                         := 4;
	SETDTR                         := 5;
	CLRDTR                         := 6;
	RESETDEV                       := 7;
	SETBREAK                       := 8;
	CLRBREAK                       := 9;
	PURGE_TXABORT                  := $1;
	PURGE_RXABORT                  := $2;
	PURGE_TXCLEAR                  := $4;
	PURGE_RXCLEAR                  := $8;
	LPTx                           := $80;
	MS_CTS_ON                      := $10;
	MS_DSR_ON                      := $20;
	MS_RING_ON                     := $40;
	MS_RLSD_ON                     := $80;
	S_QUEUEEMPTY                   := 0;
	S_THRESHOLD                    := 1;
	S_ALLTHRESHOLD                 := 2;
	S_NORMAL                       := 0;
	S_LEGATO                       := 1;
	S_STACCATO                     := 2;
	S_PERIOD512                    := 0;
	S_PERIOD1024                   := 1;
	S_PERIOD2048                   := 2;
	S_PERIODVOICE                  := 3;
	S_WHITE512                     := 4;
	S_WHITE1024                    := 5;
	S_WHITE2048                    := 6;
	S_WHITEVOICE                   := 7;
	S_SERDVNA                      := 1;
	S_SEROFM                       := 2;
	S_SERMACT                      := 3;
	S_SERQFUL                      := 4;
	S_SERBDNT                      := 5;
	S_SERDLN                       := 6;
	S_SERDCC                       := 7;
	S_SERDTP                       := 8;
	S_SERDVL                       := 9;
	S_SERDMD                       := 10;
	S_SERDSH                       := 11;
	S_SERDPT                       := 12;
	S_SERDFQ                       := 13;
	S_SERDDR                       := 14;
	S_SERDSR                       := 15;
	S_SERDST                       := 16;
	NMPWAIT_WAIT_FOREVER           := $0FFFF;
	NMPWAIT_NOWAIT                 := $1;
	NMPWAIT_USE_DEFAULT_WAIT       := $0;
	FS_CASE_IS_PRESERVED           :=  FILE_CASE_PRESERVED_NAMES;
	FS_CASE_SENSITIVE              :=  FILE_CASE_SENSITIVE_SEARCH;
	FS_UNICODE_STORED_ON_DISK      :=  FILE_UNICODE_ON_DISK;
	FS_PERSISTENT_ACLS             :=  FILE_PERSISTENT_ACLS;
	SECTION_QUERY                  := $1;
	SECTION_MAP_WRITE              := $2;
	SECTION_MAP_READ               := $4;
	SECTION_MAP_EXECUTE            := $8;
	SECTION_EXTEND_SIZE            := $10;
	SECTION_ALL_ACCESS             :=  STANDARD_RIGHTS_REQUIRED | SECTION_QUERY | SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE | SECTION_EXTEND_SIZE;
	FILE_MAP_COPY                  :=  SECTION_QUERY;
	FILE_MAP_WRITE                 :=  SECTION_MAP_WRITE;
	FILE_MAP_READ                  :=  SECTION_MAP_READ;
	FILE_MAP_ALL_ACCESS            :=  SECTION_ALL_ACCESS;
	OF_READ                        := $0;
	OF_WRITE                       := $1;
	OF_READWRITE                   := $2;
	OF_SHARE_COMPAT                := $0;
	OF_SHARE_EXCLUSIVE             := $10;
	OF_SHARE_DENY_WRITE            := $20;
	OF_SHARE_DENY_READ             := $30;
	OF_SHARE_DENY_NONE             := $40;
	OF_PARSE                       := $100;
	OF_DELETE                      := $200;
	OF_VERIFY                      := $400;
	OF_CANCEL                      := $800;
	OF_CREATE                      := $1000;
	OF_PROMPT                      := $2000;
	OF_EXIST                       := $4000;
	OF_REOPEN                      := $8000;
	DONT_RESOLVE_DLL_REFERENCES    := $1;
	TC_NORMAL                      := 0;
	TC_HARDERR                     := 1;
	TC_GP_TRAP                     := 2;
	TC_SIGNAL                      := 3;
	MB_PRECOMPOSED                 := $1;
	MB_COMPOSITE                   := $2;
	MB_USEGLYPHCHARS               := $4;
	WC_DEFAULTCHECK                := $100;
	WC_COMPOSITECHECK              := $200;
	WC_DISCARDNS                   := $10;
	WC_SEPCHARS                    := $20;
	WC_DEFAULTCHAR                 := $40;
	WC_LISTVIEW     :string        := "SysListView32";
    WC_TREEVIEW     :string     := "SysTreeView32";
    WC_COMBOBOXEX   :string     := "ComboBoxEx32";
    WC_TABCONTROL   :string     := "SysTabControl32";
	WC_IPADDRESS    :string        := "SysIPAddress32";
    WC_PAGESCROLLER :string     := "SysPager";
    WC_HEADER       :string     := "SysHeader32";
    TOOLBARCLASSNAME:string     := "ToolbarWindow32";
    REBARCLASSNAME  :string     := "ReBarWindow32";
    TOOLTIPS_CLASS  :string     := "tooltips_class32";
    STATUSCLASSNAME :string     := "msctls_statusbar32";
    TRACKBAR_CLASS  :string     := "msctls_trackbar32";
    UPDOWN_CLASS    :string     := "msctls_updown32";
    PROGRESS_CLASS  :string     := "msctls_progress32";
    HOTKEY_CLASS    :string     := "msctls_hotkey32";
    ANIMATE_CLASS   :string     := "SysAnimate32";
    MONTHCAL_CLASS  :string     := "SysMonthCal32";
    DATETIMEPICK_CLASS:string   := "SysDateTimePick32";

	CT_CTYPE1                      := $1;
	CT_CTYPE2                      := $2;
	CT_CTYPE3                      := $4;
	C1_UPPER                       := $1;
	C1_LOWER                       := $2;
	C1_DIGIT                       := $4;
	C1_SPACE                       := $8;
	C1_PUNCT                       := $10;
	C1_CNTRL                       := $20;
	C1_BLANK                       := $40;
	C1_XDIGIT                      := $80;
	C1_ALPHA                       := $100;
	C2_LEFTTORIGHT                 := $1;
	C2_RIGHTTOLEFT                 := $2;
	C2_EUROPENUMBER                := $3;
	C2_EUROPESEPARATOR             := $4;
	C2_EUROPETERMINATOR            := $5;
	C2_ARABICNUMBER                := $6;
	C2_COMMONSEPARATOR             := $7;
	C2_BLOCKSEPARATOR              := $8;
	C2_SEGMENTSEPARATOR            := $9;
	C2_WHITESPACE                  := $0A;
	C2_OTHERNEUTRAL                := $0B;
	C2_NOTAPPLICABLE               := $0;
	C3_NONSPACING                  := $1;
	C3_DIACRITIC                   := $2;
	C3_VOWELMARK                   := $4;
	C3_SYMBOL                      := $8;
	C3_NOTAPPLICABLE               := $0;
	NORM_IGNORECASE                := $1;
	NORM_IGNORENONSPACE            := $2;
	NORM_IGNORESYMBOLS             := $4;
	MAP_FOLDCZONE                  := $10;
	MAP_PRECOMPOSED                := $20;
	MAP_COMPOSITE                  := $40;
	MAP_FOLDDIGITS                 := $80;
	LCMAP_LOWERCASE                := $100;
	LCMAP_UPPERCASE                := $200;
	LCMAP_SORTKEY                  := $400;
	LCMAP_BYTEREV                  := $800;
	SORT_STRINGSORT                := $1000;
	CP_ACP                         := 0;
	CP_OEMCP                       := 1;
	CTRY_DEFAULT                   := 0;
	CTRY_AUSTRALIA                 := 61;
	CTRY_AUSTRIA                   := 43;
	CTRY_BELGIUM                   := 32;
	CTRY_BRAZIL                    := 55;
	CTRY_CANADA                    := 2;
	CTRY_DENMARK                   := 45;
	CTRY_FINLAND                   := 358;
	CTRY_FRANCE                    := 33;
	CTRY_GERMANY                   := 49;
	CTRY_ICELAND                   := 354;
	CTRY_IRELAND                   := 353;
	CTRY_ITALY                     := 39;
	CTRY_JAPAN                     := 81;
	CTRY_MEXICO                    := 52;
	CTRY_NETHERLANDS               := 31;
	CTRY_NEW_ZEALAND               := 64;
	CTRY_NORWAY                    := 47;
	CTRY_PORTUGAL                  := 351;
	CTRY_PRCHINA                   := 86;
	CTRY_SOUTH_KOREA               := 82;
	CTRY_SPAIN                     := 34;
	CTRY_SWEDEN                    := 46;
	CTRY_SWITZERLAND               := 41;
	CTRY_TAIWAN                    := 886;
	CTRY_UNITED_KINGDOM            := 44;
	CTRY_UNITED_STATES             := 1;
	LOCALE_NOUSEROVERRIDE          := $80000000;
	LOCALE_USER_DEFAULT            := $0000;
	LOCALE_ILANGUAGE               := $1;
	LOCALE_SLANGUAGE               := $2;
	LOCALE_SENGLANGUAGE            := $1001;
	LOCALE_SABBREVLANGNAME         := $3;
	LOCALE_SNATIVELANGNAME         := $4;
	LOCALE_ICOUNTRY                := $5;
	LOCALE_SCOUNTRY                := $6;
	LOCALE_SENGCOUNTRY             := $1002;
	LOCALE_SABBREVCTRYNAME         := $7;
	LOCALE_SNATIVECTRYNAME         := $8;
	LOCALE_IDEFAULTLANGUAGE        := $9;
	LOCALE_IDEFAULTCOUNTRY         := $0A;
	LOCALE_IDEFAULTCODEPAGE        := $0B;
	LOCALE_SLIST                   := $0C;
	LOCALE_IMEASURE                := $0D;
	LOCALE_SDECIMAL                := $0E;
	LOCALE_STHOUSAND               := $0F;
	LOCALE_SGROUPING               := $10;
	LOCALE_IDIGITS                 := $11;
	LOCALE_ILZERO                  := $12;
	LOCALE_SNATIVEDIGITS           := $13;
	LOCALE_SCURRENCY               := $14;
	LOCALE_SINTLSYMBOL             := $15;
	LOCALE_SMONDECIMALSEP          := $16;
	LOCALE_SMONTHOUSANDSEP         := $17;
	LOCALE_SMONGROUPING            := $18;
	LOCALE_ICURRDIGITS             := $19;
	LOCALE_IINTLCURRDIGITS         := $1A;
	LOCALE_ICURRENCY               := $1B;
	LOCALE_INEGCURR                := $1C;
	LOCALE_SDATE                   := $1D;
	LOCALE_STIME                   := $1E;
	LOCALE_SSHORTDATE              := $1F;
	LOCALE_SLONGDATE               := $20;
	LOCALE_STIMEFORMAT             := $1003;
	LOCALE_IDATE                   := $21;
	LOCALE_ILDATE                  := $22;
	LOCALE_ITIME                   := $23;
	LOCALE_ICENTURY                := $24;
	LOCALE_ITLZERO                 := $25;
	LOCALE_IDAYLZERO               := $26;
	LOCALE_IMONLZERO               := $27;
	LOCALE_S1159                   := $28;
	LOCALE_S2359                   := $29;
	LOCALE_SDAYNAME1               := $2A;
	LOCALE_SDAYNAME2               := $2B;
	LOCALE_SDAYNAME3               := $2C;
	LOCALE_SDAYNAME4               := $2D;
	LOCALE_SDAYNAME5               := $2E;
	LOCALE_SDAYNAME6               := $2F;
	LOCALE_SDAYNAME7               := $30;
	LOCALE_SABBREVDAYNAME1         := $31;
	LOCALE_SABBREVDAYNAME2         := $32;
	LOCALE_SABBREVDAYNAME3         := $33;
	LOCALE_SABBREVDAYNAME4         := $34;
	LOCALE_SABBREVDAYNAME5         := $35;
	LOCALE_SABBREVDAYNAME6         := $36;
	LOCALE_SABBREVDAYNAME7         := $37;
	LOCALE_SMONTHNAME1             := $38;
	LOCALE_SMONTHNAME2             := $39;
	LOCALE_SMONTHNAME3             := $3A;
	LOCALE_SMONTHNAME4             := $3B;
	LOCALE_SMONTHNAME5             := $3C;
	LOCALE_SMONTHNAME6             := $3D;
	LOCALE_SMONTHNAME7             := $3E;
	LOCALE_SMONTHNAME8             := $3F;
	LOCALE_SMONTHNAME9             := $40;
	LOCALE_SMONTHNAME10            := $41;
	LOCALE_SMONTHNAME11            := $42;
	LOCALE_SMONTHNAME12            := $43;
	LOCALE_SABBREVMONTHNAME1       := $44;
	LOCALE_SABBREVMONTHNAME2       := $45;
	LOCALE_SABBREVMONTHNAME3       := $46;
	LOCALE_SABBREVMONTHNAME4       := $47;
	LOCALE_SABBREVMONTHNAME5       := $48;
	LOCALE_SABBREVMONTHNAME6       := $49;
	LOCALE_SABBREVMONTHNAME7       := $4A;
	LOCALE_SABBREVMONTHNAME8       := $4B;
	LOCALE_SABBREVMONTHNAME9       := $4C;
	LOCALE_SABBREVMONTHNAME10      := $4D;
	LOCALE_SABBREVMONTHNAME11      := $4E;
	LOCALE_SABBREVMONTHNAME12      := $4F;
	LOCALE_SABBREVMONTHNAME13      := $100F;
	LOCALE_SPOSITIVESIGN           := $50;
	LOCALE_SNEGATIVESIGN           := $51;
	LOCALE_IPOSSIGNPOSN            := $52;
	LOCALE_INEGSIGNPOSN            := $53;
	LOCALE_IPOSSYMPRECEDES         := $54;
	LOCALE_IPOSSEPBYSPACE          := $55;
	LOCALE_INEGSYMPRECEDES         := $56;
	LOCALE_INEGSEPBYSPACE          := $57;
	TIME_NOMINUTESORSECONDS        := $1;
	TIME_NOSECONDS                 := $2;
	TIME_NOTIMEMARKER              := $4;
	TIME_FORCE24HOURFORMAT         := $8;
	DATE_SHORTDATE                 := $1;
	DATE_LONGDATE                  := $2;
	TF_FORCEDRIVE                  := $80;
	LOCKFILE_FAIL_IMMEDIATELY      := $1;
	LOCKFILE_EXCLUSIVE_LOCK        := $2;
	LNOTIFY_OUTOFMEM               := 0;
	LNOTIFY_MOVE                   := 1;
	LNOTIFY_DISCARD                := 2;
	SLE_ERROR                      := $1;
	SLE_MINORERROR                 := $2;
	SLE_WARNING                    := $3;
	SEM_FAILCRITICALERRORS         := $1;
	SEM_NOGPFAULTERRORBOX          := $2;
	SEM_NOOPENFILEERRORBOX         := $8000;
	RT_CURSOR                      := 1;
	RT_BITMAP                      := 2;
	RT_ICON                        := 3;
	RT_MENU                        := 4;
	RT_DIALOG                      := 5;
	RT_STRING                      := 6;
	RT_FONTDIR                     := 7;
	RT_FONT                        := 8;
	RT_ACCELERATOR                 := 9;
	RT_RCDATA                      := 10;
	DFC_CAPTION                    := 1;
	DFC_MENU                       := 2;
	DFC_SCROLL                     := 3;
	DFC_BUTTON                     := 4;
	DFC_POPUPMENU                  := 5;
	DFCS_CAPTIONCLOSE              := $0000;
	DFCS_CAPTIONMIN                := $0001;
	DFCS_CAPTIONMAX                := $0002;
	DFCS_CAPTIONRESTORE            := $0003;
	DFCS_CAPTIONHELP               := $0004;
	DFCS_MENUARROW                 := $0000;
	DFCS_MENUCHECK                 := $0001;
	DFCS_MENUBULLET                := $0002;
	DFCS_MENUARROWRIGHT            := $0004;
	DFCS_SCROLLUP                  := $0000;
	DFCS_SCROLLDOWN                := $0001;
	DFCS_SCROLLLEFT                := $0002;
	DFCS_SCROLLRIGHT               := $0003;
	DFCS_SCROLLCOMBOBOX            := $0005;
	DFCS_SCROLLSIZEGRIP            := $0008;
	DFCS_SCROLLSIZEGRIPRIGHT       := $0010;
	DFCS_BUTTONCHECK               := $0000;
	DFCS_BUTTONRADIOIMAGE          := $0001;
	DFCS_BUTTONRADIOMASK           := $0002;
	DFCS_BUTTONRADIO               := $0004;
	DFCS_BUTTON3STATE              := $0008;
	DFCS_BUTTONPUSH                := $0010;
	DFCS_INACTIVE                  := $0100;
	DFCS_PUSHED                    := $0200;
	DFCS_CHECKED                   := $0400;
	DFCS_TRANSPARENT               := $0800;
	DFCS_HOT                       := $1000;
	DFCS_ADJUSTRECT                := $2000;
	DFCS_FLAT                      := $4000;
	DFCS_MONO                      := $8000;
	DDD_RAW_TARGET_PATH            := $1;
	DDD_REMOVE_DEFINITION          := $2;
	DDD_EXACT_MATCH_ON_REMOVE      := $4;
	MOVEFILE_REPLACE_EXISTING      := $1;
	MOVEFILE_COPY_ALLOWED          := $2;
	MOVEFILE_DELAY_UNTIL_REBOOT    := $4;
	TokenUser                      := 1;
	TokenGroups                    := 2;
	TokenPrivileges                := 3;
	TokenOwner                     := 4;
	TokenPrimaryGroup              := 5;
	TokenDefaultDacl               := 6;
	TokenSource                    := 7;
	TokenType                      := 8;
	TokenImpersonationLevel        := 9;
	TokenStatistics                := 10;
	TOKEN_ADJUST_PRIVILEGES        := $20;
	GET_TAPE_MEDIA_INFORMATION     := 0;
	GET_TAPE_DRIVE_INFORMATION     := 1;
	SET_TAPE_MEDIA_INFORMATION     := 0;
	SET_TAPE_DRIVE_INFORMATION     := 1;
	FORMAT_MESSAGE_ALLOCATE_BUFFER := $100;
	FORMAT_MESSAGE_IGNORE_INSERTS  := $200;
	FORMAT_MESSAGE_FROM_STRING     := $400;
	FORMAT_MESSAGE_FROM_HMODULE    := $800;
	FORMAT_MESSAGE_FROM_SYSTEM     := $1000;
	FORMAT_MESSAGE_ARGUMENT_ARRAY  := $2000;
	FORMAT_MESSAGE_MAX_WIDTH_MASK  := $0FF;
	TLS_OUT_OF_INDEXES             := $0FFFF;
	BACKUP_DATA                    := $1;
	BACKUP_EA_DATA                 := $2;
	BACKUP_SECURITY_DATA           := $3;
	BACKUP_ALTERNATE_DATA          := $4;
	BACKUP_LINK                    := $5;
	STREAM_MODIFIED_WHEN_READ      := $1;
	STREAM_CONTAINS_SECURITY       := $2;
	STARTF_USESHOWWINDOW           := $1;
	STARTF_USESIZE                 := $2;
	STARTF_USEPOSITION             := $4;
	STARTF_USECOUNTCHARS           := $8;
	STARTF_USEFILLATTRIBUTE        := $10;
	STARTF_RUNFULLSCREEN           := $20;
	STARTF_FORCEONFEEDBACK         := $40;
	STARTF_FORCEOFFFEEDBACK        := $80;
	STARTF_USESTDHANDLES           := $100;
	SHUTDOWN_NORETRY               := $1;
	CAL_ICALINTVALUE               := $1;
	CAL_SCALNAME                   := $2;
	CAL_IYEAROFFSETRANGE           := $3;
	CAL_SERASTRING                 := $4;
	CAL_SSHORTDATE                 := $5;
	CAL_SLONGDATE                  := $6;
	CAL_SDAYNAME1                  := $7;
	CAL_SDAYNAME2                  := $8;
	CAL_SDAYNAME3                  := $9;
	CAL_SDAYNAME4                  := $0A;
	CAL_SDAYNAME5                  := $0B;
	CAL_SDAYNAME6                  := $0C;
	CAL_SDAYNAME7                  := $0D;
	CAL_SABBREVDAYNAME1            := $0E;
	CAL_SABBREVDAYNAME2            := $0F;
	CAL_SABBREVDAYNAME3            := $10;
	CAL_SABBREVDAYNAME4            := $11;
	CAL_SABBREVDAYNAME5            := $12;
	CAL_SABBREVDAYNAME6            := $13;
	CAL_SABBREVDAYNAME7            := $14;
	CAL_SMONTHNAME1                := $15;
	CAL_SMONTHNAME2                := $16;
	CAL_SMONTHNAME3                := $17;
	CAL_SMONTHNAME4                := $18;
	CAL_SMONTHNAME5                := $19;
	CAL_SMONTHNAME6                := $1A;
	CAL_SMONTHNAME7                := $1B;
	CAL_SMONTHNAME8                := $1C;
	CAL_SMONTHNAME9                := $1D;
	CAL_SMONTHNAME10               := $1E;
	CAL_SMONTHNAME11               := $1F;
	CAL_SMONTHNAME12               := $20;
	CAL_SMONTHNAME13               := $21;
	CAL_SABBREVMONTHNAME1          := $22;
	CAL_SABBREVMONTHNAME2          := $23;
	CAL_SABBREVMONTHNAME3          := $24;
	CAL_SABBREVMONTHNAME4          := $25;
	CAL_SABBREVMONTHNAME5          := $26;
	CAL_SABBREVMONTHNAME6          := $27;
	CAL_SABBREVMONTHNAME7          := $28;
	CAL_SABBREVMONTHNAME8          := $29;
	CAL_SABBREVMONTHNAME9          := $2A;
	CAL_SABBREVMONTHNAME10         := $2B;
	CAL_SABBREVMONTHNAME11         := $2C;
	CAL_SABBREVMONTHNAME12         := $2D;
	CAL_SABBREVMONTHNAME13         := $2E;
	ENUM_ALL_CALENDARS             := $0FFFF;
	CAL_GREGORIAN                  := 1;
	CAL_GREGORIAN_US               := 2;
	CAL_JAPAN                      := 3;
	CAL_TAIWAN                     := 4;
	CAL_KOREA                      := 5;
	RIGHT_ALT_PRESSED              := $1;
	LEFT_ALT_PRESSED               := $2;
	RIGHT_CTRL_PRESSED             := $4;
	LEFT_CTRL_PRESSED              := $8;
	SHIFT_PRESSED                  := $10;
	NUMLOCK_ON                     := $20;
	SCROLLLOCK_ON                  := $40;
	CAPSLOCK_ON                    := $80;
	ENHANCED_KEY                   := $100;
	FROM_LEFT_1ST_BUTTON_PRESSED   := $1;
	RIGHTMOST_BUTTON_PRESSED       := $2;
	FROM_LEFT_2ND_BUTTON_PRESSED   := $4;
	FROM_LEFT_3RD_BUTTON_PRESSED   := $8;
	FROM_LEFT_4TH_BUTTON_PRESSED   := $10;
	MOUSE_MOVED                    := $1;
	DOUBLE_CLICK                   := $2;
	KEY_EVENT                      := $1;
	mouse_eventC                   := $2;
	WINDOW_BUFFER_SIZE_EVENT       := $4;
	MENU_EVENT                     := $8;
	FOCUS_EVENT                    := $10;
	FOREGROUND_BLUE                := $1;
	FOREGROUND_GREEN               := $2;
	FOREGROUND_RED                 := $4;
	FOREGROUND_INTENSITY           := $8;
	BACKGROUND_BLUE                := $10;
	BACKGROUND_GREEN               := $20;
	BACKGROUND_RED                 := $40;
	BACKGROUND_INTENSITY           := $80;
	CTRL_C_EVENT                   := 0;
	CTRL_BREAK_EVENT               := 1;
	CTRL_CLOSE_EVENT               := 2;
	CTRL_LOGOFF_EVENT              := 5;
	CTRL_SHUTDOWN_EVENT            := 6;
	ENABLE_PROCESSED_INPUT         := $1;
	ENABLE_LINE_INPUT              := $2;
	ENABLE_ECHO_INPUT              := $4;
	ENABLE_WINDOW_INPUT            := $8;
	ENABLE_MOUSE_INPUT             := $10;
	ENABLE_PROCESSED_OUTPUT        := $1;
	ENABLE_WRAP_AT_EOL_OUTPUT      := $2;
	CONSOLE_TEXTMODE_BUFFER        := 1;
	R2_BLACK                       := 1;
	R2_NOTMERGEPEN                 := 2;
	R2_MASKNOTPEN                  := 3;
	R2_NOTCOPYPEN                  := 4;
	R2_MASKPENNOT                  := 5;
	R2_NOT                         := 6;
	R2_XORPEN                      := 7;
	R2_NOTMASKPEN                  := 8;
	R2_MASKPEN                     := 9;
	R2_NOTXORPEN                   := 10;
	R2_NOP                         := 11;
	R2_MERGENOTPEN                 := 12;
	R2_COPYPEN                     := 13;
	R2_MERGEPENNOT                 := 14;
	R2_MERGEPEN                    := 15;
	R2_WHITE                       := 16;
	R2_LAST                        := 16;
	SRCCOPY                        := $0CC0020;
	SRCPAINT                       := $0EE0086;
	SRCAND                         := $8800C6;
	SRCINVERT                      := $660046;
	SRCERASE                       := $440328;
	NOTSRCCOPY                     := $330008;
	NOTSRCERASE                    := $1100A6;
	MERGECOPY                      := $0C000CA;
	MERGEPAINT                     := $0BB0226;
	PATCOPY                        := $0F00021;
	PATPAINT                       := $0FB0A09;
	PATINVERT                      := $5A0049;
	DSTINVERT                      := $550009;
	BLACKNESS                      := $42;
	WHITENESS                      := $0FF0062;
	GDI_ERROR                      := -1;
	HGDI_ERROR                     := -1;
	ERRORAPI                       := 0;
	NULLREGION                     := 1;
	SIMPLEREGION                   := 2;
	COMPLEXREGION                  := 3;
	RGN_AND                        := 1;
	RGN_OR                         := 2;
	RGN_XOR                        := 3;
	RGN_DIFF                       := 4;
	RGN_COPY                       := 5;
	RGN_MIN                        :=  RGN_AND;
	RGN_MAX                        :=  RGN_COPY;
	BLACKONWHITE                   := 1;
	WHITEONBLACK                   := 2;
	COLORONCOLOR                   := 3;
	HALFTONE                       := 4;
	MAXSTRETCHBLTMODE              := 4;
	ALTERNATE                      := 1;
	WINDING                        := 2;
	POLYFILL_LAST                  := 2;
	TA_NOUPDATECP                  := 0;
	TA_UPDATECP                    := 1;
	TA_LEFT                        := 0;
	TA_RIGHT                       := 2;
	TA_CENTER                      := 6;
	TA_TOP                         := 0;
	TA_BOTTOM                      := 8;
	TA_BASELINE                    := 24;
	TA_MASK                        :=  TA_BASELINE + TA_CENTER + TA_UPDATECP;
	VTA_BASELINE                   :=  TA_BASELINE;
	VTA_LEFT                       :=  TA_BOTTOM;
	VTA_RIGHT                      :=  TA_TOP;
	VTA_CENTER                     :=  TA_CENTER;
	VTA_BOTTOM                     :=  TA_RIGHT;
	VTA_TOP                        :=  TA_LEFT;
	ETO_GRAYED                     := 1;
	ETO_OPAQUE                     := 2;
	ETO_CLIPPED                    := 4;
	ASPECT_FILTERING               := $1;
	DCB_RESET                      := $1;
	DCB_ACCUMULATE                 := $2;
	DCB_DIRTY                      :=  DCB_ACCUMULATE;
	DCB_SET                        :=  DCB_RESET | DCB_ACCUMULATE;
	DCB_ENABLE                     := $4;
	DCB_DISABLE                    := $8;
	META_SETBKCOLOR                := $201;
	META_SETBKMODE                 := $102;
	META_SETMAPMODE                := $103;
	META_SETROP2                   := $104;
	META_SETRELABS                 := $105;
	META_SETPOLYFILLMODE           := $106;
	META_SETSTRETCHBLTMODE         := $107;
	META_SETTEXTCHAREXTRA          := $108;
	META_SETTEXTCOLOR              := $209;
	META_SETTEXTJUSTIFICATION      := $20A;
	META_SETWINDOWORG              := $20B;
	META_SETWINDOWEXT              := $20C;
	META_SETVIEWPORTORG            := $20D;
	META_SETVIEWPORTEXT            := $20E;
	META_OFFSETWINDOWORG           := $20F;
	META_SCALEWINDOWEXT            := $410;
	META_OFFSETVIEWPORTORG         := $211;
	META_SCALEVIEWPORTEXT          := $412;
	META_LINETO                    := $213;
	META_MOVETO                    := $214;
	META_EXCLUDECLIPRECT           := $415;
	META_INTERSECTCLIPRECT         := $416;
	META_ARC                       := $817;
	META_ELLIPSE                   := $418;
	META_FLOODFILL                 := $419;
	META_PIE                       := $81A;
	META_RECTANGLE                 := $41B;
	META_ROUNDRECT                 := $61C;
	META_PATBLT                    := $61D;
	META_SAVEDC                    := $1E;
	META_SETPIXEL                  := $41F;
	META_OFFSETCLIPRGN             := $220;
	META_TEXTOUT                   := $521;
	META_BITBLT                    := $922;
	META_STRETCHBLT                := $0B23;
	META_POLYGON                   := $324;
	META_POLYLINE                  := $325;
	META_ESCAPE                    := $626;
	META_RESTOREDC                 := $127;
	META_FILLREGION                := $228;
	META_FRAMEREGION               := $429;
	META_INVERTREGION              := $12A;
	META_PAINTREGION               := $12B;
	META_SELECTCLIPREGION          := $12C;
	META_SELECTOBJECT              := $12D;
	META_SETTEXTALIGN              := $12E;
	META_CHORD                     := $830;
	META_SETMAPPERFLAGS            := $231;
	META_EXTTEXTOUT                := $0A32;
	META_SETDIBTODEV               := $0D33;
	META_SELECTPALETTE             := $234;
	META_REALIZEPALETTE            := $35;
	META_ANIMATEPALETTE            := $436;
	META_SETPALENTRIES             := $37;
	META_POLYPOLYGON               := $538;
	META_RESIZEPALETTE             := $139;
	META_DIBBITBLT                 := $940;
	META_DIBSTRETCHBLT             := $0B41;
	META_DIBCREATEPATTERNBRUSH     := $142;
	META_STRETCHDIB                := $0F43;
	META_EXTFLOODFILL              := $548;
	META_DELETEOBJECT              := $1F0;
	META_CREATEPALETTE             := $0F7;
	META_CREATEPATTERNBRUSH        := $1F9;
	META_CREATEPENINDIRECT         := $2FA;
	META_CREATEFONTINDIRECT        := $2FB;
	META_CREATEBRUSHINDIRECT       := $2FC;
	META_CREATEREGION              := $6FF;
	NEWFRAME                       := 1;
	AbortDocC                      := 2;
	NEXTBAND                       := 3;
	SETCOLORTABLE                  := 4;
	GETCOLORTABLE                  := 5;
	FLUSHOUTPUT                    := 6;
	DRAFTMODE                      := 7;
	QUERYESCSUPPORT                := 8;
	SETABORTPROC                   := 9;
	StartDocC                      := 10;
	EndDocC                        := 11;
	GETPHYSPAGESIZE                := 12;
	GETPRINTINGOFFSET              := 13;
	GETSCALINGFACTOR               := 14;
	MFCOMMENT                      := 15;
	GETPENWIDTH                    := 16;
	SETCOPYCOUNT                   := 17;
	SELECTPAPERSOURCE              := 18;
	DEVICEDATA                     := 19;
	PASSTHROUGH                    := 19;
	GETTECHNOLGY                   := 20;
	GETTECHNOLOGY                  := 20;
	SETLINECAP                     := 21;
	SETLINEJOIN                    := 22;
	SetMiterLimitC                 := 23;
	BANDINFO                       := 24;
	DRAWPATTERNRECT                := 25;
	GETVECTORPENSIZE               := 26;
	GETVECTORBRUSHSIZE             := 27;
	ENABLEDUPLEX                   := 28;
	GETSETPAPERBINS                := 29;
	GETSETPRINTORIENT              := 30;
	ENUMPAPERBINS                  := 31;
	SETDIBSCALING                  := 32;
	EPSPRINTING                    := 33;
	ENUMPAPERMETRICS               := 34;
	GETSETPAPERMETRICS             := 35;
	POSTSCRIPT_DATA                := 37;
	POSTSCRIPT_IGNORE              := 38;
	MOUSETRAILS                    := 39;
	GETDEVICEUNITS                 := 42;
	GETEXTENDEDTEXTMETRICS         := 256;
	GETEXTENTTABLE                 := 257;
	GETPAIRKERNTABLE               := 258;
	GETTRACKKERNTABLE              := 259;
	ExtTextOutC                    := 512;
	GETFACENAME                    := 513;
	DOWNLOADFACE                   := 514;
	ENABLERELATIVEWIDTHS           := 768;
	ENABLEPAIRKERNING              := 769;
	SETKERNTRACK                   := 770;
	SETALLJUSTVALUES               := 771;
	SETCHARSET                     := 772;
	StretchBltC                    := 2048;
	GETSETSCREENPARAMS             := 3072;
	BEGIN_PATH                     := 4096;
	CLIP_TO_PATH                   := 4097;
	END_PATH                       := 4098;
	EXT_DEVICE_CAPS                := 4099;
	RESTORE_CTM                    := 4100;
	SAVE_CTM                       := 4101;
	SET_ARC_DIRECTION              := 4102;
	SET_BACKGROUND_COLOR           := 4103;
	SET_POLY_MODE                  := 4104;
	SET_SCREEN_ANGLE               := 4105;
	SET_SPREAD                     := 4106;
	TRANSFORM_CTM                  := 4107;
	SET_CLIP_BOX                   := 4108;
	SET_BOUNDS                     := 4109;
	SET_MIRROR_MODE                := 4110;
	OPENCHANNEL                    := 4110;
	DOWNLOADHEADER                 := 4111;
	CLOSECHANNEL                   := 4112;
	POSTSCRIPT_PASSTHROUGH         := 4115;
	ENCAPSULATED_POSTSCRIPT        := 4116;
	SP_NOTREPORTED                 := $4000;
	SP_ERROR                       := 1;
	SP_APPABORT                    := 2;
	SP_USERABORT                   := 3;
	SP_OUTOFDISK                   := 4;
	SP_OUTOFMEMORY                 := 5;
	PR_JOBSTATUS                   := $0;
	OBJ_PEN                        := 1;
	OBJ_BRUSH                      := 2;
	OBJ_DC                         := 3;
	OBJ_METADC                     := 4;
	OBJ_PAL                        := 5;
	OBJ_FONT                       := 6;
	OBJ_BITMAP                     := 7;
	OBJ_REGION                     := 8;
	OBJ_METAFILE                   := 9;
	OBJ_MEMDC                      := 10;
	OBJ_EXTPEN                     := 11;
	OBJ_ENHMETADC                  := 12;
	OBJ_ENHMETAFILE                := 13;
	MWT_IDENTITY                   := 1;
	MWT_LEFTMULTIPLY               := 2;
	MWT_RIGHTMULTIPLY              := 3;
	MWT_MIN                        :=  MWT_IDENTITY;
	MWT_MAX                        :=  MWT_RIGHTMULTIPLY;
	BI_RGB                         := 0;
	BI_RLE8                        := 1;
	BI_RLE4                        := 2;
	BI_bitfields                   := 3;
	NTM_REGULAR                    := $40;
	NTM_BOLD                       := $20;
	NTM_ITALIC                     := $1;
	TMPF_FIXED_PITCH               := $1;
	TMPF_VECTOR                    := $2;
	TMPF_DEVICE                    := $8;
	TMPF_TRUETYPE                  := $4;
	OUT_DEFAULT_PRECIS             := 0;
	OUT_STRING_PRECIS              := 1;
	OUT_CHARACTER_PRECIS           := 2;
	OUT_STROKE_PRECIS              := 3;
	OUT_TT_PRECIS                  := 4;
	OUT_DEVICE_PRECIS              := 5;
	OUT_RASTER_PRECIS              := 6;
	OUT_TT_ONLY_PRECIS             := 7;
	OUT_OUTLINE_PRECIS             := 8;
	CLIP_DEFAULT_PRECIS            := 0;
	CLIP_CHARACTER_PRECIS          := 1;
	CLIP_STROKE_PRECIS             := 2;
	CLIP_MASK                      := $0F;
	CLIP_LH_ANGLES                 := 16;
	CLIP_TT_ALWAYS                 := 32;
	CLIP_EMBEDDED                  := 128;
	DEFAULT_QUALITY                := 0;
	DRAFT_QUALITY                  := 1;
	PROOF_QUALITY                  := 2;
	DEFAULT_PITCH                  := 0;
	FIXED_PITCH                    := 1;
	VARIABLE_PITCH                 := 2;
	ANSI_CHARSET                   := 0;
	DEFAULT_CHARSET                := 1;
	SYMBOL_CHARSET                 := 2;
	SHIFTJIS_CHARSET               := 128;
	HANGEUL_CHARSET                := 129;
	CHINESEBIG5_CHARSET            := 136;
	OEM_CHARSET                    := 255;
	FF_DONTCARE                    := 0;
	FF_ROMAN                       := 16;
	FF_SWISS                       := 32;
	FF_MODERN                      := 48;
	FF_SCRIPT                      := 64;
	FF_DECORATIVE                  := 80;
	FW_DONTCARE                    := 0;
	FW_THIN                        := 100;
	FW_EXTRALIGHT                  := 200;
	FW_LIGHT                       := 300;
	FW_NORMAL                      := 400;
	FW_MEDIUM                      := 500;
	FW_SEMIBOLD                    := 600;
	FW_BOLD                        := 700;
	FW_EXTRABOLD                   := 800;
	FW_HEAVY                       := 900;
	FW_ULTRALIGHT                  :=  FW_EXTRALIGHT;
	FW_REGULAR                     :=  FW_NORMAL;
	FW_DEMIBOLD                    :=  FW_SEMIBOLD;
	FW_ULTRABOLD                   :=  FW_EXTRABOLD;
	FW_BLACK                       :=  FW_HEAVY;
	PANOSE_COUNT                   := 10;
	PAN_FAMILYTYPE_INDEX           := 0;
	PAN_SERIFSTYLE_INDEX           := 1;
	PAN_WEIGHT_INDEX               := 2;
	PAN_PROPORTION_INDEX           := 3;
	PAN_CONTRAST_INDEX             := 4;
	PAN_STROKEVARIATION_INDEX      := 5;
	PAN_ARMSTYLE_INDEX             := 6;
	PAN_LETTERFORM_INDEX           := 7;
	PAN_MIDLINE_INDEX              := 8;
	PAN_XHEIGHT_INDEX              := 9;
	PAN_CULTURE_LATIN              := 0;
	PAN_ANY                        := 0;
	PAN_NO_FIT                     := 1;
	PAN_FAMILY_TEXT_DISPLAY        := 2;
	PAN_FAMILY_SCRIPT              := 3;
	PAN_FAMILY_DECORATIVE          := 4;
	PAN_FAMILY_PICTORIAL           := 5;
	PAN_SERIF_COVE                 := 2;
	PAN_SERIF_OBTUSE_COVE          := 3;
	PAN_SERIF_SQUARE_COVE          := 4;
	PAN_SERIF_OBTUSE_SQUARE_COVE   := 5;
	PAN_SERIF_SQUARE               := 6;
	PAN_SERIF_THIN                 := 7;
	PAN_SERIF_BONE                 := 8;
	PAN_SERIF_EXAGGERATED          := 9;
	PAN_SERIF_TRIANGLE             := 10;
	PAN_SERIF_NORMAL_SANS          := 11;
	PAN_SERIF_OBTUSE_SANS          := 12;
	PAN_SERIF_PERP_SANS            := 13;
	PAN_SERIF_FLARED               := 14;
	PAN_SERIF_ROUNDED              := 15;
	PAN_WEIGHT_VERY_LIGHT          := 2;
	PAN_WEIGHT_LIGHT               := 3;
	PAN_WEIGHT_THIN                := 4;
	PAN_WEIGHT_BOOK                := 5;
	PAN_WEIGHT_MEDIUM              := 6;
	PAN_WEIGHT_DEMI                := 7;
	PAN_WEIGHT_BOLD                := 8;
	PAN_WEIGHT_HEAVY               := 9;
	PAN_WEIGHT_BLACK               := 10;
	PAN_WEIGHT_NORD                := 11;
	PAN_PROP_OLD_STYLE             := 2;
	PAN_PROP_MODERN                := 3;
	PAN_PROP_EVEN_WIDTH            := 4;
	PAN_PROP_EXPANDED              := 5;
	PAN_PROP_CONDENSED             := 6;
	PAN_PROP_VERY_EXPANDED         := 7;
	PAN_PROP_VERY_CONDENSED        := 8;
	PAN_PROP_MONOSPACED            := 9;
	PAN_CONTRAST_NONE              := 2;
	PAN_CONTRAST_VERY_LOW          := 3;
	PAN_CONTRAST_LOW               := 4;
	PAN_CONTRAST_MEDIUM_LOW        := 5;
	PAN_CONTRAST_MEDIUM            := 6;
	PAN_CONTRAST_MEDIUM_HIGH       := 7;
	PAN_CONTRAST_HIGH              := 8;
	PAN_CONTRAST_VERY_HIGH         := 9;
	PAN_STROKE_GRADUAL_DIAG        := 2;
	PAN_STROKE_GRADUAL_TRAN        := 3;
	PAN_STROKE_GRADUAL_VERT        := 4;
	PAN_STROKE_GRADUAL_HORZ        := 5;
	PAN_STROKE_RAPID_VERT          := 6;
	PAN_STROKE_RAPID_HORZ          := 7;
	PAN_STROKE_INSTANT_VERT        := 8;
	PAN_STRAIGHT_ARMS_HORZ         := 2;
	PAN_STRAIGHT_ARMS_WEDGE        := 3;
	PAN_STRAIGHT_ARMS_VERT         := 4;
	PAN_STRAIGHT_ARMS_SINGLE_SERIF := 5;
	PAN_STRAIGHT_ARMS_DOUBLE_SERIF := 6;
	PAN_BENT_ARMS_HORZ             := 7;
	PAN_BENT_ARMS_WEDGE            := 8;
	PAN_BENT_ARMS_VERT             := 9;
	PAN_BENT_ARMS_SINGLE_SERIF     := 10;
	PAN_BENT_ARMS_DOUBLE_SERIF     := 11;
	PAN_LETT_NORMAL_CONTACT        := 2;
	PAN_LETT_NORMAL_WEIGHTED       := 3;
	PAN_LETT_NORMAL_BOXED          := 4;
	PAN_LETT_NORMAL_FLATTENED      := 5;
	PAN_LETT_NORMAL_ROUNDED        := 6;
	PAN_LETT_NORMAL_OFF_CENTER     := 7;
	PAN_LETT_NORMAL_SQUARE         := 8;
	PAN_LETT_OBLIQUE_CONTACT       := 9;
	PAN_LETT_OBLIQUE_WEIGHTED      := 10;
	PAN_LETT_OBLIQUE_BOXED         := 11;
	PAN_LETT_OBLIQUE_FLATTENED     := 12;
	PAN_LETT_OBLIQUE_ROUNDED       := 13;
	PAN_LETT_OBLIQUE_OFF_CENTER    := 14;
	PAN_LETT_OBLIQUE_SQUARE        := 15;
	PAN_MIDLINE_STANDARD_TRIMMED   := 2;
	PAN_MIDLINE_STANDARD_POINTED   := 3;
	PAN_MIDLINE_STANDARD_SERIFED   := 4;
	PAN_MIDLINE_HIGH_TRIMMED       := 5;
	PAN_MIDLINE_HIGH_POINTED       := 6;
	PAN_MIDLINE_HIGH_SERIFED       := 7;
	PAN_MIDLINE_CONSTANT_TRIMMED   := 8;
	PAN_MIDLINE_CONSTANT_POINTED   := 9;
	PAN_MIDLINE_CONSTANT_SERIFED   := 10;
	PAN_MIDLINE_LOW_TRIMMED        := 11;
	PAN_MIDLINE_LOW_POINTED        := 12;
	PAN_MIDLINE_LOW_SERIFED        := 13;
	PAN_XHEIGHT_CONSTANT_SMALL     := 2;
	PAN_XHEIGHT_CONSTANT_STD       := 3;
	PAN_XHEIGHT_CONSTANT_LARGE     := 4;
	PAN_XHEIGHT_DUCKING_SMALL      := 5;
	PAN_XHEIGHT_DUCKING_STD        := 6;
	PAN_XHEIGHT_DUCKING_LARGE      := 7;
	RASTER_FONTTYPE                := $1;
	DEVICE_FONTTYPE                := $2;
	TRUETYPE_FONTTYPE              := $4;
	PC_RESERVED                    := $1;
	PC_EXPLICIT                    := $2;
	PC_NOCOLLAPSE                  := $4;
	TRANSPARENT                    := 1;
	OPAQUE                         := 2;
	BKMODE_LAST                    := 2;
	GM_COMPATIBLE                  := 1;
	GM_ADVANCED                    := 2;
	GM_LAST                        := 2;
	PT_CLOSEFIGURE                 := $1;
	PT_LINETO                      := $2;
	PT_BEZIERTO                    := $4;
	PT_MOVETO                      := $6;
	MM_TEXT                        := 1;
	MM_LOMETRIC                    := 2;
	MM_HIMETRIC                    := 3;
	MM_LOENGLISH                   := 4;
	MM_HIENGLISH                   := 5;
	MM_TWIPS                       := 6;
	MM_ISOTROPIC                   := 7;
	MM_ANISOTROPIC                 := 8;
	MM_MIN                         :=  MM_TEXT;
	MM_MAX                         :=  MM_ANISOTROPIC;
	MM_MAX_FIXEDSCALE              :=  MM_TWIPS;
	ABSOLUTE                       := 1;
	RELATIVE                       := 2;
	WHITE_BRUSH                    := 0;
	LTGRAY_BRUSH                   := 1;
	GRAY_BRUSH                     := 2;
	DKGRAY_BRUSH                   := 3;
	BLACK_BRUSH                    := 4;
	NULL_BRUSH                     := 5;
	HOLLOW_BRUSH                   :=  NULL_BRUSH;
	WHITE_PEN                      := 6;
	BLACK_PEN                      := 7;
	NULL_PEN                       := 8;
	OEM_FIXED_FONT                 := 10;
	ANSI_FIXED_FONT                := 11;
	ANSI_VAR_FONT                  := 12;
	SYSTEM_FONT                    := 13;
	DEVICE_DEFAULT_FONT            := 14;
	DEFAULT_PALETTE                := 15;
	SYSTEM_FIXED_FONT              := 16;
	STOCK_LAST                     := 16;
	CLR_INVALID                    := $0FFFF;
	BS_SOLID                       := 0;
	BS_NULL                        := 1;
	BS_HOLLOW                      :=  0;
	BS_HATCHED                     := 2;
	BS_PATTERN                     := 3;
	BS_INDEXED                     := 4;
	BS_DIBPATTERN                  := 5;
	BS_DIBPATTERNPT                := 6;
	BS_PATTERN8X8                  := 7;
	BS_DIBPATTERN8X8               := 8;
	HS_HORIZONTAL                  := 0;
	HS_VERTICAL                    := 1;
	HS_FDIAGONAL                   := 2;
	HS_BDIAGONAL                   := 3;
	HS_CROSS                       := 4;
	HS_DIAGCROSS                   := 5;
	HS_FDIAGONAL1                  := 6;
	HS_BDIAGONAL1                  := 7;
	HS_SOLID                       := 8;
	HS_DENSE1                      := 9;
	HS_DENSE2                      := 10;
	HS_DENSE3                      := 11;
	HS_DENSE4                      := 12;
	HS_DENSE5                      := 13;
	HS_DENSE6                      := 14;
	HS_DENSE7                      := 15;
	HS_DENSE8                      := 16;
	HS_NOSHADE                     := 17;
	HS_HALFTONE                    := 18;
	HS_SOLIDCLR                    := 19;
	HS_DITHEREDCLR                 := 20;
	HS_SOLIDTEXTCLR                := 21;
	HS_DITHEREDTEXTCLR             := 22;
	HS_SOLIDBKCLR                  := 23;
	HS_DITHEREDBKCLR               := 24;
	HS_API_MAX                     := 25;
	PS_SOLID                       := 0;
	PS_DASH                        := 1;
	PS_DOT                         := 2;
	PS_DASHDOT                     := 3;
	PS_DASHDOTDOT                  := 4;
	PS_NULL                        := 5;
	PS_INSIDEFRAME                 := 6;
	PS_USERSTYLE                   := 7;
	PS_ALTERNATE                   := 8;
	PS_STYLE_MASK                  := $0F;
	PS_ENDCAP_ROUND                := $0;
	PS_ENDCAP_SQUARE               := $100;
	PS_ENDCAP_FLAT                 := $200;
	PS_ENDCAP_MASK                 := $0F00;
	PS_JOIN_ROUND                  := $0;
	PS_JOIN_BEVEL                  := $1000;
	PS_JOIN_MITER                  := $2000;
	PS_JOIN_MASK                   := $0F000;
	PS_COSMETIC                    := $0;
	PS_GEOMETRIC                   := $10000;
	PS_TYPE_MASK                   := $F0000;
	AD_COUNTERCLOCKWISE            := 1;
	AD_CLOCKWISE                   := 2;
	PRF_CHECKVISIBLE               := $00000001;
	PRF_NONCLIENT                  := $00000002;
	PRF_CLIENT                     := $00000004;
	PRF_ERASEBKGND                 := $00000008;
	PRF_CHILDREN                   := $00000010;
	PRF_OWNED                      := $00000020;
	BDR_RAISEDOUTER                := $0001;
	BDR_SUNKENOUTER                := $0002;
	BDR_RAISEDINNER                := $0004;
	BDR_SUNKENINNER                := $0008;
	BDR_OUTER                      := $0003;
	BDR_INNER                      := $000C;
	BDR_RAISED                     := $0005;
	BDR_SUNKEN                     := $000A;
	EDGE_RAISED                    :=  BDR_RAISEDOUTER | BDR_RAISEDINNER;
	EDGE_SUNKEN                    :=  BDR_SUNKENOUTER | BDR_SUNKENINNER;
	EDGE_ETCHED                    :=  BDR_SUNKENOUTER | BDR_RAISEDINNER;
	EDGE_BUMP                      :=  BDR_RAISEDOUTER | BDR_SUNKENINNER;
	BF_LEFT                        := $0001;
	BF_TOP                         := $0002;
	BF_RIGHT                       := $0004;
	BF_BOTTOM                      := $0008;
	BF_TOPLEFT                     :=  BF_TOP | BF_LEFT;
	BF_TOPRIGHT                    :=  BF_TOP | BF_RIGHT;
	BF_BOTTOMLEFT                  :=  BF_BOTTOM | BF_LEFT;
	BF_BOTTOMRIGHT                 :=  BF_BOTTOM | BF_RIGHT;
	BF_RECT                        :=  BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM;
	BF_DIAGONAL                    := $0010;
	BF_DIAGONAL_ENDTOPRIGHT        :=  BF_DIAGONAL | BF_TOP | BF_RIGHT;
	BF_DIAGONAL_ENDTOPLEFT         :=  BF_DIAGONAL | BF_TOP | BF_LEFT;
	BF_DIAGONAL_ENDBOTTOMLEFT      :=  BF_DIAGONAL | BF_BOTTOM | BF_LEFT;
	BF_DIAGONAL_ENDBOTTOMRIGHT     :=  BF_DIAGONAL | BF_BOTTOM | BF_RIGHT;
	BF_MIDDLE                      := $0800;
	BF_SOFT                        := $1000;
	BF_ADJUST                      := $2000;
	BF_FLAT                        := $4000;
	BF_MONO                        := $8000;
	DRIVERVERSION                  := 0;
	TECHNOLOGY                     := 2;
	HORZSIZE                       := 4;
	VERTSIZE                       := 6;
	HORZRES                        := 8;
	VERTRES                        := 10;
	BITSPIXEL                      := 12;
	PLANES                         := 14;
	NUMBRUSHES                     := 16;
	NUMPENS                        := 18;
	NUMMARKERS                     := 20;
	NUMFONTS                       := 22;
	NUMCOLORS                      := 24;
	PDEVICESIZE                    := 26;
	CURVECAPS                      := 28;
	LINECAPS                       := 30;
	POLYGONALCAPS                  := 32;
	TEXTCAPS                       := 34;
	CLIPCAPS                       := 36;
	RASTERCAPS                     := 38;
	ASPECTX                        := 40;
	ASPECTY                        := 42;
	ASPECTXY                       := 44;
	LOGPIXELSX                     := 88;
	LOGPIXELSY                     := 90;
	SIZEPALETTE                    := 104;
	NUMRESERVED                    := 106;
	COLORRES                       := 108;
	PHYSICALWIDTH                  := 110;
	PHYSICALHEIGHT                 := 111;
	PHYSICALOFFSETX                := 112;
	PHYSICALOFFSETY                := 113;
	SCALINGFACTORX                 := 114;
	SCALINGFACTORY                 := 115;
	DT_PLOTTER                     := 0;
	DT_RASDISPLAY                  := 1;
	DT_RASPRINTER                  := 2;
	DT_RASCAMERA                   := 3;
	DT_CHARSTREAM                  := 4;
	DT_METAFILE                    := 5;
	DT_DISPFILE                    := 6;
	CC_NONE                        := 0;
	CC_CIRCLES                     := 1;
	CC_PIE                         := 2;
	CC_CHORD                       := 4;
	CC_ELLIPSES                    := 8;
	CC_WIDE                        := 16;
	CC_STYLED                      := 32;
	CC_WIDESTYLED                  := 64;
	CC_INTERIORS                   := 128;
	CC_ROUNDRECT                   := 256;
	LC_NONE                        := 0;
	LC_POLYLINE                    := 2;
	LC_MARKER                      := 4;
	LC_POLYMARKER                  := 8;
	LC_WIDE                        := 16;
	LC_STYLED                      := 32;
	LC_WIDESTYLED                  := 64;
	LC_INTERIORS                   := 128;
	PC_NONE                        := 0;
	PC_POLYGON                     := 1;
	PC_RECTANGLE                   := 2;
	PC_WINDPOLYGON                 := 4;
	PC_TRAPEZOID                   := 4;
	PC_SCANLINE                    := 8;
	PC_WIDE                        := 16;
	PC_STYLED                      := 32;
	PC_WIDESTYLED                  := 64;
	PC_INTERIORS                   := 128;
	CP_NONE                        := 0;
	CP_RECTANGLE                   := 1;
	CP_REGION                      := 2;
	TC_OP_CHARACTER                := $1;
	TC_OP_STROKE                   := $2;
	TC_CP_STROKE                   := $4;
	TC_CR_90                       := $8;
	TC_CR_ANY                      := $10;
	TC_SF_X_YINDEP                 := $20;
	TC_SA_DOUBLE                   := $40;
	TC_SA_INTEGER                  := $80;
	TC_SA_CONTIN                   := $100;
	TC_EA_DOUBLE                   := $200;
	TC_IA_ABLE                     := $400;
	TC_UA_ABLE                     := $800;
	TC_SO_ABLE                     := $1000;
	TC_RA_ABLE                     := $2000;
	TC_VA_ABLE                     := $4000;
	TC_RESERVED                    := $8000;
	TC_SCROLLBLT                   := $10000;
	RC_NONE                        := 0;
	RC_BITBLT                      := 1;
	RC_BANDING                     := 2;
	RC_SCALING                     := 4;
	RC_BITMAP64                    := 8;
	RC_GDI20_OUTPUT                := $10;
	RC_GDI20_STATE                 := $20;
	RC_SAVEBITMAP                  := $40;
	RC_DI_BITMAP                   := $80;
	RC_PALETTE                     := $100;
	RC_DIBTODEV                    := $200;
	RC_BIGFONT                     := $400;
	RC_STRETCHBLT                  := $800;
	RC_FLOODFILL                   := $1000;
	RC_STRETCHDIB                  := $2000;
	RC_OP_DX_OUTPUT                := $4000;
	RC_DEVBITS                     := $8000;
	DIB_RGB_COLORS                 := 0;
	DIB_PAL_COLORS                 := 1;
	DIB_PAL_INDICES                := 2;
	DIB_PAL_PHYSINDICES            := 2;
	DIB_PAL_LOGINDICES             := 4;
	SYSPAL_ERROR                   := 0;
	SYSPAL_STATIC                  := 1;
	SYSPAL_NOSTATIC                := 2;
	CBM_CREATEDIB                  := $2;
	CBM_INIT                       := $4;
	FLOODFILLBORDER                := 0;
	FLOODFILLSURFACE               := 1;
	DM_SPECVERSION                 := $320;
	DM_ORIENTATION                 := $1;
	DM_PAPERSIZE                   := $2;
	DM_PAPERLENGTH                 := $4;
	DM_PAPERWIDTH                  := $8;
	DM_SCALE                       := $10;
	DM_COPIES                      := $100;
	DM_DEFAULTSOURCE               := $200;
	DM_PRINTQUALITY                := $400;
	DM_COLOR                       := $800;
	DM_DUPLEX                      := $1000;
	DM_YRESOLUTION                 := $2000;
	DM_TTOPTION                    := $4000;
	DM_COLLATE                     := $8000;
	DM_FORMNAME                    := $10000;
	DMORIENT_PORTRAIT              := 1;
	DMORIENT_LANDSCAPE             := 2;
	DMPAPER_LETTER                 := 1;
	DMPAPER_FIRST                  :=  DMPAPER_LETTER;
	DMPAPER_LETTERSMALL            := 2;
	DMPAPER_TABLOID                := 3;
	DMPAPER_LEDGER                 := 4;
	DMPAPER_LEGAL                  := 5;
	DMPAPER_STATEMENT              := 6;
	DMPAPER_EXECUTIVE              := 7;
	DMPAPER_A3                     := 8;
	DMPAPER_A4                     := 9;
	DMPAPER_A4SMALL                := 10;
	DMPAPER_A5                     := 11;
	DMPAPER_B4                     := 12;
	DMPAPER_B5                     := 13;
	DMPAPER_FOLIO                  := 14;
	DMPAPER_QUARTO                 := 15;
	DMPAPER_10X14                  := 16;
	DMPAPER_11X17                  := 17;
	DMPAPER_NOTE                   := 18;
	DMPAPER_ENV_9                  := 19;
	DMPAPER_ENV_10                 := 20;
	DMPAPER_ENV_11                 := 21;
	DMPAPER_ENV_12                 := 22;
	DMPAPER_ENV_14                 := 23;
	DMPAPER_CSHEET                 := 24;
	DMPAPER_DSHEET                 := 25;
	DMPAPER_ESHEET                 := 26;
	DMPAPER_ENV_DL                 := 27;
	DMPAPER_ENV_C5                 := 28;
	DMPAPER_ENV_C3                 := 29;
	DMPAPER_ENV_C4                 := 30;
	DMPAPER_ENV_C6                 := 31;
	DMPAPER_ENV_C65                := 32;
	DMPAPER_ENV_B4                 := 33;
	DMPAPER_ENV_B5                 := 34;
	DMPAPER_ENV_B6                 := 35;
	DMPAPER_ENV_ITALY              := 36;
	DMPAPER_ENV_MONARCH            := 37;
	DMPAPER_ENV_PERSONAL           := 38;
	DMPAPER_FANFOLD_US             := 39;
	DMPAPER_FANFOLD_STD_GERMAN     := 40;
	DMPAPER_FANFOLD_LGL_GERMAN     := 41;
	DMPAPER_LAST                   :=  DMPAPER_FANFOLD_LGL_GERMAN;
	DMPAPER_USER                   := 256;
	DMBIN_UPPER                    := 1;
	DMBIN_FIRST                    :=  DMBIN_UPPER;
	DMBIN_ONLYONE                  := 1;
	DMBIN_LOWER                    := 2;
	DMBIN_MIDDLE                   := 3;
	DMBIN_MANUAL                   := 4;
	DMBIN_ENVELOPE                 := 5;
	DMBIN_ENVMANUAL                := 6;
	DMBIN_AUTO                     := 7;
	DMBIN_TRACTOR                  := 8;
	DMBIN_SMALLFMT                 := 9;
	DMBIN_LARGEFMT                 := 10;
	DMBIN_LARGECAPACITY            := 11;
	DMBIN_CASSETTE                 := 14;
	DMBIN_LAST                     :=  DMBIN_CASSETTE;
	DMBIN_USER                     := 256;
	DMRES_DRAFT                    := 1;
	DMRES_LOW                      := 2;
	DMRES_MEDIUM                   := 3;
	DMRES_HIGH                     := 4;
	DMCOLOR_MONOCHROME             := 1;
	DMCOLOR_COLOR                  := 2;
	DMDUP_SIMPLEX                  := 1;
	DMDUP_VERTICAL                 := 2;
	DMDUP_HORIZONTAL               := 3;
	DMTT_BITMAP                    := 1;
	DMTT_DOWNLOAD                  := 2;
	DMTT_SUBDEV                    := 3;
	DMCOLLATE_FALSE                := 0;
	DMCOLLATE_TRUE                 := 1;
	DM_GRAYSCALE                   := $1;
	DM_INTERLACED                  := $2;
	RDH_RECTANGLES                 := 1;
	GGO_METRICS                    := 0;
	GGO_BITMAP                     := 1;
	GGO_NATIVE                     := 2;
	TT_POLYGON_TYPE                := 24;
	TT_PRIM_LINE                   := 1;
	TT_PRIM_QSPLINE                := 2;
	TT_AVAILABLE                   := $1;
	TT_ENABLED                     := $2;
	DM_UPDATE                      := 1;
	DM_COPY                        := 2;
	DM_PROMPT                      := 4;
	DM_MODIFY                      := 8;
	DM_IN_BUFFER                   :=  DM_MODIFY;
	DM_IN_PROMPT                   :=  DM_PROMPT;
	DM_OUT_BUFFER                  :=  DM_COPY;
	DM_OUT_DEFAULT                 :=  DM_UPDATE;
	DC_FIELDS                      := 1;
	DC_PAPERS                      := 2;
	DC_PAPERSIZE                   := 3;
	DC_MINEXTENT                   := 4;
	DC_MAXEXTENT                   := 5;
	DC_BINS                        := 6;
	DC_DUPLEX                      := 7;
	DC_SIZE                        := 8;
	DC_EXTRA                       := 9;
	DC_VERSION                     := 10;
	DC_DRIVER                      := 11;
	DC_BINNAMES                    := 12;
	DC_ENUMRESOLUTIONS             := 13;
	DC_FILEDEPENDENCIES            := 14;
	DC_TRUETYPE                    := 15;
	DC_PAPERNAMES                  := 16;
	DC_ORIENTATION                 := 17;
	DC_COPIES                      := 18;
	DCTT_BITMAP                    := $1;
	DCTT_DOWNLOAD                  := $2;
	DCTT_SUBDEV                    := $4;
	CA_NEGATIVE                    := $1;
	CA_LOG_FILTER                  := $2;
	ILLUMINANT_DEVICE_DEFAULT      := 0;
	ILLUMINANT_A                   := 1;
	ILLUMINANT_B                   := 2;
	ILLUMINANT_C                   := 3;
	ILLUMINANT_D50                 := 4;
	ILLUMINANT_D55                 := 5;
	ILLUMINANT_D65                 := 6;
	ILLUMINANT_D75                 := 7;
	ILLUMINANT_F2                  := 8;
	ILLUMINANT_MAX_INDEX           :=  ILLUMINANT_F2;
	ILLUMINANT_TUNGSTEN            :=  ILLUMINANT_A;
	ILLUMINANT_DAYLIGHT            :=  ILLUMINANT_C;
	ILLUMINANT_FLUORESCENT         :=  ILLUMINANT_F2;
	ILLUMINANT_NTSC                :=  ILLUMINANT_C;
	RGB_GAMMA_MIN                  := 2500;
	RGB_GAMMA_MAX                  := 65000;
	REFERENCE_WHITE_MIN            := 6000;
	REFERENCE_WHITE_MAX            := 10000;
	REFERENCE_BLACK_MIN            := 0;
	REFERENCE_BLACK_MAX            := 4000;
	COLOR_ADJ_MIN                  := 100;
	COLOR_ADJ_MAX                  := 100;
	FONTMAPPER_MAX                 := 10;
	ENHMETA_SIGNATURE              := $464D4520;
	ENHMETA_STOCK_OBJECT           := $80000000;
	EMR_HEADER                     := 1;
	EMR_POLYBEZIER                 := 2;
	EMR_POLYGON                    := 3;
	EMR_POLYLINE                   := 4;
	EMR_POLYBEZIERTO               := 5;
	EMR_POLYLINETO                 := 6;
	EMR_POLYPOLYLINE               := 7;
	EMR_POLYPOLYGON                := 8;
	EMR_SETWINDOWEXTEX             := 9;
	EMR_SETWINDOWORGEX             := 10;
	EMR_SETVIEWPORTEXTEX           := 11;
	EMR_SETVIEWPORTORGEX           := 12;
	EMR_SETBRUSHORGEX              := 13;
	EMR_EOF                        := 14;
	EMR_SETPIXELV                  := 15;
	EMR_SETMAPPERFLAGS             := 16;
	EMR_SETMAPMODE                 := 17;
	EMR_SETBKMODE                  := 18;
	EMR_SETPOLYFILLMODE            := 19;
	EMR_SETROP2                    := 20;
	EMR_SETSTRETCHBLTMODE          := 21;
	EMR_SETTEXTALIGN               := 22;
	EMR_SETCOLORADJUSTMENT         := 23;
	EMR_SETTEXTCOLOR               := 24;
	EMR_SETBKCOLOR                 := 25;
	EMR_OFFSETCLIPRGN              := 26;
	EMR_MOVETOEX                   := 27;
	EMR_SETMETARGN                 := 28;
	EMR_EXCLUDECLIPRECT            := 29;
	EMR_INTERSECTCLIPRECT          := 30;
	EMR_SCALEVIEWPORTEXTEX         := 31;
	EMR_SCALEWINDOWEXTEX           := 32;
	EMR_SAVEDC                     := 33;
	EMR_RESTOREDC                  := 34;
	EMR_SETWORLDTRANSFORM          := 35;
	EMR_MODIFYWORLDTRANSFORM       := 36;
	EMR_SELECTOBJECT               := 37;
	EMR_CREATEPEN                  := 38;
	EMR_CREATEBRUSHINDIRECT        := 39;
	EMR_DELETEOBJECT               := 40;
	EMR_ANGLEARC                   := 41;
	EMR_ELLIPSE                    := 42;
	EMR_RECTANGLE                  := 43;
	EMR_ROUNDRECT                  := 44;
	EMR_ARC                        := 45;
	EMR_CHORD                      := 46;
	EMR_PIE                        := 47;
	EMR_SELECTPALETTE              := 48;
	EMR_CREATEPALETTE              := 49;
	EMR_SETPALETTEENTRIES          := 50;
	EMR_RESIZEPALETTE              := 51;
	EMR_REALIZEPALETTE             := 52;
	EMR_EXTFLOODFILL               := 53;
	EMR_LINETO                     := 54;
	EMR_ARCTO                      := 55;
	EMR_POLYDRAW                   := 56;
	EMR_SETARCDIRECTION            := 57;
	EMR_SETMITERLIMIT              := 58;
	EMR_BEGINPATH                  := 59;
	EMR_ENDPATH                    := 60;
	EMR_CLOSEFIGURE                := 61;
	EMR_FILLPATH                   := 62;
	EMR_STROKEANDFILLPATH          := 63;
	EMR_STROKEPATH                 := 64;
	EMR_FLATTENPATH                := 65;
	EMR_WIDENPATH                  := 66;
	EMR_SELECTCLIPPATH             := 67;
	EMR_ABORTPATH                  := 68;
	EMR_GDICOMMENT                 := 70;
	EMR_FILLRGN                    := 71;
	EMR_FRAMERGN                   := 72;
	EMR_INVERTRGN                  := 73;
	EMR_PAINTRGN                   := 74;
	EMR_EXTSELECTCLIPRGN           := 75;
	EMR_BITBLT                     := 76;
	EMR_STRETCHBLT                 := 77;
	EMR_MASKBLT                    := 78;
	EMR_PLGBLT                     := 79;
	EMR_SETDIBITSTODEVICE          := 80;
	EMR_STRETCHDIBITS              := 81;
	EMR_EXTCREATEFONTINDIRECTW     := 82;
	EMR_EXTTEXTOUTA                := 83;
	EMR_EXTTEXTOUTW                := 84;
	EMR_POLYBEZIER16               := 85;
	EMR_POLYGON16                  := 86;
	EMR_POLYLINE16                 := 87;
	EMR_POLYBEZIERTO16             := 88;
	EMR_POLYLINETO16               := 89;
	EMR_POLYPOLYLINE16             := 90;
	EMR_POLYPOLYGON16              := 91;
	EMR_POLYDRAW16                 := 92;
	EMR_CREATEMONOBRUSH            := 93;
	EMR_CREATEDIBPATTERNBRUSHPT    := 94;
	EMR_EXTCREATEPEN               := 95;
	EMR_POLYTEXTOUTA               := 96;
	EMR_POLYTEXTOUTW               := 97;
	EMR_MIN                        := 1;
	EMR_MAX                        := 97;
	STRETCH_ANDSCANS               := 1;
	STRETCH_ORSCANS                := 2;
	STRETCH_DELETESCANS            := 3;
	STRETCH_HALFTONE               := 4;
	TCI_SRCCHARSET                 := 1;
	TCI_SRCCODEPAGE                := 2;
	TCI_SRCFONTSIG                 := 3;
	MONO_FONT                      := 8;
	JOHAB_CHARSET                  := 130;
	HEBREW_CHARSET                 := 177;
	ARABIC_CHARSET                 := 178;
	GREEK_CHARSET                  := 161;
	TURKISH_CHARSET                := 162;
	THAI_CHARSET                   := 222;
	EASTEUROPE_CHARSET             := 238;
	RUSSIAN_CHARSET                := 204;
	MAC_CHARSET                    := 77;
	BALTIC_CHARSET                 := 186;
	FS_LATIN1                      := $1;
	FS_LATIN2                      := $2;
	FS_CYRILLIC                    := $4;
	FS_GREEK                       := $8;
	FS_TURKISH                     := $10;
	FS_HEBREW                      := $20;
	FS_ARABIC                      := $40;
	FS_BALTIC                      := $80;
	FS_THAI                        := $10000;
	FS_JISJAPAN                    := $20000;
	FS_CHINESESIMP                 := $40000;
	FS_WANSUNG                     := $80000;
	FS_CHINESETRAD                 := $100000;
	FS_JOHAB                       := $200000;
	FS_SYMBOL                      := $80000000;
	DEFAULT_GUI_FONT               := 17;
	DM_RESERVED1                   := $800000;
	DM_RESERVED2                   := $1000000;
	DM_ICMMETHOD                   := $2000000;
	DM_ICMINTENT                   := $4000000;
	DM_MEDIATYPE                   := $8000000;
	DM_DITHERTYPE                  := $10000000;
	DMPAPER_ISO_B4                 := 42;
	DMPAPER_JAPANESE_POSTCARD      := 43;
	DMPAPER_9X11                   := 44;
	DMPAPER_10X11                  := 45;
	DMPAPER_15X11                  := 46;
	DMPAPER_ENV_INVITE             := 47;
	DMPAPER_RESERVED_48            := 48;
	DMPAPER_RESERVED_49            := 49;
	DMPAPER_LETTER_EXTRA           := 50;
	DMPAPER_LEGAL_EXTRA            := 51;
	DMPAPER_TABLOID_EXTRA          := 52;
	DMPAPER_A4_EXTRA               := 53;
	DMPAPER_LETTER_TRANSVERSE      := 54;
	DMPAPER_A4_TRANSVERSE          := 55;
	DMPAPER_LETTER_EXTRA_TRANSVERSE := 56;
	DMPAPER_A_PLUS                 := 57;
	DMPAPER_B_PLUS                 := 58;
	DMPAPER_LETTER_PLUS            := 59;
	DMPAPER_A4_PLUS                := 60;
	DMPAPER_A5_TRANSVERSE          := 61;
	DMPAPER_B5_TRANSVERSE          := 62;
	DMPAPER_A3_EXTRA               := 63;
	DMPAPER_A5_EXTRA               := 64;
	DMPAPER_B5_EXTRA               := 65;
	DMPAPER_A2                     := 66;
	DMPAPER_A3_TRANSVERSE          := 67;
	DMPAPER_A3_EXTRA_TRANSVERSE    := 68;
	DMTT_DOWNLOAD_OUTLINE          := 4;
	DMICMMETHOD_NONE               := 1;
	DMICMMETHOD_SYSTEM             := 2;
	DMICMMETHOD_DRIVER             := 3;
	DMICMMETHOD_DEVICE             := 4;
	DMICMMETHOD_USER               := 256;
	DMICM_SATURATE                 := 1;
	DMICM_CONTRAST                 := 2;
	DMICM_COLORMETRIC              := 3;
	DMICM_USER                     := 256;
	DMMEDIA_STANDARD               := 1;
	DMMEDIA_GLOSSY                 := 2;
	DMMEDIA_TRANSPARENCY           := 3;
	DMMEDIA_USER                   := 256;
	DMDITHER_NONE                  := 1;
	DMDITHER_COARSE                := 2;
	DMDITHER_FINE                  := 3;
	DMDITHER_LINEART               := 4;
	DMDITHER_GRAYSCALE             := 5;
	DMDITHER_USER                  := 256;
	GGO_GRAY2_BITMAP               := 4;
	GGO_GRAY4_BITMAP               := 5;
	GGO_GRAY8_BITMAP               := 6;
	GGO_GLYPH_INDEX                := $80;
	GCP_DBCS                       := $1;
	GCP_REORDER                    := $2;
	GCP_USEKERNING                 := $8;
	GCP_GLYPHSHAPE                 := $10;
	GCP_LIGATE                     := $20;
	GCP_DIACRITIC                  := $100;
	GCP_KASHIDA                    := $400;
	GCP_ERROR                      := $8000;
	FLI_MASK                       := $103B;
	GCP_JUSTIFY                    := $10000;
	GCP_NODIACRITICS               := $20000;
	FLI_GLYPHS                     := $40000;
	GCP_CLASSIN                    := $80000;
	GCP_MAXEXTENT                  := $100000;
	GCP_JUSTIFYIN                  := $200000;
	GCP_DISPLAYZWG                 := $400000;
	GCP_SYMSWAPOFF                 := $800000;
	GCP_NUMERICOVERRIDE            := $1000000;
	GCP_NEUTRALOVERRIDE            := $2000000;
	GCP_NUMERICSLATIN              := $4000000;
	GCP_NUMERICSLOCAL              := $8000000;
	GCPCLASS_LATIN                 := 1;
	GCPCLASS_HEBREW                := 2;
	GCPCLASS_ARABIC                := 2;
	GCPCLASS_NEUTRAL               := 3;
	GCPCLASS_LOCALNUMBER           := 4;
	GCPCLASS_LATINNUMBER           := 5;
	GCPCLASS_LATINNUMERICTERMINATOR := 6;
	GCPCLASS_LATINNUMERICSEPARATOR := 7;
	GCPCLASS_NUMERICSEPARATOR      := 8;
	GCPCLASS_PREBOUNDRTL           := $80;
	GCPCLASS_PREBOUNDLTR           := $40;
	DC_BINADJUST                   := 19;
	DC_EMF_COMPLIANT               := 20;
	DC_DATATYPE_PRODUCED           := 21;
	DC_COLLATE                     := 22;
	DCTT_DOWNLOAD_OUTLINE          := $8;
	DCBA_FACEUPNONE                := $0;
	DCBA_FACEUPCENTER              := $1;
	DCBA_FACEUPLEFT                := $2;
	DCBA_FACEUPRIGHT               := $3;
	DCBA_FACEDOWNNONE              := $100;
	DCBA_FACEDOWNCENTER            := $101;
	DCBA_FACEDOWNLEFT              := $102;
	DCBA_FACEDOWNRIGHT             := $103;
	ICM_OFF                        := 1;
	ICM_ON                         := 2;
	ICM_QUERY                      := 3;
	EMR_SETICMMODE                 := 98;
	EMR_CREATECOLORSPACE           := 99;
	EMR_SETCOLORSPACE              := 100;
	EMR_DELETECOLORSPACE           := 101;
	SB_HORZ                        := 0;
	SB_VERT                        := 1;
	SB_CTL                         := 2;
	SB_BOTH                        := 3;
	SB_LINEUP                      := 0;
	SB_LINELEFT                    := 0;
	SB_LINEDOWN                    := 1;
	SB_LINERIGHT                   := 1;
	SB_PAGEUP                      := 2;
	SB_PAGELEFT                    := 2;
	SB_PAGEDOWN                    := 3;
	SB_PAGERIGHT                   := 3;
	SB_THUMBPOSITION               := 4;
	SB_THUMBTRACK                  := 5;
	SB_TOP                         := 6;
	SB_LEFT                        := 6;
	SB_BOTTOM                      := 7;
	SB_RIGHT                       := 7;
	SB_ENDSCROLL                   := 8;
	SBM_SETSCROLLINFO              := $00E9;
	SBM_GETSCROLLINFO              := $00EA;
	SIF_RANGE                      := $0001;
	SIF_PAGE                       := $0002;
	SIF_POS                        := $0004;
	SIF_DISABLENOSCROLL            := $0008;
	SIF_TRACKPOS                   := $0010;
	SIF_ALL                        :=  SIF_RANGE | SIF_PAGE | SIF_POS | SIF_TRACKPOS;
	SW_HIDE                        := 0;
	SW_SHOWNORMAL                  := 1;
	SW_NORMAL                      := 1;
	SW_SHOWMINIMIZED               := 2;
	SW_SHOWMAXIMIZED               := 3;
	SW_MAXIMIZE                    := 3;
	SW_SHOWNOACTIVATE              := 4;
	SW_SHOW                        := 5;
	SW_MINIMIZE                    := 6;
	SW_SHOWMINNOACTIVE             := 7;
	SW_SHOWNA                      := 8;
	SW_RESTORE                     := 9;
	SW_SHOWDEFAULT                 := 10;
	SW_MAX                         := 10;
	HIDE_WINDOW                    := 0;
	SHOW_OPENWINDOW                := 1;
	SHOW_ICONWINDOW                := 2;
	SHOW_FULLSCREEN                := 3;
	SHOW_OPENNOACTIVATE            := 4;
	SW_PARENTCLOSING               := 1;
	SW_OTHERZOOM                   := 2;
	SW_PARENTOPENING               := 3;
	SW_OTHERUNZOOM                 := 4;
	KF_EXTENDED                    := $100;
	KF_DLGMODE                     := $800;
	KF_MENUMODE                    := $1000;
	KF_ALTDOWN                     := $2000;
	KF_REPEAT                      := $4000;
	KF_UP                          := $8000;
	VK_BACK                        := $8;
	VK_CANCEL                      := $3;
	VK_CAPITAL                     := $14;
	VK_CLEAR                       := $0C;
	VK_CONTROL                     := $11;
	VK_DELETE                      := $2E;
	VK_DOWN                        := $28;
	VK_END                         := $23;
	VK_ESCAPE                      := $1B;
	VK_EXECUTE                     := $2B;
	VK_HELP                        := $2F;
	VK_HOME                        := $24;
	VK_INSERT                      := $2D;
	VK_LBUTTON                     := $1;
	VK_LEFT                        := $25;
	VK_MBUTTON                     := $4;
	VK_XBUTTON1                    := $5;
	VK_XBUTTON2                    := $6;
	VK_MENU                        := $12;
	VK_NEXT                        := $22;
	VK_PAUSE                       := $13;
	VK_PGDN                        := $22;
	VK_PGUP                        := $21;
	VK_PRINT                       := $2A;
	VK_PRIOR                       := $21;
	VK_RBUTTON                     := $2;
	VK_RETURN                      := $0D;
	VK_RIGHT                       := $27;
	VK_SELECT                      := $29;
	VK_SHIFT                       := $10;
	VK_SNAPSHOT                    := $2C;
	VK_SPACE                       := $20;
	VK_TAB                         := $9;
	VK_UP                          := $26;
	VK_NUMPAD0                     := $60;
	VK_NUMPAD1                     := $61;
	VK_NUMPAD2                     := $62;
	VK_NUMPAD3                     := $63;
	VK_NUMPAD4                     := $64;
	VK_NUMPAD5                     := $65;
	VK_NUMPAD6                     := $66;
	VK_NUMPAD7                     := $67;
	VK_NUMPAD8                     := $68;
	VK_NUMPAD9                     := $69;
	VK_MULTIPLY                    := $6A;
	VK_ADD                         := $6B;
	VK_SEPARATOR                   := $6C;
	VK_SUBTRACT                    := $6D;
	VK_DECIMAL                     := $6E;
	VK_DIVIDE                      := $6F;
	VK_F1                          := $70;
	VK_F2                          := $71;
	VK_F3                          := $72;
	VK_F4                          := $73;
	VK_F5                          := $74;
	VK_F6                          := $75;
	VK_F7                          := $76;
	VK_F8                          := $77;
	VK_F9                          := $78;
	VK_F10                         := $79;
	VK_F11                         := $7A;
	VK_F12                         := $7B;
	VK_F13                         := $7C;
	VK_F14                         := $7D;
	VK_F15                         := $7E;
	VK_F16                         := $7F;
	VK_F17                         := $80;
	VK_F18                         := $81;
	VK_F19                         := $82;
	VK_F20                         := $83;
	VK_F21                         := $84;
	VK_F22                         := $85;
	VK_F23                         := $86;
	VK_F24                         := $87;
	VK_NUMLOCK                     := $90;
	VK_SCROLL                      := $91;
	VK_LSHIFT                      := $0A0;
	VK_RSHIFT                      := $0A1;
	VK_LCONTROL                    := $0A2;
	VK_RCONTROL                    := $0A3;
	VK_LMENU                       := $0A4;
	VK_RMENU                       := $0A5;
	VK_SEMICOLON				   := $BA;
	VK_EQUAL					   := $BB;
	VK_COMMA					   := $BC;
	VK_MINUS                       := $BD;
	VK_PERIOD                      := $BE;
	VK_SLASH					   := $BF;
	VK_GRAVEACCENT				   := $C0;
	VK_LBRACKET					   := $DB;
	VK_BSLASH					   := $DC;
	VK_RBRACKET					   := $DD;
	VK_APOST					   := $DE;
	VK_ATTN                        := $0F6;
	VK_CRSEL                       := $0F7;
	VK_EXSEL                       := $0F8;
	VK_EREOF                       := $0F9;
	VK_PLAY                        := $0FA;
	VK_ZOOM                        := $0FB;
	VK_NONAME                      := $0FC;
	VK_PA1                         := $0FD;
	VK_OEM_CLEAR                   := $0FE;
	VK_0                           := $30;
	VK_1                           := $31;
	VK_2                           := $32;
	VK_3                           := $33;
	VK_4                           := $34;
	VK_5                           := $35;
	VK_6                           := $36;
	VK_7                           := $37;
	VK_8                           := $38;
	VK_9                           := $39;
	VK_A                           := $41;
	VK_B                           := $42;
	VK_C                           := $43;
	VK_D                           := $44;
	VK_E                           := $45;
	VK_F                           := $46;
	VK_G                           := $47;
	VK_H                           := $48;
	VK_I                           := $49;
	VK_J                           := $4A;
	VK_K                           := $4B;
	VK_L                           := $4C;
	VK_M                           := $4D;
	VK_N                           := $4E;
	VK_O                           := $4F;
	VK_P                           := $50;
	VK_Q                           := $51;
	VK_R                           := $52;
	VK_S                           := $53;
	VK_T                           := $54;
	VK_U                           := $55;
	VK_V                           := $56;
	VK_W                           := $57;
	VK_X                           := $58;
	VK_Y                           := $59;
	VK_Z                           := $5A;
	WH_MIN                         := 1;
	WH_MSGFILTER                   := 1;
	WH_JOURNALRECORD               := 0;
	WH_JOURNALPLAYBACK             := 1;
	WH_KEYBOARD                    := 2;
	WH_GETMESSAGE                  := 3;
	WH_CALLWNDPROC                 := 4;
	WH_CBT                         := 5;
	WH_SYSMSGFILTER                := 6;
	WH_MOUSE                       := 7;
	WH_HARDWARE                    := 8;
	WH_DEBUG                       := 9;
	WH_SHELL                       := 10;
	WH_FOREGROUNDIDLE              := 11;
	WH_MAX                         := 11;
	HC_ACTION                      := 0;
	HC_GETNEXT                     := 1;
	HC_SKIP                        := 2;
	HC_NOREMOVE                    := 3;
	HC_NOREM                       :=  HC_NOREMOVE;
	HC_SYSMODALON                  := 4;
	HC_SYSMODALOFF                 := 5;
	HCBT_MOVESIZE                  := 0;
	HCBT_MINMAX                    := 1;
	HCBT_QS                        := 2;
	HCBT_CREATEWND                 := 3;
	HCBT_DESTROYWND                := 4;
	HCBT_ACTIVATE                  := 5;
	HCBT_CLICKSKIPPED              := 6;
	HCBT_KEYSKIPPED                := 7;
	HCBT_SYSCOMMAND                := 8;
	HCBT_SETFOCUS                  := 9;
	HSHELL_WINDOWCREATED           := 1;
	HSHELL_WINDOWDESTROYED         := 2;
	HSHELL_ACTIVATESHELLWINDOW     := 3;
	HKL_PREV                       := 0;
	HKL_NEXT                       := 1;
	KLF_ACTIVATE                   := $1;
	KLF_SUBSTITUTE_OK              := $2;
	KLF_UNLOADPREVIOUS             := $4;
	KLF_REORDER                    := $8;
	KL_NAMELENGTH                  := 9;
	DESKTOP_READOBJECTS            := $1;
	DESKTOP_CREATEWINDOW           := $2;
	DESKTOP_CREATEMENU             := $4;
	DESKTOP_HOOKCONTROL            := $8;
	DESKTOP_JOURNALRECORD          := $10;
	DESKTOP_JOURNALPLAYBACK        := $20;
	DESKTOP_ENUMERATE              := $40;
	DESKTOP_WRITEOBJECTS           := $80;
	WINSTA_ENUMDESKTOPS            := $1;
	WINSTA_READATTRIBUTES          := $2;
	WINSTA_ACCESSCLIPBOARD         := $4;
	WINSTA_CREATEDESKTOP           := $8;
	WINSTA_WRITEATTRIBUTES         := $10;
	WINSTA_ACCESSGLOBALATOMS       := $20;
	WINSTA_EXITWINDOWS             := $40;
	WINSTA_ENUMERATE               := $100;
	WINSTA_READSCREEN              := $200;

/* 	GWL_WNDPROC                 := 4;        */
/* 	GWL_HINSTANCE               := 6;      */
/* 	GWL_HWNDPARENT              := 8;     */
/* 	GWL_STYLE                   := 16;         */
/* 	GWL_EXSTYLE                 := 20;       */
/* 	GWL_USERDATA                := 21;      */
/* 	GWL_ID                      := 12;            */
/* 	GCL_MENUNAME                := 8;       */
/* 	GCL_HBRBACKGROUND           := 10; */
/* 	GCL_HCURSOR                 := 12;       */
/* 	GCL_HICON                   := 14;         */
/* 	GCL_HMODULE                 := 16;       */
/* 	GCL_CBWNDEXTRA              := 18;    */
/* 	GCL_CBCLSEXTRA              := 20;    */
/* 	GCL_WNDPROC                 := 24;       */
/* 	GCL_STYLE                   := 26;         */
/* 	GCW_ATOM                    := 32;          */

	GWL_WNDPROC                    := -4;
	GWL_HINSTANCE                  := -6;
	GWL_HWNDPARENT                 := -8;
	GWL_STYLE                      := -16;
	GWL_EXSTYLE                    := -20;
	GWL_USERDATA                   := -21;
	GWL_ID                         := -12;
	GCL_MENUNAME                   := -8;
	GCL_HBRBACKGROUND              := -10;
	GCL_HCURSOR                    := -12;
	GCL_HICON                      := -14;
	GCL_HMODULE                    := -16;
	GCL_CBWNDEXTRA                 := -18;
	GCL_CBCLSEXTRA                 := -20;
	GCL_WNDPROC                    := -24;
	GCL_STYLE                      := -26;
	GCW_ATOM                       := -32;

	WM_USER                        := $400;
	WM_NULL                        := $0;
	WM_CREATE                      := $1;
	WM_DESTROY                     := $2;
	WM_MOVE                        := $3;
	WM_SIZE                        := $5;
	WM_ACTIVATE                    := $6;
	WA_INACTIVE                    := 0;
	WA_ACTIVE                      := 1;
	WA_CLICKACTIVE                 := 2;
	WM_SETFOCUS                    := $7;
	WM_KILLFOCUS                   := $08;
	WM_ENABLE                      := $0A;
	WM_SETREDRAW                   := $0B;
	WM_SETTEXT                     := $0C;
	WM_GETTEXT                     := $0D;
	WM_GETTEXTLENGTH               := $0E;
	WM_PAINT                       := $0F;
	WM_CLOSE                       := $10;
	WM_QUERYENDSESSION             := $11;
	WM_QUIT                        := $12;
	WM_QUERYOPEN                   := $13;
	WM_ERASEBKGND                  := $14;
	WM_SYSCOLORCHANGE              := $15;
	WM_ENDSESSION                  := $16;
	WM_SHOWWINDOW                  := $18;
	WM_WININICHANGE                := $1A;
	WM_SETTINGCHANGE               :=  WM_WININICHANGE;
	WM_DEVMODECHANGE               := $1B;
	WM_ACTIVATEAPP                 := $1C;
	WM_FONTCHANGE                  := $1D;
	WM_TIMECHANGE                  := $1E;
	WM_CANCELMODE                  := $1F;
	WM_SETCURSOR                   := $20;
	WM_MOUSEACTIVATE               := $21;
	WM_CHILDACTIVATE               := $22;
	WM_QUEUESYNC                   := $23;
	WM_GETMINMAXINFO               := $24;
	WM_PAINTICON                   := $26;
	WM_ICONERASEBKGND              := $27;
	WM_NEXTDLGCTL                  := $28;
	WM_SPOOLERSTATUS               := $2A;
	WM_DRAWITEM                    := $2B;
	WM_MEASUREITEM                 := $2C;
	WM_DELETEITEM                  := $2D;
	WM_VKEYTOITEM                  := $2E;
	WM_CHARTOITEM                  := $2F;
	WM_SETFONT                     := $30;
	WM_GETFONT                     := $31;
	WM_SETHOTKEY                   := $32;
	WM_GETHOTKEY                   := $33;
	WM_QUERYDRAGICON               := $37;
	WM_COMPAREITEM                 := $39;
	WM_GETOBJECT                   := $3D;
	WM_COMPACTING                  := $41;
	WM_OTHERWINDOWCREATED          := $42;
	WM_OTHERWINDOWDESTROYED        := $43;
	WM_COMMNOTIFY                  := $44;
	CN_RECEIVE                     := $1;
	CN_TRANSMIT                    := $2;
	CN_EVENT                       := $4;
	WM_WINDOWPOSCHANGING           := $46;
	WM_WINDOWPOSCHANGED            := $47;
	WM_POWER                       := $48;
	PWR_OK                         := 1;
	PWR_FAIL                       := 1;
	PWR_SUSPENDREQUEST             := 1;
	PWR_SUSPENDRESUME              := 2;
	PWR_CRITICALRESUME             := 3;
	WM_COPYDATA                    := $4A;
	WM_CANCELJOURNAL               := $4B;
	WM_NOTIFY                      := $4E;
	WM_INPUTLANGCHANGEREQUEST      := $50;
	WM_INPUTLANGCHANGE             := $51;
	WM_TCARD                       := $52;
	WM_HELP                        := $53;
	WM_USERCHANGED                 := $54;
	WM_NOTIFYFORMAT                := $55;
	WM_CONTEXTMENU                 := $7B;
	WM_STYLECHANGING               := $7C;
	WM_STYLECHANGED                := $7D;
	WM_DISPLAYCHANGE               := $7E;
	WM_GETICON                     := $7F;
	WM_SETICON                     := $80;
	WM_NCCREATE                    := $81;
	WM_NCDESTROY                   := $82;
	WM_NCCALCSIZE                  := $83;
	WM_NCHITTEST                   := $84;
	WM_NCPAINT                     := $85;
	WM_NCACTIVATE                  := $86;
	WM_GETDLGCODE                  := $87;
	WM_SYNCPAINT                   := $88;
	WM_NCMOUSEMOVE                 := $0A0;
	WM_NCLBUTTONDOWN               := $0A1;
	WM_NCLBUTTONUP                 := $0A2;
	WM_NCLBUTTONDBLCLK             := $0A3;
	WM_NCRBUTTONDOWN               := $0A4;
	WM_NCRBUTTONUP                 := $0A5;
	WM_NCRBUTTONDBLCLK             := $0A6;
	WM_NCMBUTTONDOWN               := $0A7;
	WM_NCMBUTTONUP                 := $0A8;
	WM_NCMBUTTONDBLCLK             := $0A9;
	WM_KEYFIRST                    := $100;
	WM_KEYDOWN                     := $100;
	WM_KEYUP                       := $101;
	WM_CHAR                        := $102;
	WM_DEADCHAR                    := $103;
	WM_SYSKEYDOWN                  := $104;
	WM_SYSKEYUP                    := $105;
	WM_SYSCHAR                     := $106;
	WM_SYSDEADCHAR                 := $107;
	WM_KEYLAST                     := $108;
	WM_INITDIALOG                  := $110;
	WM_COMMAND                     := $111;
	WM_SYSCOMMAND                  := $112;
	WM_TIMER                       := $113;
	WM_HSCROLL                     := $114;
	WM_VSCROLL                     := $115;
	WM_INITMENU                    := $116;
	WM_INITMENUPOPUP               := $117;
	WM_MENUSELECT                  := $11F;
	WM_MENUCHAR                    := $120;
	WM_ENTERIDLE                   := $121;
	WM_CTLCOLORMSGBOX              := $132;
	WM_CTLCOLOREDIT                := $133;
	WM_CTLCOLORLISTBOX             := $134;
	WM_CTLCOLORBTN                 := $135;
	WM_CTLCOLORDLG                 := $136;
	WM_CTLCOLORSCROLLBAR           := $137;
	WM_CTLCOLORSTATIC              := $138;
	WM_MOUSEFIRST                  := $200;
	WM_MOUSEMOVE                   := $200;
	WM_LBUTTONDOWN                 := $201;
	WM_LBUTTONUP                   := $202;
	WM_LBUTTONDBLCLK               := $203;
	WM_RBUTTONDOWN                 := $204;
	WM_RBUTTONUP                   := $205;
	WM_RBUTTONDBLCLK               := $206;
	WM_MBUTTONDOWN                 := $207;
	WM_MBUTTONUP                   := $208;
	WM_MBUTTONDBLCLK               := $209;
	WM_MOUSELAST                   := $209;
	WM_PARENTNOTIFY                := $210;
	WM_ENTERMENULOOP               := $211;
	WM_EXITMENULOOP                := $212;
	WM_MDICREATE                   := $220;
	WM_MDIDESTROY                  := $221;
	WM_MDIACTIVATE                 := $222;
	WM_MDIRESTORE                  := $223;
	WM_MDINEXT                     := $224;
	WM_MDIMAXIMIZE                 := $225;
	WM_MDITILE                     := $226;
	WM_MDICASCADE                  := $227;
	WM_MDIICONARRANGE              := $228;
	WM_MDIGETACTIVE                := $229;
	WM_MDISETMENU                  := $230;
	WM_DROPFILES                   := $233;
	WM_MDIREFRESHMENU              := $234;
	WM_CUT                         := $300;
	WM_COPY                        := $301;
	WM_PASTE                       := $302;
	WM_CLEAR                       := $303;
	WM_UNDO                        := $304;
	WM_RENDERFORMAT                := $305;
	WM_RENDERALLFORMATS            := $306;
	WM_DESTROYCLIPBOARD            := $307;
	WM_DRAWCLIPBOARD               := $308;
	WM_PAINTCLIPBOARD              := $309;
	WM_VSCROLLCLIPBOARD            := $30A;
	WM_SIZECLIPBOARD               := $30B;
	WM_ASKCBFORMATNAME             := $30C;
	WM_CHANGECBCHAIN               := $30D;
	WM_HSCROLLCLIPBOARD            := $30E;
	WM_QUERYNEWPALETTE             := $30F;
	WM_PALETTEISCHANGING           := $310;
	WM_PALETTECHANGED              := $311;
	WM_HOTKEY                      := $312;
	WM_PRINT                       := $317;
	WM_PRINTCLIENT                 := $318;
	WM_PENWINFIRST                 := $380;
	WM_PENWINLAST                  := $38F;
	ST_BEGINSWP                    := 0;
	ST_ENDSWP                      := 1;
	HTERROR                        := 2;
	HTTRANSPARENT                  := 1;
	HTNOWHERE                      := 0;
	HTCLIENT                       := 1;
	HTCAPTION                      := 2;
	HTSYSMENU                      := 3;
	HTGROWBOX                      := 4;
	HTSIZE                         :=  HTGROWBOX;
	HTMENU                         := 5;
	HTHSCROLL                      := 6;
	HTVSCROLL                      := 7;
	HTMINBUTTON                    := 8;
	HTMAXBUTTON                    := 9;
	HTLEFT                         := 10;
	HTRIGHT                        := 11;
	HTTOP                          := 12;
	HTTOPLEFT                      := 13;
	HTTOPRIGHT                     := 14;
	HTBOTTOM                       := 15;
	HTBOTTOMLEFT                   := 16;
	HTBOTTOMRIGHT                  := 17;
	HTBORDER                       := 18;
	HTREDUCE                       :=  HTMINBUTTON;
	HTZOOM                         :=  HTMAXBUTTON;
	HTSIZEFIRST                    :=  HTLEFT;
	HTSIZELAST                     :=  HTBOTTOMRIGHT;
	HTOBJECT                       := 19;
	HTCLOSE                        := 20;
	HTHELP                         := 21;
	SMTO_NORMAL                    := $0;
	SMTO_BLOCK                     := $1;
	SMTO_ABORTIFHUNG               := $2;
	SMTO_NOTIMEOUTIFNOTHUNG        := 8;
	MA_ACTIVATE                    := 1;
	MA_ACTIVATEANDEAT              := 2;
	MA_NOACTIVATE                  := 3;
	MA_NOACTIVATEANDEAT            := 4;
	SIZE_RESTORED                  := 0;
	SIZE_MINIMIZED                 := 1;
	SIZE_MAXIMIZED                 := 2;
	SIZE_MAXSHOW                   := 3;
	SIZE_MAXHIDE                   := 4;
	SIZENORMAL                     :=  SIZE_RESTORED;
	SIZEICONIC                     :=  SIZE_MINIMIZED;
	SIZEFULLSCREEN                 :=  SIZE_MAXIMIZED;
	SIZEZOOMSHOW                   :=  SIZE_MAXSHOW;
	SIZEZOOMHIDE                   :=  SIZE_MAXHIDE;
	WVR_ALIGNTOP                   := $10;
	WVR_ALIGNLEFT                  := $20;
	WVR_ALIGNBOTTOM                := $40;
	WVR_ALIGNRIGHT                 := $80;
	WVR_HREDRAW                    := $100;
	WVR_VREDRAW                    := $200;
	WVR_REDRAW                     :=  WVR_HREDRAW | WVR_VREDRAW;
	WVR_VALIDRECTS                 := $400;
	MK_LBUTTON                     := $1;
	MK_RBUTTON                     := $2;
	MK_SHIFT                       := $4;
	MK_CONTROL                     := $8;
	MK_MBUTTON                     := $10;
	WS_OVERLAPPED                  := $0;
	WS_POPUP                       := $80000000;
	WS_CHILD                       := $40000000;
	WS_MINIMIZE                    := $20000000;
	WS_VISIBLE                     := $10000000;
	WS_DISABLED                    := $8000000;
	WS_CLIPSIBLINGS                := $4000000;
	WS_CLIPCHILDREN                := $2000000;
	WS_MAXIMIZE                    := $1000000;
	WS_CAPTION                     := $0C00000;
	WS_BORDER                      := $800000;
	WS_DLGFRAME                    := $400000;
	WS_VSCROLL                     := $200000;
	WS_HSCROLL                     := $100000;
	WS_SYSMENU                     := $80000;
	WS_THICKFRAME                  := $40000;
	WS_GROUP                       := $20000;
	WS_TABSTOP                     := $10000;
	WS_MINIMIZEBOX                 := $20000;
	WS_MAXIMIZEBOX                 := $10000;
	WS_TILED                       :=  WS_OVERLAPPED;
	WS_ICONIC                      :=  WS_MINIMIZE;
	WS_SIZEBOX                     :=  WS_THICKFRAME;
	WS_OVERLAPPEDWINDOW            :=  WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
	WS_TILEDWINDOW                 :=  WS_OVERLAPPEDWINDOW;
	WS_POPUPWINDOW                 :=  WS_POPUP | WS_BORDER | WS_SYSMENU;
	WS_CHILDWINDOW                 :=  WS_CHILD;
	WS_EX_DLGMODALFRAME            := $1;
	WS_EX_NOPARENTNOTIFY           := $4;
	WS_EX_TOPMOST                  := $8;
	WS_EX_ACCEPTFILES              := $10;
	WS_EX_TRANSPARENT              := $20;
	WS_EX_MDICHILD                 := $00000040;
	WS_EX_TOOLWINDOW               := $00000080;
	WS_EX_WINDOWEDGE               := $00000100;
	WS_EX_CLIENTEDGE               := $00000200;
	WS_EX_CONTEXTHELP              := $00000400;
	WS_EX_RIGHT                    := $00001000;
	WS_EX_LEFT                     := $00000000;
	WS_EX_RTLREADING               := $00002000;
	WS_EX_LTRREADING               := $00000000;
	WS_EX_LEFTSCROLLBAR            := $00004000;
	WS_EX_RIGHTSCROLLBAR           := $00000000;
	WS_EX_CONTROLPARENT            := $00010000;
	WS_EX_STATICEDGE               := $00020000;
	WS_EX_APPWINDOW                := $00040000;
	WS_EX_OVERLAPPEDWINDOW         :=  WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE;
	WS_EX_PALETTEWINDOW            :=  WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST;
	CS_VREDRAW                     := $1;
	CS_HREDRAW                     := $2;
	CS_KEYCVTWINDOW                := $4;
	CS_DBLCLKS                     := $8;
	CS_OWNDC                       := $20;
	CS_CLASSDC                     := $40;
	CS_PARENTDC                    := $80;
	CS_NOKEYCVT                    := $100;
	CS_NOCLOSE                     := $200;
	CS_SAVEBITS                    := $800;
	CS_BYTEALIGNCLIENT             := $1000;
	CS_BYTEALIGNWINDOW             := $2000;
	CS_PUBLICCLASS                 := $4000;
	CS_GLOBALCLASS                 :=  CS_PUBLICCLASS;
	CS_IME                         := $10000;
	CF_TEXT                        := 1;
	CF_BITMAP                      := 2;
	CF_METAFILEPICT                := 3;
	CF_SYLK                        := 4;
	CF_DIF                         := 5;
	CF_TIFF                        := 6;
	CF_OEMTEXT                     := 7;
	CF_DIB                         := 8;
	CF_PALETTE                     := 9;
	CF_PENDATA                     := 10;
	CF_RIFF                        := 11;
	CF_WAVE                        := 12;
	CF_UNICODETEXT                 := 13;
	CF_ENHMETAFILE                 := 14;
	CF_HDROP                       := 15;
	CF_LOCALE                      := 16;
	CF_MAX                         := 17;
	CF_OWNERDISPLAY                := $80;
	CF_DSPTEXT                     := $81;
	CF_DSPBITMAP                   := $82;
	CF_DSPMETAFILEPICT             := $83;
	CF_DSPENHMETAFILE              := $8E;
	CF_PRIVATEFIRST                := $200;
	CF_PRIVATELAST                 := $2FF;
	CF_GDIOBJFIRST                 := $300;
	CF_GDIOBJLAST                  := $3FF;
	FVIRTKEY                       := $1;
	FNOINVERT                      := $2;
	FSHIFT                         := $4;
	FCONTROL                       := $8;
	FALT                           := $10;
	WPF_SETMINPOSITION             := $1;
	WPF_RESTORETOMAXIMIZED         := $2;
	ODT_MENU                       := 1;
	ODT_LISTBOX                    := 2;
	ODT_COMBOBOX                   := 3;
	ODT_BUTTON                     := 4;
	ODT_STATIC                     := 5;
	ODA_DRAWENTIRE                 := $1;
	ODA_SELECT                     := $2;
	ODA_FOCUS                      := $4;
	ODS_SELECTED                   := $1;
	ODS_GRAYED                     := $2;
	ODS_DISABLED                   := $4;
	ODS_CHECKED                    := $8;
	ODS_FOCUS                      := $10;
	ODS_DEFAULT                    := $20;
	ODS_COMBOBOXEDIT               := $1000;
	ODS_HOTLIGHT                   := $40;
	ODS_INACTIVE                   := $80;
	PM_NOREMOVE                    := $0;
	PM_REMOVE                      := $1;
	PM_NOYIELD                     := $2;
	MOD_ALT                        := $1;
	MOD_CONTROL                    := $2;
	MOD_SHIFT                      := $4;
	MOD_WIN                        := $8;
	IDHOT_SNAPWINDOW               := 1;
	IDHOT_SNAPDESKTOP              := 2;
	EWX_LOGOFF                     := 0;
	EWX_SHUTDOWN                   := 1;
	EWX_REBOOT                     := 2;
	EWX_FORCE                      := 4;
	EWX_POWEROFF                   := 8;
	EWX_FORCEIFHUNG                := $10;
	EW_RESTARTWINDOWS              := $42;
	READAPI                        := 0;
	WRITEAPI                       := 1;
	READ_WRITE                     := 2;
	HWND_BROADCAST                 := $0FFFF;
	CW_USEDEFAULT                  := $80000000;
	HWND_MESSAGE                   := 3;
	HWND_DESKTOP                   := 0;
	SWP_NOSIZE                     := $1;
	SWP_NOMOVE                     := $2;
	SWP_NOZORDER                   := $4;
	SWP_NOREDRAW                   := $8;
	SWP_NOACTIVATE                 := $10;
	SWP_FRAMECHANGED               := $20;
	SWP_SHOWWINDOW                 := $40;
	SWP_HIDEWINDOW                 := $80;
	SWP_NOCOPYBITS                 := $100;
	SWP_NOOWNERZORDER              := $200;
	SWP_DRAWFRAME                  :=  SWP_FRAMECHANGED;
	SWP_NOREPOSITION               :=  SWP_NOOWNERZORDER;
	SWP_DEFERERASE                 := $2000;
	SWP_ASYNCWINDOWPOS             := $4000;
	HWND_TOP                       := 0;
	HWND_BOTTOM                    := 1;
	HWND_TOPMOST                   := 1;
	HWND_NOTOPMOST                 := 2;
	DLGWINDOWEXTRA                 := 30;
	KEYEVENTF_EXTENDEDKEY          := $1;
	KEYEVENTF_KEYUP                := $2;
	MOUSEEVENTF_MOVE               := $1;
	MOUSEEVENTF_LEFTDOWN           := $2;
	MOUSEEVENTF_LEFTUP             := $4;
	MOUSEEVENTF_RIGHTDOWN          := $8;
	MOUSEEVENTF_RIGHTUP            := $10;
	MOUSEEVENTF_MIDDLEDOWN         := $20;
	MOUSEEVENTF_MIDDLEUP           := $40;
	MOUSEEVENTF_WHEEL              := $800;
	MOUSEEVENTF_ABSOLUTE           := $8000;
	QS_KEY                         := $1;
	QS_MOUSEMOVE                   := $2;
	QS_MOUSEBUTTON                 := $4;
	QS_POSTMESSAGE                 := $8;
	QS_TIMER                       := $10;
	QS_PAINT                       := $20;
	QS_SENDMESSAGE                 := $40;
	QS_HOTKEY                      := $80;
	QS_ALLPOSTMESSAGE              := $100;
	QS_MOUSE                       :=  QS_MOUSEMOVE | QS_MOUSEBUTTON;
	QS_INPUT                       :=  QS_MOUSE | QS_KEY;
	QS_ALLEVENTS                   :=  QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY;
	QS_ALLINPUT                    :=  QS_SENDMESSAGE | QS_PAINT | QS_TIMER | QS_POSTMESSAGE | QS_MOUSEBUTTON | QS_MOUSEMOVE | QS_HOTKEY | QS_KEY;
	SM_CXSCREEN                    := 0;
	SM_CYSCREEN                    := 1;
	SM_CXVSCROLL                   := 2;
	SM_CYHSCROLL                   := 3;
	SM_CYCAPTION                   := 4;
	SM_CXBORDER                    := 5;
	SM_CYBORDER                    := 6;
	SM_CXDLGFRAME                  := 7;
	SM_CYDLGFRAME                  := 8;
	SM_CYVTHUMB                    := 9;
	SM_CXHTHUMB                    := 10;
	SM_CXICON                      := 11;
	SM_CYICON                      := 12;
	SM_CXCURSOR                    := 13;
	SM_CYCURSOR                    := 14;
	SM_CYMENU                      := 15;
	SM_CXFULLSCREEN                := 16;
	SM_CYFULLSCREEN                := 17;
	SM_CYKANJIWINDOW               := 18;
	SM_MOUSEPRESENT                := 19;
	SM_CYVSCROLL                   := 20;
	SM_CXHSCROLL                   := 21;
	SM_DEBUG                       := 22;
	SM_SWAPBUTTON                  := 23;
	SM_RESERVED1                   := 24;
	SM_RESERVED2                   := 25;
	SM_RESERVED3                   := 26;
	SM_RESERVED4                   := 27;
	SM_CXMIN                       := 28;
	SM_CYMIN                       := 29;
	SM_CXSIZE                      := 30;
	SM_CYSIZE                      := 31;
	SM_CXFRAME                     := 32;
	SM_CYFRAME                     := 33;
	SM_CXMINTRACK                  := 34;
	SM_CYMINTRACK                  := 35;
	SM_CXDOUBLECLK                 := 36;
	SM_CYDOUBLECLK                 := 37;
	SM_CXICONSPACING               := 38;
	SM_CYICONSPACING               := 39;
	SM_MENUDROPALIGNMENT           := 40;
	SM_PENWINDOWS                  := 41;
	SM_DBCSENABLED                 := 42;
	SM_CMOUSEBUTTONS               := 43;
	SM_CXFIXEDFRAME                :=  SM_CXDLGFRAME;
	SM_CYFIXEDFRAME                :=  SM_CYDLGFRAME;
	SM_CXSIZEFRAME                 :=  SM_CXFRAME;
	SM_CYSIZEFRAME                 :=  SM_CYFRAME;
	SM_SECURE                      := 44;
	SM_CXEDGE                      := 45;
	SM_CYEDGE                      := 46;
	SM_CXMINSPACING                := 47;
	SM_CYMINSPACING                := 48;
	SM_CXSMICON                    := 49;
	SM_CYSMICON                    := 50;
	SM_CYSMCAPTION                 := 51;
	SM_CXSMSIZE                    := 52;
	SM_CYSMSIZE                    := 53;
	SM_CXMENUSIZE                  := 54;
	SM_CYMENUSIZE                  := 55;
	SM_ARRANGE                     := 56;
	SM_CXMINIMIZED                 := 57;
	SM_CYMINIMIZED                 := 58;
	SM_CXMAXTRACK                  := 59;
	SM_CYMAXTRACK                  := 60;
	SM_CXMAXIMIZED                 := 61;
	SM_CYMAXIMIZED                 := 62;
	SM_NETWORK                     := 63;
	SM_CLEANBOOT                   := 67;
	SM_CXDRAG                      := 68;
	SM_CYDRAG                      := 69;
	SM_SHOWSOUNDS                  := 70;
	SM_CXMENUCHECK                 := 71;
	SM_CYMENUCHECK                 := 72;
	SM_SLOWMACHINE                 := 73;
	SM_MIDEASTENABLED              := 74;
	SM_MOUSEWHEELPRESENT           := 75;
	SM_CMETRICS                    := 75;
	SM_XVIRTUALSCREEN              := 76;
	SM_YVIRTUALSCREEN              := 77;
	SM_CXVIRTUALSCREEN             := 78;
	SM_CYVIRTUALSCREEN             := 79;
	SM_CMONITORS                   := 80;
	SM_SAMEDISPLAYFORMAT           := 81;
	TPM_LEFTBUTTON                 := $0;
	TPM_RIGHTBUTTON                := $2;
	TPM_LEFTALIGN                  := $0;
	TPM_CENTERALIGN                := $4;
	TPM_RIGHTALIGN                 := $8;
	TPM_TOPALIGN                   := 0;
	TPM_VCENTERALIGN               := $10;
	TPM_BOTTOMALIGN                := $20;
	TPM_HORIZONTAL                 := 0;
	TPM_VERTICAL                   := $40;
	TPM_NONOTIFY                   := $80;
	TPM_RETURNCMD                  := $100;
	TPM_RECURSE                    := 1;
	DT_TOP                         := $0;
	DT_LEFT                        := $0;
	DT_CENTER                      := $1;
	DT_RIGHT                       := $2;
	DT_VCENTER                     := $4;
	DT_BOTTOM                      := $8;
	DT_WORDBREAK                   := $10;
	DT_SINGLELINE                  := $20;
	DT_EXPANDTABS                  := $40;
	DT_TABSTOP                     := $80;
	DT_NOCLIP                      := $100;
	DT_EXTERNALLEADING             := $200;
	DT_CALCRECT                    := $400;
	DT_NOPREFIX                    := $800;
	DT_INTERNAL                    := $1000;
	DT_EDITCONTROL                 := $2000;
	DT_PATH_ELLIPSIS               := $4000;
	DT_END_ELLIPSIS                := $8000;
	DT_MODIFYSTRING                := $10000;
	DT_RTLREADING                  := $20000;
	DT_WORD_ELLIPSIS               := $40000;
	DCX_WINDOW                     := $1;
	DCX_CACHE                      := $2;
	DCX_NORESETATTRS               := $4;
	DCX_CLIPCHILDREN               := $8;
	DCX_CLIPSIBLINGS               := $10;
	DCX_PARENTCLIP                 := $20;
	DCX_EXCLUDERGN                 := $40;
	DCX_INTERSECTRGN               := $80;
	DCX_EXCLUDEUPDATE              := $100;
	DCX_INTERSECTUPDATE            := $200;
	DCX_LOCKWINDOWUPDATE           := $400;
	DCX_NORECOMPUTE                := $100000;
	DCX_VALIDATE                   := $200000;
	RDW_INVALIDATE                 := $1;
	RDW_INTERNALPAINT              := $2;
	RDW_ERASE                      := $4;
	RDW_VALIDATE                   := $8;
	RDW_NOINTERNALPAINT            := $10;
	RDW_NOERASE                    := $20;
	RDW_NOCHILDREN                 := $40;
	RDW_ALLCHILDREN                := $80;
	RDW_UPDATENOW                  := $100;
	RDW_ERASENOW                   := $200;
	RDW_FRAME                      := $400;
	RDW_NOFRAME                    := $800;
	SW_SCROLLCHILDREN              := $1;
	SW_INVALIDATE                  := $2;
	SW_ERASE                       := $4;
	SW_SMOOTHSCROLL                := $10;
	ESB_ENABLE_BOTH                := $0;
	ESB_DISABLE_BOTH               := $3;
	ESB_DISABLE_LEFT               := $1;
	ESB_DISABLE_RIGHT              := $2;
	ESB_DISABLE_UP                 := $1;
	ESB_DISABLE_DOWN               := $2;
	ESB_DISABLE_LTUP               :=  ESB_DISABLE_LEFT;
	ESB_DISABLE_RTDN               :=  ESB_DISABLE_RIGHT;
	MB_OK                          := $0;
	MB_OKCANCEL                    := $1;
	MB_ABORTRETRYIGNORE            := $2;
	MB_YESNOCANCEL                 := $3;
	MB_YESNO                       := $4;
	MB_RETRYCANCEL                 := $5;
	MB_ICONHAND                    := $10;
	MB_ICONQUESTION                := $20;
	MB_ICONEXCLAMATION             := $30;
	MB_ICONASTERISK                := $40;
	MB_USERICON                    := $80;
	MB_ICONERROR                   :=  MB_ICONHAND;
	MB_ICONINFORMATION             :=  MB_ICONASTERISK;
	MB_ICONSTOP                    :=  MB_ICONHAND;
	MB_ICONWARNING                 :=  MB_ICONEXCLAMATION;
	MB_DEFBUTTON1                  := $0;
	MB_DEFBUTTON2                  := $100;
	MB_DEFBUTTON3                  := $200;
	MB_DEFBUTTON4                  := $300;
	MB_APPLMODAL                   := $0;
	MB_SYSTEMMODAL                 := $1000;
	MB_TASKMODAL                   := $2000;
	MB_HELP                        := $4000;
	MB_NOFOCUS                     := $8000;
	MB_SETFOREGROUND               := $10000;
	MB_DEFAULT_DESKTOP_ONLY        := $20000;
	MB_TYPEMASK                    := $0F;
	MB_ICONMASK                    := $0F0;
	MB_DEFMASK                     := $0F00;
	MB_MODEMASK                    := $3000;
	MB_MISCMASK                    := $0C000;
	MB_TOPMOST                     := $40000;
	MB_RIGHT                       := $80000;
	MB_RTLREADING                  := $100000;
	MB_SERVICE_NOTIFICATION        := $200000;
	CTLCOLOR_MSGBOX                := 0;
	CTLCOLOR_EDIT                  := 1;
	CTLCOLOR_LISTBOX               := 2;
	CTLCOLOR_BTN                   := 3;
	CTLCOLOR_DLG                   := 4;
	CTLCOLOR_SCROLLBAR             := 5;
	CTLCOLOR_STATIC                := 6;
	CTLCOLOR_MAX                   := 8;
	COLOR_SCROLLBAR                := 0;
	COLOR_BACKGROUND               := 1;
	COLOR_ACTIVECAPTION            := 2;
	COLOR_INACTIVECAPTION          := 3;
	COLOR_MENU                     := 4;
	COLOR_WINDOW                   := 5;
	COLOR_WINDOWFRAME              := 6;
	COLOR_MENUTEXT                 := 7;
	COLOR_WINDOWTEXT               := 8;
	COLOR_CAPTIONTEXT              := 9;
	COLOR_ACTIVEBORDER             := 10;
	COLOR_INACTIVEBORDER           := 11;
	COLOR_APPWORKSPACE             := 12;
	COLOR_HIGHLIGHT                := 13;
	COLOR_HIGHLIGHTTEXT            := 14;
	COLOR_BTNFACE                  := 15;
	COLOR_BTNSHADOW                := 16;
	COLOR_GRAYTEXT                 := 17;
	COLOR_BTNTEXT                  := 18;
	COLOR_INACTIVECAPTIONTEXT      := 19;
	COLOR_BTNHIGHLIGHT             := 20;
	COLOR_3DDKSHADOW               := 21;
	COLOR_3DLIGHT                  := 22;
	COLOR_INFOTEXT                 := 23;
	COLOR_INFOBK                   := 24;
	COLOR_DESKTOP                  :=  COLOR_BACKGROUND;
	COLOR_3DFACE                   :=  COLOR_BTNFACE;
	COLOR_3DSHADOW                 :=  COLOR_BTNSHADOW;
	COLOR_3DHIGHLIGHT              :=  COLOR_BTNHIGHLIGHT;
	COLOR_3DHILIGHT                :=  COLOR_BTNHIGHLIGHT;
	COLOR_BTNHILIGHT               :=  COLOR_BTNHIGHLIGHT;
	COLOR_HOTLIGHT                 := 26;
	COLOR_GRADIENTACTIVECAPTION    := 27;
	COLOR_GRADIENTINACTIVECAPTION  := 28;
	GW_HWNDFIRST                   := 0;
	GW_HWNDLAST                    := 1;
	GW_HWNDNEXT                    := 2;
	GW_HWNDPREV                    := 3;
	GW_OWNER                       := 4;
	GW_CHILD                       := 5;
	GW_MAX                         := 5;
	GW_ENABLEDPOPUP                := 6;
	MF_INSERT                      := $0;
	MF_CHANGE                      := $80;
	MF_APPEND                      := $100;
	MF_DELETE                      := $200;
	MF_REMOVE                      := $1000;
	MF_BYCOMMAND                   := $0;
	MF_BYPOSITION                  := $400;
	MF_SEPARATOR                   := $800;
	MF_ENABLED                     := $0;
	MF_GRAYED                      := $1;
	MF_DISABLED                    := $2;
	MF_UNCHECKED                   := $0;
	MF_CHECKED                     := $8;
	MF_USECHECKBITMAPS             := $200;
	MF_STRING                      := $0;
	MF_BITMAP                      := $4;
	MF_OWNERDRAW                   := $100;
	MF_POPUP                       := $10;
	MF_MENUBARBREAK                := $20;
	MF_MENUBREAK                   := $40;
	MF_UNHILITE                    := $0;
	MF_HILITE                      := $80;
	MF_SYSMENU                     := $2000;
	MF_HELP                        := $4000;
	MF_MOUSESELECT                 := $8000;
	MF_END                         := $80;
	MF_DEFAULT                     := $1000;
	MF_RIGHTJUSTIFY                := $4000;
	SC_SIZE                        := $0F000;
	SC_MOVE                        := $0F010;
	SC_MINIMIZE                    := $0F020;
	SC_MAXIMIZE                    := $0F030;
	SC_NEXTWINDOW                  := $0F040;
	SC_PREVWINDOW                  := $0F050;
	SC_CLOSE                       := $0F060;
	SC_VSCROLL                     := $0F070;
	SC_HSCROLL                     := $0F080;
	SC_MOUSEMENU                   := $0F090;
	SC_KEYMENU                     := $0F100;
	SC_ARRANGE                     := $0F110;
	SC_RESTORE                     := $0F120;
	SC_TASKLIST                    := $0F130;
	SC_SCREENSAVE                  := $0F140;
	SC_HOTKEY                      := $0F150;
	SC_ICON                        :=  SC_MINIMIZE;
	SC_ZOOM                        :=  SC_MAXIMIZE;
	SC_DEFAULT                     := $0F160;
	SC_MONITORPOWER                := $0F170;
	SC_CONTEXTHELP                 := $0F180;
	SC_SEPARATOR                   := $0F00F;
	IDC_ARROW                      := 32512;
	IDC_IBEAM                      := 32513;
	IDC_WAIT                       := 32514;
	IDC_CROSS                      := 32515;
	IDC_UPARROW                    := 32516;
	IDC_SIZE                       := 32640;
	IDC_ICON                       := 32641;
	IDC_SIZENWSE                   := 32642;
	IDC_SIZENESW                   := 32643;
	IDC_SIZEWE                     := 32644;
	IDC_SIZENS                     := 32645;
	IDC_SIZEALL                    := 32646;
	IDC_NO                         := 32648;
	IDC_HAND                       := 32649;
	IDC_APPSTARTING                := 32650;
	IDC_HELP                       := 32651;
	OBM_CLOSE                      := 32754;
	OBM_UPARROW                    := 32753;
	OBM_DNARROW                    := 32752;
	OBM_RGARROW                    := 32751;
	OBM_LFARROW                    := 32750;
	OBM_REDUCE                     := 32749;
	OBM_ZOOM                       := 32748;
	OBM_RESTORE                    := 32747;
	OBM_REDUCED                    := 32746;
	OBM_ZOOMD                      := 32745;
	OBM_RESTORED                   := 32744;
	OBM_UPARROWD                   := 32743;
	OBM_DNARROWD                   := 32742;
	OBM_RGARROWD                   := 32741;
	OBM_LFARROWD                   := 32740;
	OBM_MNARROW                    := 32739;
	OBM_COMBO                      := 32738;
	OBM_UPARROWI                   := 32737;
	OBM_DNARROWI                   := 32736;
	OBM_RGARROWI                   := 32735;
	OBM_LFARROWI                   := 32734;
	OBM_OLD_CLOSE                  := 32767;
	OBM_SIZE                       := 32766;
	OBM_OLD_UPARROW                := 32765;
	OBM_OLD_DNARROW                := 32764;
	OBM_OLD_RGARROW                := 32763;
	OBM_OLD_LFARROW                := 32762;
	OBM_BTSIZE                     := 32761;
	OBM_CHECK                      := 32760;
	OBM_CHECKBOXES                 := 32759;
	OBM_BTNCORNERS                 := 32758;
	OBM_OLD_REDUCE                 := 32757;
	OBM_OLD_ZOOM                   := 32756;
	OBM_OLD_RESTORE                := 32755;
	OCR_NORMAL                     := 32512;
	OCR_IBEAM                      := 32513;
	OCR_WAIT                       := 32514;
	OCR_CROSS                      := 32515;
	OCR_UP                         := 32516;
	OCR_SIZE                       := 32640;
	OCR_ICON                       := 32641;
	OCR_SIZENWSE                   := 32642;
	OCR_SIZENESW                   := 32643;
	OCR_SIZEWE                     := 32644;
	OCR_SIZENS                     := 32645;
	OCR_SIZEALL                    := 32646;
	OCR_ICOCUR                     := 32647;
	OCR_NO                         := 32648;
	OCR_HAND                       := 32649;
	OCR_APPSTARTING                := 32650;
	OIC_SAMPLE                     := 32512;
	OIC_HAND                       := 32513;
	OIC_QUES                       := 32514;
	OIC_BANG                       := 32515;
	OIC_NOTE                       := 32516;
	OIC_WINLOGO                    := 32517;
	OIC_WARNING                    :=  OIC_BANG;
	OIC_ERROR                      :=  OIC_HAND;
	OIC_INFORMATION                :=  OIC_NOTE;
	ORD_LANGDRIVER                 := 1;
	IDI_APPLICATION                := 32512;
	IDI_HAND                       := 32513;
	IDI_QUESTION                   := 32514;
	IDI_EXCLAMATION                := 32515;
	IDI_ASTERISK                   := 32516;
	IDI_WINLOGO                    := 32517;
	IDI_WARNING                    :=  IDI_EXCLAMATION;
	IDI_ERROR                      :=  IDI_HAND;
	IDI_INFORMATION                :=  IDI_ASTERISK;
	IDOK                           := 1;
	IDCANCEL                       := 2;
	IDABORT                        := 3;
	IDRETRY                        := 4;
	IDIGNORE                       := 5;
	IDYES                          := 6;
	IDNO                           := 7;
	IDCLOSE                        := 8;
	IDHELP                         := 9;
	ES_LEFT                        := $0;
	ES_CENTER                      := $1;
	ES_RIGHT                       := $2;
	ES_MULTILINE                   := $4;
	ES_UPPERCASE                   := $8;
	ES_LOWERCASE                   := $10;
	ES_PASSWORD                    := $20;
	ES_AUTOVSCROLL                 := $40;
	ES_AUTOHSCROLL                 := $80;
	ES_NOHIDESEL                   := $100;
	ES_OEMCONVERT                  := $400;
	ES_READONLY                    := $800;
	ES_WANTRETURN                  := $1000;
	ES_NUMBER                      := $2000;
	EN_SETFOCUS                    := $100;
	EN_KILLFOCUS                   := $200;
	EN_CHANGE                      := $300;
	EN_UPDATE                      := $400;
	EN_ERRSPACE                    := $500;
	EN_MAXTEXT                     := $501;
	EN_HSCROLL                     := $601;
	EN_VSCROLL                     := $602;
	EM_GETSEL                      := $0B0;
	EM_SETSEL                      := $0B1;
	EM_GETRECT                     := $0B2;
	EM_SETRECT                     := $0B3;
	EM_SETRECTNP                   := $0B4;
	EM_SCROLL                      := $0B5;
	EM_LINESCROLL                  := $0B6;
	EM_SCROLLCARET                 := $0B7;
	EM_GETMODIFY                   := $0B8;
	EM_SETMODIFY                   := $0B9;
	EM_GETLINECOUNT                := $0BA;
	EM_LINEINDEX                   := $0BB;
	EM_SETHANDLE                   := $0BC;
	EM_GETHANDLE                   := $0BD;
	EM_GETTHUMB                    := $0BE;
	EM_LINELENGTH                  := $0C1;
	EM_REPLACESEL                  := $0C2;
	EM_GETLINE                     := $0C4;
	EM_LIMITTEXT                   := $0C5;
	EM_CANUNDO                     := $0C6;
	EM_UNDO                        := $0C7;
	EM_FMTLINES                    := $0C8;
	EM_LINEFROMCHAR                := $0C9;
	EM_SETTABSTOPS                 := $0CB;
	EM_SETPASSWORDCHAR             := $0CC;
	EM_EMPTYUNDOBUFFER             := $0CD;
	EM_GETFIRSTVISIBLELINE         := $0CE;
	EM_SETREADONLY                 := $0CF;
	EM_SETWORDBREAKPROC            := $0D0;
	EM_GETWORDBREAKPROC            := $0D1;
	EM_GETPASSWORDCHAR             := $0D2;
	EM_SETMARGINS                  := $0D3;
	EM_GETMARGINS                  := $0D4;
	EM_SETLIMITTEXT                :=  EM_LIMITTEXT;
	EM_GETLIMITTEXT                := $0D5;
	EM_POSFROMCHAR                 := $0D6;
	EM_CHARFROMPOS                 := $0D7;
	EM_SETIMESTATUS                := $0D8;
	EM_GETIMESTATUS                := $0D9;
	WB_LEFT                        := 0;
	WB_RIGHT                       := 1;
	WB_ISDELIMITER                 := 2;
	BS_PUSHBUTTON                  := $0;
	BS_DEFPUSHBUTTON               := $1;
	BS_CHECKBOX                    := $2;
	BS_AUTOCHECKBOX                := $3;
	BS_RADIOBUTTON                 := $4;
	BS_3STATE                      := $5;
	BS_AUTO3STATE                  := $6;
	BS_GROUPBOX                    := $7;
	BS_USERBUTTON                  := $8;
	BS_AUTORADIOBUTTON             := $9;
	BS_OWNERDRAW                   := $0B;
	BS_LEFTTEXT                    := $20;
	BS_BITMAP                      := $80;
	BS_ICON                        := $40;
	BS_TEXT                        := 0;
	BS_LEFT                        := $100;
	BS_RIGHT                       := $200;
	BS_CENTER                      := $300;
	BS_TOP                         := $400;
	BS_BOTTOM                      := $800;
	BS_VCENTER                     := $0C00;
	BS_PUSHLIKE                    := $1000;
	BS_MULTILINE                   := $2000;
	BS_NOTIFY                      := $4000;
	BS_FLAT                        := $8000;
	BS_RIGHTBUTTON                 :=  BS_LEFTTEXT;
	BN_CLICKED                     := 0;
	BN_PAINT                       := 1;
	BN_HILITE                      := 2;
	BN_UNHILITE                    := 3;
	BN_DISABLE                     := 4;
	BN_DOUBLECLICKED               := 5;
	BN_SETFOCUS                    := 6;
	BN_KILLFOCUS                   := 7;
	BN_PUSHED                      :=  BN_HILITE;
	BN_UNPUSHED                    :=  BN_UNHILITE;
	BN_DBLCLK                      :=  BN_DOUBLECLICKED;
	BST_UNCHECKED                  := $00;
	BST_CHECKED                    := 1;
	BST_INDETERMINATE              := 2;
	BST_PUSHED                     := 4;
	BST_FOCUS                      := 8;
	BM_GETCHECK                    := $0F0;
	BM_SETCHECK                    := $0F1;
	BM_GETSTATE                    := $0F2;
	BM_SETSTATE                    := $0F3;
	BM_SETSTYLE                    := $0F4;
	BM_CLICK                       := $0F5;
	BM_GETIMAGE                    := $0F6;
	BM_SETIMAGE                    := $0F7;
	SS_LEFT                        := $0;
	SS_CENTER                      := $1;
	SS_RIGHT                       := $2;
	SS_ICON                        := $3;
	SS_BLACKRECT                   := $4;
	SS_GRAYRECT                    := $5;
	SS_WHITERECT                   := $6;

	SS_BLACKFRAME                  := $7;
	SS_GRAYFRAME                   := $8;
	SS_WHITEFRAME                  := $9;
	SS_USERITEM                    := $0A;
	SS_SIMPLE                      := $0B;
	SS_LEFTNOWORDWRAP              := $0C;
	SS_NOPREFIX                    := $80;
	STM_SETICON                    := $170;
	STM_GETICON                    := $171;
	STM_MSGMAX                     := $172;
	WC_DIALOG                      := 8002;
	DWL_MSGRESULT                  := 0;
	DWL_DLGPROC                    := 4;
	DWL_USER                       := 8;
	DDL_READWRITE                  := $0;
	DDL_READONLY                   := $1;
	DDL_HIDDEN                     := $2;
	DDL_SYSTEM                     := $4;
	DDL_DIRECTORY                  := $10;
	DDL_ARCHIVE                    := $20;
	DDL_POSTMSGS                   := $2000;
	DDL_DRIVES                     := $4000;
	DDL_EXCLUSIVE                  := $8000;
	DS_ABSALIGN                    := $0001;
	DS_SYSMODAL                    := $0002;
	DS_3DLOOK                      := $0004;
	DS_FIXEDSYS                    := $0008;
	DS_NOFAILCREATE                := $0010;
	DS_LOCALEDIT                   := $0020;
	DS_SETFONT                     := $0040;
	DS_MODALFRAME                  := $0080;
	DS_NOIDLEMSG                   := $0100;
	DS_SETFOREGROUND               := $0200;
	DS_CONTROL                     := $0400;
	DS_CENTER                      := $0800;
	DS_CENTERMOUSE                 := $1000;
	DS_CONTEXTHELP                 := $2000;
	DM_GETDEFID                    :=  WM_USER + 0;
	DM_SETDEFID                    :=  WM_USER + 1;
	DC_HASDEFID                    := $534;
	DLGC_WANTARROWS                := $1;
	DLGC_WANTTAB                   := $2;
	DLGC_WANTALLKEYS               := $4;
	DLGC_WANTMESSAGE               := $4;
	DLGC_HASSETSEL                 := $8;
	DLGC_DEFPUSHBUTTON             := $10;
	DLGC_UNDEFPUSHBUTTON           := $20;
	DLGC_RADIOBUTTON               := $40;
	DLGC_WANTCHARS                 := $80;
	DLGC_STATIC                    := $100;
	DLGC_BUTTON                    := $2000;
	LB_CTLCODE                     := 0;
	LB_OKAY                        := 0;
	LB_ERR                         := -1;
	LB_ERRSPACE                    := -2;
	LBN_ERRSPACE                   := -2;
	LBN_SELCHANGE                  := 1;
	LBN_DBLCLK                     := 2;
	LBN_SELCANCEL                  := 3;
	LBN_SETFOCUS                   := 4;
	LBN_KILLFOCUS                  := 5;
	LB_ADDSTRING                   := $180;
	LB_INSERTSTRING                := $181;
	LB_DELETESTRING                := $182;
	LB_SELITEMRANGEEX              := $183;
	LB_RESETCONTENT                := $184;
	LB_SETSEL                      := $185;
	LB_SETCURSEL                   := $186;
	LB_GETSEL                      := $187;
	LB_GETCURSEL                   := $188;
	LB_GETTEXT                     := $189;
	LB_GETTEXTLEN                  := $18A;
	LB_GETCOUNT                    := $18B;
	LB_SELECTSTRING                := $18C;
	LB_DIR                         := $18D;
	LB_GETTOPINDEX                 := $18E;
	LB_FINDSTRING                  := $18F;
	LB_GETSELCOUNT                 := $190;
	LB_GETSELITEMS                 := $191;
	LB_SETTABSTOPS                 := $192;
	LB_GETHORIZONTALEXTENT         := $193;
	LB_SETHORIZONTALEXTENT         := $194;
	LB_SETCOLUMNWIDTH              := $195;
	LB_ADDFILE                     := $196;
	LB_SETTOPINDEX                 := $197;
	LB_GETITEMRECT                 := $198;
	LB_GETITEMDATA                 := $199;
	LB_SETITEMDATA                 := $19A;
	LB_SELITEMRANGE                := $19B;
	LB_SETANCHORINDEX              := $19C;
	LB_GETANCHORINDEX              := $19D;
	LB_SETCARETINDEX               := $19E;
	LB_GETCARETINDEX               := $19F;
	LB_SETITEMHEIGHT               := $1A0;
	LB_GETITEMHEIGHT               := $1A1;
	LB_FINDSTRINGEXACT             := $1A2;
	LB_SETLOCALE                   := $1A5;
	LB_GETLOCALE                   := $1A6;
	LB_SETCOUNT                    := $1A7;
	LB_MSGMAX                      := $1A8;
	LBS_NOTIFY                     := $1;
	LBS_SORT                       := $2;
	LBS_NOREDRAW                   := $4;
	LBS_MULTIPLESEL                := $8;
	LBS_OWNERDRAWFIXED             := $10;
	LBS_OWNERDRAWVARIABLE          := $20;
	LBS_HASSTRINGS                 := $40;
	LBS_USETABSTOPS                := $80;
	LBS_NOINTEGRALHEIGHT           := $100;
	LBS_MULTICOLUMN                := $200;
	LBS_WANTKEYBOARDINPUT          := $400;
	LBS_EXTENDEDSEL                := $800;
	LBS_DISABLENOSCROLL            := $1000;
	LBS_NODATA                     := $2000;
	LBS_STANDARD                   :=  LBS_NOTIFY | LBS_SORT | WS_VSCROLL | WS_BORDER;
	CB_OKAY                        := 0;
	CB_ERR                         := -1;
	CB_ERRSPACE                    := -2;
	CBN_ERRSPACE                   := -1;
	CBN_SELCHANGE                  := 1;
	CBN_DBLCLK                     := 2;
	CBN_SETFOCUS                   := 3;
	CBN_KILLFOCUS                  := 4;
	CBN_EDITCHANGE                 := 5;
	CBN_EDITUPDATE                 := 6;
	CBN_DROPDOWN                   := 7;
	CBN_CLOSEUP                    := 8;
	CBN_SELENDOK                   := 9;
	CBN_SELENDCANCEL               := 10;
	CBS_SIMPLE                     := $1;
	CBS_DROPDOWN                   := $2;
	CBS_DROPDOWNLIST               := $3;
	CBS_OWNERDRAWFIXED             := $10;
	CBS_OWNERDRAWVARIABLE          := $20;
	CBS_AUTOHSCROLL                := $40;
	CBS_OEMCONVERT                 := $80;
	CBS_SORT                       := $100;
	CBS_HASSTRINGS                 := $200;
	CBS_NOINTEGRALHEIGHT           := $400;
	CBS_DISABLENOSCROLL            := $800;
	CB_GETEDITSEL                  := $140;
	CB_LIMITTEXT                   := $141;
	CB_SETEDITSEL                  := $142;
	CB_ADDSTRING                   := $143;
	CB_DELETESTRING                := $144;
	CB_DIR                         := $145;
	CB_GETCOUNT                    := $146;
	CB_GETCURSEL                   := $147;
	CB_GETLBTEXT                   := $148;
	CB_GETLBTEXTLEN                := $149;
	CB_INSERTSTRING                := $14A;
	CB_RESETCONTENT                := $14B;
	CB_FINDSTRING                  := $14C;
	CB_SELECTSTRING                := $14D;
	CB_SETCURSEL                   := $14E;
	CB_SHOWDROPDOWN                := $14F;
	CB_GETITEMDATA                 := $150;
	CB_SETITEMDATA                 := $151;
	CB_GETDROPPEDCONTROLRECT       := $152;
	CB_SETITEMHEIGHT               := $153;
	CB_GETITEMHEIGHT               := $154;
	CB_SETEXTENDEDUI               := $155;
	CB_GETEXTENDEDUI               := $156;
	CB_GETDROPPEDSTATE             := $157;
	CB_FINDSTRINGEXACT             := $158;
	CB_SETLOCALE                   := $159;
	CB_GETLOCALE                   := $15A;
	CB_GETTOPINDEX                 := $15B;
	CB_SETTOPINDEX                 := $15C;
	CB_GETHORIZONTALEXTENT         := $15D;
	CB_SETHORIZONTALEXTENT         := $15E;
	CB_GETDROPPEDWIDTH             := $15F;
	CB_SETDROPPEDWIDTH             := $160;
	CB_INITSTORAGE                 := $161;
	CB_MSGMAX                      := $162;
	SBS_HORZ                       := $0;
	SBS_VERT                       := $1;
	SBS_TOPALIGN                   := $2;
	SBS_LEFTALIGN                  := $2;
	SBS_BOTTOMALIGN                := $4;
	SBS_RIGHTALIGN                 := $4;
	SBS_SIZEBOXTOPLEFTALIGN        := $2;
	SBS_SIZEBOXBOTTOMRIGHTALIGN    := $4;
	SBS_SIZEBOX                    := $8;
	SBS_SIZEGRIP                   := $10;
	SBM_SETPOS                     := $0E0;
	SBM_GETPOS                     := $0E1;
	SBM_SETRANGE                   := $0E2;
	SBM_SETRANGEREDRAW             := $0E6;
	SBM_GETRANGE                   := $0E3;
	SBM_ENABLE_ARROWS              := $0E4;
	MDIS_ALLCHILDSTYLES            := $1;
	MDITILE_VERTICAL               := $0;
	MDITILE_HORIZONTAL             := $1;
	MDITILE_SKIPDISABLED           := $2;
	HELP_CONTEXT                   := $1;
	HELP_QUIT                      := $2;
	HELP_INDEX                     := $3;
	HELP_CONTENTS                  := $3;
	HELP_HELPONHELP                := $4;
	HELP_SETINDEX                  := $5;
	HELP_SETCONTENTS               := $5;
	HELP_CONTEXTPOPUP              := $8;
	HELP_FORCEFILE                 := $9;
	HELP_KEY                       := $101;
	HELP_COMMAND                   := $102;
	HELP_PARTIALKEY                := $105;
	HELP_MULTIKEY                  := $201;
	HELP_SETWINPOS                 := $203;
	HELP_CONTEXTMENU               := $000A;
	HELP_FINDER                    := $000B;
	HELP_WM_HELP                   := $000C;
	HELP_SETPOPUP_POS              := $000D;
	HELP_TCARD                     := $8000;
	HELP_TCARD_DATA                := $0010;
	HELP_TCARD_OTHER_CALLER        := $0011;
	IDH_NO_HELP                    := 28440;
	IDH_MISSING_CONTEXT            := 28441;
	IDH_GENERIC_HELP_BUTTON        := 28442;
	IDH_OK                         := 28443;
	IDH_CANCEL                     := 28444;
	IDH_HELP                       := 28445;
	SPI_GETBEEP                    := 1;
	SPI_SETBEEP                    := 2;
	SPI_GETMOUSE                   := 3;
	SPI_SETMOUSE                   := 4;
	SPI_GETBORDER                  := 5;
	SPI_SETBORDER                  := 6;
	SPI_GETKEYBOARDSPEED           := 10;
	SPI_SETKEYBOARDSPEED           := 11;
	SPI_LANGDRIVER                 := 12;
	SPI_ICONHORIZONTALSPACING      := 13;
	SPI_GETSCREENSAVETIMEOUT       := 14;
	SPI_SETSCREENSAVETIMEOUT       := 15;
	SPI_GETSCREENSAVEACTIVE        := 16;
	SPI_SETSCREENSAVEACTIVE        := 17;
	SPI_GETGRIDGRANULARITY         := 18;
	SPI_SETGRIDGRANULARITY         := 19;
	SPI_SETDESKWALLPAPER           := 20;
	SPI_SETDESKPATTERN             := 21;
	SPI_GETKEYBOARDDELAY           := 22;
	SPI_SETKEYBOARDDELAY           := 23;
	SPI_ICONVERTICALSPACING        := 24;
	SPI_GETICONTITLEWRAP           := 25;
	SPI_SETICONTITLEWRAP           := 26;
	SPI_GETMENUDROPALIGNMENT       := 27;
	SPI_SETMENUDROPALIGNMENT       := 28;
	SPI_SETDOUBLECLKWIDTH          := 29;
	SPI_SETDOUBLECLKHEIGHT         := 30;
	SPI_GETICONTITLELOGFONT        := 31;
	SPI_SETDOUBLECLICKTIME         := 32;
	SPI_SETMOUSEBUTTONSWAP         := 33;
	SPI_SETICONTITLELOGFONT        := 34;
	SPI_GETFASTTASKSWITCH          := 35;
	SPI_SETFASTTASKSWITCH          := 36;
	SPI_SETDRAGFULLWINDOWS         := 37;
	SPI_GETDRAGFULLWINDOWS         := 38;
	SPI_GETNONCLIENTMETRICS        := 41;
	SPI_SETNONCLIENTMETRICS        := 42;
	SPI_GETMINIMIZEDMETRICS        := 43;
	SPI_SETMINIMIZEDMETRICS        := 44;
	SPI_GETICONMETRICS             := 45;
	SPI_SETICONMETRICS             := 46;
	SPI_SETWORKAREA                := 47;
	SPI_GETWORKAREA                := 48;
	SPI_SETPENWINDOWS              := 49;
	SPI_GETFILTERKEYS              := 50;
	SPI_SETFILTERKEYS              := 51;
	SPI_GETTOGGLEKEYS              := 52;
	SPI_SETTOGGLEKEYS              := 53;
	SPI_GETMOUSEKEYS               := 54;
	SPI_SETMOUSEKEYS               := 55;
	SPI_GETSHOWSOUNDS              := 56;
	SPI_SETSHOWSOUNDS              := 57;
	SPI_GETSTICKYKEYS              := 58;
	SPI_SETSTICKYKEYS              := 59;
	SPI_GETACCESSTIMEOUT           := 60;
	SPI_SETACCESSTIMEOUT           := 61;
	SPI_GETSERIALKEYS              := 62;
	SPI_SETSERIALKEYS              := 63;
	SPI_GETSOUNDSENTRY             := 64;
	SPI_SETSOUNDSENTRY             := 65;
	SPI_GETHIGHCONTRAST            := 66;
	SPI_SETHIGHCONTRAST            := 67;
	SPI_GETKEYBOARDPREF            := 68;
	SPI_SETKEYBOARDPREF            := 69;
	SPI_GETSCREENREADER            := 70;
	SPI_SETSCREENREADER            := 71;
	SPI_GETANIMATION               := 72;
	SPI_SETANIMATION               := 73;
	SPI_GETFONTSMOOTHING           := 74;
	SPI_SETFONTSMOOTHING           := 75;
	SPI_SETDRAGWIDTH               := 76;
	SPI_SETDRAGHEIGHT              := 77;
	SPI_SETHANDHELD                := 78;
	SPI_GETLOWPOWERTIMEOUT         := 79;
	SPI_GETPOWEROFFTIMEOUT         := 80;
	SPI_SETLOWPOWERTIMEOUT         := 81;
	SPI_SETPOWEROFFTIMEOUT         := 82;
	SPI_GETLOWPOWERACTIVE          := 83;
	SPI_GETPOWEROFFACTIVE          := 84;
	SPI_SETLOWPOWERACTIVE          := 85;
	SPI_SETPOWEROFFACTIVE          := 86;
	SPI_SETCURSORS                 := 87;
	SPI_SETICONS                   := 88;
	SPI_GETDEFAULTINPUTLANG        := 89;
	SPI_SETDEFAULTINPUTLANG        := 90;
	SPI_SETLANGTOGGLE              := 91;
	SPI_GETWINDOWSEXTENSION        := 92;
	SPI_SETMOUSETRAILS             := 93;
	SPI_GETMOUSETRAILS             := 94;
	SPI_SCREENSAVERRUNNING         := 97;
	SPIF_UPDATEINIFILE             := $1;
	SPIF_SENDWININICHANGE          := $2;
	WM_DDE_FIRST                   := $3E0;
	WM_DDE_INITIATE                :=  WM_DDE_FIRST;
	WM_DDE_TERMINATE               :=  WM_DDE_FIRST + 1;
	WM_DDE_ADVISE                  :=  WM_DDE_FIRST + 2;
	WM_DDE_UNADVISE                :=  WM_DDE_FIRST + 3;
	WM_DDE_ACK                     :=  WM_DDE_FIRST + 4;
	WM_DDE_DATA                    :=  WM_DDE_FIRST + 5;
	WM_DDE_REQUEST                 :=  WM_DDE_FIRST + 6;
	WM_DDE_POKE                    :=  WM_DDE_FIRST + 7;
	WM_DDE_EXECUTE                 :=  WM_DDE_FIRST + 8;
	WM_DDE_LAST                    :=  WM_DDE_FIRST + 8;
	XST_NULL                       := 0;
	XST_INCOMPLETE                 := 1;
	XST_CONNECTED                  := 2;
	XST_INIT1                      := 3;
	XST_INIT2                      := 4;
	XST_REQSENT                    := 5;
	XST_DATARCVD                   := 6;
	XST_POKESENT                   := 7;
	XST_POKEACKRCVD                := 8;
	XST_EXECSENT                   := 9;
	XST_EXECACKRCVD                := 10;
	XST_ADVSENT                    := 11;
	XST_UNADVSENT                  := 12;
	XST_ADVACKRCVD                 := 13;
	XST_UNADVACKRCVD               := 14;
	XST_ADVDATASENT                := 15;
	XST_ADVDATAACKRCVD             := 16;
	CADV_LATEACK                   := $0FFFF;
	ST_CONNECTED                   := $1;
	ST_ADVISE                      := $2;
	ST_ISLOCAL                     := $4;
	ST_BLOCKED                     := $8;
	ST_CLIENT                      := $10;
	ST_TERMINATED                  := $20;
	ST_INLIST                      := $40;
	ST_BLOCKNEXT                   := $80;
	ST_ISSELF                      := $100;
	DDE_FACK                       := $8000;
	DDE_FBUSY                      := $4000;
	DDE_FDEFERUPD                  := $4000;
	DDE_FACKREQ                    := $8000;
	DDE_FRELEASE                   := $2000;
	DDE_FREQUESTED                 := $1000;
	DDE_FAPPSTATUS                 := $0FF;
	DDE_FNOTPROCESSED              := $0;
	DDE_FACKRESERVED               := ! DDE_FACK | DDE_FBUSY | DDE_FAPPSTATUS;
	DDE_FADVRESERVED               := ! DDE_FACKREQ | DDE_FDEFERUPD;
	DDE_FDATRESERVED               := ! DDE_FACKREQ | DDE_FRELEASE | DDE_FREQUESTED;
	DDE_FPOKRESERVED               := ! DDE_FRELEASE;
	CP_WINANSI                     := 1004;
	CP_WINUNICODE                  := 1200;
	XTYPF_NOBLOCK                  := $2;
	XTYPF_NODATA                   := $4;
	XTYPF_ACKREQ                   := $8;
	XCLASS_MASK                    := $0FC00;
	XCLASS_BOOL                    := $1000;
	XCLASS_DATA                    := $2000;
	XCLASS_FLAGS                   := $4000;
	XCLASS_NOTIFICATION            := $8000;
	XTYP_ERROR                     :=  $0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK;
	XTYP_ADVDATA                   :=  $10 | XCLASS_FLAGS;
	XTYP_ADVREQ                    :=  $20 | XCLASS_DATA | XTYPF_NOBLOCK;
	XTYP_ADVSTART                  :=  $30 | XCLASS_BOOL;
	XTYP_ADVSTOP                   :=  $40 | XCLASS_NOTIFICATION;
	XTYP_EXECUTE                   :=  $50 | XCLASS_FLAGS;
	XTYP_CONNECT                   :=  $60 | XCLASS_BOOL | XTYPF_NOBLOCK;
	XTYP_CONNECT_CONFIRM           :=  $70 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK;
	XTYP_XACT_COMPLETE             :=  $80 | XCLASS_NOTIFICATION;
	XTYP_POKE                      :=  $90 | XCLASS_FLAGS;
	XTYP_REGISTER                  :=  $0A0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK;
	XTYP_REQUEST                   :=  $0B0 | XCLASS_DATA;
	XTYP_DISCONNECT                :=  $0C0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK;
	XTYP_UNREGISTER                :=  $0D0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK;
	XTYP_WILDCONNECT               :=  $0E0 | XCLASS_DATA | XTYPF_NOBLOCK;
	XTYP_MASK                      := $0F0;
	XTYP_SHIFT                     := 4;
	TIMEOUT_ASYNC                  := $0FFFF;
	QID_SYNC                       := $0FFFF;
	CBR_BLOCK                      := $0FFFF;
	CBF_FAIL_SELFCONNECTIONS       := $1000;
	CBF_FAIL_CONNECTIONS           := $2000;
	CBF_FAIL_ADVISES               := $4000;
	CBF_FAIL_EXECUTES              := $8000;
	CBF_FAIL_POKES                 := $10000;
	CBF_FAIL_REQUESTS              := $20000;
	CBF_FAIL_ALLSVRXACTIONS        := $3F000;
	CBF_SKIP_CONNECT_CONFIRMS      := $40000;
	CBF_SKIP_REGISTRATIONS         := $80000;
	CBF_SKIP_UNREGISTRATIONS       := $100000;
	CBF_SKIP_DISCONNECTS           := $200000;
	CBF_SKIP_ALLNOTIFICATIONS      := $3C0000;
	APPCMD_CLIENTONLY              := $10;
	APPCMD_FILTERINITS             := $20;
	APPCMD_MASK                    := $0FF0;
	APPCLASS_STANDARD              := $0;
	APPCLASS_MASK                  := $0F;
	EC_ENABLEALL                   := 0;
	EC_ENABLEONE                   :=  ST_BLOCKNEXT;
	EC_DISABLE                     :=  ST_BLOCKED;
	EC_QUERYWAITING                := 2;
	DNS_REGISTER                   := $1;
	DNS_UNREGISTER                 := $2;
	DNS_FILTERON                   := $4;
	DNS_FILTEROFF                  := $8;
	HDATA_APPOWNED                 := $1;
	DMLERR_NO_ERROR                := 0;
	DMLERR_FIRST                   := $4000;
	DMLERR_ADVACKTIMEOUT           := $4000;
	DMLERR_BUSY                    := $4001;
	DMLERR_DATAACKTIMEOUT          := $4002;
	DMLERR_DLL_NOT_INITIALIZED     := $4003;
	DMLERR_DLL_USAGE               := $4004;
	DMLERR_EXECACKTIMEOUT          := $4005;
	DMLERR_INVALIDPARAMETER        := $4006;
	DMLERR_LOW_MEMORY              := $4007;
	DMLERR_MEMORY_ERROR            := $4008;
	DMLERR_NOTPROCESSED            := $4009;
	DMLERR_NO_CONV_ESTABLISHED     := $400A;
	DMLERR_POKEACKTIMEOUT          := $400B;
	DMLERR_POSTMSG_FAILED          := $400C;
	DMLERR_REENTRANCY              := $400D;
	DMLERR_SERVER_DIED             := $400E;
	DMLERR_SYS_ERROR               := $400F;
	DMLERR_UNADVACKTIMEOUT         := $4010;
	DMLERR_UNFOUND_QUEUE_ID        := $4011;
	DMLERR_LAST                    := $4011;
	MH_CREATE                      := 1;
	MH_KEEP                        := 2;
	MH_DELETE                      := 3;
	MH_CLEANUP                     := 4;
	MAX_MONITORS                   := 4;
	APPCLASS_MONITOR               := $1;
	XTYP_MONITOR                   :=  $0F0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK;
	MF_HSZ_INFO                    := $1000000;
	MF_SENDMSGS                    := $2000000;
	MF_POSTMSGS                    := $4000000;
	MF_CALLBACKS                   := $8000000;
	MF_ERRORS                      := $10000000;
	MF_LINKS                       := $20000000;
	MF_CONV                        := $40000000;
	MF_MASK                        := $0FF000000;
	NO_ERROR                       := 0;
	ERROR_SUCCESS                  := 0;
	ERROR_INVALID_FUNCTION         := 1;
	ERROR_FILE_NOT_FOUND           := 2;
	ERROR_PATH_NOT_FOUND           := 3;
	ERROR_TOO_MANY_OPEN_FILES      := 4;
	ERROR_ACCESS_DENIED            := 5;
	ERROR_INVALID_HANDLE           := 6;
	ERROR_ARENA_TRASHED            := 7;
	ERROR_NOT_ENOUGH_MEMORY        := 8;
	ERROR_INVALID_BLOCK            := 9;
	ERROR_BAD_ENVIRONMENT          := 10;
	ERROR_BAD_FORMAT               := 11;
	ERROR_INVALID_ACCESS           := 12;
	ERROR_INVALID_DATA             := 13;
	ERROR_OUTOFMEMORY              := 14;
	ERROR_INVALID_DRIVE            := 15;
	ERROR_CURRENT_DIRECTORY        := 16;
	ERROR_NOT_SAME_DEVICE          := 17;
	ERROR_NO_MORE_FILES            := 18;
	ERROR_WRITE_PROTECT            := 19;
	ERROR_BAD_UNIT                 := 20;
	ERROR_NOT_READY                := 21;
	ERROR_BAD_COMMAND              := 22;
	ERROR_CRC                      := 23;
	ERROR_BAD_LENGTH               := 24;
	ERROR_SEEK                     := 25;
	ERROR_NOT_DOS_DISK             := 26;
	ERROR_SECTOR_NOT_FOUND         := 27;
	ERROR_OUT_OF_PAPER             := 28;
	ERROR_WRITE_FAULT              := 29;
	ERROR_READ_FAULT               := 30;
	ERROR_GEN_FAILURE              := 31;
	ERROR_SHARING_VIOLATION        := 32;
	ERROR_LOCK_VIOLATION           := 33;
	ERROR_WRONG_DISK               := 34;
	ERROR_SHARING_BUFFER_EXCEEDED  := 36;
	ERROR_HANDLE_EOF               := 38;
	ERROR_HANDLE_DISK_FULL         := 39;
	ERROR_NOT_SUPPORTED            := 50;
	ERROR_REM_NOT_LIST             := 51;
	ERROR_DUP_NAME                 := 52;
	ERROR_BAD_NETPATH              := 53;
	ERROR_NETWORK_BUSY             := 54;
	ERROR_DEV_NOT_EXIST            := 55;
	ERROR_TOO_MANY_CMDS            := 56;
	ERROR_ADAP_HDW_ERR             := 57;
	ERROR_BAD_NET_RESP             := 58;
	ERROR_UNEXP_NET_ERR            := 59;
	ERROR_BAD_REM_ADAP             := 60;
	ERROR_PRINTQ_FULL              := 61;
	ERROR_NO_SPOOL_SPACE           := 62;
	ERROR_PRINT_CANCELLED          := 63;
	ERROR_NETNAME_DELETED          := 64;
	ERROR_NETWORK_ACCESS_DENIED    := 65;
	ERROR_BAD_DEV_TYPE             := 66;
	ERROR_BAD_NET_NAME             := 67;
	ERROR_TOO_MANY_NAMES           := 68;
	ERROR_TOO_MANY_SESS            := 69;
	ERROR_SHARING_PAUSED           := 70;
	ERROR_REQ_NOT_ACCEP            := 71;
	ERROR_REDIR_PAUSED             := 72;
	ERROR_FILE_EXISTS              := 80;
	ERROR_CANNOT_MAKE              := 82;
	ERROR_FAIL_I24                 := 83;
	ERROR_OUT_OF_STRUCTURES        := 84;
	ERROR_ALREADY_ASSIGNED         := 85;
	ERROR_INVALID_PASSWORD         := 86;
	ERROR_INVALID_PARAMETER        := 87;
	ERROR_NET_WRITE_FAULT          := 88;
	ERROR_NO_PROC_SLOTS            := 89;
	ERROR_TOO_MANY_SEMAPHORES      := 100;
	ERROR_EXCL_SEM_ALREADY_OWNED   := 101;
	ERROR_SEM_IS_SET               := 102;
	ERROR_TOO_MANY_SEM_REQUESTS    := 103;
	ERROR_INVALID_AT_INTERRUPT_TIME := 104;
	ERROR_SEM_OWNER_DIED           := 105;
	ERROR_SEM_USER_LIMIT           := 106;
	ERROR_DISK_CHANGE              := 107;
	ERROR_DRIVE_LOCKED             := 108;
	ERROR_BROKEN_PIPE              := 109;
	ERROR_OPEN_FAILED              := 110;
	ERROR_BUFFER_OVERFLOW          := 111;
	ERROR_DISK_FULL                := 112;
	ERROR_NO_MORE_SEARCH_HANDLES   := 113;
	ERROR_INVALID_TARGET_HANDLE    := 114;
	ERROR_INVALID_CATEGORY         := 117;
	ERROR_INVALID_VERIFY_SWITCH    := 118;
	ERROR_BAD_DRIVER_LEVEL         := 119;
	ERROR_CALL_NOT_IMPLEMENTED     := 120;
	ERROR_SEM_TIMEOUT              := 121;
	ERROR_INSUFFICIENT_BUFFER      := 122;
	ERROR_INVALID_NAME             := 123;
	ERROR_INVALID_LEVEL            := 124;
	ERROR_NO_VOLUME_LABEL          := 125;
	ERROR_MOD_NOT_FOUND            := 126;
	ERROR_PROC_NOT_FOUND           := 127;
	ERROR_WAIT_NO_CHILDREN         := 128;
	ERROR_CHILD_NOT_COMPLETE       := 129;
	ERROR_DIRECT_ACCESS_HANDLE     := 130;
	ERROR_NEGATIVE_SEEK            := 131;
	ERROR_SEEK_ON_DEVICE           := 132;
	ERROR_IS_JOIN_TARGET           := 133;
	ERROR_IS_JOINED                := 134;
	ERROR_IS_SUBSTED               := 135;
	ERROR_NOT_JOINED               := 136;
	ERROR_NOT_SUBSTED              := 137;
	ERROR_JOIN_TO_JOIN             := 138;
	ERROR_SUBST_TO_SUBST           := 139;
	ERROR_JOIN_TO_SUBST            := 140;
	ERROR_SUBST_TO_JOIN            := 141;
	ERROR_BUSY_DRIVE               := 142;
	ERROR_SAME_DRIVE               := 143;
	ERROR_DIR_NOT_ROOT             := 144;
	ERROR_DIR_NOT_EMPTY            := 145;
	ERROR_IS_SUBST_PATH            := 146;
	ERROR_IS_JOIN_PATH             := 147;
	ERROR_PATH_BUSY                := 148;
	ERROR_IS_SUBST_TARGET          := 149;
	ERROR_SYSTEM_TRACE             := 150;
	ERROR_INVALID_EVENT_COUNT      := 151;
	ERROR_TOO_MANY_MUXWAITERS      := 152;
	ERROR_INVALID_LIST_FORMAT      := 153;
	ERROR_LABEL_TOO_LONG           := 154;
	ERROR_TOO_MANY_TCBS            := 155;
	ERROR_SIGNAL_REFUSED           := 156;
	ERROR_DISCARDED                := 157;
	ERROR_NOT_LOCKED               := 158;
	ERROR_BAD_THREADID_ADDR        := 159;
	ERROR_BAD_ARGUMENTS            := 160;
	ERROR_BAD_PATHNAME             := 161;
	ERROR_SIGNAL_PENDING           := 162;
	ERROR_MAX_THRDS_REACHED        := 164;
	ERROR_LOCK_FAILED              := 167;
	ERROR_BUSY                     := 170;
	ERROR_CANCEL_VIOLATION         := 173;
	ERROR_ATOMIC_LOCKS_NOT_SUPPORTED := 174;
	ERROR_INVALID_SEGMENT_NUMBER   := 180;
	ERROR_INVALID_ORDINAL          := 182;
	ERROR_ALREADY_EXISTS           := 183;
	ERROR_INVALID_FLAG_NUMBER      := 186;
	ERROR_SEM_NOT_FOUND            := 187;
	ERROR_INVALID_STARTING_CODESEG := 188;
	ERROR_INVALID_STACKSEG         := 189;
	ERROR_INVALID_MODULETYPE       := 190;
	ERROR_INVALID_EXE_SIGNATURE    := 191;
	ERROR_EXE_MARKED_INVALID       := 192;
	ERROR_BAD_EXE_FORMAT           := 193;
	ERROR_ITERATED_DATA_EXCEEDS_64k := 194;
	ERROR_INVALID_MINALLOCSIZE     := 195;
	ERROR_DYNLINK_FROM_INVALID_RING := 196;
	ERROR_IOPL_NOT_ENABLED         := 197;
	ERROR_INVALID_SEGDPL           := 198;
	ERROR_AUTODATASEG_EXCEEDS_64k  := 199;
	ERROR_RING2SEG_MUST_BE_MOVABLE := 200;
	ERROR_RELOC_CHAIN_XEEDS_SEGLIM := 201;
	ERROR_INFLOOP_IN_RELOC_CHAIN   := 202;
	ERROR_ENVVAR_NOT_FOUND         := 203;
	ERROR_NO_SIGNAL_SENT           := 205;
	ERROR_FILENAME_EXCED_RANGE     := 206;
	ERROR_RING2_STACK_IN_USE       := 207;
	ERROR_META_EXPANSION_TOO_LONG  := 208;
	ERROR_INVALID_SIGNAL_NUMBER    := 209;
	ERROR_THREAD_1_INACTIVE        := 210;
	ERROR_LOCKED                   := 212;
	ERROR_TOO_MANY_MODULES         := 214;
	ERROR_NESTING_NOT_ALLOWED      := 215;
	ERROR_BAD_PIPE                 := 230;
	ERROR_PIPE_BUSY                := 231;
	ERROR_NO_DATA                  := 232;
	ERROR_PIPE_NOT_CONNECTED       := 233;
	ERROR_MORE_DATA                := 234;
	ERROR_VC_DISCONNECTED          := 240;
	ERROR_INVALID_EA_NAME          := 254;
	ERROR_EA_LIST_INCONSISTENT     := 255;
	ERROR_NO_MORE_ITEMS            := 259;
	ERROR_CANNOT_COPY              := 266;
	ERROR_DIRECTORY                := 267;
	ERROR_EAS_DIDNT_FIT            := 275;
	ERROR_EA_FILE_CORRUPT          := 276;
	ERROR_EA_TABLE_FULL            := 277;
	ERROR_INVALID_EA_HANDLE        := 278;
	ERROR_EAS_NOT_SUPPORTED        := 282;
	ERROR_NOT_OWNER                := 288;
	ERROR_TOO_MANY_POSTS           := 298;
	ERROR_MR_MID_NOT_FOUND         := 317;
	ERROR_INVALID_ADDRESS          := 487;
	ERROR_ARITHMETIC_OVERFLOW      := 534;
	ERROR_PIPE_CONNECTED           := 535;
	ERROR_PIPE_LISTENING           := 536;
	ERROR_EA_ACCESS_DENIED         := 994;
	ERROR_OPERATION_ABORTED        := 995;
	ERROR_IO_INCOMPLETE            := 996;
	ERROR_IO_PENDING               := 997;
	ERROR_NOACCESS                 := 998;
	ERROR_SWAPERROR                := 999;
	ERROR_STACK_OVERFLOW           := 1001;
	ERROR_INVALID_MESSAGE          := 1002;
	ERROR_CAN_NOT_COMPLETE         := 1003;
	ERROR_INVALID_FLAGS            := 1004;
	ERROR_UNRECOGNIZED_VOLUME      := 1005;
	ERROR_FILE_INVALID             := 1006;
	ERROR_FULLSCREEN_MODE          := 1007;
	ERROR_NO_TOKEN                 := 1008;
	ERROR_BADDB                    := 1009;
	ERROR_BADKEY                   := 1010;
	ERROR_CANTOPEN                 := 1011;
	ERROR_CANTREAD                 := 1012;
	ERROR_CANTWRITE                := 1013;
	ERROR_REGISTRY_RECOVERED       := 1014;
	ERROR_REGISTRY_CORRUPT         := 1015;
	ERROR_REGISTRY_IO_FAILED       := 1016;
	ERROR_NOT_REGISTRY_FILE        := 1017;
	ERROR_KEY_DELETED              := 1018;
	ERROR_NO_LOG_SPACE             := 1019;
	ERROR_KEY_HAS_CHILDREN         := 1020;
	ERROR_CHILD_MUST_BE_VOLATILE   := 1021;
	ERROR_NOTIFY_ENUM_DIR          := 1022;
	ERROR_DEPENDENT_SERVICES_RUNNING := 1051;
	ERROR_INVALID_SERVICE_CONTROL  := 1052;
	ERROR_SERVICE_REQUEST_TIMEOUT  := 1053;
	ERROR_SERVICE_NO_THREAD        := 1054;
	ERROR_SERVICE_DATABASE_LOCKED  := 1055;
	ERROR_SERVICE_ALREADY_RUNNING  := 1056;
	ERROR_INVALID_SERVICE_ACCOUNT  := 1057;
	ERROR_SERVICE_DISABLED         := 1058;
	ERROR_CIRCULAR_DEPENDENCY      := 1059;
	ERROR_SERVICE_DOES_NOT_EXIST   := 1060;
	ERROR_SERVICE_CANNOT_ACCEPT_CTRL := 1061;
	ERROR_SERVICE_NOT_ACTIVE       := 1062;
	ERROR_FAILED_SERVICE_CONTROLLER_CONNECT := 1063;
	ERROR_EXCEPTION_IN_SERVICE     := 1064;
	ERROR_DATABASE_DOES_NOT_EXIST  := 1065;
	ERROR_SERVICE_SPECIFIC_ERROR   := 1066;
	ERROR_PROCESS_ABORTED          := 1067;
	ERROR_SERVICE_DEPENDENCY_FAIL  := 1068;
	ERROR_SERVICE_LOGON_FAILED     := 1069;
	ERROR_SERVICE_START_HANG       := 1070;
	ERROR_INVALID_SERVICE_LOCK     := 1071;
	ERROR_SERVICE_MARKED_FOR_DELETE := 1072;
	ERROR_SERVICE_EXISTS           := 1073;
	ERROR_ALREADY_RUNNING_LKG      := 1074;
	ERROR_SERVICE_DEPENDENCY_DELETED := 1075;
	ERROR_BOOT_ALREADY_ACCEPTED    := 1076;
	ERROR_SERVICE_NEVER_STARTED    := 1077;
	ERROR_DUPLICATE_SERVICE_NAME   := 1078;
	ERROR_END_OF_MEDIA             := 1100;
	ERROR_FILEMARK_DETECTED        := 1101;
	ERROR_BEGINNING_OF_MEDIA       := 1102;
	ERROR_SETMARK_DETECTED         := 1103;
	ERROR_NO_DATA_DETECTED         := 1104;
	ERROR_PARTITION_FAILURE        := 1105;
	ERROR_INVALID_BLOCK_LENGTH     := 1106;
	ERROR_DEVICE_NOT_PARTITIONED   := 1107;
	ERROR_UNABLE_TO_LOCK_MEDIA     := 1108;
	ERROR_UNABLE_TO_UNLOAD_MEDIA   := 1109;
	ERROR_MEDIA_CHANGED            := 1110;
	ERROR_BUS_RESET                := 1111;
	ERROR_NO_MEDIA_IN_DRIVE        := 1112;
	ERROR_NO_UNICODE_TRANSLATION   := 1113;
	ERROR_DLL_INIT_FAILED          := 1114;
	ERROR_SHUTDOWN_IN_PROGRESS     := 1115;
	ERROR_NO_SHUTDOWN_IN_PROGRESS  := 1116;
	ERROR_IO_DEVICE                := 1117;
	ERROR_SERIAL_NO_DEVICE         := 1118;
	ERROR_IRQ_BUSY                 := 1119;
	ERROR_MORE_WRITES              := 1120;
	ERROR_COUNTER_TIMEOUT          := 1121;
	ERROR_FLOPPY_ID_MARK_NOT_FOUND := 1122;
	ERROR_FLOPPY_WRONG_CYLINDER    := 1123;
	ERROR_FLOPPY_UNKNOWN_ERROR     := 1124;
	ERROR_FLOPPY_BAD_REGISTERS     := 1125;
	ERROR_DISK_RECALIBRATE_FAILED  := 1126;
	ERROR_DISK_OPERATION_FAILED    := 1127;
	ERROR_DISK_RESET_FAILED        := 1128;
	ERROR_EOM_OVERFLOW             := 1129;
	ERROR_NOT_ENOUGH_SERVER_MEMORY := 1130;
	ERROR_POSSIBLE_DEADLOCK        := 1131;
	ERROR_MAPPED_ALIGNMENT         := 1132;
	ERROR_INVALID_PIXEL_FORMAT     := 2000;
	ERROR_BAD_DRIVER               := 2001;
	ERROR_INVALID_WINDOW_STYLE     := 2002;
	ERROR_METAFILE_NOT_SUPPORTED   := 2003;
	ERROR_TRANSFORM_NOT_SUPPORTED  := 2004;
	ERROR_CLIPPING_NOT_SUPPORTED   := 2005;
	ERROR_UNKNOWN_PRINT_MONITOR    := 3000;
	ERROR_PRINTER_DRIVER_IN_USE    := 3001;
	ERROR_SPOOL_FILE_NOT_FOUND     := 3002;
	ERROR_SPL_NO_STARTDOC          := 3003;
	ERROR_SPL_NO_ADDJOB            := 3004;
	ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED := 3005;
	ERROR_PRINT_MONITOR_ALREADY_INSTALLED := 3006;
	ERROR_WINS_INTERNAL            := 4000;
	ERROR_CAN_NOT_DEL_LOCAL_WINS   := 4001;
	ERROR_STATIC_INIT              := 4002;
	ERROR_INC_BACKUP               := 4003;
	ERROR_FULL_BACKUP              := 4004;
	ERROR_REC_NON_EXISTENT         := 4005;
	ERROR_RPL_NOT_ALLOWED          := 4006;
	SEVERITY_SUCCESS               := 0;
	SEVERITY_ERROR                 := 1;
	FACILITY_NT_BIT                := $10000000;
	NOERROR                        := 0;
	E_UNEXPECTED                   := $8000FFFF;
	E_NOTIMPL                      := $80004001;
	E_OUTOFMEMORY                  := $8007000E;
	E_INVALIDARG                   := $80070057;
	E_NOINTERFACE                  := $80004002;
	E_POINTER                      := $80004003;
	E_HANDLE                       := $80070006;
	E_ABORT                        := $80004004;
	E_FAIL                         := $80004005;
	E_ACCESSDENIED                 := $80070005;
	CO_E_INIT_TLS                  := $80004006;
	CO_E_INIT_SHARED_ALLOCATOR     := $80004007;
	CO_E_INIT_MEMORY_ALLOCATOR     := $80004008;
	CO_E_INIT_CLASS_CACHE          := $80004009;
	CO_E_INIT_RPC_CHANNEL          := $8000400A;
	CO_E_INIT_TLS_SET_CHANNEL_CONTROL := $8000400B;
	CO_E_INIT_TLS_CHANNEL_CONTROL  := $8000400C;
	CO_E_INIT_UNACCEPTED_USER_ALLOCATOR := $8000400D;
	CO_E_INIT_SCM_MUTEX_EXISTS     := $8000400E;
	CO_E_INIT_SCM_FILE_MAPPING_EXISTS := $8000400F;
	CO_E_INIT_SCM_MAP_VIEW_OF_FILE := $80004010;
	CO_E_INIT_SCM_EXEC_FAILURE     := $80004011;
	CO_E_INIT_ONLY_SINGLE_THREADED := $80004012;
	S_OK                           := $0;
	S_FALSE                        := $1;
	OLE_E_FIRST                    := $80040000;
	OLE_E_LAST                     := $800400FF;
	OLE_S_FIRST                    := $40000;
	OLE_S_LAST                     := $400FF;
	OLE_E_OLEVERB                  := $80040000;
	OLE_E_ADVF                     := $80040001;
	OLE_E_ENUM_NOMORE              := $80040002;
	OLE_E_ADVISENOTSUPPORTED       := $80040003;
	OLE_E_NOCONNECTION             := $80040004;
	OLE_E_NOTRUNNING               := $80040005;
	OLE_E_NOCACHE                  := $80040006;
	OLE_E_BLANK                    := $80040007;
	OLE_E_CLASSDIFF                := $80040008;
	OLE_E_CANT_GETMONIKER          := $80040009;
	OLE_E_CANT_BINDTOSOURCE        := $8004000A;
	OLE_E_STATIC                   := $8004000B;
	OLE_E_PROMPTSAVECANCELLED      := $8004000C;
	OLE_E_INVALIDRECT              := $8004000D;
	OLE_E_WRONGCOMPOBJ             := $8004000E;
	OLE_E_INVALIDHWND              := $8004000F;
	OLE_E_NOT_INPLACEACTIVE        := $80040010;
	OLE_E_CANTCONVERT              := $80040011;
	OLE_E_NOSTORAGE                := $80040012;
	DV_E_FORMATETC                 := $80040064;
	DV_E_DVTARGETDEVICE            := $80040065;
	DV_E_STGMEDIUM                 := $80040066;
	DV_E_STATDATA                  := $80040067;
	DV_E_LINDEX                    := $80040068;
	DV_E_TYMED                     := $80040069;
	DV_E_CLIPFORMAT                := $8004006A;
	DV_E_DVASPECT                  := $8004006B;
	DV_E_DVTARGETDEVICE_SIZE       := $8004006C;
	DV_E_NOIVIEWOBJECT             := $8004006D;
	DRAGDROP_E_FIRST               := $80040100;
	DRAGDROP_E_LAST                := $8004010F;
	DRAGDROP_S_FIRST               := $40100;
	DRAGDROP_S_LAST                := $4010F;
	DRAGDROP_E_NOTREGISTERED       := $80040100;
	DRAGDROP_E_ALREADYREGISTERED   := $80040101;
	DRAGDROP_E_INVALIDHWND         := $80040102;
	CLASSFACTORY_E_FIRST           := $80040110;
	CLASSFACTORY_E_LAST            := $8004011F;
	CLASSFACTORY_S_FIRST           := $40110;
	CLASSFACTORY_S_LAST            := $4011F;
	CLASS_E_NOAGGREGATION          := $80040110;
	CLASS_E_CLASSNOTAVAILABLE      := $80040111;
	MARSHAL_E_FIRST                := $80040120;
	MARSHAL_E_LAST                 := $8004012F;
	MARSHAL_S_FIRST                := $40120;
	MARSHAL_S_LAST                 := $4012F;
	DATA_E_FIRST                   := $80040130;
	DATA_E_LAST                    := $8004013F;
	DATA_S_FIRST                   := $40130;
	DATA_S_LAST                    := $4013F;
	VIEW_E_FIRST                   := $80040140;
	VIEW_E_LAST                    := $8004014F;
	VIEW_S_FIRST                   := $40140;
	VIEW_S_LAST                    := $4014F;
	VIEW_E_DRAW                    := $80040140;
	REGDB_E_FIRST                  := $80040150;
	REGDB_E_LAST                   := $8004015F;
	REGDB_S_FIRST                  := $40150;
	REGDB_S_LAST                   := $4015F;
	REGDB_E_READREGDB              := $80040150;
	REGDB_E_WRITEREGDB             := $80040151;
	REGDB_E_KEYMISSING             := $80040152;
	REGDB_E_INVALIDVALUE           := $80040153;
	REGDB_E_CLASSNOTREG            := $80040154;
	REGDB_E_IIDNOTREG              := $80040155;
	CACHE_E_FIRST                  := $80040170;
	CACHE_E_LAST                   := $8004017F;
	CACHE_S_FIRST                  := $40170;
	CACHE_S_LAST                   := $4017F;
	CACHE_E_NOCACHE_UPDATED        := $80040170;
	OLEOBJ_E_FIRST                 := $80040180;
	OLEOBJ_E_LAST                  := $8004018F;
	OLEOBJ_S_FIRST                 := $40180;
	OLEOBJ_S_LAST                  := $4018F;
	OLEOBJ_E_NOVERBS               := $80040180;
	OLEOBJ_E_INVALIDVERB           := $80040181;
	CLIENTSITE_E_FIRST             := $80040190;
	CLIENTSITE_E_LAST              := $8004019F;
	CLIENTSITE_S_FIRST             := $40190;
	CLIENTSITE_S_LAST              := $4019F;
	INPLACE_E_NOTUNDOABLE          := $800401A0;
	INPLACE_E_NOTOOLSPACE          := $800401A1;
	INPLACE_E_FIRST                := $800401A0;
	INPLACE_E_LAST                 := $800401AF;
	INPLACE_S_FIRST                := $401A0;
	INPLACE_S_LAST                 := $401AF;
	ENUM_E_FIRST                   := $800401B0;
	ENUM_E_LAST                    := $800401BF;
	ENUM_S_FIRST                   := $401B0;
	ENUM_S_LAST                    := $401BF;
	CONVERT10_E_FIRST              := $800401C0;
	CONVERT10_E_LAST               := $800401CF;
	CONVERT10_S_FIRST              := $401C0;
	CONVERT10_S_LAST               := $401CF;
	CONVERT10_E_OLESTREAM_GET      := $800401C0;
	CONVERT10_E_OLESTREAM_PUT      := $800401C1;
	CONVERT10_E_OLESTREAM_FMT      := $800401C2;
	CONVERT10_E_OLESTREAM_BITMAP_TO_DIB := $800401C3;
	CONVERT10_E_STG_FMT            := $800401C4;
	CONVERT10_E_STG_NO_STD_STREAM  := $800401C5;
	CONVERT10_E_STG_DIB_TO_BITMAP  := $800401C6;
	CLIPBRD_E_FIRST                := $800401D0;
	CLIPBRD_E_LAST                 := $800401DF;
	CLIPBRD_S_FIRST                := $401D0;
	CLIPBRD_S_LAST                 := $401DF;
	CLIPBRD_E_CANT_OPEN            := $800401D0;
	CLIPBRD_E_CANT_EMPTY           := $800401D1;
	CLIPBRD_E_CANT_SET             := $800401D2;
	CLIPBRD_E_BAD_DATA             := $800401D3;
	CLIPBRD_E_CANT_CLOSE           := $800401D4;
	MK_E_FIRST                     := $800401E0;
	MK_E_LAST                      := $800401EF;
	MK_S_FIRST                     := $401E0;
	MK_S_LAST                      := $401EF;
	MK_E_CONNECTMANUALLY           := $800401E0;
	MK_E_EXCEEDEDDEADLINE          := $800401E1;
	MK_E_NEEDGENERIC               := $800401E2;
	MK_E_UNAVAILABLE               := $800401E3;
	MK_E_SYNTAX                    := $800401E4;
	MK_E_NOOBJECT                  := $800401E5;
	MK_E_INVALIDEXTENSION          := $800401E6;
	MK_E_INTERMEDIATEINTERFACENOTSUPPORTED := $800401E7;
	MK_E_NOTBINDABLE               := $800401E8;
	MK_E_NOTBOUND                  := $800401E9;
	MK_E_CANTOPENFILE              := $800401EA;
	MK_E_MUSTBOTHERUSER            := $800401EB;
	MK_E_NOINVERSE                 := $800401EC;
	MK_E_NOSTORAGE                 := $800401ED;
	MK_E_NOPREFIX                  := $800401EE;
	MK_E_ENUMERATION_FAILED        := $800401EF;
	CO_E_FIRST                     := $800401F0;
	CO_E_LAST                      := $800401FF;
	CO_S_FIRST                     := $401F0;
	CO_S_LAST                      := $401FF;
	CO_E_NOTINITIALIZED            := $800401F0;
	CO_E_ALREADYINITIALIZED        := $800401F1;
	CO_E_CANTDETERMINECLASS        := $800401F2;
	CO_E_CLASSSTRING               := $800401F3;
	CO_E_IIDSTRING                 := $800401F4;
	CO_E_APPNOTFOUND               := $800401F5;
	CO_E_APPSINGLEUSE              := $800401F6;
	CO_E_ERRORINAPP                := $800401F7;
	CO_E_DLLNOTFOUND               := $800401F8;
	CO_E_ERRORINDLL                := $800401F9;
	CO_E_WRONGOSFORAPP             := $800401FA;
	CO_E_OBJNOTREG                 := $800401FB;
	CO_E_OBJISREG                  := $800401FC;
	CO_E_OBJNOTCONNECTED           := $800401FD;
	CO_E_APPDIDNTREG               := $800401FE;
	CO_E_RELEASED                  := $800401FF;
	OLE_S_USEREG                   := $40000;
	OLE_S_STATIC                   := $40001;
	OLE_S_MAC_CLIPFORMAT           := $40002;
	DRAGDROP_S_DROP                := $40100;
	DRAGDROP_S_CANCEL              := $40101;
	DRAGDROP_S_USEDEFAULTCURSORS   := $40102;
	DATA_S_SAMEFORMATETC           := $40130;
	VIEW_S_ALREADY_FROZEN          := $40140;
	CACHE_S_FORMATETC_NOTSUPPORTED := $40170;
	CACHE_S_SAMECACHE              := $40171;
	CACHE_S_SOMECACHES_NOTUPDATED  := $40172;
	OLEOBJ_S_INVALIDVERB           := $40180;
	OLEOBJ_S_CANNOT_DOVERB_NOW     := $40181;
	OLEOBJ_S_INVALIDHWND           := $40182;
	INPLACE_S_TRUNCATED            := $401A0;
	CONVERT10_S_NO_PRESENTATION    := $401C0;
	MK_S_REDUCED_TO_SELF           := $401E2;
	MK_S_ME                        := $401E4;
	MK_S_HIM                       := $401E5;
	MK_S_US                        := $401E6;
	MK_S_MONIKERALREADYREGISTERED  := $401E7;
	CO_E_CLASS_CREATE_FAILED       := $80080001;
	CO_E_SCM_ERROR                 := $80080002;
	CO_E_SCM_RPC_FAILURE           := $80080003;
	CO_E_BAD_PATH                  := $80080004;
	CO_E_SERVER_EXEC_FAILURE       := $80080005;
	CO_E_OBJSRV_RPC_FAILURE        := $80080006;
	MK_E_NO_NORMALIZED             := $80080007;
	CO_E_SERVER_STOPPING           := $80080008;
	MEM_E_INVALID_ROOT             := $80080009;
	MEM_E_INVALID_LINK             := $80080010;
	MEM_E_INVALID_SIZE             := $80080011;
	DISP_E_UNKNOWNINTERFACE        := $80020001;
	DISP_E_MEMBERNOTFOUND          := $80020003;
	DISP_E_PARAMNOTFOUND           := $80020004;
	DISP_E_TYPEMISMATCH            := $80020005;
	DISP_E_UNKNOWNNAME             := $80020006;
	DISP_E_NONAMEDARGS             := $80020007;
	DISP_E_BADVARTYPE              := $80020008;
	DISP_E_EXCEPTION               := $80020009;
	DISP_E_OVERFLOW                := $8002000A;
	DISP_E_BADINDEX                := $8002000B;
	DISP_E_UNKNOWNLCID             := $8002000C;
	DISP_E_ARRAYISLOCKED           := $8002000D;
	DISP_E_BADPARAMCOUNT           := $8002000E;
	DISP_E_PARAMNOTOPTIONAL        := $8002000F;
	DISP_E_BADCALLEE               := $80020010;
	DISP_E_NOTACOLLECTION          := $80020011;
	TYPE_E_BUFFERTOOSMALL          := $80028016;
	TYPE_E_INVDATAREAD             := $80028018;
	TYPE_E_UNSUPFORMAT             := $80028019;
	TYPE_E_REGISTRYACCESS          := $8002801C;
	TYPE_E_LIBNOTREGISTERED        := $8002801D;
	TYPE_E_UNDEFINEDTYPE           := $80028027;
	TYPE_E_QUALIFIEDNAMEDISALLOWED := $80028028;
	TYPE_E_INVALIDSTATE            := $80028029;
	TYPE_E_WRONGTYPEKIND           := $8002802A;
	TYPE_E_ELEMENTNOTFOUND         := $8002802B;
	TYPE_E_AMBIGUOUSNAME           := $8002802C;
	TYPE_E_NAMECONFLICT            := $8002802D;
	TYPE_E_UNKNOWNLCID             := $8002802E;
	TYPE_E_DLLFUNCTIONNOTFOUND     := $8002802F;
	TYPE_E_BADMODULEKIND           := $800288BD;
	TYPE_E_SIZETOOBIG              := $800288C5;
	TYPE_E_DUPLICATEID             := $800288C6;
	TYPE_E_INVALIDID               := $800288CF;
	TYPE_E_TYPEMISMATCH            := $80028CA0;
	TYPE_E_OUTOFBOUNDS             := $80028CA1;
	TYPE_E_IOERROR                 := $80028CA2;
	TYPE_E_CANTCREATETMPFILE       := $80028CA3;
	TYPE_E_CANTLOADLIBRARY         := $80029C4A;
	TYPE_E_INCONSISTENTPROPFUNCS   := $80029C83;
	TYPE_E_CIRCULARTYPE            := $80029C84;
	STG_E_INVALIDFUNCTION          := $80030001;
	STG_E_FILENOTFOUND             := $80030002;
	STG_E_PATHNOTFOUND             := $80030003;
	STG_E_TOOMANYOPENFILES         := $80030004;
	STG_E_ACCESSDENIED             := $80030005;
	STG_E_INVALIDHANDLE            := $80030006;
	STG_E_INSUFFICIENTMEMORY       := $80030008;
	STG_E_INVALIDPOINTER           := $80030009;
	STG_E_NOMOREFILES              := $80030012;
	STG_E_DISKISWRITEPROTECTED     := $80030013;
	STG_E_SEEKERROR                := $80030019;
	STG_E_WRITEFAULT               := $8003001D;
	STG_E_READFAULT                := $8003001E;
	STG_E_SHAREVIOLATION           := $80030020;
	STG_E_LOCKVIOLATION            := $80030021;
	STG_E_FILEALREADYEXISTS        := $80030050;
	STG_E_INVALIDPARAMETER         := $80030057;
	STG_E_MEDIUMFULL               := $80030070;
	STG_E_ABNORMALAPIEXIT          := $800300FA;
	STG_E_INVALIDHEADER            := $800300FB;
	STG_E_INVALIDNAME              := $800300FC;
	STG_E_UNKNOWN                  := $800300FD;
	STG_E_UNIMPLEMENTEDFUNCTION    := $800300FE;
	STG_E_INVALIDFLAG              := $800300FF;
	STG_E_INUSE                    := $80030100;
	STG_E_NOTCURRENT               := $80030101;
	STG_E_REVERTED                 := $80030102;
	STG_E_CANTSAVE                 := $80030103;
	STG_E_OLDFORMAT                := $80030104;
	STG_E_OLDDLL                   := $80030105;
	STG_E_SHAREREQUIRED            := $80030106;
	STG_E_NOTFILEBASEDSTORAGE      := $80030107;
	STG_E_EXTANTMARSHALLINGS       := $80030108;
	STG_S_CONVERTED                := $30200;
	RPC_E_CALL_REJECTED            := $80010001;
	RPC_E_CALL_CANCELED            := $80010002;
	RPC_E_CANTPOST_INSENDCALL      := $80010003;
	RPC_E_CANTCALLOUT_INASYNCCALL  := $80010004;
	RPC_E_CANTCALLOUT_INEXTERNALCALL := $80010005;
	RPC_E_CONNECTION_TERMINATED    := $80010006;
	RPC_E_SERVER_DIED              := $80010007;
	RPC_E_CLIENT_DIED              := $80010008;
	RPC_E_INVALID_DATAPACKET       := $80010009;
	RPC_E_CANTTRANSMIT_CALL        := $8001000A;
	RPC_E_CLIENT_CANTMARSHAL_DATA  := $8001000B;
	RPC_E_CLIENT_CANTUNMARSHAL_DATA := $8001000C;
	RPC_E_SERVER_CANTMARSHAL_DATA  := $8001000D;
	RPC_E_SERVER_CANTUNMARSHAL_DATA := $8001000E;
	RPC_E_INVALID_DATA             := $8001000F;
	RPC_E_INVALID_PARAMETER        := $80010010;
	RPC_E_CANTCALLOUT_AGAIN        := $80010011;
	RPC_E_SERVER_DIED_DNE          := $80010012;
	RPC_E_SYS_CALL_FAILED          := $80010100;
	RPC_E_OUT_OF_RESOURCES         := $80010101;
	RPC_E_ATTEMPTED_MULTITHREAD    := $80010102;
	RPC_E_NOT_REGISTERED           := $80010103;
	RPC_E_FAULT                    := $80010104;
	RPC_E_SERVERFAULT              := $80010105;
	RPC_E_CHANGED_MODE             := $80010106;
	RPC_E_INVALIDMETHOD            := $80010107;
	RPC_E_DISCONNECTED             := $80010108;
	RPC_E_RETRY                    := $80010109;
	RPC_E_SERVERCALL_RETRYLATER    := $8001010A;
	RPC_E_SERVERCALL_REJECTED      := $8001010B;
	RPC_E_INVALID_CALLDATA         := $8001010C;
	RPC_E_CANTCALLOUT_ININPUTSYNCCALL := $8001010D;
	RPC_E_WRONG_THREAD             := $8001010E;
	RPC_E_THREAD_NOT_INIT          := $8001010F;
	RPC_E_UNEXPECTED               := $8001FFFF;
	ERROR_BAD_USERNAME             := 2202;
	ERROR_NOT_CONNECTED            := 2250;
	ERROR_OPEN_FILES               := 2401;
	ERROR_DEVICE_IN_USE            := 2404;
	ERROR_BAD_DEVICE               := 1200;
	ERROR_CONNECTION_UNAVAIL       := 1201;
	ERROR_DEVICE_ALREADY_REMEMBERED := 1202;
	ERROR_NO_NET_OR_BAD_PATH       := 1203;
	ERROR_BAD_PROVIDER             := 1204;
	ERROR_CANNOT_OPEN_PROFILE      := 1205;
	ERROR_BAD_PROFILE              := 1206;
	ERROR_NOT_CONTAINER            := 1207;
	ERROR_EXTENDED_ERROR           := 1208;
	ERROR_INVALID_GROUPNAME        := 1209;
	ERROR_INVALID_COMPUTERNAME     := 1210;
	ERROR_INVALID_EVENTNAME        := 1211;
	ERROR_INVALID_DOMAINNAME       := 1212;
	ERROR_INVALID_SERVICENAME      := 1213;
	ERROR_INVALID_NETNAME          := 1214;
	ERROR_INVALID_SHARENAME        := 1215;
	ERROR_INVALID_PASSWORDNAME     := 1216;
	ERROR_INVALID_MESSAGENAME      := 1217;
	ERROR_INVALID_MESSAGEDEST      := 1218;
	ERROR_SESSION_CREDENTIAL_CONFLICT := 1219;
	ERROR_REMOTE_SESSION_LIMIT_EXCEEDED := 1220;
	ERROR_DUP_DOMAINNAME           := 1221;
	ERROR_NO_NETWORK               := 1222;
	ERROR_NOT_ALL_ASSIGNED         := 1300;
	ERROR_SOME_NOT_MAPPED          := 1301;
	ERROR_NO_QUOTAS_FOR_ACCOUNT    := 1302;
	ERROR_LOCAL_USER_SESSION_KEY   := 1303;
	ERROR_NULL_LM_PASSWORD         := 1304;
	ERROR_UNKNOWN_REVISION         := 1305;
	ERROR_REVISION_MISMATCH        := 1306;
	ERROR_INVALID_OWNER            := 1307;
	ERROR_INVALID_PRIMARY_GROUP    := 1308;
	ERROR_NO_IMPERSONATION_TOKEN   := 1309;
	ERROR_CANT_DISABLE_MANDATORY   := 1310;
	ERROR_NO_LOGON_SERVERS         := 1311;
	ERROR_NO_SUCH_LOGON_SESSION    := 1312;
	ERROR_NO_SUCH_PRIVILEGE        := 1313;
	ERROR_PRIVILEGE_NOT_HELD       := 1314;
	ERROR_INVALID_ACCOUNT_NAME     := 1315;
	ERROR_USER_EXISTS              := 1316;
	ERROR_NO_SUCH_USER             := 1317;
	ERROR_GROUP_EXISTS             := 1318;
	ERROR_NO_SUCH_GROUP            := 1319;
	ERROR_MEMBER_IN_GROUP          := 1320;
	ERROR_MEMBER_NOT_IN_GROUP      := 1321;
	ERROR_LAST_ADMIN               := 1322;
	ERROR_WRONG_PASSWORD           := 1323;
	ERROR_ILL_FORMED_PASSWORD      := 1324;
	ERROR_PASSWORD_RESTRICTION     := 1325;
	ERROR_LOGON_FAILURE            := 1326;
	ERROR_ACCOUNT_RESTRICTION      := 1327;
	ERROR_INVALID_LOGON_HOURS      := 1328;
	ERROR_INVALID_WORKSTATION      := 1329;
	ERROR_PASSWORD_EXPIRED         := 1330;
	ERROR_ACCOUNT_DISABLED         := 1331;
	ERROR_NONE_MAPPED              := 1332;
	ERROR_TOO_MANY_LUIDS_REQUESTED := 1333;
	ERROR_LUIDS_EXHAUSTED          := 1334;
	ERROR_INVALID_SUB_AUTHORITY    := 1335;
	ERROR_INVALID_ACL              := 1336;
	ERROR_INVALID_SID              := 1337;
	ERROR_INVALID_SECURITY_DESCR   := 1338;
	ERROR_BAD_INHERITANCE_ACL      := 1340;
	ERROR_SERVER_DISABLED          := 1341;
	ERROR_SERVER_NOT_DISABLED      := 1342;
	ERROR_INVALID_ID_AUTHORITY     := 1343;
	ERROR_ALLOTTED_SPACE_EXCEEDED  := 1344;
	ERROR_INVALID_GROUP_ATTRIBUTES := 1345;
	ERROR_BAD_IMPERSONATION_LEVEL  := 1346;
	ERROR_CANT_OPEN_ANONYMOUS      := 1347;
	ERROR_BAD_VALIDATION_CLASS     := 1348;
	ERROR_BAD_TOKEN_TYPE           := 1349;
	ERROR_NO_SECURITY_ON_OBJECT    := 1350;
	ERROR_CANT_ACCESS_DOMAIN_INFO  := 1351;
	ERROR_INVALID_SERVER_STATE     := 1352;
	ERROR_INVALID_DOMAIN_STATE     := 1353;
	ERROR_INVALID_DOMAIN_ROLE      := 1354;
	ERROR_NO_SUCH_DOMAIN           := 1355;
	ERROR_DOMAIN_EXISTS            := 1356;
	ERROR_DOMAIN_LIMIT_EXCEEDED    := 1357;
	ERROR_INTERNAL_DB_CORRUPTION   := 1358;
	ERROR_INTERNAL_ERROR           := 1359;
	ERROR_GENERIC_NOT_MAPPED       := 1360;
	ERROR_BAD_DESCRIPTOR_FORMAT    := 1361;
	ERROR_NOT_LOGON_PROCESS        := 1362;
	ERROR_LOGON_SESSION_EXISTS     := 1363;
	ERROR_NO_SUCH_PACKAGE          := 1364;
	ERROR_BAD_LOGON_SESSION_STATE  := 1365;
	ERROR_LOGON_SESSION_COLLISION  := 1366;
	ERROR_INVALID_LOGON_TYPE       := 1367;
	ERROR_CANNOT_IMPERSONATE       := 1368;
	ERROR_RXACT_INVALID_STATE      := 1369;
	ERROR_RXACT_COMMIT_FAILURE     := 1370;
	ERROR_SPECIAL_ACCOUNT          := 1371;
	ERROR_SPECIAL_GROUP            := 1372;
	ERROR_SPECIAL_USER             := 1373;
	ERROR_MEMBERS_PRIMARY_GROUP    := 1374;
	ERROR_TOKEN_ALREADY_IN_USE     := 1375;
	ERROR_NO_SUCH_ALIAS            := 1376;
	ERROR_MEMBER_NOT_IN_ALIAS      := 1377;
	ERROR_MEMBER_IN_ALIAS          := 1378;
	ERROR_ALIAS_EXISTS             := 1379;
	ERROR_LOGON_NOT_GRANTED        := 1380;
	ERROR_TOO_MANY_SECRETS         := 1381;
	ERROR_SECRET_TOO_LONG          := 1382;
	ERROR_INTERNAL_DB_ERROR        := 1383;
	ERROR_TOO_MANY_CONTEXT_IDS     := 1384;
	ERROR_LOGON_TYPE_NOT_GRANTED   := 1385;
	ERROR_NT_CROSS_ENCRYPTION_REQUIRED := 1386;
	ERROR_NO_SUCH_MEMBER           := 1387;
	ERROR_INVALID_MEMBER           := 1388;
	ERROR_TOO_MANY_SIDS            := 1389;
	ERROR_LM_CROSS_ENCRYPTION_REQUIRED := 1390;
	ERROR_NO_INHERITANCE           := 1391;
	ERROR_FILE_CORRUPT             := 1392;
	ERROR_DISK_CORRUPT             := 1393;
	ERROR_NO_USER_SESSION_KEY      := 1394;
	ERROR_INVALID_WINDOW_HANDLE    := 1400;
	ERROR_INVALID_MENU_HANDLE      := 1401;
	ERROR_INVALID_CURSOR_HANDLE    := 1402;
	ERROR_INVALID_ACCEL_HANDLE     := 1403;
	ERROR_INVALID_HOOK_HANDLE      := 1404;
	ERROR_INVALID_DWP_HANDLE       := 1405;
	ERROR_TLW_WITH_WSCHILD         := 1406;
	ERROR_CANNOT_FIND_WND_CLASS    := 1407;
	ERROR_WINDOW_OF_OTHER_THREAD   := 1408;
	ERROR_HOTKEY_ALREADY_REGISTERED := 1409;
	ERROR_CLASS_ALREADY_EXISTS     := 1410;
	ERROR_CLASS_DOES_NOT_EXIST     := 1411;
	ERROR_CLASS_HAS_WINDOWS        := 1412;
	ERROR_INVALID_INDEX            := 1413;
	ERROR_INVALID_ICON_HANDLE      := 1414;
	ERROR_PRIVATE_DIALOG_INDEX     := 1415;
	ERROR_LISTBOX_ID_NOT_FOUND     := 1416;
	ERROR_NO_WILDCARD_CHARACTERS   := 1417;
	ERROR_CLIPBOARD_NOT_OPEN       := 1418;
	ERROR_HOTKEY_NOT_REGISTERED    := 1419;
	ERROR_WINDOW_NOT_DIALOG        := 1420;
	ERROR_CONTROL_ID_NOT_FOUND     := 1421;
	ERROR_INVALID_COMBOBOX_MESSAGE := 1422;
	ERROR_WINDOW_NOT_COMBOBOX      := 1423;
	ERROR_INVALID_EDIT_HEIGHT      := 1424;
	ERROR_DC_NOT_FOUND             := 1425;
	ERROR_INVALID_HOOK_FILTER      := 1426;
	ERROR_INVALID_FILTER_PROC      := 1427;
	ERROR_HOOK_NEEDS_HMOD          := 1428;
	ERROR_PUBLIC_ONLY_HOOK         := 1429;
	ERROR_JOURNAL_HOOK_SET         := 1430;
	ERROR_HOOK_NOT_INSTALLED       := 1431;
	ERROR_INVALID_LB_MESSAGE       := 1432;
	ERROR_SETCOUNT_ON_BAD_LB       := 1433;
	ERROR_LB_WITHOUT_TABSTOPS      := 1434;
	ERROR_DESTROY_OBJECT_OF_OTHER_THREAD := 1435;
	ERROR_CHILD_WINDOW_MENU        := 1436;
	ERROR_NO_SYSTEM_MENU           := 1437;
	ERROR_INVALID_MSGBOX_STYLE     := 1438;
	ERROR_INVALID_SPI_VALUE        := 1439;
	ERROR_SCREEN_ALREADY_LOCKED    := 1440;
	ERROR_HWNDS_HAVE_DIFF_PARENT   := 1441;
	ERROR_NOT_CHILD_WINDOW         := 1442;
	ERROR_INVALID_GW_COMMAND       := 1443;
	ERROR_INVALID_THREAD_ID        := 1444;
	ERROR_NON_MDICHILD_WINDOW      := 1445;
	ERROR_POPUP_ALREADY_ACTIVE     := 1446;
	ERROR_NO_SCROLLBARS            := 1447;
	ERROR_INVALID_SCROLLBAR_RANGE  := 1448;
	ERROR_INVALID_SHOWWIN_COMMAND  := 1449;
	ERROR_EVENTLOG_FILE_CORRUPT    := 1500;
	ERROR_EVENTLOG_CANT_START      := 1501;
	ERROR_LOG_FILE_FULL            := 1502;
	ERROR_EVENTLOG_FILE_CHANGED    := 1503;
	RPC_S_INVALID_STRING_BINDING   := 1700;
	RPC_S_WRONG_KIND_OF_BINDING    := 1701;
	RPC_S_INVALID_BINDING          := 1702;
	RPC_S_PROTSEQ_NOT_SUPPORTED    := 1703;
	RPC_S_INVALID_RPC_PROTSEQ      := 1704;
	RPC_S_INVALID_STRING_UUID      := 1705;
	RPC_S_INVALID_ENDPOINT_FORMAT  := 1706;
	RPC_S_INVALID_NET_ADDR         := 1707;
	RPC_S_NO_ENDPOINT_FOUND        := 1708;
	RPC_S_INVALID_TIMEOUT          := 1709;
	RPC_S_OBJECT_NOT_FOUND         := 1710;
	RPC_S_ALREADY_REGISTERED       := 1711;
	RPC_S_TYPE_ALREADY_REGISTERED  := 1712;
	RPC_S_ALREADY_LISTENING        := 1713;
	RPC_S_NO_PROTSEQS_REGISTERED   := 1714;
	RPC_S_NOT_LISTENING            := 1715;
	RPC_S_UNKNOWN_MGR_TYPE         := 1716;
	RPC_S_UNKNOWN_IF               := 1717;
	RPC_S_NO_BINDINGS              := 1718;
	RPC_S_NO_PROTSEQS              := 1719;
	RPC_S_CANT_CREATE_ENDPOINT     := 1720;
	RPC_S_OUT_OF_RESOURCES         := 1721;
	RPC_S_SERVER_UNAVAILABLE       := 1722;
	RPC_S_SERVER_TOO_BUSY          := 1723;
	RPC_S_INVALID_NETWORK_OPTIONS  := 1724;
	RPC_S_NO_CALL_ACTIVE           := 1725;
	RPC_S_CALL_FAILED              := 1726;
	RPC_S_CALL_FAILED_DNE          := 1727;
	RPC_S_PROTOCOL_ERROR           := 1728;
	RPC_S_UNSUPPORTED_TRANS_SYN    := 1730;
	RPC_S_UNSUPPORTED_TYPE         := 1732;
	RPC_S_INVALID_TAG              := 1733;
	RPC_S_INVALID_BOUND            := 1734;
	RPC_S_NO_ENTRY_NAME            := 1735;
	RPC_S_INVALID_NAME_SYNTAX      := 1736;
	RPC_S_UNSUPPORTED_NAME_SYNTAX  := 1737;
	RPC_S_UUID_NO_ADDRESS          := 1739;
	RPC_S_DUPLICATE_ENDPOINT       := 1740;
	RPC_S_UNKNOWN_AUTHN_TYPE       := 1741;
	RPC_S_MAX_CALLS_TOO_SMALL      := 1742;
	RPC_S_STRING_TOO_LONG          := 1743;
	RPC_S_PROTSEQ_NOT_FOUND        := 1744;
	RPC_S_PROCNUM_OUT_OF_RANGE     := 1745;
	RPC_S_BINDING_HAS_NO_AUTH      := 1746;
	RPC_S_UNKNOWN_AUTHN_SERVICE    := 1747;
	RPC_S_UNKNOWN_AUTHN_LEVEL      := 1748;
	RPC_S_INVALID_AUTH_IDENTITY    := 1749;
	RPC_S_UNKNOWN_AUTHZ_SERVICE    := 1750;
	EPT_S_INVALID_ENTRY            := 1751;
	EPT_S_CANT_PERFORM_OP          := 1752;
	EPT_S_NOT_REGISTERED           := 1753;
	RPC_S_NOTHING_TO_EXPORT        := 1754;
	RPC_S_INCOMPLETE_NAME          := 1755;
	RPC_S_INVALID_VERS_OPTION      := 1756;
	RPC_S_NO_MORE_MEMBERS          := 1757;
	RPC_S_NOT_ALL_OBJS_UNEXPORTED  := 1758;
	RPC_S_INTERFACE_NOT_FOUND      := 1759;
	RPC_S_ENTRY_ALREADY_EXISTS     := 1760;
	RPC_S_ENTRY_NOT_FOUND          := 1761;
	RPC_S_NAME_SERVICE_UNAVAILABLE := 1762;
	RPC_S_INVALID_NAF_ID           := 1763;
	RPC_S_CANNOT_SUPPORT           := 1764;
	RPC_S_NO_CONTEXT_AVAILABLE     := 1765;
	RPC_S_INTERNAL_ERROR           := 1766;
	RPC_S_ZERO_DIVIDE              := 1767;
	RPC_S_ADDRESS_ERROR            := 1768;
	RPC_S_FP_DIV_ZERO              := 1769;
	RPC_S_FP_UNDERFLOW             := 1770;
	RPC_S_FP_OVERFLOW              := 1771;
	RPC_X_NO_MORE_ENTRIES          := 1772;
	RPC_X_SS_CHAR_TRANS_OPEN_FAIL  := 1773;
	RPC_X_SS_CHAR_TRANS_SHORT_FILE := 1774;
	RPC_X_SS_IN_NULL_CONTEXT       := 1775;
	RPC_X_SS_CONTEXT_DAMAGED       := 1777;
	RPC_X_SS_HANDLES_MISMATCH      := 1778;
	RPC_X_SS_CANNOT_GET_CALL_HANDLE := 1779;
	RPC_X_NULL_REF_POINTER         := 1780;
	RPC_X_ENUM_VALUE_OUT_OF_RANGE  := 1781;
	RPC_X_BYTE_COUNT_TOO_SMALL     := 1782;
	RPC_X_BAD_STUB_DATA            := 1783;
	ERROR_INVALID_USER_BUFFER      := 1784;
	ERROR_UNRECOGNIZED_MEDIA       := 1785;
	ERROR_NO_TRUST_LSA_SECRET      := 1786;
	ERROR_NO_TRUST_SAM_ACCOUNT     := 1787;
	ERROR_TRUSTED_DOMAIN_FAILURE   := 1788;
	ERROR_TRUSTED_RELATIONSHIP_FAILURE := 1789;
	ERROR_TRUST_FAILURE            := 1790;
	RPC_S_CALL_IN_PROGRESS         := 1791;
	ERROR_NETLOGON_NOT_STARTED     := 1792;
	ERROR_ACCOUNT_EXPIRED          := 1793;
	ERROR_REDIRECTOR_HAS_OPEN_HANDLES := 1794;
	ERROR_PRINTER_DRIVER_ALREADY_INSTALLED := 1795;
	ERROR_UNKNOWN_PORT             := 1796;
	ERROR_UNKNOWN_PRINTER_DRIVER   := 1797;
	ERROR_UNKNOWN_PRINTPROCESSOR   := 1798;
	ERROR_INVALID_SEPARATOR_FILE   := 1799;
	ERROR_INVALID_PRIORITY         := 1800;
	ERROR_INVALID_PRINTER_NAME     := 1801;
	ERROR_PRINTER_ALREADY_EXISTS   := 1802;
	ERROR_INVALID_PRINTER_COMMAND  := 1803;
	ERROR_INVALID_DATATYPE         := 1804;
	ERROR_INVALID_ENVIRONMENT      := 1805;
	RPC_S_NO_MORE_BINDINGS         := 1806;
	ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT := 1807;
	ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT := 1808;
	ERROR_NOLOGON_SERVER_TRUST_ACCOUNT := 1809;
	ERROR_DOMAIN_TRUST_INCONSISTENT := 1810;
	ERROR_SERVER_HAS_OPEN_HANDLES  := 1811;
	ERROR_RESOURCE_DATA_NOT_FOUND  := 1812;
	ERROR_RESOURCE_TYPE_NOT_FOUND  := 1813;
	ERROR_RESOURCE_NAME_NOT_FOUND  := 1814;
	ERROR_RESOURCE_LANG_NOT_FOUND  := 1815;
	ERROR_NOT_ENOUGH_QUOTA         := 1816;
	RPC_S_GROUP_MEMBER_NOT_FOUND   := 1898;
	EPT_S_CANT_CREATE              := 1899;
	RPC_S_INVALID_OBJECT           := 1900;
	ERROR_INVALID_TIME             := 1901;
	ERROR_INVALID_FORM_NAME        := 1902;
	ERROR_INVALID_FORM_SIZE        := 1903;
	ERROR_ALREADY_WAITING          := 1904;
	ERROR_PRINTER_DELETED          := 1905;
	ERROR_INVALID_PRINTER_STATE    := 1906;
	ERROR_NO_BROWSER_SERVERS_FOUND := 6118;
	TIME_MS                        := $1;
	TIME_SAMPLES                   := $2;
	TIME_BYTES                     := $4;
	TIME_SMPTE                     := $8;
	TIME_MIDI                      := $10;
	MM_JOY1MOVE                    := $3A0;
	MM_JOY2MOVE                    := $3A1;
	MM_JOY1ZMOVE                   := $3A2;
	MM_JOY2ZMOVE                   := $3A3;
	MM_JOY1BUTTONDOWN              := $3B5;
	MM_JOY2BUTTONDOWN              := $3B6;
	MM_JOY1BUTTONUP                := $3B7;
	MM_JOY2BUTTONUP                := $3B8;
	MM_MCINOTIFY                   := $3B9;
	MM_MCISYSTEM_STRING            := $3CA;
	MM_WOM_OPEN                    := $3BB;
	MM_WOM_CLOSE                   := $3BC;
	MM_WOM_DONE                    := $3BD;
	MM_WIM_OPEN                    := $3BE;
	MM_WIM_CLOSE                   := $3BF;
	MM_WIM_DATA                    := $3C0;
	MM_MIM_OPEN                    := $3C1;
	MM_MIM_CLOSE                   := $3C2;
	MM_MIM_DATA                    := $3C3;
	MM_MIM_LONGDATA                := $3C4;
	MM_MIM_ERROR                   := $3C5;
	MM_MIM_LONGERROR               := $3C6;
	MM_MOM_OPEN                    := $3C7;
	MM_MOM_CLOSE                   := $3C8;
	MM_MOM_DONE                    := $3C9;
	MMSYSERR_BASE                  := 0;
	WAVERR_BASE                    := 32;
	MIDIERR_BASE                   := 64;
	TIMERR_BASE                    := 96;
	JOYERR_BASE                    := 160;
	MCIERR_BASE                    := 256;
	MCI_STRING_OFFSET              := 512;
	MCI_VD_OFFSET                  := 1024;
	MCI_CD_OFFSET                  := 1088;
	MCI_WAVE_OFFSET                := 1152;
	MCI_SEQ_OFFSET                 := 1216;
	MMSYSERR_NOERROR               := 0;
	MMSYSERR_ERROR                 :=  MMSYSERR_BASE + 1;
	MMSYSERR_BADDEVICEID           :=  MMSYSERR_BASE + 2;
	MMSYSERR_NOTENABLED            :=  MMSYSERR_BASE + 3;
	MMSYSERR_ALLOCATED             :=  MMSYSERR_BASE + 4;
	MMSYSERR_INVALHANDLE           :=  MMSYSERR_BASE + 5;
	MMSYSERR_NODRIVER              :=  MMSYSERR_BASE + 6;
	MMSYSERR_NOMEM                 :=  MMSYSERR_BASE + 7;
	MMSYSERR_NOTSUPPORTED          :=  MMSYSERR_BASE + 8;
	MMSYSERR_BADERRNUM             :=  MMSYSERR_BASE + 9;
	MMSYSERR_INVALFLAG             :=  MMSYSERR_BASE + 10;
	MMSYSERR_INVALPARAM            :=  MMSYSERR_BASE + 11;
	MMSYSERR_HANDLEBUSY            :=  MMSYSERR_BASE + 12;
	MMSYSERR_INVALIDALIAS          :=  MMSYSERR_BASE + 13;
	MMSYSERR_LASTERROR             :=  MMSYSERR_BASE + 13;
	MM_MOM_POSITIONCB              := $3CA;
	MM_MCISIGNAL                   := $3CB;
	MM_MIM_MOREDATA                := $3CC;
	MIDICAPS_STREAM                := $8;
	MEVT_F_SHORT                   := $0;
	MEVT_F_LONG                    := $80000000;
	MEVT_F_CALLBACK                := $40000000;
	MIDISTRM_ERROR                 := -2;
	MIDIPROP_SET                   := $80000000;
	MIDIPROP_GET                   := $40000000;
	MIDIPROP_TIMEDIV               := $1;
	MIDIPROP_TEMPO                 := $2;
	MIXER_SHORT_NAME_CHARS         := 16;
	MIXER_LONG_NAME_CHARS          := 64;
	MIXERR_BASE                    := 1024;
	MIXERR_INVALLINE               :=  MIXERR_BASE + 0;
	MIXERR_INVALCONTROL            :=  MIXERR_BASE + 1;
	MIXERR_INVALVALUE              :=  MIXERR_BASE + 2;
	MIXERR_LASTERROR               :=  MIXERR_BASE + 2;
	MIXER_OBJECTF_HANDLE           := $80000000;
	MIXER_OBJECTF_MIXER            := $0;
	MIXER_OBJECTF_HMIXER           :=  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_MIXER;
	MIXER_OBJECTF_WAVEOUT          := $10000000;
	MIXER_OBJECTF_HWAVEOUT         :=  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_WAVEOUT;
	MIXER_OBJECTF_WAVEIN           := $20000000;
	MIXER_OBJECTF_HWAVEIN          :=  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_WAVEIN;
	MIXER_OBJECTF_MIDIOUT          := $30000000;
	MIXER_OBJECTF_HMIDIOUT         :=  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_MIDIOUT;
	MIXER_OBJECTF_MIDIIN           := $40000000;
	MIXER_OBJECTF_HMIDIIN          :=  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_MIDIIN;
	MIXER_OBJECTF_AUX              := $50000000;
	MIXERLINE_LINEF_ACTIVE         := $1;
	MIXERLINE_LINEF_DISCONNECTED   := $8000;
	MIXERLINE_LINEF_SOURCE         := $80000000;
	MIXERLINE_COMPONENTTYPE_DST_FIRST := $0;
	MIXERLINE_COMPONENTTYPE_DST_UNDEFINED :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 0;
	MIXERLINE_COMPONENTTYPE_DST_DIGITAL :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 1;
	MIXERLINE_COMPONENTTYPE_DST_LINE :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 2;
	MIXERLINE_COMPONENTTYPE_DST_MONITOR :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 3;
	MIXERLINE_COMPONENTTYPE_DST_SPEAKERS :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 4;
	MIXERLINE_COMPONENTTYPE_DST_HEADPHONES :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 5;
	MIXERLINE_COMPONENTTYPE_DST_TELEPHONE :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 6;
	MIXERLINE_COMPONENTTYPE_DST_WAVEIN :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 7;
	MIXERLINE_COMPONENTTYPE_DST_VOICEIN :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 8;
	MIXERLINE_COMPONENTTYPE_DST_LAST :=  MIXERLINE_COMPONENTTYPE_DST_FIRST + 8;
	MIXERLINE_COMPONENTTYPE_SRC_FIRST := $1000;
	MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 0;
	MIXERLINE_COMPONENTTYPE_SRC_DIGITAL :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 1;
	MIXERLINE_COMPONENTTYPE_SRC_LINE :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 2;
	MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 3;
	MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 4;
	MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 5;
	MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 6;
	MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 7;
	MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 8;
	MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 9;
	MIXERLINE_COMPONENTTYPE_SRC_ANALOG :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10;
	MIXERLINE_COMPONENTTYPE_SRC_LAST :=  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10;
	MIXERLINE_TARGETTYPE_UNDEFINED := 0;
	MIXERLINE_TARGETTYPE_WAVEOUT   := 1;
	MIXERLINE_TARGETTYPE_WAVEIN    := 2;
	MIXERLINE_TARGETTYPE_MIDIOUT   := 3;
	MIXERLINE_TARGETTYPE_MIDIIN    := 4;
	MIXERLINE_TARGETTYPE_AUX       := 5;
	MIXER_GETLINEINFOF_DESTINATION := $0;
	MIXER_GETLINEINFOF_SOURCE      := $1;
	MIXER_GETLINEINFOF_LINEID      := $2;
	MIXER_GETLINEINFOF_COMPONENTTYPE := $3;
	MIXER_GETLINEINFOF_TARGETTYPE  := $4;
	MIXER_GETLINEINFOF_QUERYMASK   := $0F;
	MIXERCONTROL_CONTROLF_UNIFORM  := $1;
	MIXERCONTROL_CONTROLF_MULTIPLE := $2;
	MIXERCONTROL_CONTROLF_DISABLED := $80000000;
	MIXERCONTROL_CT_CLASS_MASK     := $0F0000000;
	MIXERCONTROL_CT_CLASS_CUSTOM   := $0;
	MIXERCONTROL_CT_CLASS_METER    := $10000000;
	MIXERCONTROL_CT_CLASS_SWITCH   := $20000000;
	MIXERCONTROL_CT_CLASS_NUMBER   := $30000000;
	MIXERCONTROL_CT_CLASS_SLIDER   := $40000000;
	MIXERCONTROL_CT_CLASS_FADER    := $50000000;
	MIXERCONTROL_CT_CLASS_TIME     := $60000000;
	MIXERCONTROL_CT_CLASS_LIST     := $70000000;
	MIXERCONTROL_CT_SUBCLASS_MASK  := $0F000000;
	MIXERCONTROL_CT_SC_SWITCH_BOOLEAN := $0;
	MIXERCONTROL_CT_SC_SWITCH_BUTTON := $1000000;
	MIXERCONTROL_CT_SC_METER_POLLED := $0;
	MIXERCONTROL_CT_SC_TIME_MICROSECS := $0;
	MIXERCONTROL_CT_SC_TIME_MILLISECS := $1000000;
	MIXERCONTROL_CT_SC_LIST_SINGLE := $0;
	MIXERCONTROL_CT_SC_LIST_MULTIPLE := $1000000;
	MIXERCONTROL_CT_UNITS_MASK     := $0FF0000;
	MIXERCONTROL_CT_UNITS_CUSTOM   := $0;
	MIXERCONTROL_CT_UNITS_BOOLEAN  := $10000;
	MIXERCONTROL_CT_UNITS_SIGNED   := $20000;
	MIXERCONTROL_CT_UNITS_UNSIGNED := $30000;
	MIXERCONTROL_CT_UNITS_DECIBELS := $40000;
	MIXERCONTROL_CT_UNITS_PERCENT  := $50000;
	MIXERCONTROL_CONTROLTYPE_CUSTOM :=  MIXERCONTROL_CT_CLASS_CUSTOM | MIXERCONTROL_CT_UNITS_CUSTOM;
	MIXERCONTROL_CONTROLTYPE_BOOLEANMETER :=  MIXERCONTROL_CT_CLASS_METER | MIXERCONTROL_CT_SC_METER_POLLED | MIXERCONTROL_CT_UNITS_BOOLEAN;
	MIXERCONTROL_CONTROLTYPE_SIGNEDMETER :=  MIXERCONTROL_CT_CLASS_METER | MIXERCONTROL_CT_SC_METER_POLLED | MIXERCONTROL_CT_UNITS_SIGNED;
	MIXERCONTROL_CONTROLTYPE_PEAKMETER :=  MIXERCONTROL_CONTROLTYPE_SIGNEDMETER + 1;
	MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER :=  MIXERCONTROL_CT_CLASS_METER | MIXERCONTROL_CT_SC_METER_POLLED | MIXERCONTROL_CT_UNITS_UNSIGNED;
	MIXERCONTROL_CONTROLTYPE_BOOLEAN :=  MIXERCONTROL_CT_CLASS_SWITCH | MIXERCONTROL_CT_SC_SWITCH_BOOLEAN | MIXERCONTROL_CT_UNITS_BOOLEAN;
	MIXERCONTROL_CONTROLTYPE_ONOFF :=  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 1;
	MIXERCONTROL_CONTROLTYPE_MUTE  :=  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 2;
	MIXERCONTROL_CONTROLTYPE_MONO  :=  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 3;
	MIXERCONTROL_CONTROLTYPE_LOUDNESS :=  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 4;
	MIXERCONTROL_CONTROLTYPE_STEREOENH :=  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 5;
	MIXERCONTROL_CONTROLTYPE_BUTTON :=  MIXERCONTROL_CT_CLASS_SWITCH | MIXERCONTROL_CT_SC_SWITCH_BUTTON | MIXERCONTROL_CT_UNITS_BOOLEAN;
	MIXERCONTROL_CONTROLTYPE_DECIBELS :=  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_DECIBELS;
	MIXERCONTROL_CONTROLTYPE_SIGNED :=  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_SIGNED;
	MIXERCONTROL_CONTROLTYPE_UNSIGNED :=  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_UNSIGNED;
	MIXERCONTROL_CONTROLTYPE_PERCENT :=  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_PERCENT;
	MIXERCONTROL_CONTROLTYPE_SLIDER :=  MIXERCONTROL_CT_CLASS_SLIDER | MIXERCONTROL_CT_UNITS_SIGNED;
	MIXERCONTROL_CONTROLTYPE_PAN   :=  MIXERCONTROL_CONTROLTYPE_SLIDER + 1;
	MIXERCONTROL_CONTROLTYPE_QSOUNDPAN :=  MIXERCONTROL_CONTROLTYPE_SLIDER + 2;
	MIXERCONTROL_CONTROLTYPE_FADER :=  MIXERCONTROL_CT_CLASS_FADER | MIXERCONTROL_CT_UNITS_UNSIGNED;
	MIXERCONTROL_CONTROLTYPE_VOLUME :=  MIXERCONTROL_CONTROLTYPE_FADER + 1;
	MIXERCONTROL_CONTROLTYPE_BASS  :=  MIXERCONTROL_CONTROLTYPE_FADER + 2;
	MIXERCONTROL_CONTROLTYPE_TREBLE :=  MIXERCONTROL_CONTROLTYPE_FADER + 3;
	MIXERCONTROL_CONTROLTYPE_EQUALIZER :=  MIXERCONTROL_CONTROLTYPE_FADER + 4;
	MIXERCONTROL_CONTROLTYPE_SINGLESELECT :=  MIXERCONTROL_CT_CLASS_LIST | MIXERCONTROL_CT_SC_LIST_SINGLE | MIXERCONTROL_CT_UNITS_BOOLEAN;
	MIXERCONTROL_CONTROLTYPE_MUX   :=  MIXERCONTROL_CONTROLTYPE_SINGLESELECT + 1;
	MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT :=  MIXERCONTROL_CT_CLASS_LIST | MIXERCONTROL_CT_SC_LIST_MULTIPLE | MIXERCONTROL_CT_UNITS_BOOLEAN;
	MIXERCONTROL_CONTROLTYPE_MIXER :=  MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT + 1;
	MIXERCONTROL_CONTROLTYPE_MICROTIME :=  MIXERCONTROL_CT_CLASS_TIME | MIXERCONTROL_CT_SC_TIME_MICROSECS | MIXERCONTROL_CT_UNITS_UNSIGNED;
	MIXERCONTROL_CONTROLTYPE_MILLITIME :=  MIXERCONTROL_CT_CLASS_TIME | MIXERCONTROL_CT_SC_TIME_MILLISECS | MIXERCONTROL_CT_UNITS_UNSIGNED;
	MIXER_GETLINECONTROLSF_ALL     := $0;
	MIXER_GETLINECONTROLSF_ONEBYID := $1;
	MIXER_GETLINECONTROLSF_ONEBYTYPE := $2;
	MIXER_GETLINECONTROLSF_QUERYMASK := $0F;
	MIXER_GETCONTROLDETAILSF_VALUE := $0;
	MIXER_GETCONTROLDETAILSF_LISTTEXT := $1;
	MIXER_GETCONTROLDETAILSF_QUERYMASK := $0F;
	MIXER_SETCONTROLDETAILSF_VALUE := $0;
	MIXER_SETCONTROLDETAILSF_CUSTOM := $1;
	MIXER_SETCONTROLDETAILSF_QUERYMASK := $0F;
	JOY_BUTTON5                    := $10;
	JOY_BUTTON6                    := $20;
	JOY_BUTTON7                    := $40;
	JOY_BUTTON8                    := $80;
	JOY_BUTTON9                    := $100;
	JOY_BUTTON10                   := $200;
	JOY_BUTTON11                   := $400;
	JOY_BUTTON12                   := $800;
	JOY_BUTTON13                   := $1000;
	JOY_BUTTON14                   := $2000;
	JOY_BUTTON15                   := $4000;
	JOY_BUTTON16                   := $8000;
	JOY_BUTTON17                   := $10000;
	JOY_BUTTON18                   := $20000;
	JOY_BUTTON19                   := $40000;
	JOY_BUTTON20                   := $80000;
	JOY_BUTTON21                   := $100000;
	JOY_BUTTON22                   := $200000;
	JOY_BUTTON23                   := $400000;
	JOY_BUTTON24                   := $800000;
	JOY_BUTTON25                   := $1000000;
	JOY_BUTTON26                   := $2000000;
	JOY_BUTTON27                   := $4000000;
	JOY_BUTTON28                   := $8000000;
	JOY_BUTTON29                   := $10000000;
	JOY_BUTTON30                   := $20000000;
	JOY_BUTTON31                   := $40000000;
	JOY_BUTTON32                   := $80000000;
	JOY_POVCENTERED                := 1;
	JOY_POVFORWARD                 := 0;
	JOY_POVRIGHT                   := 9000;
	JOY_POVBACKWARD                := 18000;
	JOY_POVLEFT                    := 27000;
	JOY_RETURNX                    := $1;
	JOY_RETURNY                    := $2;
	JOY_RETURNZ                    := $4;
	JOY_RETURNR                    := $8;
	JOY_RETURNU                    := $10;
	JOY_RETURNV                    := $20;
	JOY_RETURNPOV                  := $40;
	JOY_RETURNBUTTONS              := $80;
	JOY_RETURNRAWDATA              := $100;
	JOY_RETURNPOVCTS               := $200;
	JOY_RETURNCENTERED             := $400;
	JOY_USEDEADZONE                := $800;
	JOY_RETURNALL                  :=  JOY_RETURNX | JOY_RETURNY | JOY_RETURNZ | JOY_RETURNR | JOY_RETURNU | JOY_RETURNV | JOY_RETURNPOV | JOY_RETURNBUTTONS;
	JOY_CAL_READALWAYS             := $10000;
	JOY_CAL_READXYONLY             := $20000;
	JOY_CAL_READ3                  := $40000;
	JOY_CAL_READ4                  := $80000;
	JOY_CAL_READXONLY              := $100000;
	JOY_CAL_READYONLY              := $200000;
	JOY_CAL_READ5                  := $400000;
	JOY_CAL_READ6                  := $800000;
	JOY_CAL_READZONLY              := $1000000;
	JOY_CAL_READRONLY              := $2000000;
	JOY_CAL_READUONLY              := $4000000;
	JOY_CAL_READVONLY              := $8000000;
	WAVE_FORMAT_QUERY              := $1;
	SND_PURGE                      := $40;
	SND_APPLICATION                := $80;
	WAVE_MAPPED                    := $4;
	WAVE_FORMAT_DIRECT             := $8;
	WAVE_FORMAT_DIRECT_QUERY       :=  WAVE_FORMAT_QUERY | WAVE_FORMAT_DIRECT;
	MIM_MOREDATA                   :=  MM_MIM_MOREDATA;
	MOM_POSITIONCB                 :=  MM_MOM_POSITIONCB;
	MIDI_IO_STATUS                 := $20;
	DRV_LOAD                       := $1;
	DRV_ENABLE                     := $2;
	DRV_OPEN                       := $3;
	DRV_CLOSE                      := $4;
	DRV_DISABLE                    := $5;
	DRV_FREE                       := $6;
	DRV_CONFIGURE                  := $7;
	DRV_QUERYCONFIGURE             := $8;
	DRV_INSTALL                    := $9;
	DRV_REMOVE                     := $0A;
	DRV_EXITSESSION                := $0B;
	DRV_POWER                      := $0F;
	DRV_RESERVED                   := $800;
	DRV_USER                       := $4000;
	DRVCNF_CANCEL                  := $0;
	DRVCNF_OK                      := $1;
	DRVCNF_RESTART                 := $2;
	DRV_CANCEL                     :=  DRVCNF_CANCEL;
	DRV_OK                         :=  DRVCNF_OK;
	DRV_RESTART                    :=  DRVCNF_RESTART;
	DRV_MCI_FIRST                  :=  DRV_RESERVED;
	DRV_MCI_LAST                   :=  DRV_RESERVED + $FFF;
	CALLBACK_TYPEMASK              := $70000;
	CALLBACK_NULL                  := $0;
	CALLBACK_WINDOW                := $10000;
	CALLBACK_TASK                  := $20000;
	CALLBACK_FUNCTION              := $30000;
	CALLBACK_THREAD				   := CALLBACK_TASK;
	MM_MICROSOFT                   := 1;
	MM_MIDI_MAPPER                 := 1;
	MM_WAVE_MAPPER                 := 2;
	MM_SNDBLST_MIDIOUT             := 3;
	MM_SNDBLST_MIDIIN              := 4;
	MM_SNDBLST_SYNTH               := 5;
	MM_SNDBLST_WAVEOUT             := 6;
	MM_SNDBLST_WAVEIN              := 7;
	MM_ADLIB                       := 9;
	MM_MPU401_MIDIOUT              := 10;
	MM_MPU401_MIDIIN               := 11;
	MM_PC_JOYSTICK                 := 12;
	SND_SYNC                       := $0;
	SND_ASYNC                      := $1;
	SND_NODEFAULT                  := $2;
	SND_MEMORY                     := $4;
	SND_ALIAS                      := $10000;
	SND_FILENAME                   := $20000;
	SND_RESOURCE                   := $40004;
	SND_ALIAS_ID                   := $110000;
	SND_ALIAS_START                := 0;
	SND_LOOP                       := $8;
	SND_NOSTOP                     := $10;
	SND_VALID                      := $1F;
	SND_NOWAIT                     := $2000;
	SND_VALIDFLAGS                 := $17201F;
	SND_RESERVED                   := $0FF000000;
	SND_TYPE_MASK                  := $170007;
	WAVERR_BADFORMAT               :=  WAVERR_BASE + 0;
	WAVERR_STILLPLAYING            :=  WAVERR_BASE + 1;
	WAVERR_UNPREPARED              :=  WAVERR_BASE + 2;
	WAVERR_SYNC                    :=  WAVERR_BASE + 3;
	WAVERR_LASTERROR               :=  WAVERR_BASE + 3;
	WOM_OPEN                       :=  MM_WOM_OPEN;
	WOM_CLOSE                      :=  MM_WOM_CLOSE;
	WOM_DONE                       :=  MM_WOM_DONE;
	WIM_OPEN                       :=  MM_WIM_OPEN;
	WIM_CLOSE                      :=  MM_WIM_CLOSE;
	WIM_DATA                       :=  MM_WIM_DATA;
	WAVE_MAPPER                    := 1;
	WAVE_ALLOWSYNC                 := $2;
	WAVE_VALID                     := $3;
	WHDR_DONE                      := $1;
	WHDR_PREPARED                  := $2;
	WHDR_BEGINLOOP                 := $4;
	WHDR_ENDLOOP                   := $8;
	WHDR_INQUEUE                   := $10;
	WHDR_VALID                     := $1F;
	WAVECAPS_PITCH                 := $1;
	WAVECAPS_PLAYBACKRATE          := $2;
	WAVECAPS_VOLUME                := $4;
	WAVECAPS_LRVOLUME              := $8;
	WAVECAPS_SYNC                  := $10;
	WAVE_INVALIDFORMAT             := $0;
	WAVE_FORMAT_1M08               := $1;
	WAVE_FORMAT_1S08               := $2;
	WAVE_FORMAT_1M16               := $4;
	WAVE_FORMAT_1S16               := $8;
	WAVE_FORMAT_2M08               := $10;
	WAVE_FORMAT_2S08               := $20;
	WAVE_FORMAT_2M16               := $40;
	WAVE_FORMAT_2S16               := $80;
	WAVE_FORMAT_4M08               := $100;
	WAVE_FORMAT_4S08               := $200;
	WAVE_FORMAT_4M16               := $400;
	WAVE_FORMAT_4S16               := $800;
	WAVE_FORMAT_PCM                := 1;
	MIDIERR_UNPREPARED             :=  MIDIERR_BASE + 0;
	MIDIERR_STILLPLAYING           :=  MIDIERR_BASE + 1;
	MIDIERR_NOMAP                  :=  MIDIERR_BASE + 2;
	MIDIERR_NOTREADY               :=  MIDIERR_BASE + 3;
	MIDIERR_NODEVICE               :=  MIDIERR_BASE + 4;
	MIDIERR_INVALIDSETUP           :=  MIDIERR_BASE + 5;
	MIDIERR_LASTERROR              :=  MIDIERR_BASE + 5;
	MIM_OPEN                       :=  MM_MIM_OPEN;
	MIM_CLOSE                      :=  MM_MIM_CLOSE;
	MIM_DATA                       :=  MM_MIM_DATA;
	MIM_LONGDATA                   :=  MM_MIM_LONGDATA;
	MIM_ERROR                      :=  MM_MIM_ERROR;
	MIM_LONGERROR                  :=  MM_MIM_LONGERROR;
	MOM_OPEN                       :=  MM_MOM_OPEN;
	MOM_CLOSE                      :=  MM_MOM_CLOSE;
	MOM_DONE                       :=  MM_MOM_DONE;
	MIDIMAPPER                     := -1;
	MIDI_MAPPER                    := -1;
	MIDI_CACHE_ALL                 := 1;
	MIDI_CACHE_BESTFIT             := 2;
	MIDI_CACHE_QUERY               := 3;
	MIDI_UNCACHE                   := 4;
	MIDI_CACHE_VALID               :=  MIDI_CACHE_ALL | MIDI_CACHE_BESTFIT | MIDI_CACHE_QUERY | MIDI_UNCACHE;
	MOD_MIDIPORT                   := 1;
	MOD_SYNTH                      := 2;
	MOD_SQSYNTH                    := 3;
	MOD_FMSYNTH                    := 4;
	MOD_MAPPER                     := 5;
	MIDICAPS_VOLUME                := $1;
	MIDICAPS_LRVOLUME              := $2;
	MIDICAPS_CACHE                 := $4;
	MHDR_DONE                      := $1;
	MHDR_PREPARED                  := $2;
	MHDR_INQUEUE                   := $4;
	MHDR_VALID                     := $7;
	AUX_MAPPER                     := -1;
	AUXCAPS_CDAUDIO                := 1;
	AUXCAPS_AUXIN                  := 2;
	AUXCAPS_VOLUME                 := $1;
	AUXCAPS_LRVOLUME               := $2;
	TIMERR_NOERROR                 := 0;
	TIMERR_NOCANDO                 :=  TIMERR_BASE + 1;
	TIMERR_STRUCT                  :=  TIMERR_BASE + 33;
	TIME_ONESHOT                   := 0;
	TIME_PERIODIC                  := 1;
	JOYERR_NOERROR                 := 0;
	JOYERR_PARMS                   :=  JOYERR_BASE + 5;
	JOYERR_NOCANDO                 :=  JOYERR_BASE + 6;
	JOYERR_UNPLUGGED               :=  JOYERR_BASE + 7;
	JOY_BUTTON1                    := $1;
	JOY_BUTTON2                    := $2;
	JOY_BUTTON3                    := $4;
	JOY_BUTTON4                    := $8;
	JOY_BUTTON1CHG                 := $100;
	JOY_BUTTON2CHG                 := $200;
	JOY_BUTTON3CHG                 := $400;
	JOY_BUTTON4CHG                 := $800;
	JOYSTICKID1                    := 0;
	JOYSTICKID2                    := 1;
	MMIOERR_BASE                   := 256;
	MMIOERR_FILENOTFOUND           :=  MMIOERR_BASE + 1;
	MMIOERR_OUTOFMEMORY            :=  MMIOERR_BASE + 2;
	MMIOERR_CANNOTOPEN             :=  MMIOERR_BASE + 3;
	MMIOERR_CANNOTCLOSE            :=  MMIOERR_BASE + 4;
	MMIOERR_CANNOTREAD             :=  MMIOERR_BASE + 5;
	MMIOERR_CANNOTWRITE            :=  MMIOERR_BASE + 6;
	MMIOERR_CANNOTSEEK             :=  MMIOERR_BASE + 7;
	MMIOERR_CANNOTEXPAND           :=  MMIOERR_BASE + 8;
	MMIOERR_CHUNKNOTFOUND          :=  MMIOERR_BASE + 9;
	MMIOERR_UNBUFFERED             :=  MMIOERR_BASE + 10;
	MMIO_RWMODE                    := $3;
	MMIO_SHAREMODE                 := $70;
	MMIO_CREATE                    := $1000;
	MMIO_PARSE                     := $100;
	MMIO_DELETE                    := $200;
	MMIO_EXIST                     := $4000;
	MMIO_ALLOCBUF                  := $10000;
	MMIO_GETTEMP                   := $20000;
	MMIO_DIRTY                     := $10000000;
	MMIO_OPEN_VALID                := $3FFFF;
	MMIO_READ                      := $0;
	MMIO_WRITE                     := $1;
	MMIO_READWRITE                 := $2;
	MMIO_COMPAT                    := $0;
	MMIO_EXCLUSIVE                 := $10;
	MMIO_DENYWRITE                 := $20;
	MMIO_DENYREAD                  := $30;
	MMIO_DENYNONE                  := $40;
	MMIO_FHOPEN                    := $10;
	MMIO_EMPTYBUF                  := $10;
	MMIO_TOUPPER                   := $10;
	MMIO_INSTALLPROC               := $10000;
	MMIO_PUBLICPROC                := $10000000;
	MMIO_UNICODEPROC               := $1000000;
	MMIO_REMOVEPROC                := $20000;
	MMIO_FINDPROC                  := $40000;
	MMIO_FINDCHUNK                 := $10;
	MMIO_FINDRIFF                  := $20;
	MMIO_FINDLIST                  := $40;
	MMIO_CREATERIFF                := $20;
	MMIO_CREATELIST                := $40;
	MMIO_VALIDPROC                 := $11070000;
	MMIOM_READ                     :=  MMIO_READ;
	MMIOM_WRITE                    :=  MMIO_WRITE;
	MMIOM_SEEK                     := 2;
	MMIOM_OPEN                     := 3;
	MMIOM_CLOSE                    := 4;
	MMIOM_WRITEFLUSH               := 5;
	MMIOM_RENAME                   := 6;
	MMIOM_USER                     := $8000;
	SEEK_SET                       := 0;
	SEEK_CUR                       := 1;
	SEEK_END                       := 2;
	MMIO_DEFAULTBUFFER             := 8192;
	MCIERR_INVALID_DEVICE_ID       :=  MCIERR_BASE + 1;
	MCIERR_UNRECOGNIZED_KEYWORD    :=  MCIERR_BASE + 3;
	MCIERR_UNRECOGNIZED_COMMAND    :=  MCIERR_BASE + 5;
	MCIERR_HARDWARE                :=  MCIERR_BASE + 6;
	MCIERR_INVALID_DEVICE_NAME     :=  MCIERR_BASE + 7;
	MCIERR_OUT_OF_MEMORY           :=  MCIERR_BASE + 8;
	MCIERR_DEVICE_OPEN             :=  MCIERR_BASE + 9;
	MCIERR_CANNOT_LOAD_DRIVER      :=  MCIERR_BASE + 10;
	MCIERR_MISSING_COMMAND_STRING  :=  MCIERR_BASE + 11;
	MCIERR_PARAM_OVERFLOW          :=  MCIERR_BASE + 12;
	MCIERR_MISSING_STRING_ARGUMENT :=  MCIERR_BASE + 13;
	MCIERR_BAD_INTEGER             :=  MCIERR_BASE + 14;
	MCIERR_PARSER_INTERNAL         :=  MCIERR_BASE + 15;
	MCIERR_DRIVER_INTERNAL         :=  MCIERR_BASE + 16;
	MCIERR_MISSING_PARAMETER       :=  MCIERR_BASE + 17;
	MCIERR_UNSUPPORTED_FUNCTION    :=  MCIERR_BASE + 18;
	MCIERR_FILE_NOT_FOUND          :=  MCIERR_BASE + 19;
	MCIERR_DEVICE_NOT_READY        :=  MCIERR_BASE + 20;
	MCIERR_INTERNAL                :=  MCIERR_BASE + 21;
	MCIERR_DRIVER                  :=  MCIERR_BASE + 22;
	MCIERR_CANNOT_USE_ALL          :=  MCIERR_BASE + 23;
	MCIERR_MULTIPLE                :=  MCIERR_BASE + 24;
	MCIERR_EXTENSION_NOT_FOUND     :=  MCIERR_BASE + 25;
	MCIERR_OUTOFRANGE              :=  MCIERR_BASE + 26;
	MCIERR_FLAGS_NOT_COMPATIBLE    :=  MCIERR_BASE + 28;
	MCIERR_FILE_NOT_SAVED          :=  MCIERR_BASE + 30;
	MCIERR_DEVICE_TYPE_REQUIRED    :=  MCIERR_BASE + 31;
	MCIERR_DEVICE_LOCKED           :=  MCIERR_BASE + 32;
	MCIERR_DUPLICATE_ALIAS         :=  MCIERR_BASE + 33;
	MCIERR_BAD_CONSTANT            :=  MCIERR_BASE + 34;
	MCIERR_MUST_USE_SHAREABLE      :=  MCIERR_BASE + 35;
	MCIERR_MISSING_DEVICE_NAME     :=  MCIERR_BASE + 36;
	MCIERR_BAD_TIME_FORMAT         :=  MCIERR_BASE + 37;
	MCIERR_NO_CLOSING_QUOTE        :=  MCIERR_BASE + 38;
	MCIERR_DUPLICATE_FLAGS         :=  MCIERR_BASE + 39;
	MCIERR_INVALID_FILE            :=  MCIERR_BASE + 40;
	MCIERR_NULL_PARAMETER_BLOCK    :=  MCIERR_BASE + 41;
	MCIERR_UNNAMED_RESOURCE        :=  MCIERR_BASE + 42;
	MCIERR_NEW_REQUIRES_ALIAS      :=  MCIERR_BASE + 43;
	MCIERR_NOTIFY_ON_AUTO_OPEN     :=  MCIERR_BASE + 44;
	MCIERR_NO_ELEMENT_ALLOWED      :=  MCIERR_BASE + 45;
	MCIERR_NONAPPLICABLE_FUNCTION  :=  MCIERR_BASE + 46;
	MCIERR_ILLEGAL_FOR_AUTO_OPEN   :=  MCIERR_BASE + 47;
	MCIERR_FILENAME_REQUIRED       :=  MCIERR_BASE + 48;
	MCIERR_EXTRA_CHARACTERS        :=  MCIERR_BASE + 49;
	MCIERR_DEVICE_NOT_INSTALLED    :=  MCIERR_BASE + 50;
	MCIERR_GET_CD                  :=  MCIERR_BASE + 51;
	MCIERR_SET_CD                  :=  MCIERR_BASE + 52;
	MCIERR_SET_DRIVE               :=  MCIERR_BASE + 53;
	MCIERR_DEVICE_LENGTH           :=  MCIERR_BASE + 54;
	MCIERR_DEVICE_ORD_LENGTH       :=  MCIERR_BASE + 55;
	MCIERR_NO_INTEGER              :=  MCIERR_BASE + 56;
	MCIERR_WAVE_OUTPUTSINUSE       :=  MCIERR_BASE + 64;
	MCIERR_WAVE_SETOUTPUTINUSE     :=  MCIERR_BASE + 65;
	MCIERR_WAVE_INPUTSINUSE        :=  MCIERR_BASE + 66;
	MCIERR_WAVE_SETINPUTINUSE      :=  MCIERR_BASE + 67;
	MCIERR_WAVE_OUTPUTUNSPECIFIED  :=  MCIERR_BASE + 68;
	MCIERR_WAVE_INPUTUNSPECIFIED   :=  MCIERR_BASE + 69;
	MCIERR_WAVE_OUTPUTSUNSUITABLE  :=  MCIERR_BASE + 70;
	MCIERR_WAVE_SETOUTPUTUNSUITABLE :=  MCIERR_BASE + 71;
	MCIERR_WAVE_INPUTSUNSUITABLE   :=  MCIERR_BASE + 72;
	MCIERR_WAVE_SETINPUTUNSUITABLE :=  MCIERR_BASE + 73;
	MCIERR_SEQ_DIV_INCOMPATIBLE    :=  MCIERR_BASE + 80;
	MCIERR_SEQ_PORT_INUSE          :=  MCIERR_BASE + 81;
	MCIERR_SEQ_PORT_NONEXISTENT    :=  MCIERR_BASE + 82;
	MCIERR_SEQ_PORT_MAPNODEVICE    :=  MCIERR_BASE + 83;
	MCIERR_SEQ_PORT_MISCERROR      :=  MCIERR_BASE + 84;
	MCIERR_SEQ_TIMER               :=  MCIERR_BASE + 85;
	MCIERR_SEQ_PORTUNSPECIFIED     :=  MCIERR_BASE + 86;
	MCIERR_SEQ_NOMIDIPRESENT       :=  MCIERR_BASE + 87;
	MCIERR_NO_WINDOW               :=  MCIERR_BASE + 90;
	MCIERR_CREATEWINDOW            :=  MCIERR_BASE + 91;
	MCIERR_FILE_READ               :=  MCIERR_BASE + 92;
	MCIERR_FILE_WRITE              :=  MCIERR_BASE + 93;
	MCIERR_CUSTOM_DRIVER_BASE      :=  MCIERR_BASE + 256;
	MCI_FIRST                      := $800;
	MCI_OPEN                       := $803;
	MCI_CLOSE                      := $804;
	MCI_ESCAPE                     := $805;
	MCI_PLAY                       := $806;
	MCI_SEEK                       := $807;
	MCI_STOP                       := $808;
	MCI_PAUSE                      := $809;
	MCI_INFO                       := $80A;
	MCI_GETDEVCAPS                 := $80B;
	MCI_SPIN                       := $80C;
	MCI_SET                        := $80D;
	MCI_STEP                       := $80E;
	MCI_RECORD                     := $80F;
	MCI_SYSINFO                    := $810;
	MCI_BREAK                      := $811;
	MCI_SOUND                      := $812;
	MCI_SAVE                       := $813;
	MCI_STATUS                     := $814;
	MCI_CUE                        := $830;
	MCI_REALIZE                    := $840;
	MCI_WINDOW                     := $841;
	MCI_PUT                        := $842;
	MCI_WHERE                      := $843;
	MCI_FREEZE                     := $844;
	MCI_UNFREEZE                   := $845;
	MCI_LOAD                       := $850;
	MCI_CUT                        := $851;
	MCI_COPY                       := $852;
	MCI_PASTE                      := $853;
	MCI_UPDATE                     := $854;
	MCI_RESUME                     := $855;
	MCI_DELETE                     := $856;
	MCI_LAST                       := $0FFF;
	MCI_USER_MESSAGES              :=  $400 + MCI_FIRST;
	MCI_ALL_DEVICE_ID              := 1;
	MCI_DEVTYPE_VCR                := 513;
	MCI_DEVTYPE_VIDEODISC          := 514;
	MCI_DEVTYPE_OVERLAY            := 515;
	MCI_DEVTYPE_CD_AUDIO           := 516;
	MCI_DEVTYPE_DAT                := 517;
	MCI_DEVTYPE_SCANNER            := 518;
	MCI_DEVTYPE_ANIMATION          := 519;
	MCI_DEVTYPE_DIGITAL_VIDEO      := 520;
	MCI_DEVTYPE_OTHER              := 521;
	MCI_DEVTYPE_WAVEFORM_AUDIO     := 522;
	MCI_DEVTYPE_SEQUENCER          := 523;
	MCI_DEVTYPE_FIRST              :=  MCI_DEVTYPE_VCR;
	MCI_DEVTYPE_LAST               :=  MCI_DEVTYPE_SEQUENCER;
	MCI_DEVTYPE_FIRST_USER         := $1000;
	MCI_MODE_NOT_READY             :=  MCI_STRING_OFFSET + 12;
	MCI_MODE_STOP                  :=  MCI_STRING_OFFSET + 13;
	MCI_MODE_PLAY                  :=  MCI_STRING_OFFSET + 14;
	MCI_MODE_RECORD                :=  MCI_STRING_OFFSET + 15;
	MCI_MODE_SEEK                  :=  MCI_STRING_OFFSET + 16;
	MCI_MODE_PAUSE                 :=  MCI_STRING_OFFSET + 17;
	MCI_MODE_OPEN                  :=  MCI_STRING_OFFSET + 18;
	MCI_FORMAT_MILLISECONDS        := 0;
	MCI_FORMAT_HMS                 := 1;
	MCI_FORMAT_MSF                 := 2;
	MCI_FORMAT_FRAMES              := 3;
	MCI_FORMAT_SMPTE_24            := 4;
	MCI_FORMAT_SMPTE_25            := 5;
	MCI_FORMAT_SMPTE_30            := 6;
	MCI_FORMAT_SMPTE_30DROP        := 7;
	MCI_FORMAT_BYTES               := 8;
	MCI_FORMAT_SAMPLES             := 9;
	MCI_FORMAT_TMSF                := 10;
	MCI_NOTIFY_SUCCESSFUL          := $1;
	MCI_NOTIFY_SUPERSEDED          := $2;
	MCI_NOTIFY_ABORTED             := $4;
	MCI_NOTIFY_FAILURE             := $8;
	MCI_NOTIFY                     := $1;
	MCI_WAIT                       := $2;
	MCI_FROM                       := $4;
	MCI_TO                         := $8;
	MCI_TRACK                      := $10;
	MCI_OPEN_SHAREABLE             := $100;
	MCI_OPEN_ELEMENT               := $200;
	MCI_OPEN_ALIAS                 := $400;
	MCI_OPEN_ELEMENT_ID            := $800;
	MCI_OPEN_TYPE_ID               := $1000;
	MCI_OPEN_TYPE                  := $2000;
	MCI_SEEK_TO_START              := $100;
	MCI_SEEK_TO_END                := $200;
	MCI_STATUS_ITEM                := $100;
	MCI_STATUS_START               := $200;
	MCI_STATUS_LENGTH              := $1;
	MCI_STATUS_POSITION            := $2;
	MCI_STATUS_NUMBER_OF_TRACKS    := $3;
	MCI_STATUS_MODE                := $4;
	MCI_STATUS_MEDIA_PRESENT       := $5;
	MCI_STATUS_TIME_FORMAT         := $6;
	MCI_STATUS_READY               := $7;
	MCI_STATUS_CURRENT_TRACK       := $8;
	MCI_INFO_PRODUCT               := $100;
	MCI_INFO_FILE                  := $200;
	MCI_GETDEVCAPS_ITEM            := $100;
	MCI_GETDEVCAPS_CAN_RECORD      := $1;
	MCI_GETDEVCAPS_HAS_AUDIO       := $2;
	MCI_GETDEVCAPS_HAS_VIDEO       := $3;
	MCI_GETDEVCAPS_DEVICE_TYPE     := $4;
	MCI_GETDEVCAPS_USES_FILES      := $5;
	MCI_GETDEVCAPS_COMPOUND_DEVICE := $6;
	MCI_GETDEVCAPS_CAN_EJECT       := $7;
	MCI_GETDEVCAPS_CAN_PLAY        := $8;
	MCI_GETDEVCAPS_CAN_SAVE        := $9;
	MCI_SYSINFO_QUANTITY           := $100;
	MCI_SYSINFO_OPEN               := $200;
	MCI_SYSINFO_NAME               := $400;
	MCI_SYSINFO_INSTALLNAME        := $800;
	MCI_SET_DOOR_OPEN              := $100;
	MCI_SET_DOOR_CLOSED            := $200;
	MCI_SET_TIME_FORMAT            := $400;
	MCI_SET_AUDIO                  := $800;
	MCI_SET_VIDEO                  := $1000;
	MCI_SET_ON                     := $2000;
	MCI_SET_OFF                    := $4000;
	MCI_SET_AUDIO_ALL              := $4001;
	MCI_SET_AUDIO_LEFT             := $4002;
	MCI_SET_AUDIO_RIGHT            := $4003;
	MCI_BREAK_KEY                  := $100;
	MCI_BREAK_HWND                 := $200;
	MCI_BREAK_OFF                  := $400;
	MCI_RECORD_INSERT              := $100;
	MCI_RECORD_OVERWRITE           := $200;
	MCI_SOUND_NAME                 := $100;
	MCI_SAVE_FILE                  := $100;
	MCI_LOAD_FILE                  := $100;
	MCI_VD_MODE_PARK               :=  MCI_VD_OFFSET + 1;
	MCI_VD_MEDIA_CLV               :=  MCI_VD_OFFSET + 2;
	MCI_VD_MEDIA_CAV               :=  MCI_VD_OFFSET + 3;
	MCI_VD_MEDIA_OTHER             :=  MCI_VD_OFFSET + 4;
	MCI_VD_FORMAT_TRACK            := $4001;
	MCI_VD_PLAY_REVERSE            := $10000;
	MCI_VD_PLAY_FAST               := $20000;
	MCI_VD_PLAY_SPEED              := $40000;
	MCI_VD_PLAY_SCAN               := $80000;
	MCI_VD_PLAY_SLOW               := $100000;
	MCI_VD_SEEK_REVERSE            := $10000;
	MCI_VD_STATUS_SPEED            := $4002;
	MCI_VD_STATUS_FORWARD          := $4003;
	MCI_VD_STATUS_MEDIA_TYPE       := $4004;
	MCI_VD_STATUS_SIDE             := $4005;
	MCI_VD_STATUS_DISC_SIZE        := $4006;
	MCI_VD_GETDEVCAPS_CLV          := $10000;
	MCI_VD_GETDEVCAPS_CAV          := $20000;
	MCI_VD_SPIN_UP                 := $10000;
	MCI_VD_SPIN_DOWN               := $20000;
	MCI_VD_GETDEVCAPS_CAN_REVERSE  := $4002;
	MCI_VD_GETDEVCAPS_FAST_RATE    := $4003;
	MCI_VD_GETDEVCAPS_SLOW_RATE    := $4004;
	MCI_VD_GETDEVCAPS_NORMAL_RATE  := $4005;
	MCI_VD_STEP_FRAMES             := $10000;
	MCI_VD_STEP_REVERSE            := $20000;
	MCI_VD_ESCAPE_STRING           := $100;
	MCI_WAVE_PCM                   :=  MCI_WAVE_OFFSET + 0;
	MCI_WAVE_MAPPER                :=  MCI_WAVE_OFFSET + 1;
	MCI_WAVE_OPEN_BUFFER           := $10000;
	MCI_WAVE_SET_FORMATTAG         := $10000;
	MCI_WAVE_SET_CHANNELS          := $20000;
	MCI_WAVE_SET_SAMPLESPERSEC     := $40000;
	MCI_WAVE_SET_AVGBYTESPERSEC    := $80000;
	MCI_WAVE_SET_BLOCKALIGN        := $100000;
	MCI_WAVE_SET_BITSPERSAMPLE     := $200000;
	MCI_WAVE_INPUT                 := $400000;
	MCI_WAVE_OUTPUT                := $800000;
	MCI_WAVE_STATUS_FORMATTAG      := $4001;
	MCI_WAVE_STATUS_CHANNELS       := $4002;
	MCI_WAVE_STATUS_SAMPLESPERSEC  := $4003;
	MCI_WAVE_STATUS_AVGBYTESPERSEC := $4004;
	MCI_WAVE_STATUS_BLOCKALIGN     := $4005;
	MCI_WAVE_STATUS_BITSPERSAMPLE  := $4006;
	MCI_WAVE_STATUS_LEVEL          := $4007;
	MCI_WAVE_SET_ANYINPUT          := $4000000;
	MCI_WAVE_SET_ANYOUTPUT         := $8000000;
	MCI_WAVE_GETDEVCAPS_INPUTS     := $4001;
	MCI_WAVE_GETDEVCAPS_OUTPUTS    := $4002;
	MCI_SEQ_DIV_PPQN               :=  0 + MCI_SEQ_OFFSET;
	MCI_SEQ_DIV_SMPTE_24           :=  1 + MCI_SEQ_OFFSET;
	MCI_SEQ_DIV_SMPTE_25           :=  2 + MCI_SEQ_OFFSET;
	MCI_SEQ_DIV_SMPTE_30DROP       :=  3 + MCI_SEQ_OFFSET;
	MCI_SEQ_DIV_SMPTE_30           :=  4 + MCI_SEQ_OFFSET;
	MCI_SEQ_FORMAT_SONGPTR         := $4001;
	MCI_SEQ_FILE                   := $4002;
	MCI_SEQ_MIDI                   := $4003;
	MCI_SEQ_SMPTE                  := $4004;
	MCI_SEQ_NONE                   := 65533;
	MCI_SEQ_MAPPER                 := 65535;
	MCI_SEQ_STATUS_TEMPO           := $4002;
	MCI_SEQ_STATUS_PORT            := $4003;
	MCI_SEQ_STATUS_SLAVE           := $4007;
	MCI_SEQ_STATUS_MASTER          := $4008;
	MCI_SEQ_STATUS_OFFSET          := $4009;
	MCI_SEQ_STATUS_DIVTYPE         := $400A;
	MCI_SEQ_SET_TEMPO              := $10000;
	MCI_SEQ_SET_PORT               := $20000;
	MCI_SEQ_SET_SLAVE              := $40000;
	MCI_SEQ_SET_MASTER             := $80000;
	MCI_SEQ_SET_OFFSET             := $1000000;
	MCI_ANIM_OPEN_WS               := $10000;
	MCI_ANIM_OPEN_PARENT           := $20000;
	MCI_ANIM_OPEN_NOSTATIC         := $40000;
	MCI_ANIM_PLAY_SPEED            := $10000;
	MCI_ANIM_PLAY_REVERSE          := $20000;
	MCI_ANIM_PLAY_FAST             := $40000;
	MCI_ANIM_PLAY_SLOW             := $80000;
	MCI_ANIM_PLAY_SCAN             := $100000;
	MCI_ANIM_STEP_REVERSE          := $10000;
	MCI_ANIM_STEP_FRAMES           := $20000;
	MCI_ANIM_STATUS_SPEED          := $4001;
	MCI_ANIM_STATUS_FORWARD        := $4002;
	MCI_ANIM_STATUS_HWND           := $4003;
	MCI_ANIM_STATUS_HPAL           := $4004;
	MCI_ANIM_STATUS_STRETCH        := $4005;
	MCI_ANIM_INFO_TEXT             := $10000;
	MCI_ANIM_GETDEVCAPS_CAN_REVERSE := $4001;
	MCI_ANIM_GETDEVCAPS_FAST_RATE  := $4002;
	MCI_ANIM_GETDEVCAPS_SLOW_RATE  := $4003;
	MCI_ANIM_GETDEVCAPS_NORMAL_RATE := $4004;
	MCI_ANIM_GETDEVCAPS_PALETTES   := $4006;
	MCI_ANIM_GETDEVCAPS_CAN_STRETCH := $4007;
	MCI_ANIM_GETDEVCAPS_MAX_WINDOWS := $4008;
	MCI_ANIM_REALIZE_NORM          := $10000;
	MCI_ANIM_REALIZE_BKGD          := $20000;
	MCI_ANIM_WINDOW_HWND           := $10000;
	MCI_ANIM_WINDOW_STATE          := $40000;
	MCI_ANIM_WINDOW_TEXT           := $80000;
	MCI_ANIM_WINDOW_ENABLE_STRETCH := $100000;
	MCI_ANIM_WINDOW_DISABLE_STRETCH := $200000;
	MCI_ANIM_WINDOW_DEFAULT        := $0;
	MCI_ANIM_RECT                  := $10000;
	MCI_ANIM_PUT_SOURCE            := $20000;
	MCI_ANIM_PUT_DESTINATION       := $40000;
	MCI_ANIM_WHERE_SOURCE          := $20000;
	MCI_ANIM_WHERE_DESTINATION     := $40000;
	MCI_ANIM_UPDATE_HDC            := $20000;
	MCI_OVLY_OPEN_WS               := $10000;
	MCI_OVLY_OPEN_PARENT           := $20000;
	MCI_OVLY_STATUS_HWND           := $4001;
	MCI_OVLY_STATUS_STRETCH        := $4002;
	MCI_OVLY_INFO_TEXT             := $10000;
	MCI_OVLY_GETDEVCAPS_CAN_STRETCH := $4001;
	MCI_OVLY_GETDEVCAPS_CAN_FREEZE := $4002;
	MCI_OVLY_GETDEVCAPS_MAX_WINDOWS := $4003;
	MCI_OVLY_WINDOW_HWND           := $10000;
	MCI_OVLY_WINDOW_STATE          := $40000;
	MCI_OVLY_WINDOW_TEXT           := $80000;
	MCI_OVLY_WINDOW_ENABLE_STRETCH := $100000;
	MCI_OVLY_WINDOW_DISABLE_STRETCH := $200000;
	MCI_OVLY_WINDOW_DEFAULT        := $0;
	MCI_OVLY_RECT                  := $10000;
	MCI_OVLY_PUT_SOURCE            := $20000;
	MCI_OVLY_PUT_DESTINATION       := $40000;
	MCI_OVLY_PUT_FRAME             := $80000;
	MCI_OVLY_PUT_VIDEO             := $100000;
	MCI_OVLY_WHERE_SOURCE          := $20000;
	MCI_OVLY_WHERE_DESTINATION     := $40000;
	MCI_OVLY_WHERE_FRAME           := $80000;
	MCI_OVLY_WHERE_VIDEO           := $100000;
	CAPS1                          := 94;
	C1_TRANSPARENT                 := $1;
	NEWTRANSPARENT                 := 3;
	QUERYROPSUPPORT                := 40;
	SELECTDIB                      := 41;
	SE_ERR_SHARE                   := 26;
	SE_ERR_ASSOCINCOMPLETE         := 27;
	SE_ERR_DDETIMEOUT              := 28;
	SE_ERR_DDEFAIL                 := 29;
	SE_ERR_DDEBUSY                 := 30;
	SE_ERR_NOASSOC                 := 31;
	PRINTER_CONTROL_PAUSE          := 1;
	PRINTER_CONTROL_RESUME         := 2;
	PRINTER_CONTROL_PURGE          := 3;
	PRINTER_STATUS_PAUSED          := $1;
	PRINTER_STATUS_ERROR           := $2;
	PRINTER_STATUS_PENDING_DELETION := $4;
	PRINTER_STATUS_PAPER_JAM       := $8;
	PRINTER_STATUS_PAPER_OUT       := $10;
	PRINTER_STATUS_MANUAL_FEED     := $20;
	PRINTER_STATUS_PAPER_PROBLEM   := $40;
	PRINTER_STATUS_OFFLINE         := $80;
	PRINTER_STATUS_IO_ACTIVE       := $100;
	PRINTER_STATUS_BUSY            := $200;
	PRINTER_STATUS_PRINTING        := $400;
	PRINTER_STATUS_OUTPUT_BIN_FULL := $800;
	PRINTER_STATUS_NOT_AVAILABLE   := $1000;
	PRINTER_STATUS_WAITING         := $2000;
	PRINTER_STATUS_PROCESSING      := $4000;
	PRINTER_STATUS_INITIALIZING    := $8000;
	PRINTER_STATUS_WARMING_UP      := $10000;
	PRINTER_STATUS_TONER_LOW       := $20000;
	PRINTER_STATUS_NO_TONER        := $40000;
	PRINTER_STATUS_PAGE_PUNT       := $80000;
	PRINTER_STATUS_USER_INTERVENTION := $100000;
	PRINTER_STATUS_OUT_OF_MEMORY   := $200000;
	PRINTER_STATUS_DOOR_OPEN       := $400000;
	PRINTER_ATTRIBUTE_QUEUED       := $1;
	PRINTER_ATTRIBUTE_DIRECT       := $2;
	PRINTER_ATTRIBUTE_DEFAULT      := $4;
	PRINTER_ATTRIBUTE_SHARED       := $8;
	PRINTER_ATTRIBUTE_NETWORK      := $10;
	PRINTER_ATTRIBUTE_HIDDEN       := $20;
	PRINTER_ATTRIBUTE_LOCAL        := $40;
	NO_PRIORITY                    := 0;
	MAX_PRIORITY                   := 99;
	MIN_PRIORITY                   := 1;
	DEF_PRIORITY                   := 1;
	JOB_CONTROL_PAUSE              := 1;
	JOB_CONTROL_RESUME             := 2;
	JOB_CONTROL_CANCEL             := 3;
	JOB_CONTROL_RESTART            := 4;
	JOB_STATUS_PAUSED              := $1;
	JOB_STATUS_ERROR               := $2;
	JOB_STATUS_DELETING            := $4;
	JOB_STATUS_SPOOLING            := $8;
	JOB_STATUS_PRINTING            := $10;
	JOB_STATUS_OFFLINE             := $20;
	JOB_STATUS_PAPEROUT            := $40;
	JOB_STATUS_PRINTED             := $80;
	JOB_POSITION_UNSPECIFIED       := 0;
	FORM_BUILTIN                   := $1;
	PRINTER_CONTROL_SET_STATUS     := 4;
	PRINTER_ATTRIBUTE_WORK_OFFLINE := $400;
	PRINTER_ATTRIBUTE_ENABLE_BIDI  := $800;
	JOB_CONTROL_DELETE             := 5;
	JOB_STATUS_USER_INTERVENTION   := $10000;
	DI_CHANNEL                     := 1;
	DI_READ_SPOOL_JOB              := 3;
	PORT_TYPE_WRITE                := $1;
	PORT_TYPE_READ                 := $2;
	PORT_TYPE_REDIRECTED           := $4;
	PORT_TYPE_NET_ATTACHED         := $8;
	PRINTER_ENUM_DEFAULT           := $1;
	PRINTER_ENUM_LOCAL             := $2;
	PRINTER_ENUM_CONNECTIONS       := $4;
	PRINTER_ENUM_FAVORITE          := $4;
	PRINTER_ENUM_NAME              := $8;
	PRINTER_ENUM_REMOTE            := $10;
	PRINTER_ENUM_SHARED            := $20;
	PRINTER_ENUM_NETWORK           := $40;
	PRINTER_ENUM_EXPAND            := $4000;
	PRINTER_ENUM_CONTAINER         := $8000;
	PRINTER_ENUM_ICONMASK          := $0FF0000;
	PRINTER_ENUM_ICON1             := $10000;
	PRINTER_ENUM_ICON2             := $20000;
	PRINTER_ENUM_ICON3             := $40000;
	PRINTER_ENUM_ICON4             := $80000;
	PRINTER_ENUM_ICON5             := $100000;
	PRINTER_ENUM_ICON6             := $200000;
	PRINTER_ENUM_ICON7             := $400000;
	PRINTER_ENUM_ICON8             := $800000;
	PRINTER_CHANGE_ADD_PRINTER     := $1;
	PRINTER_CHANGE_SET_PRINTER     := $2;
	PRINTER_CHANGE_DELETE_PRINTER  := $4;
	PRINTER_CHANGE_PRINTER         := $0FF;
	PRINTER_CHANGE_ADD_JOB         := $100;
	PRINTER_CHANGE_SET_JOB         := $200;
	PRINTER_CHANGE_DELETE_JOB      := $400;
	PRINTER_CHANGE_WRITE_JOB       := $800;
	PRINTER_CHANGE_JOB             := $0FF00;
	PRINTER_CHANGE_ADD_FORM        := $10000;
	PRINTER_CHANGE_SET_FORM        := $20000;
	PRINTER_CHANGE_DELETE_FORM     := $40000;
	PRINTER_CHANGE_FORM            := $70000;
	PRINTER_CHANGE_ADD_PORT        := $100000;
	PRINTER_CHANGE_CONFIGURE_PORT  := $200000;
	PRINTER_CHANGE_DELETE_PORT     := $400000;
	PRINTER_CHANGE_PORT            := $700000;
	PRINTER_CHANGE_ADD_PRINT_PROCESSOR := $1000000;
	PRINTER_CHANGE_DELETE_PRINT_PROCESSOR := $4000000;
	PRINTER_CHANGE_PRINT_PROCESSOR := $7000000;
	PRINTER_CHANGE_ADD_PRINTER_DRIVER := $10000000;
	PRINTER_CHANGE_DELETE_PRINTER_DRIVER := $40000000;
	PRINTER_CHANGE_PRINTER_DRIVER  := $70000000;
	PRINTER_CHANGE_TIMEOUT         := $80000000;
	PRINTER_CHANGE_ALL             := $7777FFFF;
	PRINTER_ERROR_INFORMATION      := $80000000;
	PRINTER_ERROR_WARNING          := $40000000;
	PRINTER_ERROR_SEVERE           := $20000000;
	PRINTER_ERROR_OUTOFPAPER       := $1;
	PRINTER_ERROR_JAM              := $2;
	PRINTER_ERROR_OUTOFTONER       := $4;
	SERVER_ACCESS_ADMINISTER       := $1;
	SERVER_ACCESS_ENUMERATE        := $2;
	PRINTER_ACCESS_ADMINISTER      := $4;
	PRINTER_ACCESS_USE             := $8;
	JOB_ACCESS_ADMINISTER          := $10;
	SERVER_ALL_ACCESS              :=  STANDARD_RIGHTS_REQUIRED | SERVER_ACCESS_ADMINISTER | SERVER_ACCESS_ENUMERATE;
	SERVER_READ                    :=  STANDARD_RIGHTS_READ | SERVER_ACCESS_ENUMERATE;
	SERVER_WRITE                   :=  STANDARD_RIGHTS_WRITE | SERVER_ACCESS_ADMINISTER | SERVER_ACCESS_ENUMERATE;
	SERVER_EXECUTE                 :=  STANDARD_RIGHTS_EXECUTE | SERVER_ACCESS_ENUMERATE;
	PRINTER_ALL_ACCESS             :=  STANDARD_RIGHTS_REQUIRED | PRINTER_ACCESS_ADMINISTER | PRINTER_ACCESS_USE;
	PRINTER_READ                   :=  STANDARD_RIGHTS_READ | PRINTER_ACCESS_USE;
	PRINTER_WRITE                  :=  STANDARD_RIGHTS_WRITE | PRINTER_ACCESS_USE;
	PRINTER_EXECUTE                :=  STANDARD_RIGHTS_EXECUTE | PRINTER_ACCESS_USE;
	JOB_ALL_ACCESS                 :=  STANDARD_RIGHTS_REQUIRED | JOB_ACCESS_ADMINISTER;
	JOB_READ                       :=  STANDARD_RIGHTS_READ | JOB_ACCESS_ADMINISTER;
	JOB_WRITE                      :=  STANDARD_RIGHTS_WRITE | JOB_ACCESS_ADMINISTER;
	JOB_EXECUTE                    :=  STANDARD_RIGHTS_EXECUTE | JOB_ACCESS_ADMINISTER;
	RESOURCE_CONNECTED             := $1;
	RESOURCE_PUBLICNET             := $2;
	RESOURCE_GLOBALNET             := $2;
	RESOURCE_REMEMBERED            := $3;
	RESOURCE_RECENT                := $4;
	RESOURCE_CONTEXT               := $5;
	RESOURCETYPE_ANY               := $0;
	RESOURCETYPE_DISK              := $1;
	RESOURCETYPE_PRINT             := $2;
	RESOURCETYPE_UNKNOWN           := $0FFFF;
	RESOURCEUSAGE_CONNECTABLE      := $1;
	RESOURCEUSAGE_CONTAINER        := $2;
	RESOURCEUSAGE_RESERVED         := $80000000;
	RESOURCEDISPLAYTYPE_GENERIC    := $0;
	RESOURCEDISPLAYTYPE_DOMAIN     := $1;
	RESOURCEDISPLAYTYPE_SERVER     := $2;
	RESOURCEDISPLAYTYPE_SHARE      := $3;
	RESOURCEDISPLAYTYPE_FILE       := $4;
	RESOURCEDISPLAYTYPE_GROUP      := $5;
	CONNECT_UPDATE_PROFILE         := $1;
	WN_SUCCESS                     :=  NO_ERROR;
	WN_NOT_SUPPORTED               :=  ERROR_NOT_SUPPORTED;
	WN_NET_ERROR                   :=  ERROR_UNEXP_NET_ERR;
	WN_MORE_DATA                   :=  ERROR_MORE_DATA;
	WN_BAD_POINTER                 :=  ERROR_INVALID_ADDRESS;
	WN_BAD_VALUE                   :=  ERROR_INVALID_PARAMETER;
	WN_BAD_PASSWORD                :=  ERROR_INVALID_PASSWORD;
	WN_ACCESS_DENIED               :=  ERROR_ACCESS_DENIED;
	WN_FUNCTION_BUSY               :=  ERROR_BUSY;
	WN_WINDOWS_ERROR               :=  ERROR_UNEXP_NET_ERR;
	WN_BAD_USER                    :=  ERROR_BAD_USERNAME;
	WN_OUT_OF_MEMORY               :=  ERROR_NOT_ENOUGH_MEMORY;
	WN_NO_NETWORK                  :=  ERROR_NO_NETWORK;
	WN_EXTENDED_ERROR              :=  ERROR_EXTENDED_ERROR;
	WN_NOT_CONNECTED               :=  ERROR_NOT_CONNECTED;
	WN_OPEN_FILES                  :=  ERROR_OPEN_FILES;
	WN_DEVICE_IN_USE               :=  ERROR_DEVICE_IN_USE;
	WN_BAD_NETNAME                 :=  ERROR_BAD_NET_NAME;
	WN_BAD_LOCALNAME               :=  ERROR_BAD_DEVICE;
	WN_ALREADY_CONNECTED           :=  ERROR_ALREADY_ASSIGNED;
	WN_DEVICE_ERROR                :=  ERROR_GEN_FAILURE;
	WN_CONNECTION_CLOSED           :=  ERROR_CONNECTION_UNAVAIL;
	WN_NO_NET_OR_BAD_PATH          :=  ERROR_NO_NET_OR_BAD_PATH;
	WN_BAD_PROVIDER                :=  ERROR_BAD_PROVIDER;
	WN_CANNOT_OPEN_PROFILE         :=  ERROR_CANNOT_OPEN_PROFILE;
	WN_BAD_PROFILE                 :=  ERROR_BAD_PROFILE;
	WN_BAD_HANDLE                  :=  ERROR_INVALID_HANDLE;
	WN_NO_MORE_ENTRIES             :=  ERROR_NO_MORE_ITEMS;
	WN_NOT_CONTAINER               :=  ERROR_NOT_CONTAINER;
	WN_NO_ERROR                    :=  NO_ERROR;
	NAME_FLAGS_MASK                := $87;
	GROUP_NAME                     := $80;
	UNIQUE_NAME                    := $0;
	REGISTERING                    := $0;
	REGISTERED                     := $4;
	DEREGISTERED                   := $5;
	DUPLICATE                      := $6;
	DUPLICATE_DEREG                := $7;
	LISTEN_OUTSTANDING             := $1;
	CALL_PENDING                   := $2;
	SESSION_ESTABLISHED            := $3;
	HANGUP_PENDING                 := $4;
	HANGUP_COMPLETE                := $5;
	SESSION_ABORTED                := $6;
	NCBCALL                        := $10;
	NCBLISTEN                      := $11;
	NCBHANGUP                      := $12;
	NCBSEND                        := $14;
	NCBRECV                        := $15;
	NCBRECVANY                     := $16;
	NCBCHAINSEND                   := $17;
	NCBDGSEND                      := $20;
	NCBDGRECV                      := $21;
	NCBDGSENDBC                    := $22;
	NCBDGRECVBC                    := $23;
	NCBADDNAME                     := $30;
	NCBDELNAME                     := $31;
	NCBRESET                       := $32;
	NCBASTAT                       := $33;
	NCBSSTAT                       := $34;
	NCBCANCEL                      := $35;
	NCBADDGRNAME                   := $36;
	NCBENUM                        := $37;
	NCBUNLINK                      := $70;
	NCBSENDNA                      := $71;
	NCBCHAINSENDNA                 := $72;
	NCBLANSTALERT                  := $73;
	NCBACTION                      := $77;
	NCBFINDNAME                    := $78;
	NCBTRACE                       := $79;
	ASYNCH                         := $80;
	NRC_GOODRET                    := $0;
	NRC_BUFLEN                     := $1;
	NRC_ILLCMD                     := $3;
	NRC_CMDTMO                     := $5;
	NRC_INCOMP                     := $6;
	NRC_BADDR                      := $7;
	NRC_SNUMOUT                    := $8;
	NRC_NORES                      := $9;
	NRC_SCLOSED                    := $0A;
	NRC_CMDCAN                     := $0B;
	NRC_DUPNAME                    := $0D;
	NRC_NAMTFUL                    := $0E;
	NRC_ACTSES                     := $0F;
	NRC_LOCTFUL                    := $11;
	NRC_REMTFUL                    := $12;
	NRC_ILLNN                      := $13;
	NRC_NOCALL                     := $14;
	NRC_NOWILD                     := $15;
	NRC_INUSE                      := $16;
	NRC_NAMERR                     := $17;
	NRC_SABORT                     := $18;
	NRC_NAMCONF                    := $19;
	NRC_IFBUSY                     := $21;
	NRC_TOOMANY                    := $22;
	NRC_BRIDGE                     := $23;
	NRC_CANOCCR                    := $24;
	NRC_CANCEL                     := $26;
	NRC_DUPENV                     := $30;
	NRC_ENVNOTDEF                  := $34;
	NRC_OSRESNOTAV                 := $35;
	NRC_MAXAPPS                    := $36;
	NRC_NOSAPS                     := $37;
	NRC_NORESOURCES                := $38;
	NRC_INVADDRESS                 := $39;
	NRC_INVDDID                    := $3B;
	NRC_LOCKFAIL                   := $3C;
	NRC_OPENERR                    := $3F;
	NRC_SYSTEM                     := $40;
	NRC_PENDING                    := $0FF;
	EXCEPTION_EXECUTE_HANDLER      := 1;
	EXCEPTION_CONTINUE_SEARCH      := 0;
	EXCEPTION_CONTINUE_EXECUTION   := 1;
	ctlFirst                       := $400;
	ctlLast                        := $4FF;
	psh1                           := $400;
	psh2                           := $401;
	psh3                           := $402;
	psh4                           := $403;
	psh5                           := $404;
	psh6                           := $405;
	psh7                           := $406;
	psh8                           := $407;
	psh9                           := $408;
	psh10                          := $409;
	psh11                          := $40A;
	psh12                          := $40B;
	psh13                          := $40C;
	psh14                          := $40D;
	psh15                          := $40E;
	pshHelp                        :=  psh15;
	psh16                          := $40F;
	chx1                           := $410;
	chx2                           := $411;
	chx3                           := $412;
	chx4                           := $413;
	chx5                           := $414;
	chx6                           := $415;
	chx7                           := $416;
	chx8                           := $417;
	chx9                           := $418;
	chx10                          := $419;
	chx11                          := $41A;
	chx12                          := $41B;
	chx13                          := $41C;
	chx14                          := $41D;
	chx15                          := $41E;
	chx16                          := $41D;
	rad1                           := $420;
	rad2                           := $421;
	rad3                           := $422;
	rad4                           := $423;
	rad5                           := $424;
	rad6                           := $425;
	rad7                           := $426;
	rad8                           := $427;
	rad9                           := $428;
	rad10                          := $429;
	rad11                          := $42A;
	rad12                          := $42B;
	rad13                          := $42C;
	rad14                          := $42D;
	rad15                          := $42E;
	rad16                          := $42F;
	grp1                           := $430;
	grp2                           := $431;
	grp3                           := $432;
	grp4                           := $433;
	frm1                           := $434;
	frm2                           := $435;
	frm3                           := $436;
	frm4                           := $437;
	rct1                           := $438;
	rct2                           := $439;
	rct3                           := $43A;
	rct4                           := $43B;
	ico1                           := $43C;
	ico2                           := $43D;
	ico3                           := $43E;
	ico4                           := $43F;
	stc1                           := $440;
	stc2                           := $441;
	stc3                           := $442;
	stc4                           := $443;
	stc5                           := $444;
	stc6                           := $445;
	stc7                           := $446;
	stc8                           := $447;
	stc9                           := $448;
	stc10                          := $449;
	stc11                          := $44A;
	stc12                          := $44B;
	stc13                          := $44C;
	stc14                          := $44D;
	stc15                          := $44E;
	stc16                          := $44F;
	stc17                          := $450;
	stc18                          := $451;
	stc19                          := $452;
	stc20                          := $453;
	stc21                          := $454;
	stc22                          := $455;
	stc23                          := $456;

	stc24                          := $457;
	stc25                          := $458;
	stc26                          := $459;
	stc27                          := $45A;
	stc28                          := $45B;
	stc29                          := $45C;
	stc30                          := $45D;
	stc31                          := $45E;
	stc32                          := $45F;
	lst1                           := $460;
	lst2                           := $461;
	lst3                           := $462;
	lst4                           := $463;
	lst5                           := $464;
	lst6                           := $465;
	lst7                           := $466;
	lst8                           := $467;
	lst9                           := $468;
	lst10                          := $469;
	lst11                          := $46A;
	lst12                          := $46B;
	lst13                          := $46C;
	lst14                          := $46D;
	lst15                          := $46E;
	lst16                          := $46F;
	cmb1                           := $470;
	cmb2                           := $471;
	cmb3                           := $472;
	cmb4                           := $473;
	cmb5                           := $474;
	cmb6                           := $475;
	cmb7                           := $476;
	cmb8                           := $477;
	cmb9                           := $478;
	cmb10                          := $479;
	cmb11                          := $47A;
	cmb12                          := $47B;
	cmb13                          := $47C;
	cmb14                          := $47D;
	cmb15                          := $47E;
	cmb16                          := $47F;
	edt1                           := $480;
	edt2                           := $481;
	edt3                           := $482;
	edt4                           := $483;
	edt5                           := $484;
	edt6                           := $485;
	edt7                           := $486;
	edt8                           := $487;
	edt9                           := $488;
	edt10                          := $489;
	edt11                          := $48A;
	edt12                          := $48B;
	edt13                          := $48C;
	edt14                          := $48D;
	edt15                          := $48E;
	edt16                          := $48F;
	scr1                           := $490;
	scr2                           := $491;
	scr3                           := $492;
	scr4                           := $493;
	scr5                           := $494;
	scr6                           := $495;
	scr7                           := $496;
	scr8                           := $497;
	FILEOPENORD                    := 1536;
	MULTIFILEOPENORD               := 1537;
	PRINTDLGORD                    := 1538;
	PRNSETUPDLGORD                 := 1539;
	FINDDLGORD                     := 1540;
	REPLACEDLGORD                  := 1541;
	FONTDLGORD                     := 1542;
	FORMATDLGORD31                 := 1543;
	FORMATDLGORD30                 := 1544;
	HKEY_CLASSES_ROOT              := $80000000;
	HKEY_CURRENT_USER              := $80000001;
	HKEY_LOCAL_MACHINE             := $80000002;
	HKEY_USERS                     := $80000003;
	HKEY_PERFORMANCE_DATA          := $80000004;
	HKEY_CURRENT_CONFIG            := $80000005;
	HKEY_DYN_DATA                  := $80000006;
	SERVICE_NO_CHANGE              := $0FFFF;
	SERVICE_ACTIVE                 := $1;
	SERVICE_INACTIVE               := $2;
	SERVICE_STATE_ALL              :=  SERVICE_ACTIVE | SERVICE_INACTIVE;
	SERVICE_CONTROL_STOP           := $1;
	SERVICE_CONTROL_PAUSE          := $2;
	SERVICE_CONTROL_CONTINUE       := $3;
	SERVICE_CONTROL_INTERROGATE    := $4;
	SERVICE_CONTROL_SHUTDOWN       := $5;
	SERVICE_STOPPED                := $1;
	SERVICE_START_PENDING          := $2;
	SERVICE_STOP_PENDING           := $3;
	SERVICE_RUNNING                := $4;
	SERVICE_CONTINUE_PENDING       := $5;
	SERVICE_PAUSE_PENDING          := $6;
	SERVICE_PAUSED                 := $7;
	SERVICE_ACCEPT_STOP            := $1;
	SERVICE_ACCEPT_PAUSE_CONTINUE  := $2;
	SERVICE_ACCEPT_SHUTDOWN        := $4;
	SC_MANAGER_CONNECT             := $1;
	SC_MANAGER_CREATE_SERVICE      := $2;
	SC_MANAGER_ENUMERATE_SERVICE   := $4;
	SC_MANAGER_LOCK                := $8;
	SC_MANAGER_QUERY_LOCK_STATUS   := $10;
	SC_MANAGER_MODIFY_BOOT_CONFIG  := $20;
	SC_MANAGER_ALL_ACCESS          :=  STANDARD_RIGHTS_REQUIRED | SC_MANAGER_CONNECT | SC_MANAGER_CREATE_SERVICE | SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_LOCK;
	SERVICE_QUERY_CONFIG           := $1;
	SERVICE_CHANGE_CONFIG          := $2;
	SERVICE_QUERY_STATUS           := $4;
	SERVICE_ENUMERATE_DEPENDENTS   := $8;
	SERVICE_START                  := $10;
	SERVICE_STOP                   := $20;
	SERVICE_PAUSE_CONTINUE         := $40;
	SERVICE_INTERROGATE            := $80;
	SERVICE_USER_DEFINED_CONTROL   := $100;
	SERVICE_ALL_ACCESS             :=  STANDARD_RIGHTS_REQUIRED | SERVICE_QUERY_CONFIG | SERVICE_CHANGE_CONFIG | SERVICE_QUERY_STATUS;
	PERF_DATA_VERSION              := 1;
	PERF_DATA_REVISION             := 1;
	PERF_NO_INSTANCES              := 1;
	PERF_SIZE_DWORD                := $0;
	PERF_SIZE_LARGE                := $100;
	PERF_SIZE_ZERO                 := $200;
	PERF_SIZE_VARIABLE_LEN         := $300;
	PERF_TYPE_NUMBER               := $0;
	PERF_TYPE_COUNTER              := $400;
	PERF_TYPE_TEXT                 := $800;
	PERF_TYPE_ZERO                 := $0C00;
	PERF_NUMBER_HEX                := $0;
	PERF_NUMBER_DECIMAL            := $10000;
	PERF_NUMBER_DEC_1000           := $20000;
	PERF_COUNTER_VALUE             := $0;
	PERF_COUNTER_RATE              := $10000;
	PERF_COUNTER_FRACTION          := $20000;
	PERF_COUNTER_BASE              := $30000;
	PERF_COUNTER_ELAPSED           := $40000;
	PERF_COUNTER_QUEUELEN          := $50000;
	PERF_COUNTER_HISTOGRAM         := $60000;
	PERF_TEXT_UNICODE              := $0;
	PERF_TEXT_ASCII                := $10000;
	PERF_TIMER_TICK                := $0;
	PERF_TIMER_100NS               := $100000;
	PERF_OBJECT_TIMER              := $200000;
	PERF_DELTA_COUNTER             := $400000;
	PERF_DELTA_BASE                := $800000;
	PERF_INVERSE_COUNTER           := $1000000;
	PERF_MULTI_COUNTER             := $2000000;
	PERF_DISPLAY_NO_SUFFIX         := $0;
	PERF_DISPLAY_PER_SEC           := $10000000;
	PERF_DISPLAY_PERCENT           := $20000000;
	PERF_DISPLAY_SECONDS           := $30000000;
	PERF_DISPLAY_NOSHOW            := $40000000;
	PERF_COUNTER_COUNTER           :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_PER_SEC;
	PERF_COUNTER_TIMER             :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_COUNTER_QUEUELEN_TYPE     :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_QUEUELEN | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_NO_SUFFIX;
	PERF_COUNTER_BULK_COUNT        :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_PER_SEC;
	PERF_COUNTER_TEXT              :=  PERF_SIZE_VARIABLE_LEN | PERF_TYPE_TEXT | PERF_TEXT_UNICODE | PERF_DISPLAY_NO_SUFFIX;
	PERF_COUNTER_RAWCOUNT          :=  PERF_SIZE_DWORD | PERF_TYPE_NUMBER | PERF_NUMBER_DECIMAL | PERF_DISPLAY_NO_SUFFIX;
	PERF_SAMPLE_FRACTION           :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DELTA_COUNTER | PERF_DELTA_BASE | PERF_DISPLAY_PERCENT;
	PERF_SAMPLE_COUNTER            :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_NO_SUFFIX;
	PERF_COUNTER_NODATA            :=  PERF_SIZE_ZERO | PERF_DISPLAY_NOSHOW;
	PERF_COUNTER_TIMER_INV         :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_SAMPLE_BASE               :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW | $1;
	PERF_AVERAGE_TIMER             :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DISPLAY_SECONDS;
	PERF_AVERAGE_BASE              :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW | $2;
	PERF_AVERAGE_BULK              :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DISPLAY_NOSHOW;
	PERF_100NSEC_TIMER             :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_DELTA_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_100NSEC_TIMER_INV         :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_DELTA_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_COUNTER_MULTI_TIMER       :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_DELTA_COUNTER | PERF_TIMER_TICK | PERF_MULTI_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_COUNTER_MULTI_TIMER_INV   :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_DELTA_COUNTER | PERF_MULTI_COUNTER | PERF_TIMER_TICK | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_COUNTER_MULTI_BASE        :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_MULTI_COUNTER | PERF_DISPLAY_NOSHOW;
	PERF_100NSEC_MULTI_TIMER       :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_DELTA_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_MULTI_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_100NSEC_MULTI_TIMER_INV   :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_DELTA_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_MULTI_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT;
	PERF_RAW_FRACTION              :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DISPLAY_PERCENT;
	PERF_RAW_BASE                  :=  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW | $3;
	PERF_ELAPSED_TIME              :=  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_ELAPSED | PERF_OBJECT_TIMER | PERF_DISPLAY_SECONDS;
	PERF_COUNTER_HISTOGRAM_TYPE    := $80000000;
	PERF_DETAIL_NOVICE             := 100;
	PERF_DETAIL_ADVANCED           := 200;
	PERF_DETAIL_EXPERT             := 300;
	PERF_DETAIL_WIZARD             := 400;
	PERF_NO_UNIQUE_ID              := 1;
	LZERROR_BADINHANDLE            := 1;
	LZERROR_BADOUTHANDLE           := 2;
	LZERROR_READ                   := 3;
	LZERROR_WRITE                  := 4;
	LZERROR_PUBLICLOC              := 5;
	LZERROR_GLOBLOCK               := 6;
	LZERROR_BADVALUE               := 7;
	LZERROR_UNKNOWNALG             := 8;
	VK_PROCESSKEY                  := $0E5;
	WM_CONVERTREQUESTEX            := $108;

	WM_IME_REQUEST                 := $288;
	WM_IME_STARTCOMPOSITION        := $10D;
	WM_IME_ENDCOMPOSITION          := $10E;
	WM_IME_COMPOSITION             := $10F;
	WM_IME_KEYLAST                 := $10F;
	WM_IME_SETCONTEXT              := $281;
	WM_IME_NOTIFY                  := $282;
	WM_IME_CONTROL                 := $283;
	WM_IME_COMPOSITIONFULL         := $284;
	WM_IME_SELECT                  := $285;
	WM_IME_CHAR                    := $286;
	WM_IME_KEYDOWN                 := $290;
	WM_IME_KEYUP                   := $291;
	IMC_GETCANDIDATEPOS            := $7;
	IMC_SETCANDIDATEPOS            := $8;
	IMC_GETCOMPOSITIONFONT         := $9;
	IMC_SETCOMPOSITIONFONT         := $0A;
	IMC_GETCOMPOSITIONWINDOW       := $0B;
	IMC_SETCOMPOSITIONWINDOW       := $0C;
	IMC_GETSTATUSWINDOWPOS         := $0F;
	IMC_SETSTATUSWINDOWPOS         := $10;
	IMC_CLOSESTATUSWINDOW          := $21;
	IMC_OPENSTATUSWINDOW           := $22;
	NI_OPENCANDIDATE               := $10;
	NI_CLOSECANDIDATE              := $11;
	NI_SELECTCANDIDATESTR          := $12;
	NI_CHANGECANDIDATELIST         := $13;
	NI_FINALIZECONVERSIONRESULT    := $14;
	NI_COMPOSITIONSTR              := $15;
	NI_SETCANDIDATE_PAGESTART      := $16;
	NI_SETCANDIDATE_PAGESIZE       := $17;
	ISC_SHOWUICANDIDATEWINDOW      := $1;
	ISC_SHOWUICOMPOSITIONWINDOW    := $80000000;
	ISC_SHOWUIGUIDELINE            := $40000000;
	ISC_SHOWUIALLCANDIDATEWINDOW   := $0F;
	ISC_SHOWUIALL                  := $0C000000F;
	CPS_COMPLETE                   := $1;
	CPS_CONVERT                    := $2;
	CPS_REVERT                     := $3;
	CPS_CANCEL                     := $4;
	IME_CHOTKEY_IME_NONIME_TOGGLE  := $10;
	IME_CHOTKEY_SHAPE_TOGGLE       := $11;
	IME_CHOTKEY_SYMBOL_TOGGLE      := $12;
	IME_JHOTKEY_CLOSE_OPEN         := $30;
	IME_KHOTKEY_SHAPE_TOGGLE       := $50;
	IME_KHOTKEY_HANJACONVERT       := $51;
	IME_KHOTKEY_ENGLISH            := $52;
	IME_THOTKEY_IME_NONIME_TOGGLE  := $70;
	IME_THOTKEY_SHAPE_TOGGLE       := $71;
	IME_THOTKEY_SYMBOL_TOGGLE      := $72;
	IME_HOTKEY_DSWITCH_FIRST       := $100;
	IME_HOTKEY_DSWITCH_LAST        := $11F;
	IME_ITHOTKEY_RESEND_RESULTSTR  := $200;
	IME_ITHOTKEY_PREVIOUS_COMPOSITION := $201;
	IME_ITHOTKEY_UISTYLE_TOGGLE    := $202;
	GCS_COMPREADSTR                := $1;
	GCS_COMPREADATTR               := $2;
	GCS_COMPREADCLAUSE             := $4;
	GCS_COMPSTR                    := $8;
	GCS_COMPATTR                   := $10;
	GCS_COMPCLAUSE                 := $20;
	GCS_CURSORPOS                  := $80;
	GCS_DELTASTART                 := $100;
	GCS_RESULTREADSTR              := $200;
	GCS_RESULTREADCLAUSE           := $400;
	GCS_RESULTSTR                  := $800;
	GCS_RESULTCLAUSE               := $1000;
	CS_INSERTCHAR                  := $2000;
	CS_NOMOVECARET                 := $4000;
	IME_PROP_AT_CARET              := $10000;
	IME_PROP_SPECIAL_UI            := $20000;
	IME_PROP_CANDLIST_START_FROM_1 := $40000;
	IME_PROP_UNICODE               := $80000;
	UI_CAP_2700                    := $1;
	UI_CAP_ROT90                   := $2;
	UI_CAP_ROTANY                  := $4;
	SCS_CAP_COMPSTR                := $1;
	SCS_CAP_MAKEREAD               := $2;
	SELECT_CAP_CONVERSION          := $1;
	SELECT_CAP_SENTENCE            := $2;
	GGL_LEVEL                      := $1;
	GGL_INDEX                      := $2;
	GGL_STRING                     := $3;
	GGL_PRIVATE                    := $4;
	GL_LEVEL_NOGUIDELINE           := $0;
	GL_LEVEL_FATAL                 := $1;
	GL_LEVEL_ERROR                 := $2;
	GL_LEVEL_WARNING               := $3;
	GL_LEVEL_INFORMATION           := $4;
	GL_ID_UNKNOWN                  := $0;
	GL_ID_NOMODULE                 := $1;
	GL_ID_NODICTIONARY             := $10;
	GL_ID_CANNOTSAVE               := $11;
	GL_ID_NOCONVERT                := $20;
	GL_ID_TYPINGERROR              := $21;
	GL_ID_TOOMANYSTROKE            := $22;
	GL_ID_READINGCONFLICT          := $23;
	GL_ID_INPUTREADING             := $24;
	GL_ID_INPUTRADICAL             := $25;
	GL_ID_INPUTCODE                := $26;
	GL_ID_INPUTSYMBOL              := $27;
	GL_ID_CHOOSECANDIDATE          := $28;
	GL_ID_REVERSECONVERSION        := $29;
	GL_ID_PRIVATE_FIRST            := $8000;
	GL_ID_PRIVATE_LAST             := $0FFFF;
	IGP_PROPERTY                   := $4;
	IGP_CONVERSION                 := $8;
	IGP_SENTENCE                   := $0C;
	IGP_UI                         := $10;
	IGP_SETCOMPSTR                 := $14;
	IGP_SELECT                     := $18;
	SCS_SETSTR                     :=  GCS_COMPREADSTR | GCS_COMPSTR;
	SCS_CHANGEATTR                 :=  GCS_COMPREADATTR | GCS_COMPATTR;
	SCS_CHANGECLAUSE               :=  GCS_COMPREADCLAUSE | GCS_COMPCLAUSE;
	ATTR_INPUT                     := $0;
	ATTR_TARGET_CONVERTED          := $1;
	ATTR_CONVERTED                 := $2;
	ATTR_TARGET_NOTCONVERTED       := $3;
	ATTR_INPUT_ERROR               := $4;
	CFS_DEFAULT                    := $0;
	CFS_RECT                       := $1;
	CFS_POINT                      := $2;
	CFS_SCREEN                     := $4;
	CFS_FORCE_POSITION             := $20;
	CFS_CANDIDATEPOS               := $40;
	CFS_EXCLUDE                    := $80;
	GCL_CONVERSION                 := $1;
	GCL_REVERSECONVERSION          := $2;
	GCL_REVERSE_LENGTH             := $3;
	IME_CMODE_ALPHANUMERIC         := $0;
	IME_CMODE_NATIVE               := $1;
	IME_CMODE_CHINESE              :=  IME_CMODE_NATIVE;
	IME_CMODE_HANGEUL              :=  IME_CMODE_NATIVE;
	IME_CMODE_JAPANESE             :=  IME_CMODE_NATIVE;
	IME_CMODE_KATAKANA             := $2;
	IME_CMODE_LANGUAGE             := $3;
	IME_CMODE_FULLSHAPE            := $8;
	IME_CMODE_ROMAN                := $10;
	IME_CMODE_CHARCODE             := $20;
	IME_CMODE_HANJACONVERT         := $40;
	IME_CMODE_SOFTKBD              := $80;
	IME_CMODE_NOCONVERSION         := $100;
	IME_CMODE_EUDC                 := $200;
	IME_CMODE_SYMBOL               := $400;
	IME_SMODE_NONE                 := $0;
	IME_SMODE_PLAURALCLAUSE        := $1;
	IME_SMODE_SINGLECONVERT        := $2;
	IME_SMODE_AUTOMATIC            := $4;
	IME_SMODE_PHRASEPREDICT        := $8;
	IME_CAND_UNKNOWN               := $0;
	IME_CAND_READ                  := $1;
	IME_CAND_CODE                  := $2;
	IME_CAND_MEANING               := $3;
	IME_CAND_RADICAL               := $4;
	IME_CAND_STROKE                := $5;
	IMN_CLOSESTATUSWINDOW          := $1;
	IMN_OPENSTATUSWINDOW           := $2;
	IMN_CHANGECANDIDATE            := $3;
	IMN_CLOSECANDIDATE             := $4;
	IMN_OPENCANDIDATE              := $5;
	IMN_SETCONVERSIONMODE          := $6;
	IMN_SETSENTENCEMODE            := $7;
	IMN_SETOPENSTATUS              := $8;
	IMN_SETCANDIDATEPOS            := $9;
	IMN_SETCOMPOSITIONFONT         := $0A;
	IMN_SETCOMPOSITIONWINDOW       := $0B;
	IMN_SETSTATUSWINDOWPOS         := $0C;
	IMN_GUIDELINE                  := $0D;
	IMN_PRIVATE                    := $0E;
	IMM_ERROR_NODATA               := -1;
	IMM_ERROR_GENERAL              := -2;
	IME_CONFIG_GENERAL             := 1;
	IME_CONFIG_REGISTERWORD        := 2;
	IME_CONFIG_SELECTDICTIONARY    := 3;
	IME_ESC_QUERY_SUPPORT          := $3;
	IME_ESC_RESERVED_FIRST         := $4;
	IME_ESC_RESERVED_LAST          := $7FF;
	IME_ESC_PRIVATE_FIRST          := $800;
	IME_ESC_PRIVATE_LAST           := $0FFF;
	IME_ESC_SEQUENCE_TO_INTERNAL   := $1001;
	IME_ESC_GET_EUDC_DICTIONARY    := $1003;
	IME_ESC_SET_EUDC_DICTIONARY    := $1004;
	IME_ESC_MAX_KEY                := $1005;
	IME_ESC_IME_NAME               := $1006;
	IME_ESC_SYNC_HOTKEY            := $1007;
	IME_ESC_HANJA_MODE             := $1008;
	IME_REGWORD_STYLE_EUDC         := $1;
	IME_REGWORD_STYLE_USER_FIRST   := $80000000;
	IME_REGWORD_STYLE_USER_LAST    := $0FFFF;
	SOFTKEYBOARD_TYPE_T1           := $1;
	SOFTKEYBOARD_TYPE_C1           := $2;
	DIALOPTION_BILLING             := $40;
	DIALOPTION_QUIET               := $80;
	DIALOPTION_DIALTONE            := $100;
	MDMVOLFLAG_LOW                 := $1;
	MDMVOLFLAG_MEDIUM              := $2;
	MDMVOLFLAG_HIGH                := $4;
	MDMVOL_LOW                     := $0;
	MDMVOL_MEDIUM                  := $1;
	MDMVOL_HIGH                    := $2;
	MDMSPKRFLAG_OFF                := $1;
	MDMSPKRFLAG_DIAL               := $2;
	MDMSPKRFLAG_ON                 := $4;
	MDMSPKRFLAG_CALLSETUP          := $8;
	MDMSPKR_OFF                    := $0;
	MDMSPKR_DIAL                   := $1;
	MDMSPKR_ON                     := $2;
	MDMSPKR_CALLSETUP              := $3;
	MDM_COMPRESSION                := $1;
	MDM_ERROR_CONTROL              := $2;
	MDM_FORCED_EC                  := $4;
	MDM_CELLULAR                   := $8;
	MDM_FLOWCONTROL_HARD           := $10;
	MDM_FLOWCONTROL_SOFT           := $20;
	MDM_CCITT_OVERRIDE             := $40;
	MDM_SPEED_ADJUST               := $80;
	MDM_TONE_DIAL                  := $100;
	MDM_BLIND_DIAL                 := $200;
	MDM_V23_OVERRIDE               := $400;
	ABM_NEW                        := $0;
	ABM_REMOVE                     := $1;
	ABM_QUERYPOS                   := $2;
	ABM_SETPOS                     := $3;
	ABM_GETSTATE                   := $4;
	ABM_GETTASKBARPOS              := $5;
	ABM_ACTIVATE                   := $6;
	ABM_GETAUTOHIDEBAR             := $7;
	ABM_SETAUTOHIDEBAR             := $8;
	ABM_WINDOWPOSCHANGED           := $9;
	ABN_STATECHANGE                := $0;
	ABN_POSCHANGED                 := $1;
	ABN_FULLSCREENAPP              := $2;
	ABN_WINDOWARRANGE              := $3;
	ABS_AUTOHIDE                   := $1;
	ABS_ALWAYSONTOP                := $2;
	ABE_LEFT                       := 0;
	ABE_TOP                        := 1;
	ABE_RIGHT                      := 2;
	ABE_BOTTOM                     := 3;
	EIRESID                        := 1;
	FO_MOVE                        := $1;
	FO_COPY                        := $2;
	FO_DELETE                      := $3;
	FO_RENAME                      := $4;
	FOF_MULTIDESTFILES             := $1;
	FOF_CONFIRMMOUSE               := $2;
	FOF_SILENT                     := $4;
	FOF_RENAMEONCOLLISION          := $8;
	FOF_NOCONFIRMATION             := $10;
	FOF_WANTMAPPINGHANDLE          := $20;
	FOF_ALLOWUNDO                  := $40;
	FOF_FILESONLY                  := $80;
	FOF_SIMPLEPROGRESS             := $100;
	FOF_NOCONFIRMMKDIR             := $200;
	PO_DELETE                      := $13;
	PO_RENAME                      := $14;
	PO_PORTCHANGE                  := $20;
	PO_REN_PORT                    := $34;
	SE_ERR_FNF                     := 2;
	SE_ERR_PNF                     := 3;
	SE_ERR_ACCESSDENIED            := 5;
	SE_ERR_OOM                     := 8;
	SE_ERR_DLLNOTFOUND             := 32;
	SEE_MASK_CLASSNAME             := $1;
	SEE_MASK_CLASSKEY              := $3;
	SEE_MASK_IDLIST                := $4;
	SEE_MASK_INVOKEIDLIST          := $0C;
	SEE_MASK_ICON                  := $10;
	SEE_MASK_HOTKEY                := $20;
	SEE_MASK_NOCLOSEPROCESS        := $40;
	SEE_MASK_CONNECTNETDRV         := $80;
	SEE_MASK_FLAG_DDEWAIT          := $100;
	SEE_MASK_DOENVSUBST            := $200;
	SEE_MASK_FLAG_NO_UI            := $400;
	NIM_ADD                        := $0;
	NIM_MODIFY                     := $1;
	NIM_DELETE                     := $2;
	NIF_MESSAGE                    := $1;
	NIF_ICON                       := $2;
	NIF_TIP                        := $4;
	SHGFI_ICON                     := $100;
	SHGFI_DISPLAYNAME              := $200;
	SHGFI_TYPENAME                 := $400;
	SHGFI_ATTRIBUTES               := $800;
	SHGFI_ICONLOCATION             := $1000;
	SHGFI_EXETYPE                  := $2000;
	SHGFI_SYSICONINDEX             := $4000;
	SHGFI_LINKOVERLAY              := $8000;
	SHGFI_SELECTED                 := $10000;
	SHGFI_LARGEICON                := $0;
	SHGFI_SMALLICON                := $1;
	SHGFI_OPENICON                 := $2;
	SHGFI_SHELLICONSIZE            := $4;
	SHGFI_PIDL                     := $8;
	SHGFI_USEFILEATTRIBUTES        := $10;
	SHGNLI_PIDL                    := $1;
	SHGNLI_PREFIXNAME              := $2;
	VS_VERSION_INFO                := 1;
	VS_USER_DEFINED                := 100;
	VS_FFI_SIGNATURE               := $0FEEF04BD;
	VS_FFI_STRUCVERSION            := $10000;
	VS_FFI_FILEFLAGSMASK           := $3F;
	VS_FF_DEBUG                    := $1;
	VS_FF_PRERELEASE               := $2;
	VS_FF_PATCHED                  := $4;
	VS_FF_PRIVATEBUILD             := $8;
	VS_FF_INFOINFERRED             := $10;
	VS_FF_SPECIALBUILD             := $20;
	VOS_UNKNOWN                    := $0;
	VOS_DOS                        := $10000;
	VOS_OS216                      := $20000;
	VOS_OS232                      := $30000;
	VOS_NT                         := $40000;
	VOS__BASE                      := $0;
	VOS__WINDOWS16                 := $1;
	VOS__PM16                      := $2;
	VOS__PM32                      := $3;
	VOS__WINDOWS32                 := $4;
	VOS_DOS_WINDOWS16              := $10001;
	VOS_DOS_WINDOWS32              := $10004;
	VOS_OS216_PM16                 := $20002;
	VOS_OS232_PM32                 := $30003;
	VOS_NT_WINDOWS32               := $40004;
	VFT_UNKNOWN                    := $0;
	VFT_APP                        := $1;
	VFT_DLL                        := $2;
	VFT_DRV                        := $3;
	VFT_FONT                       := $4;
	VFT_VXD                        := $5;
	VFT_STATIC_LIB                 := $7;
	VFT2_UNKNOWN                   := $0;
	VFT2_DRV_PRINTER               := $1;
	VFT2_DRV_KEYBOARD              := $2;
	VFT2_DRV_LANGUAGE              := $3;
	VFT2_DRV_DISPLAY               := $4;
	VFT2_DRV_MOUSE                 := $5;
	VFT2_DRV_NETWORK               := $6;
	VFT2_DRV_SYSTEM                := $7;
	VFT2_DRV_INSTALLABLE           := $8;
	VFT2_DRV_SOUND                 := $9;
	VFT2_DRV_COMM                  := $0A;
	VFT2_DRV_INPUTMETHOD           := $0B;
	VFT2_FONT_RASTER               := $1;
	VFT2_FONT_VECTOR               := $2;
	VFT2_FONT_TRUETYPE             := $3;
	VFFF_ISSHAREDFILE              := $1;
	VFF_CURNEDEST                  := $1;
	VFF_FILEINUSE                  := $2;
	VFF_BUFFTOOSMALL               := $4;
	VIFF_FORCEINSTALL              := $1;
	VIFF_DONTDELETEOLD             := $2;
	VIF_TEMPFILE                   := $1;
	VIF_MISMATCH                   := $2;
	VIF_SRCOLD                     := $4;
	VIF_DIFFLANG                   := $8;
	VIF_DIFFCODEPG                 := $10;
	VIF_DIFFTYPE                   := $20;
	VIF_WRITEPROT                  := $40;
	VIF_FILEINUSE                  := $80;
	VIF_OUTOFSPACE                 := $100;
	VIF_ACCESSVIOLATION            := $200;
	VIF_SHARINGVIOLATION           := $400;
	VIF_CANNOTCREATE               := $800;
	VIF_CANNOTDELETE               := $1000;
	VIF_CANNOTRENAME               := $2000;
	VIF_CANNOTDELETECUR            := $4000;
	VIF_OUTOFMEMORY                := $8000;
	VIF_CANNOTREADSRC              := $10000;
	VIF_CANNOTREADDST              := $20000;
	VIF_BUFFTOOSMALL               := $40000;
	PROCESS_HEAP_REGION            := $1;
	PROCESS_HEAP_UNCOMMITTED_RANGE := $2;
	PROCESS_HEAP_ENTRY_BUSY        := $4;
	PROCESS_HEAP_ENTRY_MOVEABLE    := $10;
	PROCESS_HEAP_ENTRY_DDESHARE    := $20;
	SCS_32BIT_BINARY               := 0;
	SCS_DOS_BINARY                 := 1;
	SCS_WOW_BINARY                 := 2;
	SCS_PIF_BINARY                 := 3;
	SCS_POSIX_BINARY               := 4;
	SCS_OS216_BINARY               := 5;
	LOGON32_LOGON_INTERACTIVE      := 2;
	LOGON32_LOGON_BATCH            := 4;
	LOGON32_LOGON_SERVICE          := 5;
	LOGON32_PROVIDER_DEFAULT       := 0;
	LOGON32_PROVIDER_WINNT35       := 1;
	VER_PLATFORM_WIN32s            := 0;
	VER_PLATFORM_WIN32_WINDOWS     := 1;
	VER_PLATFORM_WIN32_NT          := 2;
	AC_LINE_OFFLINE                := $0;
	AC_LINE_ONLINE                 := $1;
	AC_LINE_BACKUP_POWER           := $2;
	AC_LINE_UNKNOWN                := $0FF;
	BATTERY_FLAG_HIGH              := $1;
	BATTERY_FLAG_LOW               := $2;
	BATTERY_FLAG_CRITICAL          := $4;
	BATTERY_FLAG_CHARGING          := $8;
	BATTERY_FLAG_NO_BATTERY        := $80;
	BATTERY_FLAG_UNKNOWN           := $0FF;
	BATTERY_PERCENTAGE_UNKNOWN     := $0FF;
	BATTERY_LIFE_UNKNOWN           := $0FFFF;
	CDM_FIRST                      :=  WM_USER + 100;
	CDM_LAST                       :=  WM_USER + 200;
	CDM_GETSPEC                    :=  CDM_FIRST + $0;
	CDM_GETFILEPATH                :=  CDM_FIRST + $1;
	CDM_GETFOLDERPATH              :=  CDM_FIRST + $2;
	CDM_GETFOLDERIDLIST            :=  CDM_FIRST + $3;
	CDM_SETCONTROLTEXT             :=  CDM_FIRST + $4;
	CDM_HIDECONTROL                :=  CDM_FIRST + $5;
	CDM_SETDEFEXT                  :=  CDM_FIRST + $6;
	SIMULATED_FONTTYPE             := $8000;
	PRINTER_FONTTYPE               := $4000;
	SCREEN_FONTTYPE                := $2000;
	BOLD_FONTTYPE                  := $100;
	ITALIC_FONTTYPE                := $200;
	REGULAR_FONTTYPE               := $400;
	WM_PSD_PAGESETUPDLG            :=  WM_USER;
	WM_PSD_FULLPAGERECT            :=  WM_USER + 1;
	WM_PSD_MINMARGINRECT           :=  WM_USER + 2;
	WM_PSD_MARGINRECT              :=  WM_USER + 3;
	WM_PSD_GREEKTEXTRECT           :=  WM_USER + 4;
	WM_PSD_ENVSTAMPRECT            :=  WM_USER + 5;
	WM_PSD_YAFULLPAGERECT          :=  WM_USER + 6;
	PSD_DEFAULTMINMARGINS          := $0;
	PSD_INWININIINTLMEASURE        := $0;
	PSD_MINMARGINS                 := $1;
	PSD_MARGINS                    := $2;
	PSD_INTHOUSANDTHSOFINCHES      := $4;
	PSD_INHUNDREDTHSOFMILLIMETERS  := $8;
	PSD_DISABLEMARGINS             := $10;
	PSD_DISABLEPRINTER             := $20;
	PSD_NOWARNING                  := $80;
	PSD_DISABLEORIENTATION         := $100;
	PSD_RETURNDEFAULT              := $400;
	PSD_DISABLEPAPER               := $200;
	PSD_SHOWHELP                   := $800;
	PSD_ENABLEPAGESETUPHOOK        := $2000;
	PSD_ENABLEPAGESETUPTEMPLATE    := $8000;
	PSD_ENABLEPAGESETUPTEMPLATEHANDLE := $20000;
	PSD_ENABLEPAGEPAINTHOOK        := $40000;
	PSD_DISABLEPAGEPAINTING        := $80000;
	NM_FIRST                       :=  0- 0;
	NM_LAST                        :=  0-99;
	DBG_CONTINUE                   := $00010002;
	DBG_TERMINATE_THREAD           := $40010003;
	DBG_TERMINATE_PROCESS          := $40010004;
	DBG_CONTROL_C                  := $40010005;
	DBG_CONTROL_BREAK              := $40010008;
	DBG_EXCEPTION_NOT_HANDLED      := $80010001;
	STATUS_WAIT_0                  := $00000000;
	STATUS_ABANDONED_WAIT_0        := $00000080;
	STATUS_USER_APC                := $000000C0;
	STATUS_TIMEOUT                 := $00000102;
	STATUS_PENDING                 := $00000103;
	STATUS_DATATYPE_MISALIGNMENT   := $80000002;
	STATUS_BREAKPOINT              := $80000003;
	STATUS_SINGLE_STEP             := $80000004;
	STATUS_ACCESS_VIOLATION        := $0C0000005;
	STATUS_IN_PAGE_ERROR           := $0C0000006;
	STATUS_NO_MEMORY               := $0C0000017;
	STATUS_ILLEGAL_INSTRUCTION     := $0C000001D;
	STATUS_NONCONTINUABLE_EXCEPTION := $0C0000025;
	STATUS_INVALID_DISPOSITION     := $0C0000026;
	STATUS_ARRAY_BOUNDS_EXCEEDED   := $0C000008C;
	STATUS_FLOAT_DENORMAL_OPERAND  := $0C000008D;
	STATUS_FLOAT_DIVIDE_BY_ZERO    := $0C000008E;
	STATUS_FLOAT_INEXACT_RESULT    := $0C000008F;
	STATUS_FLOAT_INVALID_OPERATION := $0C0000090;
	STATUS_FLOAT_OVERFLOW          := $0C0000091;
	STATUS_FLOAT_STACK_CHECK       := $0C0000092;
	STATUS_FLOAT_UNDERFLOW         := $0C0000093;
	STATUS_INTEGER_DIVIDE_BY_ZERO  := $0C0000094;
	STATUS_INTEGER_OVERFLOW        := $0C0000095;
	STATUS_PRIVILEGED_INSTRUCTION  := $0C0000096;
	STATUS_STACK_OVERFLOW          := $0C00000FD;
	STATUS_CONTROL_C_EXIT          := $0C000013A;
	WAIT_FAILED                    := -1;
	WAIT_OBJECT_0                  :=  STATUS_WAIT_0;
	WAIT_ABANDONED                 :=  STATUS_ABANDONED_WAIT_0;
	WAIT_ABANDONED_0               :=  STATUS_ABANDONED_WAIT_0;
	WAIT_TIMEOUT                   :=  STATUS_TIMEOUT;
	WAIT_IO_COMPLETION             :=  STATUS_USER_APC;
	STILL_ACTIVE                   :=  STATUS_PENDING;

	EXCEPTION_CONTINUABLE          := 0;
	EXCEPTION_NONCONTINUABLE       := $1;
	EXCEPTION_ACCESS_VIOLATION     :=  STATUS_ACCESS_VIOLATION;
	EXCEPTION_DATATYPE_MISALIGNMENT :=  STATUS_DATATYPE_MISALIGNMENT;
	EXCEPTION_BREAKPOINT           :=  STATUS_BREAKPOINT;
	EXCEPTION_SINGLE_STEP          :=  STATUS_SINGLE_STEP;
	EXCEPTION_ARRAY_BOUNDS_EXCEEDED :=  STATUS_ARRAY_BOUNDS_EXCEEDED;
	EXCEPTION_FLT_DENORMAL_OPERAND :=  STATUS_FLOAT_DENORMAL_OPERAND;
	EXCEPTION_FLT_DIVIDE_BY_ZERO   :=  STATUS_FLOAT_DIVIDE_BY_ZERO;
	EXCEPTION_FLT_INEXACT_RESULT   :=  STATUS_FLOAT_INEXACT_RESULT;
	EXCEPTION_FLT_INVALID_OPERATION :=  STATUS_FLOAT_INVALID_OPERATION;
	EXCEPTION_FLT_OVERFLOW         :=  STATUS_FLOAT_OVERFLOW;
	EXCEPTION_FLT_STACK_CHECK      :=  STATUS_FLOAT_STACK_CHECK;
	EXCEPTION_FLT_UNDERFLOW        :=  STATUS_FLOAT_UNDERFLOW;
	EXCEPTION_INT_DIVIDE_BY_ZERO   :=  STATUS_INTEGER_DIVIDE_BY_ZERO;
	EXCEPTION_INT_OVERFLOW         :=  STATUS_INTEGER_OVERFLOW;
	EXCEPTION_ILLEGAL_INSTRUCTION  :=  STATUS_ILLEGAL_INSTRUCTION;
	EXCEPTION_PRIV_INSTRUCTION     :=  STATUS_PRIVILEGED_INSTRUCTION;
	EXCEPTION_IN_PAGE_ERROR        :=  STATUS_IN_PAGE_ERROR;
	CONTEXT_i386                   := $00010000;
	CONTEXT_i486                   := $00010000;
	CONTEXT_CONTROL                :=  CONTEXT_i386 | $00000001;
	CONTEXT_INTEGER                :=  CONTEXT_i386 | $00000002;
	CONTEXT_SEGMENTS               :=  CONTEXT_i386 | $00000004;
	CONTEXT_FLOATING_POINT         :=  CONTEXT_i386 | $00000008;
	CONTEXT_DEBUG_REGISTERS        :=  CONTEXT_i386 | $00000010;
	CONTEXT_FULL                   :=  CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS;
	PAGE_NOACCESS                  := 1;
	PAGE_READONLY                  := 2;
	PAGE_READWRITE                 := 4;
	PAGE_WRITECOPY                 := 8;
	PAGE_EXECUTE                   := $10;
	PAGE_EXECUTE_READ              := $20;
	PAGE_EXECUTE_READWRITE         := $40;
	PAGE_EXECUTE_WRITECOPY         := $80;
	PAGE_GUARD                     := $100;
	PAGE_NOCACHE                   := $200;
	MEM_COMMIT                     := $1000;
	MEM_RESERVE                    := $2000;
	MEM_DECOMMIT                   := $4000;
	MEM_RELEASE                    := $8000;
	MEM_FREE                       := $10000;
	MEM_PRIVATE                    := $20000;
	MEM_MAPPED                     := $40000;
	MEM_RESET                      := $80000;
	MEM_TOP_DOWN                   := $100000;
	MEM_PHYSICAL                   := $400000;
	SEC_FILE                       := $800000;
	SEC_IMAGE                      := $1000000;
	SEC_RESERVE                    := $4000000;
	SEC_COMMIT                     := $8000000;
	SEC_NOCACHE                    := $10000000;
	MEM_IMAGE                      := $1000000;
	IMAGE_DIRECTORY_ENTRY_EXPORT   := 0;
	IMAGE_DIRECTORY_ENTRY_IMPORT   := 1;
	IMAGE_DIRECTORY_ENTRY_RESOURCE := 2;
	IMAGE_DIRECTORY_ENTRY_EXCEPTION := 3;
	IMAGE_DIRECTORY_ENTRY_SECURITY := 4;
	IMAGE_DIRECTORY_ENTRY_BASERELOC := 5;
	IMAGE_DIRECTORY_ENTRY_DEBUG    := 6;
	IMAGE_DIRECTORY_ENTRY_COPYRIGHT := 7;
	IMAGE_DIRECTORY_ENTRY_GLOBALPTR := 8;
	IMAGE_DIRECTORY_ENTRY_TLS      := 9;
	IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG := 10;
	IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT := 11;
	IMAGE_DIRECTORY_ENTRY_IAT      := 12;
	IMAGE_BITMAP                   := 0;
	IMAGE_ICON                     := 1;
	IMAGE_CURSOR                   := 2;
	IMAGE_ENHMETAFILE              := 3;
	PROCESSOR_INTEL_386            := 386;
	PROCESSOR_INTEL_486            := 486;
	PROCESSOR_INTEL_PENTIUM        := 586;
	PROCESSOR_MIPS_R4000           := 4000;
	PROCESSOR_ALPHA_21064          := 21064;

	ODT_HEADER                     := 100;
	ODT_TAB                        := 101;
	ODT_LISTVIEW                   := 102;
	LVM_FIRST                      := $1000;
	TV_FIRST                       := $1100;
	HDM_FIRST                      := $1200;
	NM_OUTOFMEMORY                 :=  NM_FIRST-1;
	NM_CLICK                       :=  NM_FIRST-2;
	NM_DBLCLK                      :=  NM_FIRST-3;
	NM_RETURN                      :=  NM_FIRST-4;
	NM_RCLICK                      :=  NM_FIRST-5;
	NM_RDBLCLK                     :=  NM_FIRST-6;
	NM_SETFOCUS                    :=  NM_FIRST-7;
	NM_KILLFOCUS                   :=  NM_FIRST-8;
	CCS_TOP                        := $00000001;
	CCS_NOMOVEY                    := $00000002;
	CCS_BOTTOM                     := $00000003;
	CCS_NORESIZE                   := $00000004;
	CCS_NOPARENTALIGN              := $00000008;
	CCS_ADJUSTABLE                 := $00000020;
	CCS_NODIVIDER                  := $00000040;
	CCM_FIRST                      := $2000;
	CCM_SETBKCOLOR                 :=  CCM_FIRST + 1;
	CCM_SETCOLORSCHEME             :=  CCM_FIRST + 2;
	CCM_GETCOLORSCHEME             :=  CCM_FIRST + 3;
	CCM_GETDROPTARGET              :=  CCM_FIRST + 4;
	CCM_SETUNICODEFORMAT           :=  CCM_FIRST + 5;
	CCM_GETUNICODEFORMAT           :=  CCM_FIRST + 6;
	LVN_FIRST                      :=  0-100;
	LVN_LAST                       :=  0-199;
	HDN_FIRST                      :=  0-300;
	HDN_LAST                       :=  0-399;
	TVN_FIRST                      :=  0-400;
	TVN_LAST                       :=  0-499;
	TTN_FIRST                      :=  0-520;
	TTN_LAST                       :=  0-549;
	TCN_FIRST                      :=  0-550;
	TCN_LAST                       :=  0-580;
	CDN_FIRST                      :=  0-601;
	CDN_LAST                       :=  0-699;
	TBN_FIRST                      :=  0-700;
	TBN_LAST                       :=  0-720;
	UDN_FIRST                      :=  0-721;
	UDN_LAST                       :=  0-740;
	MCN_FIRST                      :=  0-750;
	MCN_LAST                       :=  0-759;
	DTN_FIRST                      :=  0-760;
	DTN_LAST                       :=  0-799;
	CBEN_FIRST                     :=  0-800;
	CBEN_LAST                      :=  0-830;
	RBN_FIRST                      :=  0-831;
	RBN_LAST                       :=  0-859;
	IPN_FIRST                      :=  0-860;
	IPN_LAST                       :=  0-879;
	SBN_FIRST                      :=  0-880;
	SBN_LAST                       :=  0-899;
	PGN_FIRST                      :=  0-900;
	PGN_LAST                       :=  0-950;
	MSGF_COMMCTRL_BEGINDRAG        := $4200;
	MSGF_COMMCTRL_SIZEHEADER       := $4201;
	MSGF_COMMCTRL_DRAGSELECT       := $4202;
	MSGF_COMMCTRL_TOOLBARCUST      := $4203;
	ICC_LISTVIEW_CLASSES           := $00000001;
	ICC_TREEVIEW_CLASSES           := $00000002;
	ICC_BAR_CLASSES                := $00000004;
	ICC_TAB_CLASSES                := $00000008;
	ICC_UPDOWN_CLASS               := $00000010;
	ICC_PROGRESS_CLASS             := $00000020;
	ICC_HOTKEY_CLASS               := $00000040;
	ICC_ANIMATE_CLASS              := $00000080;
	ICC_WIN95_CLASSES              := $000000FF;
	ICC_DATE_CLASSES               := $00000100;
	ICC_USEREX_CLASSES             := $00000200;
	ICC_COOL_CLASSES               := $00000400;
	ICC_INTERNET_CLASSES           := $00000800;
	ICC_PAGESCROLLER_CLASS         := $00001000;
	ICC_NATIVEFNTCTL_CLASS         := $00002000;
	RBIM_IMAGELIST                 := $00000001;
	RBS_TOOLTIPS                   := $0100;
	RBS_VARHEIGHT                  := $0200;
	RBS_BANDBORDERS                := $0400;
	RBS_FIXEDORDER                 := $0800;
	RBS_REGISTERDROP               := $1000;
	RBS_AUTOSIZE                   := $2000;
	RBS_VERTICALGRIPPER            := $4000;
	RBS_DBLCLKTOGGLE               := $8000;
	RBBS_BREAK                     := $00000001;
	RBBS_FIXEDSIZE                 := $00000002;
	RBBS_CHILDEDGE                 := $00000004;
	RBBS_HIDDEN                    := $00000008;
	RBBS_NOVERT                    := $00000010;
	RBBS_FIXEDBMP                  := $00000020;
	RBBS_VARIABLEHEIGHT            := $00000040;
	RBBS_GRIPPERALWAYS             := $00000080;
	RBBS_NOGRIPPER                 := $00000100;
	RBBIM_STYLE                    := $00000001;
	RBBIM_COLORS                   := $00000002;
	RBBIM_TEXT                     := $00000004;
	RBBIM_IMAGE                    := $00000008;
	RBBIM_CHILD                    := $00000010;
	RBBIM_CHILDSIZE                := $00000020;
	RBBIM_SIZE                     := $00000040;
	RBBIM_BACKGROUND               := $00000080;
	RBBIM_ID                       := $00000100;
	RBBIM_IDEALSIZE                := $00000200;
	RBBIM_LPARAM                   := $00000400;
	RBBIM_HEADERSIZE               := $00000800;
	RB_INSERTBAND                  :=  WM_USER + 1;
	RB_DELETEBAND                  :=  WM_USER + 2;
	RB_GETBARINFO                  :=  WM_USER + 3;
	RB_SETBARINFO                  :=  WM_USER + 4;
	RB_GETBANDINFO                 :=  WM_USER + 5;
	RB_SETBANDINFO                 :=  WM_USER + 6;
	RB_SETPARENT                   :=  WM_USER + 7;
	RB_HITTEST                     :=  WM_USER + 8;
	RB_GETRECT                     :=  WM_USER + 9;
	RB_GETBANDCOUNT                :=  WM_USER + 12;
	RB_GETROWCOUNT                 :=  WM_USER + 13;
	RB_GETROWHEIGHT                :=  WM_USER + 14;
	RB_IDTOINDEX                   :=  WM_USER + 16;
	RB_GETTOOLTIPS                 :=  WM_USER + 17;
	RB_SETTOOLTIPS                 :=  WM_USER + 18;
	RB_SETBKCOLOR                  :=  WM_USER + 19;
	RB_GETBKCOLOR                  :=  WM_USER + 20;
	RB_SETTEXTCOLOR                :=  WM_USER + 21;
	RB_GETTEXTCOLOR                :=  WM_USER + 22;
	RB_SIZETORECT                  :=  WM_USER + 23;
	RB_SETCOLORSCHEME              :=  CCM_SETCOLORSCHEME;
	RB_GETCOLORSCHEME              :=  CCM_GETCOLORSCHEME;
	RB_BEGINDRAG                   :=  WM_USER + 24;
	RB_ENDDRAG                     :=  WM_USER + 25;
	RB_DRAGMOVE                    :=  WM_USER + 26;
	RB_GETBARHEIGHT                :=  WM_USER + 27;
	RB_MINIMIZEBAND                :=  WM_USER + 30;
	RB_MAXIMIZEBAND                :=  WM_USER + 31;
	RB_GETDROPTARGET               :=  CCM_GETDROPTARGET;
	RB_GETBANDBORDERS              :=  WM_USER + 34;
	RB_SHOWBAND                    :=  WM_USER + 35;
	RB_SETPALETTE                  :=  WM_USER + 37;
	RB_GETPALETTE                  :=  WM_USER + 38;
	RB_MOVEBAND                    :=  WM_USER + 39;
	RB_SETUNICODEFORMAT            :=  CCM_SETUNICODEFORMAT;
	RB_GETUNICODEFORMAT            :=  CCM_GETUNICODEFORMAT;
	RBN_HEIGHTCHANGE               :=  RBN_FIRST - 0;
	RBN_GETOBJECT                  :=  RBN_FIRST - 1;
	RBN_LAYOUTCHANGED              :=  RBN_FIRST - 2;
	RBN_AUTOSIZE                   :=  RBN_FIRST - 3;
	RBN_BEGINDRAG                  :=  RBN_FIRST - 4;
	RBN_ENDDRAG                    :=  RBN_FIRST - 5;
	RBN_DELETINGBAND               :=  RBN_FIRST - 6;
	RBN_DELETEDBAND                :=  RBN_FIRST - 7;
	RBN_CHILDSIZE                  :=  RBN_FIRST - 8;
	RBNM_ID                        := $00000001;
	RBNM_STYLE                     := $00000002;
	RBNM_LPARAM                    := $00000004;
	RBHT_NOWHERE                   := $0001;
	RBHT_CAPTION                   := $0002;
	RBHT_CLIENT                    := $0003;
	RBHT_GRABBER                   := $0004;
	CLR_NONE                       := $0FFFFFFFF;
	CLR_DEFAULT                    := $0FF000000;
	ILC_MASK                       := $0001;
	ILC_COLOR                      := $0000;
	ILC_COLORDDB                   := $00FE;
	ILC_COLOR4                     := $0004;
	ILC_COLOR8                     := $0008;
	ILC_COLOR16                    := $0010;
	ILC_COLOR24                    := $0018;
	ILC_COLOR32                    := $0020;
	ILC_PALETTE                    := $0800;
	ILD_NORMAL                     := $0000;
	ILD_TRANSPARENT                := $0001;
	ILD_MASK                       := $0010;
	ILD_IMAGE                      := $0020;
	ILD_BLEND25                    := $0002;
	ILD_BLEND50                    := $0004;
	ILD_OVERLAYMASK                := $0F00;
	ILD_SELECTED                   :=  ILD_BLEND50;
	ILD_FOCUS                      :=  ILD_BLEND25;
	ILD_BLEND                      :=  ILD_BLEND50;
	CLR_HILIGHT                    :=  CLR_DEFAULT;
	HDS_HORZ                       := $00000000;
	HDS_BUTTONS                    := $00000002;
	HDS_HIDDEN                     := $00000008;
	HDI_WIDTH                      := $0001;
	HDI_HEIGHT                     :=  HDI_WIDTH;
	HDI_TEXT                       := $0002;
	HDI_FORMAT                     := $0004;
	HDI_LPARAM                     := $0008;
	HDI_BITMAP                     := $0010;
	HDF_LEFT                       := 0;
	HDF_RIGHT                      := 1;
	HDF_CENTER                     := 2;
	HDF_JUSTIFYMASK                := $0003;
	HDF_RTLREADING                 := 4;
	HDF_OWNERDRAW                  := $8000;
	HDF_STRING                     := $4000;
	HDF_BITMAP                     := $2000;
	HDM_GETITEMCOUNT               :=  HDM_FIRST + 0;
	HDM_INSERTITEM                 :=  HDM_FIRST + 1;
	HDM_INSERTITEMW                :=  HDM_FIRST + 10;
	HDM_DELETEITEM                 :=  HDM_FIRST + 2;
	HDM_GETITEM                    :=  HDM_FIRST + 3;
	HDM_GETITEMW                   :=  HDM_FIRST + 11;
	HDM_SETITEM                    :=  HDM_FIRST + 4;
	HDM_SETITEMW                   :=  HDM_FIRST + 12;
	HDM_LAYOUT                     :=  HDM_FIRST + 5;
	HHT_NOWHERE                    := $0001;
	HHT_ONHEADER                   := $0002;
	HHT_ONDIVIDER                  := $0004;
	HHT_ONDIVOPEN                  := $0008;
	HHT_ABOVE                      := $0100;
	HHT_BELOW                      := $0200;
	HHT_TORIGHT                    := $0400;
	HHT_TOLEFT                     := $0800;
	HDM_HITTEST                    :=  HDM_FIRST + 6;
	HDN_ITEMCHANGING               :=  HDN_FIRST - 0;
	HDN_ITEMCHANGINGW              :=  HDN_FIRST - 20;
	HDN_ITEMCHANGED                :=  HDN_FIRST - 1;
	HDN_ITEMCHANGEDW               :=  HDN_FIRST - 21;
	HDN_ITEMCLICK                  :=  HDN_FIRST - 2;
	HDN_ITEMCLICKW                 :=  HDN_FIRST - 22;
	HDN_ITEMDBLCLICK               :=  HDN_FIRST - 3;
	HDN_ITEMDBLCLICKW              :=  HDN_FIRST - 23;
	HDN_DIVIDERDBLCLICK            :=  HDN_FIRST - 5;
	HDN_DIVIDERDBLCLICKW           :=  HDN_FIRST - 25;
	HDN_BEGINTRACK                 :=  HDN_FIRST - 6;
	HDN_BEGINTRACKW                :=  HDN_FIRST - 26;
	HDN_ENDTRACK                   :=  HDN_FIRST - 7;
	HDN_ENDTRACKW                  :=  HDN_FIRST - 27;
	HDN_TRACK                      :=  HDN_FIRST - 8;
	HDN_TRACKW                     :=  HDN_FIRST - 28;
	CMB_MASKED                     := $02;
	TBSTATE_CHECKED                := $01;
	TBSTATE_PRESSED                := $02;
	TBSTATE_ENABLED                := $04;
	TBSTATE_HIDDEN                 := $08;
	TBSTATE_INDETERMINATE          := $10;
	TBSTATE_WRAP                   := $20;
	TBSTYLE_BUTTON                 := $00;
	TBSTYLE_SEP                    := $01;
	TBSTYLE_CHECK                  := $02;
	TBSTYLE_GROUP                  := $04;
	TBSTYLE_CHECKGROUP             :=  TBSTYLE_GROUP | TBSTYLE_CHECK;
	TBSTYLE_TOOLTIPS               := $0100;
	TBSTYLE_WRAPABLE               := $0200;
	TBSTYLE_ALTDRAG                := $0400;
	TBSTYLE_FLAT                   := $0800;
	TBSTYLE_LIST                   := $1000;
	TBSTYLE_CUSTOMERASE            := $2000;
	TBSTYLE_REGISTERDROP           := $4000;
	TBSTYLE_TRANSPARENT            := $8000;
	TB_ENABLEBUTTON                :=  WM_USER + 1;
	TB_CHECKBUTTON                 :=  WM_USER + 2;
	TB_PRESSBUTTON                 :=  WM_USER + 3;
	TB_HIDEBUTTON                  :=  WM_USER + 4;
	TB_INDETERMINATE               :=  WM_USER + 5;
	TB_ISBUTTONENABLED             :=  WM_USER + 9;
	TB_ISBUTTONCHECKED             :=  WM_USER + 10;
	TB_ISBUTTONPRESSED             :=  WM_USER + 11;
	TB_ISBUTTONHIDDEN              :=  WM_USER + 12;
	TB_ISBUTTONINDETERMINATE       :=  WM_USER + 13;
	TB_SETSTATE                    :=  WM_USER + 17;
	TB_GETSTATE                    :=  WM_USER + 18;
	TB_ADDBITMAP                   :=  WM_USER + 19;
	TB_SETSTYLE                    :=  WM_USER + 56;
	TB_GETSTYLE                    :=  WM_USER + 57;
	HINST_COMMCTRL                 := -1;
	IDB_STD_SMALL_COLOR            := 0;
	IDB_STD_LARGE_COLOR            := 1;
	IDB_VIEW_SMALL_COLOR           := 4;
	IDB_VIEW_LARGE_COLOR           := 5;
	STD_CUT                        := 0;
	STD_COPY                       := 1;
	STD_PASTE                      := 2;
	STD_UNDO                       := 3;
	STD_REDOW                      := 4;
	STD_DELETE                     := 5;
	STD_FILENEW                    := 6;
	STD_FILEOPEN                   := 7;
	STD_FILESAVE                   := 8;
	STD_PRINTPRE                   := 9;
	STD_PROPERTIES                 := 10;
	STD_HELP                       := 11;
	STD_FIND                       := 12;
	STD_REPLACE                    := 13;
	STD_PRINT                      := 14;
	VIEW_LARGEICONS                := 0;
	VIEW_SMALLICONS                := 1;
	VIEW_LIST                      := 2;
	VIEW_DETAILS                   := 3;
	VIEW_SORTNAME                  := 4;
	VIEW_SORTSIZE                  := 5;
	VIEW_SORTDATE                  := 6;
	VIEW_SORTTYPE                  := 7;
	VIEW_PARENTFOLDER              := 8;
	VIEW_NETCONNECT                := 9;
	VIEW_NETDISCONNECT             := 10;
	VIEW_NEWFOLDER                 := 11;
	TB_ADDBUTTONS                  :=  WM_USER + 20;
	TB_INSERTBUTTON                :=  WM_USER + 21;
	TB_DELETEBUTTON                :=  WM_USER + 22;
	TB_GETBUTTON                   :=  WM_USER + 23;
	TB_BUTTONCOUNT                 :=  WM_USER + 24;
	TB_COMMANDTOINDEX              :=  WM_USER + 25;
	TB_SAVERESTORE                 :=  WM_USER + 26;
	TB_SAVERESTOREW                :=  WM_USER + 76;
	TB_CUSTOMIZE                   :=  WM_USER + 27;
	TB_ADDSTRING                   :=  WM_USER + 28;
	TB_ADDSTRINGW                  :=  WM_USER + 77;
	TB_GETITEMRECT                 :=  WM_USER + 29;
	TB_BUTTONSTRUCTSIZE            :=  WM_USER + 30;
	TB_SETBUTTONSIZE               :=  WM_USER + 31;
	TB_SETBITMAPSIZE               :=  WM_USER + 32;
	TB_AUTOSIZE                    :=  WM_USER + 33;
	TB_GETTOOLTIPS                 :=  WM_USER + 35;
	TB_SETTOOLTIPS                 :=  WM_USER + 36;
	TB_SETPARENT                   :=  WM_USER + 37;
	TB_SETROWS                     :=  WM_USER + 39;
	TB_GETROWS                     :=  WM_USER + 40;
	TB_SETCMDID                    :=  WM_USER + 42;
	TB_CHANGEBITMAP                :=  WM_USER + 43;
	TB_GETBITMAP                   :=  WM_USER + 44;
	TB_GETBUTTONTEXT               :=  WM_USER + 45;
	TB_GETBUTTONTEXTW              :=  WM_USER + 75;
	TB_REPLACEBITMAP               :=  WM_USER + 46;
	TBBF_LARGE                     := $0001;
	TB_GETBITMAPFLAGS              :=  WM_USER + 41;
	TBN_GETBUTTONINFO              :=  TBN_FIRST-0;
	TBN_GETBUTTONINFOW             :=  TBN_FIRST-20;
	TBN_BEGINDRAG                  :=  TBN_FIRST-1;
	TBN_ENDDRAG                    :=  TBN_FIRST-2;
	TBN_BEGINADJUST                :=  TBN_FIRST-3;
	TBN_ENDADJUST                  :=  TBN_FIRST-4;
	TBN_RESET                      :=  TBN_FIRST-5;
	TBN_QUERYINSERT                :=  TBN_FIRST-6;
	TBN_QUERYDELETE                :=  TBN_FIRST-7;
	TBN_TOOLBARCHANGE              :=  TBN_FIRST-8;
	TBN_CUSTHELP                   :=  TBN_FIRST-9;
	TTS_ALWAYSTIP                  := $01;
	TTS_NOPREFIX                   := $02;
	TTF_IDISHWND                   := $01;
	TTF_CENTERTIP                  := $02;
	TTF_RTLREADING                 := $04;
	TTF_SUBCLASS                   := $10;
	TTDT_AUTOMATIC                 := 0;
	TTDT_RESHOW                    := 1;
	TTDT_AUTOPOP                   := 2;
	TTDT_INITIAL                   := 3;
	TTM_ACTIVATE                   :=  WM_USER + 1;
	TTM_SETDELAYTIME               :=  WM_USER + 3;
	TTM_ADDTOOL                    :=  WM_USER + 4;
	TTM_ADDTOOLW                   :=  WM_USER + 50;
	TTM_DELTOOL                    :=  WM_USER + 5;
	TTM_DELTOOLW                   :=  WM_USER + 51;
	TTM_NEWTOOLRECT                :=  WM_USER + 6;
	TTM_NEWTOOLRECTW               :=  WM_USER + 52;
	TTM_RELAYEVENT                 :=  WM_USER + 7;
	TTM_GETTOOLINFO                :=  WM_USER + 8;
	TTM_GETTOOLINFOW               :=  WM_USER + 53;
	TTM_SETTOOLINFO                :=  WM_USER + 9;
	TTM_SETTOOLINFOW               :=  WM_USER + 54;
	TTM_HITTEST                    :=  WM_USER +10;
	TTM_HITTESTW                   :=  WM_USER +55;
	TTM_GETTEXT                    :=  WM_USER +11;
	TTM_GETTEXTW                   :=  WM_USER +56;
	TTM_UPDATETIPTEXT              :=  WM_USER +12;
	TTM_UPDATETIPTEXTW             :=  WM_USER +57;
	TTM_GETTOOLCOUNT               :=  WM_USER +13;
	TTM_ENUMTOOLS                  :=  WM_USER +14;
	TTM_ENUMTOOLSW                 :=  WM_USER +58;
	TTM_GETCURRENTTOOL             :=  WM_USER + 15;
	TTM_GETCURRENTTOOLW            :=  WM_USER + 59;
	TTM_WINDOWFROMPOINT            :=  WM_USER + 16;
	TTN_NEEDTEXT                   :=  TTN_FIRST - 0;
	TTN_NEEDTEXTW                  :=  TTN_FIRST - 10;
	TTN_SHOW                       :=  TTN_FIRST - 1;
	TTN_POP                        :=  TTN_FIRST - 2;
	SBARS_SIZEGRIP                 := $0100;
	SB_SETTEXT                     :=  WM_USER+1;
	SB_SETTEXTW                    :=  WM_USER+11;
	SB_GETTEXT                     :=  WM_USER+2;
	SB_GETTEXTW                    :=  WM_USER+13;
	SB_GETTEXTLENGTH               :=  WM_USER+3;
	SB_GETTEXTLENGTHW              :=  WM_USER+12;
	SB_SETPARTS                    :=  WM_USER+4;
	SB_GETPARTS                    :=  WM_USER+6;
	SB_GETBORDERS                  :=  WM_USER+7;
	SB_SETMINHEIGHT                :=  WM_USER+8;
	SB_SIMPLE                      :=  WM_USER+9;
	SB_GETRECT                     :=  WM_USER+10;
	SBT_OWNERDRAW                  := $1000;
	SBT_NOBORDERS                  := $0100;
	SBT_POPOUT                     := $0200;
	SBT_RTLREADING                 := $0400;
	MINSYSCOMMAND                  :=  SC_SIZE;
	TBS_AUTOTICKS                  := $0001;
	TBS_VERT                       := $0002;
	TBS_HORZ                       := $0000;
	TBS_TOP                        := $0004;
	TBS_BOTTOM                     := $0000;
	TBS_LEFT                       := $0004;
	TBS_RIGHT                      := $0000;
	TBS_BOTH                       := $0008;
	TBS_NOTICKS                    := $0010;
	TBS_ENABLESELRANGE             := $0020;
	TBS_FIXEDLENGTH                := $0040;
	TBS_NOTHUMB                    := $0080;
	TBM_GETPOS                     :=  WM_USER;
	TBM_GETRANGEMIN                :=  WM_USER+1;
	TBM_GETRANGEMAX                :=  WM_USER+2;
	TBM_GETTIC                     :=  WM_USER+3;
	TBM_SETTIC                     :=  WM_USER+4;
	TBM_SETPOS                     :=  WM_USER+5;
	TBM_SETRANGE                   :=  WM_USER+6;
	TBM_SETRANGEMIN                :=  WM_USER+7;
	TBM_SETRANGEMAX                :=  WM_USER+8;
	TBM_CLEARTICS                  :=  WM_USER+9;
	TBM_SETSEL                     :=  WM_USER+10;
	TBM_SETSELSTART                :=  WM_USER+11;
	TBM_SETSELEND                  :=  WM_USER+12;
	TBM_GETPTICS                   :=  WM_USER+14;
	TBM_GETTICPOS                  :=  WM_USER+15;
	TBM_GETNUMTICS                 :=  WM_USER+16;
	TBM_GETSELSTART                :=  WM_USER+17;
	TBM_GETSELEND                  :=  WM_USER+18;
	TBM_CLEARSEL                   :=  WM_USER+19;
	TBM_SETTICFREQ                 :=  WM_USER+20;
	TBM_SETPAGESIZE                :=  WM_USER+21;
	TBM_GETPAGESIZE                :=  WM_USER+22;
	TBM_SETLINESIZE                :=  WM_USER+23;
	TBM_GETLINESIZE                :=  WM_USER+24;
	TBM_GETTHUMBRECT               :=  WM_USER+25;
	TBM_GETCHANNELRECT             :=  WM_USER+26;
	TBM_SETTHUMBLENGTH             :=  WM_USER+27;
	TBM_GETTHUMBLENGTH             :=  WM_USER+28;
	TB_LINEUP                      := 0;
	TB_LINEDOWN                    := 1;
	TB_PAGEUP                      := 2;
	TB_PAGEDOWN                    := 3;
	TB_THUMBPOSITION               := 4;
	TB_THUMBTRACK                  := 5;
	TB_TOP                         := 6;
	TB_BOTTOM                      := 7;
	TB_ENDTRACK                    := 8;
	DL_BEGINDRAG                   :=  WM_USER+133;
	DL_DRAGGING                    :=  WM_USER+134;
	DL_DROPPED                     :=  WM_USER+135;
	DL_CANCELDRAG                  :=  WM_USER+136;
	DL_CURSORSET                   := 0;
	DL_STOPCURSOR                  := 1;
	DL_COPYCURSOR                  := 2;
	DL_MOVECURSOR                  := 3;
	UD_MAXVAL                      := $7FFF;
	UD_MINVAL                      :=  - UD_MAXVAL;
	UDS_WRAP                       := $0001;
	UDS_SETBUDDYINT                := $0002;
	UDS_ALIGNRIGHT                 := $0004;
	UDS_ALIGNLEFT                  := $0008;
	UDS_AUTOBUDDY                  := $0010;
	UDS_ARROWKEYS                  := $0020;
	UDS_HORZ                       := $0040;
	UDS_NOTHOUSANDS                := $0080;
	UDM_SETRANGE                   :=  WM_USER+101;
	UDM_GETRANGE                   :=  WM_USER+102;
	UDM_SETPOS                     :=  WM_USER+103;
	UDM_GETPOS                     :=  WM_USER+104;
	UDM_SETBUDDY                   :=  WM_USER+105;
	UDM_GETBUDDY                   :=  WM_USER+106;
	UDM_SETACCEL                   :=  WM_USER+107;
	UDM_GETACCEL                   :=  WM_USER+108;
	UDM_SETBASE                    :=  WM_USER+109;
	UDM_GETBASE                    :=  WM_USER+110;
	UDN_DELTAPOS                   :=  UDN_FIRST - 1;
	PBM_SETRANGE                   :=  WM_USER+1;
	PBM_SETPOS                     :=  WM_USER+2;
	PBM_DELTAPOS                   :=  WM_USER+3;
	PBM_SETSTEP                    :=  WM_USER+4;
	PBM_STEPIT                     :=  WM_USER+5;
	HOTKEYF_SHIFT                  := $01;
	HOTKEYF_CONTROL                := $02;
	HOTKEYF_ALT                    := $04;
	HOTKEYF_EXT                    := $08;
	HKCOMB_NONE                    := $0001;
	HKCOMB_S                       := $0002;
	HKCOMB_C                       := $0004;
	HKCOMB_A                       := $0008;
	HKCOMB_SC                      := $0010;
	HKCOMB_SA                      := $0020;
	HKCOMB_CA                      := $0040;
	HKCOMB_SCA                     := $0080;
	HKM_SETHOTKEY                  :=  WM_USER+1;
	HKM_GETHOTKEY                  :=  WM_USER+2;
	HKM_SETRULES                   :=  WM_USER+3;
	LVS_ICON                       := $0000;
	LVS_REPORT                     := $0001;
	LVS_SMALLICON                  := $0002;
	LVS_LIST                       := $0003;
	LVS_TYPEMASK                   := $0003;
	LVS_SINGLESEL                  := $0004;
	LVS_SHOWSELALWAYS              := $0008;
	LVS_SORTASCENDING              := $0010;
	LVS_SORTDESCENDING             := $0020;
	LVS_SHAREIMAGELISTS            := $0040;
	LVS_NOLABELWRAP                := $0080;
	LVS_AUTOARRANGE                := $0100;
	LVS_EDITLABELS                 := $0200;
	LVS_NOSCROLL                   := $2000;
	LVS_TYPESTYLEMASK              := $0fc00;
	LVS_ALIGNTOP                   := $0000;
	LVS_ALIGNLEFT                  := $0800;
	LVS_ALIGNMASK                  := $0c00;
	LVS_OWNERDRAWFIXED             := $0400;
	LVS_NOCOLUMNHEADER             := $4000;
	LVS_NOSORTHEADER               := $8000;
	LVM_GETBKCOLOR                 :=  LVM_FIRST + 0;
	LVM_SETBKCOLOR                 :=  LVM_FIRST + 1;
	LVM_GETIMAGELIST               :=  LVM_FIRST + 2;
	LVSIL_NORMAL                   := 0;
	LVSIL_SMALL                    := 1;
	LVSIL_STATE                    := 2;
	LVM_SETIMAGELIST               :=  LVM_FIRST + 3;
	LVM_GETITEMCOUNT               :=  LVM_FIRST + 4;
	LVIF_TEXT                      := $0001;
	LVIF_IMAGE                     := $0002;
	LVIF_PARAM                     := $0004;
	LVIF_STATE                     := $0008;
	LVIS_FOCUSED                   := $0001;
	LVIS_SELECTED                  := $0002;
	LVIS_CUT                       := $0004;
	LVIS_DROPHILITED               := $0008;
	LVIS_OVERLAYMASK               := $0F00;
	LVIS_STATEIMAGEMASK            := $0F000;
	LPSTR_TEXTCALLBACKW            := 1;
	LPSTR_TEXTCALLBACK             := 1;
	I_IMAGECALLBACK                := 1;
	LVM_GETITEM                    :=  LVM_FIRST + 5;
	LVM_GETITEMW                   :=  LVM_FIRST + 75;
	LVM_SETITEM                    :=  LVM_FIRST + 6;
	LVM_SETITEMW                   :=  LVM_FIRST + 76;
	LVM_INSERTITEM                 :=  LVM_FIRST + 7;
	LVM_INSERTITEMW                :=  LVM_FIRST + 77;
	LVM_DELETEITEM                 :=  LVM_FIRST + 8;
	LVM_DELETEALLITEMS             :=  LVM_FIRST + 9;
	LVM_GETCALLBACKMASK            :=  LVM_FIRST + 10;
	LVM_SETCALLBACKMASK            :=  LVM_FIRST + 11;
	LVNI_ALL                       := $0000;
	LVNI_FOCUSED                   := $0001;
	LVNI_SELECTED                  := $0002;
	LVNI_CUT                       := $0004;
	LVNI_DROPHILITED               := $0008;
	LVNI_ABOVE                     := $0100;
	LVNI_BELOW                     := $0200;
	LVNI_TOLEFT                    := $0400;
	LVNI_TORIGHT                   := $0800;
	LVM_GETNEXTITEM                :=  LVM_FIRST + 12;
	LVFI_PARAM                     := $0001;
	LVFI_STRING                    := $0002;
	LVFI_PARTIAL                   := $0008;
	LVFI_WRAP                      := $0020;
	LVFI_NEARESTXY                 := $0040;
	LVM_FINDITEM                   :=  LVM_FIRST + 13;
	LVM_FINDITEMW                  :=  LVM_FIRST + 83;
	LVIR_BOUNDS                    := 0;
	LVIR_ICON                      := 1;
	LVIR_LABEL                     := 2;
	LVIR_SELECTBOUNDS              := 3;
	LVM_GETITEMRECT                :=  LVM_FIRST + 14;
	LVM_SETITEMPOSITION            :=  LVM_FIRST + 15;
	LVM_GETITEMPOSITION            :=  LVM_FIRST + 16;
	LVM_GETSTRINGWIDTH             :=  LVM_FIRST + 17;
	LVM_GETSTRINGWIDTHW            :=  LVM_FIRST + 87;
	LVHT_NOWHERE                   := $0001;
	LVHT_ONITEMICON                := $0002;
	LVHT_ONITEMLABEL               := $0004;
	LVHT_ONITEMSTATEICON           := $0008;
	LVHT_ONITEM                    :=  LVHT_ONITEMICON | LVHT_ONITEMLABEL | LVHT_ONITEMSTATEICON;
	LVHT_ABOVE                     := $0008;
	LVHT_BELOW                     := $0010;
	LVHT_TORIGHT                   := $0020;
	LVHT_TOLEFT                    := $0040;
	LVM_HITTEST                    :=  LVM_FIRST + 18;
	LVM_ENSUREVISIBLE              :=  LVM_FIRST + 19;
	LVM_SCROLL                     :=  LVM_FIRST + 20;
	LVM_REDRAWITEMS                :=  LVM_FIRST + 21;
	LVA_DEFAULT                    := $0000;
	LVA_ALIGNLEFT                  := $0001;
	LVA_ALIGNTOP                   := $0002;
	LVA_SNAPTOGRID                 := $0005;
	LVM_ARRANGE                    :=  LVM_FIRST + 22;
	LVM_EDITLABEL                  :=  LVM_FIRST + 23;
	LVM_EDITLABELW                 :=  LVM_FIRST + 118;
	LVM_GETEDITCONTROL             :=  LVM_FIRST + 24;
	LVCF_FMT                       := $0001;
	LVCF_WIDTH                     := $0002;
	LVCF_TEXT                      := $0004;
	LVCF_SUBITEM                   := $0008;
	LVCFMT_LEFT                    := $0000;
	LVCFMT_RIGHT                   := $0001;
	LVCFMT_CENTER                  := $0002;
	LVCFMT_JUSTIFYMASK             := $0003;
	LVM_GETCOLUMN                  :=  LVM_FIRST + 25;
	LVM_GETCOLUMNW                 :=  LVM_FIRST + 95;
	LVM_SETCOLUMN                  :=  LVM_FIRST + 26;
	LVM_SETCOLUMNW                 :=  LVM_FIRST + 96;
	LVM_INSERTCOLUMN               :=  LVM_FIRST + 27;
	LVM_INSERTCOLUMNW              :=  LVM_FIRST + 97;
	LVM_DELETECOLUMN               :=  LVM_FIRST + 28;
	LVM_GETCOLUMNWIDTH             :=  LVM_FIRST + 29;
	LVSCW_AUTOSIZE                 := 1;
	LVSCW_AUTOSIZE_USEHEADER       := 2;
	LVM_SETCOLUMNWIDTH             :=  LVM_FIRST + 30;
	LVM_CREATEDRAGIMAGE            :=  LVM_FIRST + 33;
	LVM_GETVIEWRECT                :=  LVM_FIRST + 34;
	LVM_GETTEXTCOLOR               :=  LVM_FIRST + 35;
	LVM_SETTEXTCOLOR               :=  LVM_FIRST + 36;
	LVM_GETTEXTBKCOLOR             :=  LVM_FIRST + 37;
	LVM_SETTEXTBKCOLOR             :=  LVM_FIRST + 38;
	LVM_GETTOPINDEX                :=  LVM_FIRST + 39;
	LVM_GETCOUNTPERPAGE            :=  LVM_FIRST + 40;
	LVM_GETORIGIN                  :=  LVM_FIRST + 41;
	LVM_UPDATE                     :=  LVM_FIRST + 42;
	LVM_SETITEMSTATE               :=  LVM_FIRST + 43;
	LVM_GETITEMSTATE               :=  LVM_FIRST + 44;
	LVM_GETITEMTEXT                :=  LVM_FIRST + 45;
	LVM_GETITEMTEXTW               :=  LVM_FIRST + 115;
	LVM_SETITEMTEXT                :=  LVM_FIRST + 46;
	LVM_SETITEMTEXTW               :=  LVM_FIRST + 116;
	LVM_SETITEMCOUNT               :=  LVM_FIRST + 47;
	LVM_SORTITEMS                  :=  LVM_FIRST + 48;
	LVM_SETITEMPOSITION32          :=  LVM_FIRST + 49;
	LVM_GETSELECTEDCOUNT           :=  LVM_FIRST + 50;
	LVM_GETITEMSPACING             :=  LVM_FIRST + 51;
	LVM_GETISEARCHSTRING           :=  LVM_FIRST + 52;
	LVM_GETISEARCHSTRINGW          :=  LVM_FIRST + 117;
	LVN_ITEMCHANGING               :=  LVN_FIRST-0;
	LVN_ITEMCHANGED                :=  LVN_FIRST-1;
	LVN_INSERTITEM                 :=  LVN_FIRST-2;
	LVN_DELETEITEM                 :=  LVN_FIRST-3;
	LVN_DELETEALLITEMS             :=  LVN_FIRST-4;
	LVN_BEGINLABELEDIT             :=  LVN_FIRST-5;
	LVN_BEGINLABELEDITW            :=  LVN_FIRST-75;
	LVN_ENDLABELEDIT               :=  LVN_FIRST-6;
	LVN_ENDLABELEDITW              :=  LVN_FIRST-76;
	LVN_COLUMNCLICK                :=  LVN_FIRST-8;
	LVN_BEGINDRAG                  :=  LVN_FIRST-9;
	LVN_BEGINRDRAG                 :=  LVN_FIRST-11;
	LVN_GETDISPINFO                :=  LVN_FIRST-50;
	LVN_GETDISPINFOW               :=  LVN_FIRST-77;
	LVN_SETDISPINFO                :=  LVN_FIRST-51;
	LVN_SETDISPINFOW               :=  LVN_FIRST-78;
	LVIF_DI_SETITEM                := $1000;
	LVN_KEYDOWN                    :=  LVN_FIRST-55;
	TVS_HASBUTTONS                 := $0001;
	TVS_HASLINES                   := $0002;
	TVS_LINESATROOT                := $0004;
	TVS_EDITLABELS                 := $0008;
	TVS_DISABLEDRAGDROP            := $0010;
	TVS_SHOWSELALWAYS              := $0020;
	TVIF_TEXT                      := $0001;
	TVIF_IMAGE                     := $0002;
	TVIF_PARAM                     := $0004;
	TVIF_STATE                     := $0008;
	TVIF_HANDLE                    := $0010;
	TVIF_SELECTEDIMAGE             := $0020;
	TVIF_CHILDREN                  := $0040;
	TVIS_FOCUSED                   := $0001;
	TVIS_SELECTED                  := $0002;
	TVIS_CUT                       := $0004;
	TVIS_DROPHILITED               := $0008;
	TVIS_BOLD                      := $0010;
	TVIS_EXPANDED                  := $0020;
	TVIS_EXPANDEDONCE              := $0040;
	TVIS_OVERLAYMASK               := $0F00;
	TVIS_STATEIMAGEMASK            := $0F000;
	TVIS_USERMASK                  := $0F000;
	I_CHILDRENCALLBACK             := 1;
	TVI_ROOT                       := $0FFFF0000;
	TVI_FIRST                      := $0FFFF0001;
	TVI_LAST                       := $0FFFF0002;
	TVI_SORT                       := $0FFFF0003;
	TVM_INSERTITEM                 :=  TV_FIRST + 0;
	TVM_INSERTITEMW                :=  TV_FIRST + 50;
	TVM_DELETEITEM                 :=  TV_FIRST + 1;
	TVM_EXPAND                     :=  TV_FIRST + 2;
	TVE_COLLAPSE                   := $0001;
	TVE_EXPAND                     := $0002;
	TVE_TOGGLE                     := $0003;
	TVE_COLLAPSERESET              := $8000;
	TVM_GETITEMRECT                :=  TV_FIRST + 4;
	TVM_GETCOUNT                   :=  TV_FIRST + 5;
	TVM_GETINDENT                  :=  TV_FIRST + 6;
	TVM_SETINDENT                  :=  TV_FIRST + 7;
	TVM_GETIMAGELIST               :=  TV_FIRST + 8;
	TVSIL_NORMAL                   := 0;
	TVSIL_STATE                    := 2;
	TVM_SETIMAGELIST               :=  TV_FIRST + 9;
	TVM_GETNEXTITEM                :=  TV_FIRST + 10;
	TVGN_ROOT                      := $0000;
	TVGN_NEXT                      := $0001;
	TVGN_PREVIOUS                  := $0002;
	TVGN_PARENT                    := $0003;
	TVGN_CHILD                     := $0004;
	TVGN_FIRSTVISIBLE              := $0005;
	TVGN_NEXTVISIBLE               := $0006;
	TVGN_PREVIOUSVISIBLE           := $0007;
	TVGN_DROPHILITE                := $0008;
	TVGN_CARET                     := $0009;
	TVM_SELECTITEM                 :=  TV_FIRST + 11;
	TVM_GETITEM                    :=  TV_FIRST + 12;
	TVM_GETITEMW                   :=  TV_FIRST + 62;
	TVM_SETITEM                    :=  TV_FIRST + 13;
	TVM_SETITEMW                   :=  TV_FIRST + 63;
	TVM_EDITLABEL                  :=  TV_FIRST + 14;
	TVM_EDITLABELW                 :=  TV_FIRST + 65;
	TVM_GETEDITCONTROL             :=  TV_FIRST + 15;
	TVM_GETVISIBLECOUNT            :=  TV_FIRST + 16;
	TVM_HITTEST                    :=  TV_FIRST + 17;
	TVHT_NOWHERE                   := $0001;
	TVHT_ONITEMICON                := $0002;
	TVHT_ONITEMLABEL               := $0004;
	TVHT_ONITEMSTATEICON           := $0040;
	TVHT_ONITEM                    :=  TVHT_ONITEMICON | TVHT_ONITEMLABEL | TVHT_ONITEMSTATEICON;
	TVHT_ONITEMINDENT              := $0008;
	TVHT_ONITEMBUTTON              := $0010;
	TVHT_ONITEMRIGHT               := $0020;
	TVHT_ABOVE                     := $0100;
	TVHT_BELOW                     := $0200;
	TVHT_TORIGHT                   := $0400;
	TVHT_TOLEFT                    := $0800;
	TVM_CREATEDRAGIMAGE            :=  TV_FIRST + 18;
	TVM_SORTCHILDREN               :=  TV_FIRST + 19;
	TVM_ENSUREVISIBLE              :=  TV_FIRST + 20;
	TVM_SORTCHILDRENCB             :=  TV_FIRST + 21;
	TVM_ENDEDITLABELNOW            :=  TV_FIRST + 22;
	TVM_GETISEARCHSTRING           :=  TV_FIRST + 23;
	TVM_GETISEARCHSTRINGW          :=  TV_FIRST + 64;
	TVN_SELCHANGINGA               :=  TVN_FIRST-1;
	TVN_SELCHANGINGW               :=  TVN_FIRST-50;
	TVN_SELCHANGEDA                :=  TVN_FIRST-2;
	TVN_SELCHANGEDW                :=  TVN_FIRST-51;
	TVC_UNKNOWN                    := $0000;

	TVC_BYMOUSE                    := $0001;
	TVC_BYKEYBOARD                 := $0002;
	TVN_GETDISPINFOA               :=  TVN_FIRST-3;
	TVN_GETDISPINFOW               :=  TVN_FIRST-52;
	TVN_SETDISPINFOA               :=  TVN_FIRST-4;
	TVN_SETDISPINFOW               :=  TVN_FIRST-53;
	TVIF_DI_SETITEM                := $1000;
	TVN_ITEMEXPANDING              :=  TVN_FIRST-5;
	TVN_ITEMEXPANDINGW             :=  TVN_FIRST-54;
	TVN_ITEMEXPANDED               :=  TVN_FIRST-6;
	TVN_ITEMEXPANDEDW              :=  TVN_FIRST-55;
	TVN_BEGINDRAG                  :=  TVN_FIRST-7;
	TVN_BEGINDRAGW                 :=  TVN_FIRST-56;
	TVN_BEGINRDRAG                 :=  TVN_FIRST-8;
	TVN_BEGINRDRAGW                :=  TVN_FIRST-57;
	TVN_DELETEITEM                 :=  TVN_FIRST-9;
	TVN_DELETEITEMW                :=  TVN_FIRST-58;
	TVN_BEGINLABELEDIT             :=  TVN_FIRST-10;
	TVN_BEGINLABELEDITW            :=  TVN_FIRST-59;
	TVN_ENDLABELEDIT               :=  TVN_FIRST-11;
	TVN_ENDLABELEDITW              :=  TVN_FIRST-60;
	TVN_KEYDOWN                    :=  TVN_FIRST-12;
	TCS_FORCEICONLEFT              := $0010;
	TCS_FORCELABELLEFT             := $0020;
	TCS_TABS                       := $0000;
	TCS_BUTTONS                    := $0100;
	TCS_SINGLELINE                 := $0000;
	TCS_MULTILINE                  := $0200;
	TCS_RIGHTJUSTIFY               := $0000;
	TCS_FIXEDWIDTH                 := $0400;
	TCS_RAGGEDRIGHT                := $0800;
	TCS_FOCUSONBUTTONDOWN          := $1000;
	TCS_OWNERDRAWFIXED             := $2000;
	TCS_TOOLTIPS                   := $4000;
	TCS_FOCUSNEVER                 := $8000;
	TCM_FIRST                      := $1300;
	TCM_GETIMAGELIST               :=  TCM_FIRST + 2;
	TCM_SETIMAGELIST               :=  TCM_FIRST + 3;
	TCM_GETITEMCOUNT               :=  TCM_FIRST + 4;
	TCIF_TEXT                      := $0001;
	TCIF_IMAGE                     := $0002;
	TCIF_RTLREADING                := $0004;
	TCIF_PARAM                     := $0008;
	TCM_GETITEM                    :=  TCM_FIRST + 5;
	TCM_SETITEM                    :=  TCM_FIRST + 6;
	TCM_SETITEMW                   :=  TCM_FIRST + 61;
	TCM_INSERTITEM                 :=  TCM_FIRST + 7;
	TCM_INSERTITEMW                :=  TCM_FIRST + 62;
	TCM_DELETEITEM                 :=  TCM_FIRST + 8;
	TCM_DELETEALLITEMS             :=  TCM_FIRST + 9;
	TCM_GETITEMRECT                :=  TCM_FIRST + 10;
	TCM_GETCURSEL                  :=  TCM_FIRST + 11;
	TCM_SETCURSEL                  :=  TCM_FIRST + 12;
	TCHT_NOWHERE                   := $0001;
	TCHT_ONITEMICON                := $0002;
	TCHT_ONITEMLABEL               := $0004;
	TCHT_ONITEM                    :=  TCHT_ONITEMICON | TCHT_ONITEMLABEL;
	TCM_HITTEST                    :=  TCM_FIRST + 13;
	TCM_SETITEMEXTRA               :=  TCM_FIRST + 14;
	TCM_ADJUSTRECT                 :=  TCM_FIRST + 40;
	TCM_SETITEMSIZE                :=  TCM_FIRST + 41;
	TCM_REMOVEIMAGE                :=  TCM_FIRST + 42;
	TCM_SETPADDING                 :=  TCM_FIRST + 43;
	TCM_GETROWCOUNT                :=  TCM_FIRST + 44;
	TCM_GETTOOLTIPS                :=  TCM_FIRST + 45;
	TCM_SETTOOLTIPS                :=  TCM_FIRST + 46;
	TCM_GETCURFOCUS                :=  TCM_FIRST + 47;
	TCM_SETCURFOCUS                :=  TCM_FIRST + 48;
	TCN_KEYDOWN                    :=  TCN_FIRST - 0;
	TCN_SELCHANGE                  :=  TCN_FIRST - 1;
	TCN_SELCHANGING                :=  TCN_FIRST - 2;
	ACS_CENTER                     := $0001;
	ACS_TRANSPARENT                := $0002;
	ACS_AUTOPLAY                   := $0004;
	ACM_OPEN                       :=  WM_USER+100;
	ACM_OPENW                      :=  WM_USER+103;
	ACM_PLAY                       :=  WM_USER+101;
	ACM_STOP                       :=  WM_USER+102;
	ACN_START                      := 1;
	ACN_STOP                       := 2;

	LOAD_LIBRARY_AS_DATAFILE       := 2;
	LOAD_WITH_ALTERED_SEARCH_PATH  := 8;

	EVENT_MODIFY_STATE             := 2;

	IPPROTO_IP                     := 0;
	IPPROTO_ICMP                   := 1;
	IPPROTO_GGP                    := 2;
	IPPROTO_TCP                    := 6;
	IPPROTO_PUP                    := 12;
	IPPROTO_UDP                    := 17;
	IPPROTO_IDP                    := 22;
	IPPROTO_ND                     := 77;
	IPPROTO_RAW                    := 255;
	IPPROTO_MAX                    := 256;
	IOCPARM_MASK                   := $7F;
	IOC_VOID                       := $20000000;
	IOC_OUT                        := $40000000;
	IOC_IN                         := $80000000;
	IOC_INOUT                      :=  IOC_IN | IOC_OUT;
	FIONBIO                        := $8004667E;
	FIONSYNC                       := $8004667D;
	FIONREAD                       := $4004667F;
	IPPORT_ECHO                    := 7;
	IPPORT_DISCARD                 := 9;
	IPPORT_SYSTAT                  := 11;
	IPPORT_DAYTIME                 := 13;
	IPPORT_NETSTAT                 := 15;
	IPPORT_FTP                     := 21;
	IPPORT_TELNET                  := 23;
	IPPORT_SMTP                    := 25;
	IPPORT_TIMESERVER              := 37;
	IPPORT_NAMESERVER              := 42;
	IPPORT_WHOIS                   := 43;
	IPPORT_MTP                     := 57;
	IPPORT_TFTP                    := 69;
	IPPORT_RJE                     := 77;
	IPPORT_FINGER                  := 79;
	IPPORT_TTYLINK                 := 87;
	IPPORT_SUPDUP                  := 95;
	IPPORT_EXECSERVER              := 512;
	IPPORT_LOGINSERVER             := 513;
	IPPORT_CMDSERVER               := 514;
	IPPORT_EFSSERVER               := 520;
	IPPORT_BIFFUDP                 := 512;
	IPPORT_WHOSERVER               := 513;
	IPPORT_ROUTESERVER             := 520;
	IPPORT_RESERVED                := 1024;
	IMPLINK_IP                     := 155;
	IMPLINK_LOWEXPER               := 156;
	IMPLINK_HIGHEXPER              := 158;
	IN_CLASSA_NET                  := $0FF000000;
	IN_CLASSA_NSHIFT               := 24;
	IN_CLASSA_HOST                 := $000FFFFFF;
	IN_CLASSA_MAX                  := 128;
	IN_CLASSB_NET                  := $0FFFF0000;
	IN_CLASSB_NSHIFT               := 16;
	IN_CLASSB_HOST                 := $00000FFFF;
	IN_CLASSB_MAX                  := 65536;
	IN_CLASSC_NET                  := $0FFFFFF00;
	IN_CLASSC_NSHIFT               := 8;
	IN_CLASSC_HOST                 := $0000000FF;
	INADDR_ANY                     := $000000000;
	INADDR_LOOPBACK                := $07F000001;
	INADDR_BROADCAST               := $0FFFFFFFF;
	INADDR_NONE                    := $0FFFFFFFF;
	SOCK_STREAM                    := 1;
	SOCK_DGRAM                     := 2;
	SOCK_RAW                       := 3;
	SOCK_RDM                       := 4;
	SOCK_SEQPACKET                 := 5;
	SO_DEBUG                       := $00001;
	SO_ACCEPTCONN                  := $00002;
	SO_REUSEADDR                   := $00004;
	SO_KEEPALIVE                   := $00008;
	SO_DONTROUTE                   := $00010;
	SO_BROADCAST                   := $00020;
	SO_USELOOPBACK                 := $00040;
	SO_LINGER                      := $00080;
	SO_OOBINLINE                   := $00100;
	SOL_SOCKET                     := $0FFFF;
	SO_DONTLINGER                  := ! SO_LINGER;
	SO_SNDBUF                      := $01001;
	SO_RCVBUF                      := $01002;
	SO_SNDLOWAT                    := $01003;
	SO_RCVLOWAT                    := $01004;
	SO_SNDTIMEO                    := $01005;
	SO_RCVTIMEO                    := $01006;
	SO_ERROR                       := $01007;
	SO_TYPE                        := $01008;
	TCP_NODELAY                    := $00001;
	AF_UNSPEC                      := 0;
	AF_UNIX                        := 1;
	AF_INET                        := 2;
	AF_IMPLINK                     := 3;
	AF_PUP                         := 4;
	AF_CHAOS                       := 5;
	AF_NS                          := 6;
	AF_IPX                         := 6;
	AF_ISO                         := 7;
	AF_OSI                         :=  AF_ISO;
	AF_ECMA                        := 8;
	AF_DATAKIT                     := 9;
	AF_CCITT                       := 10;
	AF_SNA                         := 11;
	AF_DECnet                      := 12;
	AF_DLI                         := 13;
	AF_LAT                         := 14;
	AF_HYLINK                      := 15;
	AF_APPLETALK                   := 16;
	AF_NETBIOS                     := 17;
	AF_MAX                         := 18;
	PF_UNSPEC                      :=  AF_UNSPEC;
	PF_UNIX                        :=  AF_UNIX;
	PF_INET                        :=  AF_INET;
	PF_IMPLINK                     :=  AF_IMPLINK;
	PF_PUP                         :=  AF_PUP;
	PF_CHAOS                       :=  AF_CHAOS;
	PF_NS                          :=  AF_NS;
	PF_IPX                         :=  AF_IPX;
	PF_ISO                         :=  AF_ISO;
	PF_OSI                         :=  AF_OSI;
	PF_ECMA                        :=  AF_ECMA;
	PF_DATAKIT                     :=  AF_DATAKIT;
	PF_CCITT                       :=  AF_CCITT;
	PF_SNA                         :=  AF_SNA;
	PF_DECnet                      :=  AF_DECnet;
	PF_DLI                         :=  AF_DLI;
	PF_LAT                         :=  AF_LAT;
	PF_HYLINK                      :=  AF_HYLINK;
	PF_APPLETALK                   :=  AF_APPLETALK;
	PF_MAX                         :=  AF_MAX;
	SOMAXCONN                      := 5;
	MSG_OOB                        := $01;
	MSG_PEEK                       := $02;
	MSG_DONTROUTE                  := $04;
	MSG_MAXIOVLEN                  := 16;
	MAXGETHOSTSTRUCT               := 1024;
	FD_READ                        := $001;
	FD_WRITE                       := $002;
	FD_OOB                         := $004;
	FD_ACCEPT                      := $008;
	FD_CONNECT                     := $010;
	FD_CLOSE                       := $020;
	WSABASEERR                     := 10000;
	WSAEINTR                       :=  WSABASEERR+4;
	WSAEBADF                       :=  WSABASEERR+9;
	WSAEACCES                      :=  WSABASEERR+13;
	WSAEFAULT                      :=  WSABASEERR+14;
	WSAEINVAL                      :=  WSABASEERR+22;
	WSAEMFILE                      :=  WSABASEERR+24;
	WSAEWOULDBLOCK                 :=  WSABASEERR + 35;
	WSAEINPROGRESS                 :=  WSABASEERR + 36;
	WSAEALREADY                    :=  WSABASEERR + 37;
	WSAENOTSOCK                    :=  WSABASEERR + 38;
	WSAEDESTADDRREQ                :=  WSABASEERR + 39;
	WSAEMSGSIZE                    :=  WSABASEERR + 40;
	WSAEPROTOTYPE                  :=  WSABASEERR + 41;
	WSAENOPROTOOPT                 :=  WSABASEERR + 42;
	WSAEPROTONOSUPPORT             :=  WSABASEERR + 43;
	WSAESOCKTNOSUPPORT             :=  WSABASEERR + 44;
	WSAEOPNOTSUPP                  :=  WSABASEERR + 45;
	WSAEPFNOSUPPORT                :=  WSABASEERR + 46;
	WSAEAFNOSUPPORT                :=  WSABASEERR + 47;
	WSAEADDRINUSE                  :=  WSABASEERR + 48;
	WSAEADDRNOTAVAIL               :=  WSABASEERR + 49;
	WSAENETDOWN                    :=  WSABASEERR + 50;
	WSAENETUNREACH                 :=  WSABASEERR + 51;
	WSAENETRESET                   :=  WSABASEERR + 52;
	WSAECONNABORTED                :=  WSABASEERR + 53;
	WSAECONNRESET                  :=  WSABASEERR + 54;
	WSAENOBUFS                     :=  WSABASEERR + 55;
	WSAEISCONN                     :=  WSABASEERR + 56;
	WSAENOTCONN                    :=  WSABASEERR + 57;
	WSAESHUTDOWN                   :=  WSABASEERR + 58;
	WSAETOOMANYREFS                :=  WSABASEERR + 59;
	WSAETIMEDOUT                   :=  WSABASEERR + 60;
	WSAECONNREFUSED                :=  WSABASEERR + 61;
	WSAELOOP                       :=  WSABASEERR + 62;
	WSAENAMETOOLONG                :=  WSABASEERR + 63;
	WSAEHOSTDOWN                   :=  WSABASEERR + 64;
	WSAEHOSTUNREACH                :=  WSABASEERR + 65;
	WSAENOTEMPTY                   :=  WSABASEERR + 66;
	WSAEPROCLIM                    :=  WSABASEERR + 67;
	WSAEUSERS                      :=  WSABASEERR + 68;
	WSAEDQUOT                      :=  WSABASEERR + 69;
	WSAESTALE                      :=  WSABASEERR + 70;
	WSAEREMOTE                     :=  WSABASEERR + 71;
	WSASYSNOTREADY                 :=  WSABASEERR+91;
	WSAVERNOTSUPPORTED             :=  WSABASEERR+92;
	WSANOTINITIALISED              :=  WSABASEERR+93;
	WSAHOST_NOT_FOUND              :=  WSABASEERR + 1001;
	HOST_NOT_FOUND                 :=  WSAHOST_NOT_FOUND;
	WSATRY_AGAIN                   :=  WSABASEERR + 1002;
	TRY_AGAIN                      :=  WSATRY_AGAIN;
	WSANO_RECOVERY                 :=  WSABASEERR + 1003;
	NO_RECOVERY                    :=  WSANO_RECOVERY;
	WSANO_DATA                     :=  WSABASEERR + 1004;
	NO_DATA                        :=  WSANO_DATA;
	WSANO_ADDRESS                  :=  WSANO_DATA;
	NO_ADDRESS                     :=  WSANO_ADDRESS;
	EWOULDBLOCK                    :=  WSAEWOULDBLOCK;
	EINPROGRESS                    :=  WSAEINPROGRESS;
	EALREADY                       :=  WSAEALREADY;
	ENOTSOCK                       :=  WSAENOTSOCK;
	EDESTADDRREQ                   :=  WSAEDESTADDRREQ;
	EMSGSIZE                       :=  WSAEMSGSIZE;
	EPROTOTYPE                     :=  WSAEPROTOTYPE;
	ENOPROTOOPT                    :=  WSAENOPROTOOPT;
	EPROTONOSUPPORT                :=  WSAEPROTONOSUPPORT;
	ESOCKTNOSUPPORT                :=  WSAESOCKTNOSUPPORT;
	EOPNOTSUPP                     :=  WSAEOPNOTSUPP;
	EPFNOSUPPORT                   :=  WSAEPFNOSUPPORT;
	EAFNOSUPPORT                   :=  WSAEAFNOSUPPORT;
	EADDRINUSE                     :=  WSAEADDRINUSE;
	EADDRNOTAVAIL                  :=  WSAEADDRNOTAVAIL;
	ENETDOWN                       :=  WSAENETDOWN;
	ENETUNREACH                    :=  WSAENETUNREACH;
	ENETRESET                      :=  WSAENETRESET;
	ECONNABORTED                   :=  WSAECONNABORTED;
	ECONNRESET                     :=  WSAECONNRESET;
	ENOBUFS                        :=  WSAENOBUFS;
	EISCONN                        :=  WSAEISCONN;
	ENOTCONN                       :=  WSAENOTCONN;
	ESHUTDOWN                      :=  WSAESHUTDOWN;
	ETOOMANYREFS                   :=  WSAETOOMANYREFS;
	ETIMEDOUT                      :=  WSAETIMEDOUT;
	ECONNREFUSED                   :=  WSAECONNREFUSED;
	ELOOP                          :=  WSAELOOP;
	ENAMETOOLONG                   :=  WSAENAMETOOLONG;
	EHOSTDOWN                      :=  WSAEHOSTDOWN;
	EHOSTUNREACH                   :=  WSAEHOSTUNREACH;
	ENOTEMPTY                      :=  WSAENOTEMPTY;
	EPROCLIM                       :=  WSAEPROCLIM;
	EUSERS                         :=  WSAEUSERS;
	EDQUOT                         :=  WSAEDQUOT;
	ESTALE                         :=  WSAESTALE;
	EREMOTE                        :=  WSAEREMOTE;
	INVALID_SOCKET                 := -1;
	SOCKET_ERROR                   := -1;
	SOCKET_BUFFER_SIZE             := 512;
	ICMP_ECHOREPLY                 := 0;
	ICMP_ECHOREQ                   := 8;
	IMAGE_SIZEOF_SECTION_HEADER    := 40;

	CDERR_GENERALCODES             := $0000;
	CDERR_STRUCTSIZE               := $0001;
	CDERR_INITIALIZATION           := $0002;
	CDERR_NOTEMPLATE               := $0003;
	CDERR_NOHINSTANCE              := $0004;
	CDERR_LOADSTRFAILURE           := $0005;
	CDERR_FINDRESFAILURE           := $0006;
	CDERR_LOADRESFAILURE           := $0007;
	CDERR_LOCKRESFAILURE           := $0008;
	CDERR_MEMALLOCFAILURE          := $0009;
	CDERR_MEMLOCKFAILURE           := $000A;
	CDERR_NOHOOK                   := $000B;
	CDERR_REGISTERMSGFAIL          := $000C;
	CC_RGBINIT                     := $00000001;
	CC_FULLOPEN                    := $00000002;
	CC_PREVENTFULLOPEN             := $00000004;
	CC_SHOWHELP                    := $00000008;
	CC_ENABLEHOOK                  := $00000010;
	CC_ENABLETEMPLATE              := $00000020;
	CC_ENABLETEMPLATEHANDLE        := $00000040;
	CCERR_CHOOSECOLORCODES         := $5000;
	FR_DOWN                        := $00000001;
	FR_WHOLEWORD                   := $00000002;
	FR_MATCHCASE                   := $00000004;
	FR_FINDNEXT                    := $00000008;
	FR_REPLACE                     := $00000010;
	FR_REPLACEALL                  := $00000020;
	FR_DIALOGTERM                  := $00000040;
	FR_SHOWHELP                    := $00000080;
	FR_ENABLEHOOK                  := $00000100;
	FR_ENABLETEMPLATE              := $00000200;
	FR_NOUPDOWN                    := $00000400;
	FR_NOMATCHCASE                 := $00000800;
	FR_NOWHOLEWORD                 := $00001000;
	FR_ENABLETEMPLATEHANDLE        := $00002000;
	FR_HIDEUPDOWN                  := $00004000;
	FR_HIDEMATCHCASE               := $00008000;
	FR_HIDEWHOLEWORD               := $00010000;
	FRERR_FINDREPLACECODES         := $4000;
	FRERR_BUFFERLENGTHZERO         := $4001;
	CF_SCREENFONTS                 := $00000001;
	CF_PRINTERFONTS                := $00000002;
	CF_BOTH                        :=  CF_SCREENFONTS + CF_PRINTERFONTS;
	CF_SHOWHELP                    := $00000004;
	CF_ENABLEHOOK                  := $00000008;
	CF_ENABLETEMPLATE              := $00000010;
	CF_ENABLETEMPLATEHANDLE        := $00000020;
	CF_INITTOLOGFONTSTRUCT         := $00000040;
	CF_USESTYLE                    := $00000080;
	CF_EFFECTS                     := $00000100;
	CF_APPLY                       := $00000200;
	CF_ANSIONLY                    := $00000400;
	CF_NOVECTORFONTS               := $00000800;
	CF_NOOEMFONTS                  :=  CF_NOVECTORFONTS;
	CF_NOSIMULATIONS               := $00001000;
	CF_LIMITSIZE                   := $00002000;
	CF_FIXEDPITCHONLY              := $00004000;
	CF_WYSIWYG                     := $00008000;
	CF_FORCEFONTEXIST              := $00010000;
	CF_SCALABLEONLY                := $00020000;
	CF_TTONLY                      := $00040000;
	CF_NOFACESEL                   := $00080000;
	CF_NOSTYLESEL                  := $00100000;
	CF_NOSIZESEL                   := $00200000;
	CFERR_CHOOSEFONTCODES          := $2000;
	CFERR_NOFONTS                  := $2001;
	CFERR_MAXLESSTHANMIN           := $2002;
	WM_CHOOSEFONT_GETLOGFONT       :=  WM_USER + 1;
	CD_LBSELNOITEMS                := 1;
	CD_LBSELCHANGE                 := 0;
	CD_LBSELSUB                    := 1;
	CD_LBSELADD                    := 2;
	PD_ALLPAGES                    := $00000000;
	PD_SELECTION                   := $00000001;
	PD_PAGENUMS                    := $00000002;
	PD_NOSELECTION                 := $00000004;
	PD_NOPAGENUMS                  := $00000008;
	PD_COLLATE                     := $00000010;
	PD_PRINTTOFILE                 := $00000020;
	PD_PRINTSETUP                  := $00000040;
	PD_NOWARNING                   := $00000080;
	PD_RETURNDC                    := $00000100;
	PD_RETURNIC                    := $00000200;
	PD_RETURNDEFAULT               := $00000400;
	PD_SHOWHELP                    := $00000800;
	PD_ENABLEPRINTHOOK             := $00001000;
	PD_ENABLESETUPHOOK             := $00002000;
	PD_ENABLEPRINTTEMPLATE         := $00004000;
	PD_ENABLESETUPTEMPLATE         := $00008000;
	PD_ENABLEPRINTTEMPLATEHANDLE   := $00010000;
	PD_ENABLESETUPTEMPLATEHANDLE   := $00020000;
	PD_USEDEVMODECOPIES            := $00040000;
	PD_DISABLEPRINTTOFILE          := $00080000;
	PD_HIDEPRINTTOFILE             := $00100000;
	PDERR_PRINTERCODES             := $1000;
	PDERR_SETUPFAILURE             := $1001;
	PDERR_PARSEFAILURE             := $1002;
	PDERR_RETDEFFAILURE            := $1003;
	PDERR_LOADDRVFAILURE           := $1004;
	PDERR_GETDEVMODEFAIL           := $1005;
	PDERR_INITFAILURE              := $1006;
	PDERR_NODEVICES                := $1007;
	PDERR_NODEFAULTPRN             := $1008;
	PDERR_DNDMMISMATCH             := $1009;
	PDERR_CREATEICFAILURE          := $100A;
	PDERR_PRINTERNOTFOUND          := $100B;
	PDERR_DEFAULTDIFFERENT         := $100C;
	DN_DEFAULTPRN                  := $0001;
	OFN_ALLOWMULTISELECT           := $00000200;
	OFN_CREATEPROMPT               := $00002000;
	OFN_ENABLEHOOK                 := $00000020;
	OFN_ENABLETEMPLATE             := $00000040;
	OFN_ENABLETEMPLATEHANDLE       := $00000080;
	OFN_EXPLORER                   := $00080000;
	OFN_EXTENSIONDIFFERENT         := $00000400;
	OFN_FILEMUSTEXIST              := $00001000;
	OFN_HIDEREADONLY               := $00000004;
	OFN_LONGNAMES                  := $00200000;
	OFN_NOCHANGEDIR                := $00000008;
	OFN_NODEREFERENCELINKS         := $00100000;
	OFN_NOLONGNAMES                := $00040000;
	OFN_NONETWORKBUTTON            := $00020000;
	OFN_NOREADONLYRETURN           := $00008000;
	OFN_NOTESTFILECREATE           := $00010000;
	OFN_NOVALIDATE                 := $00000100;
	OFN_OVERWRITEPROMPT            := $00000002;
	OFN_PATHMUSTEXIST              := $00000800;
	OFN_READONLY                   := $00000001;
	OFN_SHAREAWARE                 := $00004000;
	OFN_SHOWHELP                   := $00000010;
	OFN_SHAREFALLTHROUGH           := 2;
	OFN_SHARENOWARN                := 1;
	OFN_SHAREWARN                  := 0;
	CDERR_DIALOGFAILURE            := $0FFFF;
	FNERR_FILENAMECODES            := $3000;
	FNERR_SUBCLASSFAILURE          := $3001;
	FNERR_INVALIDFILENAME          := $3002;
	FNERR_BUFFERTOOSMALL           := $3003;

	cchTextLimitDefault            := 32767;
	EM_CANPASTE                    :=  WM_USER + 50;
	EM_DISPLAYBAND                 :=  WM_USER + 51;
	EM_EXGETSEL                    :=  WM_USER + 52;
	EM_EXLIMITTEXT                 :=  WM_USER + 53;
	EM_EXLINEFROMCHAR              :=  WM_USER + 54;
	EM_EXSETSEL                    :=  WM_USER + 55;
	EM_FINDTEXT                    :=  WM_USER + 56;
	EM_FORMATRANGE                 :=  WM_USER + 57;
	EM_GETCHARFORMAT               :=  WM_USER + 58;
	EM_GETEVENTMASK                :=  WM_USER + 59;
	EM_GETOLEINTERFACE             :=  WM_USER + 60;
	EM_GETPARAFORMAT               :=  WM_USER + 61;
	EM_GETSELTEXT                  :=  WM_USER + 62;
	EM_HIDESELECTION               :=  WM_USER + 63;
	EM_PASTESPECIAL                :=  WM_USER + 64;
	EM_REQUESTRESIZE               :=  WM_USER + 65;
	EM_SELECTIONTYPE               :=  WM_USER + 66;
	EM_SETBKGNDCOLOR               :=  WM_USER + 67;
	EM_SETCHARFORMAT               :=  WM_USER + 68;
	EM_SETEVENTMASK                :=  WM_USER + 69;
	EM_SETOLECALLBACK              :=  WM_USER + 70;
	EM_SETPARAFORMAT               :=  WM_USER + 71;
	EM_SETTARGETDEVICE             :=  WM_USER + 72;
	EM_STREAMIN                    :=  WM_USER + 73;
	EM_STREAMOUT                   :=  WM_USER + 74;
	EM_GETTEXTRANGE                :=  WM_USER + 75;
	EM_FINDWORDBREAK               :=  WM_USER + 76;
	EM_SETOPTIONS                  :=  WM_USER + 77;
	EM_GETOPTIONS                  :=  WM_USER + 78;
	EM_FINDTEXTEX                  :=  WM_USER + 79;
	EM_GETWORDBREAKPROCEX          :=  WM_USER + 80;
	EM_SETWORDBREAKPROCEX          :=  WM_USER + 81;
	EM_SETPUNCTUATION              :=  WM_USER + 100;
	EM_GETPUNCTUATION              :=  WM_USER + 101;
	EM_SETWORDWRAPMODE             :=  WM_USER + 102;
	EM_GETWORDWRAPMODE             :=  WM_USER + 103;
	EM_SETIMECOLOR                 :=  WM_USER + 104;
	EM_GETIMECOLOR                 :=  WM_USER + 105;
	EM_SETIMEOPTIONS               :=  WM_USER + 106;
	EM_GETIMEOPTIONS               :=  WM_USER + 107;
	EN_MSGFILTER                   := $0700;
	EN_REQUESTRESIZE               := $0701;
	EN_SELCHANGE                   := $0702;
	EN_DROPFILES                   := $0703;
	EN_PROTECTED                   := $0704;
	EN_CORRECTTEXT                 := $0705;
	EN_STOPNOUNDO                  := $0706;
	EN_IMECHANGE                   := $0707;
	EN_SAVECLIPBOARD               := $0708;
	EN_OLEOPFAILED                 := $0709;
	ENM_NONE                       := $00000000;
	ENM_CHANGE                     := $00000001;
	ENM_UPDATE                     := $00000002;
	ENM_SCROLL                     := $00000004;
	ENM_KEYEVENTS                  := $00010000;
	ENM_MOUSEEVENTS                := $00020000;
	ENM_REQUESTRESIZE              := $00040000;
	ENM_SELCHANGE                  := $00080000;
	ENM_DROPFILES                  := $00100000;
	ENM_PROTECTED                  := $00200000;
	ENM_CORRECTTEXT                := $00400000;
	ENM_IMECHANGE                  := $00800000;
	ES_SAVESEL                     := $00008000;
	ES_SUNKEN                      := $00004000;
	ES_DISABLENOSCROLL             := $00002000;
	ES_SELECTIONBAR                := $01000000;
	ES_EX_NOCALLOLEINIT            := $01000000;
	ES_VERTICAL                    := $00400000;
	ES_NOIME                       := $00080000;
	ES_SELFIME                     := $00040000;
	ECO_AUTOWORDSELECTION          := $00000001;
	ECO_AUTOVSCROLL                := $00000040;
	ECO_AUTOHSCROLL                := $00000080;
	ECO_NOHIDESEL                  := $00000100;
	ECO_READONLY                   := $00000800;
	ECO_WANTRETURN                 := $00001000;
	ECO_SAVESEL                    := $00008000;
	ECO_SELECTIONBAR               := $01000000;
	ECO_VERTICAL                   := $00400000;
	ECOOP_SET                      := $0001;
	ECOOP_OR                       := $0002;
	ECOOP_AND                      := $0003;
	ECOOP_XOR                      := $0004;
	WB_CLASSIFY                    := 3;
	WB_MOVEWORDLEFT                := 4;
	WB_MOVEWORDRIGHT               := 5;
	WB_LEFTBREAK                   := 6;
	WB_RIGHTBREAK                  := 7;
	WB_MOVEWORDPREV                := 4;
	WB_MOVEWORDNEXT                := 5;
	WB_PREVBREAK                   := 6;
	WB_NEXTBREAK                   := 7;
	PC_FOLLOWING                   := 1;
	PC_LEADING                     := 2;
	PC_OVERFLOW                    := 3;
	PC_DELIMITER                   := 4;
	WBF_WORDWRAP                   := $010;
	WBF_WORDBREAK                  := $020;
	WBF_OVERFLOW                   := $040;
	WBF_LEVEL1                     := $080;
	WBF_LEVEL2                     := $100;
	WBF_CUSTOM                     := $200;
	IMF_FORCENONE                  := $0001;
	IMF_FORCEENABLE                := $0002;
	IMF_FORCEDISABLE               := $0004;
	IMF_CLOSESTATUSWINDOW          := $0008;
	IMF_VERTICAL                   := $0020;
	IMF_FORCEACTIVE                := $0040;
	IMF_FORCEINACTIVE              := $0080;
	IMF_FORCEREMEMBER              := $0100;
	WBF_CLASS                      := $0F;
	WBF_ISWHITE                    := $10;
	WBF_BREAKLINE                  := $20;
	WBF_BREAKAFTER                 := $40;
	CFM_BOLD                       := $00000001;
	CFM_ITALIC                     := $00000002;
	CFM_UNDERLINE                  := $00000004;
	CFM_STRIKEOUT                  := $00000008;
	CFM_PROTECTED                  := $00000010;
	CFM_SIZE                       := $80000000;
	CFM_COLOR                      := $40000000;
	CFM_FACE                       := $20000000;
	CFM_OFFSET                     := $10000000;
	CFM_CHARSET                    := $08000000;
	CFE_BOLD                       := $0001;
	CFE_ITALIC                     := $0002;
	CFE_UNDERLINE                  := $0004;
	CFE_STRIKEOUT                  := $0008;
	CFE_PROTECTED                  := $0010;
	CFE_AUTOCOLOR                  := $40000000;
	yHeightCharPtsMost             := 1638;
	SCF_SELECTION                  := $0001;
	SCF_WORD                       := $0002;
	SF_TEXT                        := $0001;
	SF_RTF                         := $0002;
	SF_RTFNOOBJS                   := $0003;
	SF_TEXTIZED                    := $0004;
	SFF_SELECTION                  := $8000;
	SFF_PLAINRTF                   := $4000;
	lDefaultTab                    := 720;
	PFM_STARTINDENT                := $00000001;
	PFM_RIGHTINDENT                := $00000002;
	PFM_OFFSET                     := $00000004;
	PFM_ALIGNMENT                  := $00000008;
	PFM_TABSTOPS                   := $00000010;
	PFM_NUMBERING                  := $00000020;
	PFM_OFFSETINDENT               := $80000000;
	PFN_BULLET                     := $0001;
	PFA_LEFT                       := $0001;
	PFA_RIGHT                      := $0002;
	PFA_CENTER                     := $0003;
	SEL_EMPTY                      := $0000;
	SEL_TEXT                       := $0001;
	SEL_OBJECT                     := $0002;
	SEL_MULTICHAR                  := $0004;
	SEL_MULTIOBJECT                := $0008;
	OLEOP_DOVERB                   := 1;


	PSH_DEFAULT                    := $00000000;
	PSH_PROPTITLE                  := $00000001;
	PSH_USEDWORD                   := $00000002;
	PSH_USEICONID                  := $00000004;
	PSH_PROPSHEETPAGE              := $00000008;
	PSH_WIZARDHASFINISH            := $00000010;
	PSH_WIZARD                     := $00000020;
	PSH_USEPSTARTPAGE              := $00000040;
	PSH_NOAPPLYNOW                 := $00000080;
	PSH_USECALLBACK                := $00000100;
	PSH_HASHELP                    := $00000200;
	PSH_MODELESS                   := $00000400;
	PSH_RTLREADING                 := $00000800;
	PSH_WIZARDCONTEXTHELP          := $00001000;

	PSH_WIZARD97                   := $00002000;
	PSH_WATERMARK                  := $00008000;
	PSH_USEHBMWATERMARK            := $00010000;
	PSH_USEHPLWATERMARK            := $00020000;
	PSH_STRETCHWATERMARK           := $00040000;
	PSH_HEADER                     := $00080000;
	PSH_USEHBMHEADER               := $00100000;
	PSH_USEPAGELANG                := $00200000;
	PSN_FIRST                      :=  -200;
	PSN_LAST                       :=  -299;

	PSN_SETACTIVE                  :=  PSN_FIRST-0;
	PSN_KILLACTIVE                 :=  PSN_FIRST-1;
	PSN_APPLY                      :=  PSN_FIRST-2;
	PSN_RESET                      :=  PSN_FIRST-3;
	PSN_HELP                       :=  PSN_FIRST-5;
	PSN_WIZBACK                    :=  PSN_FIRST-6;
	PSN_WIZNEXT                    :=  PSN_FIRST-7;
	PSN_WIZFINISH                  :=  PSN_FIRST-8;
	PSN_QUERYCANCEL                :=  PSN_FIRST-9;
	PSN_GETOBJECT                  :=  PSN_FIRST-10;

	PSNRET_NOERROR                 := 0;
	PSNRET_INVALID                 := 1;
	PSNRET_INVALID_NOCHANGEPAGE    := 2;


	PSM_SETCURSEL                  :=  WM_USER + 101;
	PSM_REMOVEPAGE                 :=  WM_USER + 102;
	PSM_ADDPAGE                    :=  WM_USER + 103;
	PSM_CHANGED                    :=  WM_USER + 104;
	PSM_RESTARTWINDOWS             :=  WM_USER + 105;
	PSM_REBOOTSYSTEM               :=  WM_USER + 106;
	PSM_CANCELTOCLOSE              :=  WM_USER + 107;
	PSM_QUERYSIBLINGS              :=  WM_USER + 108;
	PSM_UNCHANGED                  :=  WM_USER + 109;
	PSM_APPLY                      :=  WM_USER + 110;
	PSM_SETTITLEA                  :=  WM_USER + 111;

	PSM_SETTITLE                   := WM_USER + 111;  //"PSM_SETTITLEA";
	PSM_SETWIZBUTTONS              :=  WM_USER + 112;

	PSWIZB_BACK                    := $00000001;
	PSWIZB_NEXT                    := $00000002;
	PSWIZB_FINISH                  := $00000004;
	PSWIZB_DISABLEDFINISH          := $00000008;

	PSM_PRESSBUTTON                :=  WM_USER + 113;

	PSBTN_BACK                     := 0;
	PSBTN_NEXT                     := 1;
	PSBTN_FINISH                   := 2;
	PSBTN_OK                       := 3;
	PSBTN_APPLYNOW                 := 4;
	PSBTN_CANCEL                   := 5;
	PSBTN_HELP                     := 6;
	PSBTN_MAX                      := 6;

	PSM_SETCURSELID                :=  WM_USER + 114;

	PSM_SETFINISHTEXTA             :=  WM_USER + 115;

	PSM_SETFINISHTEXT              := WM_USER + 115; //"PSM_SETFINISHTEXTA";

	PSM_GETTABCONTROL              :=  WM_USER + 116;
	PSM_ISDIALOGMESSAGE            :=  WM_USER + 117;
	PSM_GETCURRENTPAGEDWORD        :=  WM_USER + 118;

	ID_PSRESTARTWINDOWS            := 2;
	ID_PSREBOOTSYSTEM              :=  (ID_PSRESTARTWINDOWS | 1);

	WIZ_CXDLG                      := 276;
	WIZ_CYDLG                      := 140;

	WIZ_CXBMP                      := 80;

	WIZ_BODYX                      := 92;
	WIZ_BODYCX                     := 184;

	PROP_SM_CXDLG                  := 212;
	PROP_SM_CYDLG                  := 188;

	PROP_MED_CXDLG                 := 227;
	PROP_MED_CYDLG                 := 215;

	PROP_LG_CXDLG                  := 252;
	PROP_LG_CYDLG                  := 218;
	MAX_NATURAL_ALIGNMENT          :=  @size( dword );
	ERROR_SEVERITY_SUCCESS         := $00000000;
	ERROR_SEVERITY_INFORMATIONAL   := $40000000;
	ERROR_SEVERITY_WARNING         := $80000000;
	ERROR_SEVERITY_ERROR           := $0C0000000;
	LANG_AFRIKAANS                 := $36;
	LANG_ALBANIAN                  := $1c;
	LANG_ARABIC                    := $01;
	LANG_ARMENIAN                  := $2b;
	LANG_ASSAMESE                  := $4d;
	LANG_AZERI                     := $2c;
	LANG_BASQUE                    := $2d;
	LANG_BELARUSIAN                := $23;
	LANG_BENGALI                   := $45;
	LANG_CATALAN                   := $03;
	LANG_ESTONIAN                  := $25;
	LANG_FAEROESE                  := $38;
	LANG_FARSI                     := $29;
	LANG_GEORGIAN                  := $37;
	LANG_GUJARATI                  := $47;
	LANG_HEBREW                    := $0d;
	LANG_HINDI                     := $39;
	LANG_INDONESIAN                := $21;
	LANG_KANNADA                   := $4b;
	LANG_KASHMIRI                  := $60;
	LANG_KAZAK                     := $3f;
	LANG_KONKANI                   := $57;
	LANG_LATVIAN                   := $26;
	LANG_LITHUANIAN                := $27;
	LANG_MACEDONIAN                := $2f;
	LANG_MALAY                     := $3e;
	LANG_MALAYALAM                 := $4c;
	LANG_MANIPURI                  := $58;
	LANG_MARATHI                   := $4e;
	LANG_NEPALI                    := $61;
	LANG_ORIYA                     := $48;
	LANG_PUNJABI                   := $46;
	LANG_SANSKRIT                  := $4f;
	LANG_SERBIAN                   := $1a;
	LANG_SINDHI                    := $59;
	LANG_SWAHILI                   := $41;
	LANG_TAMIL                     := $49;
	LANG_TATAR                     := $44;
	LANG_TELUGU                    := $4a;
	LANG_THAI                      := $1e;
	LANG_UKRAINIAN                 := $22;
	LANG_URDU                      := $20;
	LANG_UZBEK                     := $43;
	LANG_VIETNAMESE                := $2a;
//const	SUBLANG_SYS_DEFAULT     := $02;
	SUBLANG_ARABIC_SAUDI_ARABIA    := $01;
	SUBLANG_ARABIC_IRAQ            := $02;
	SUBLANG_ARABIC_EGYPT           := $03;
	SUBLANG_ARABIC_LIBYA           := $04;
	SUBLANG_ARABIC_ALGERIA         := $05;
	SUBLANG_ARABIC_MOROCCO         := $06;
	SUBLANG_ARABIC_TUNISIA         := $07;
	SUBLANG_ARABIC_OMAN            := $08;
	SUBLANG_ARABIC_YEMEN           := $09;
	SUBLANG_ARABIC_SYRIA           := $0a;
	SUBLANG_ARABIC_JORDAN          := $0b;
	SUBLANG_ARABIC_LEBANON         := $0c;
	SUBLANG_ARABIC_KUWAIT          := $0d;
	SUBLANG_ARABIC_UAE             := $0e;
	SUBLANG_ARABIC_BAHRAIN         := $0f;
	SUBLANG_ARABIC_QATAR           := $10;
	SUBLANG_AZERI_LATIN            := $01;
	SUBLANG_AZERI_CYRILLIC         := $02;
	SUBLANG_CHINESE_MACAU          := $05;
	SUBLANG_ENGLISH_SOUTH_AFRICA   := $07;
	SUBLANG_ENGLISH_JAMAICA        := $08;
	SUBLANG_ENGLISH_CARIBBEAN      := $09;
	SUBLANG_ENGLISH_BELIZE         := $0a;
	SUBLANG_ENGLISH_TRINIDAD       := $0b;
	SUBLANG_ENGLISH_ZIMBABWE       := $0c;
	SUBLANG_ENGLISH_PHILIPPINES    := $0d;
	SUBLANG_FRENCH_LUXEMBOURG      := $05;
	SUBLANG_FRENCH_MONACO          := $06;
//const	SUBLANG_GERMAN_AUSTRIAN := $03;
	SUBLANG_GERMAN_LUXEMBOURG      := $04;
	SUBLANG_GERMAN_LIECHTENSTEIN   := $05;
	SUBLANG_KASHMIRI_INDIA         := $02;
	SUBLANG_KOREAN                 := $01;
	SUBLANG_LITHUANIAN             := $01;
	SUBLANG_LITHUANIAN_CLASSIC     := $02;
	SUBLANG_MALAY_MALAYSIA         := $01;
	SUBLANG_MALAY_BRUNEI_DARUSSALAM := $02;
	SUBLANG_NEPALI_INDIA           := $02;
	SUBLANG_SERBIAN_LATIN          := $02;
	SUBLANG_SERBIAN_CYRILLIC       := $03;
	SUBLANG_SPANISH_GUATEMALA      := $04;
	SUBLANG_SPANISH_COSTA_RICA     := $05;
	SUBLANG_SPANISH_PANAMA         := $06;
	SUBLANG_SPANISH_DOMINICAN_REPUBLIC := $07;
	SUBLANG_SPANISH_VENEZUELA      := $08;
	SUBLANG_SPANISH_COLOMBIA       := $09;
	SUBLANG_SPANISH_PERU           := $0a;
	SUBLANG_SPANISH_ARGENTINA      := $0b;
	SUBLANG_SPANISH_ECUADOR        := $0c;
	SUBLANG_SPANISH_CHILE          := $0d;
	SUBLANG_SPANISH_URUGUAY        := $0e;
	SUBLANG_SPANISH_PARAGUAY       := $0f;
	SUBLANG_SPANISH_BOLIVIA        := $10;
	SUBLANG_SPANISH_EL_SALVADOR    := $11;
	SUBLANG_SPANISH_HONDURAS       := $12;
	SUBLANG_SPANISH_NICARAGUA      := $13;
	SUBLANG_SPANISH_PUERTO_RICO    := $14;
	SUBLANG_SWEDISH                := $01;
	SUBLANG_SWEDISH_FINLAND        := $02;
	SUBLANG_URDU_PAKISTAN          := $01;
	SUBLANG_URDU_INDIA             := $02;
	SUBLANG_UZBEK_LATIN            := $01;
	SUBLANG_UZBEK_CYRILLIC         := $02;
	SORT_DEFAULT                   := $0;
	SORT_JAPANESE_XJIS             := $0;
	SORT_JAPANESE_UNICODE          := $1;
	SORT_CHINESE_BIG5              := $0;
	SORT_CHINESE_PRCP              := $0;
	SORT_CHINESE_UNICODE           := $1;
	SORT_CHINESE_PRC               := $2;
	SORT_CHINESE_BOPOMOFO          := $3;
	SORT_KOREAN_KSC                := $0;
	SORT_KOREAN_UNICODE            := $1;
	SORT_GERMAN_PHONE_BOOK         := $1;
	SORT_HUNGARIAN_DEFAULT         := $0;
	SORT_HUNGARIAN_TECHNICAL       := $1;
	SORT_GEORGIAN_TRADITIONAL      := $0;
	SORT_GEORGIAN_MODERN           := $1;
	NLS_VALID_LOCALE_MASK          := $000fffff;
	STATUS_SEGMENT_NOTIFICATION    := $40000005;
	STATUS_GUARD_PAGE_VIOLATION    := $80000001;
	STATUS_INVALID_HANDLE          := $0C0000008;
	STATUS_FLOAT_MULTIPLE_FAULTS   := $0C00002B4;
	STATUS_FLOAT_MULTIPLE_TRAPS    := $0C00002B5;
	STATUS_ILLEGAL_VLM_REFERENCE   := $0C00002C0;
	MAXIMUM_WAIT_OBJECTS           := 64;
	MAXIMUM_SUSPEND_COUNT          :=  MAXCHAR;
	CONTEXT_EXTENDED_REGISTERS     :=  (CONTEXT_i386 + $00000020);
//const	MAXIMUM_SUPPORTED_EXTENSION := 512;
//const	MAXIMUM_ALLOWED         :=  ($2000000);
	SECURITY_NULL_SID_AUTHORITY    :=  [0,0,0,0,0,0];
	SECURITY_WORLD_SID_AUTHORITY   :=  [0,0,0,0,0,1];
	SECURITY_LOCAL_SID_AUTHORITY   :=  [0,0,0,0,0,2];
	SECURITY_CREATOR_SID_AUTHORITY :=  [0,0,0,0,0,3];
	SECURITY_NON_UNIQUE_AUTHORITY  :=  [0,0,0,0,0,4];
	SECURITY_CREATOR_OWNER_SERVER_RID :=  (2);
	SECURITY_CREATOR_GROUP_SERVER_RID :=  (3);
	SECURITY_NT_AUTHORITY          :=  [0,0,0,0,0,5];
	SECURITY_PROXY_RID             :=  (8);
	SECURITY_ENTERPRISE_CONTROLLERS_RID :=  (9);
	SECURITY_SERVER_LOGON_RID      :=  SECURITY_ENTERPRISE_CONTROLLERS_RID;
	SECURITY_PRINCIPAL_SELF_RID    :=  ($A);
	SECURITY_AUTHENTICATED_USER_RID :=  ($B);
	SECURITY_RESTRICTED_CODE_RID   :=  ($C);
	SECURITY_LOGON_IDS_RID_COUNT   :=  (3);
	DOMAIN_USER_RID_KRBTGT         :=  ($1F6);
	DOMAIN_GROUP_RID_COMPUTERS     :=  ($203);
	DOMAIN_GROUP_RID_CONTROLLERS   :=  ($204);
	DOMAIN_GROUP_RID_CERT_ADMINS   :=  ($205);
	DOMAIN_GROUP_RID_SCHEMA_ADMINS :=  ($206);
	SYSTEM_LUID                    :=  [ $3E7, $0 ];
	ANONYMOUS_LOGON_LUID           :=  [ $3e6, $0 ];
	SE_GROUP_USE_FOR_DENY_ONLY     :=  ($10);
	ACL_REVISION_DS                :=  (4);
	MIN_ACL_REVISION               :=  ACL_REVISION2;
	ACL_REVISION3                  :=  (3);
	ACL_REVISION4                  :=  (4);
	MAX_ACL_REVISION               :=  ACL_REVISION4;
	ACCESS_MIN_MS_ACE_TYPE         :=  (0);
	ACCESS_MAX_MS_V2_ACE_TYPE      :=  (3);
	ACCESS_ALLOWED_COMPOUND_ACE_TYPE :=  (4);
	ACCESS_MAX_MS_V3_ACE_TYPE      :=  (4);
	ACCESS_MIN_MS_OBJECT_ACE_TYPE  :=  (5);
	ACCESS_ALLOWED_OBJECT_ACE_TYPE :=  (5);
	ACCESS_DENIED_OBJECT_ACE_TYPE  :=  (6);
	SYSTEM_AUDIT_OBJECT_ACE_TYPE   :=  (7);
	SYSTEM_ALARM_OBJECT_ACE_TYPE   :=  (8);
	ACCESS_MAX_MS_OBJECT_ACE_TYPE  :=  (8);
	ACCESS_MAX_MS_V4_ACE_TYPE      :=  (8);
	ACCESS_MAX_MS_ACE_TYPE         :=  (8);
	INHERITED_ACE                  :=  ($10);
	ACE_OBJECT_TYPE_PRESENT        := $1;
	ACE_INHERITED_OBJECT_TYPE_PRESENT := $2;
//const	SECURITY_DESCRIPTOR_REVISION :=  (1);
//const	SECURITY_DESCRIPTOR_REVISION1 :=  (1);
//const	SECURITY_DESCRIPTOR_MIN_LENGTH :=  @size( SECURITY_DESCRIPTOR );
//const	SE_OWNER_DEFAULTED      :=  (1);
	SE_DACL_AUTO_INHERIT_REQ       :=  ($100);
	SE_SACL_AUTO_INHERIT_REQ       :=  ($200);
	SE_DACL_AUTO_INHERITED         :=  ($400);
	SE_SACL_AUTO_INHERITED         :=  ($800);
	SE_DACL_PROTECTED              :=  ($1000);
	SE_SACL_PROTECTED              :=  ($2000);
	ACCESS_OBJECT_GUID             := 0;
	ACCESS_PROPERTY_SET_GUID       := 1;
	ACCESS_PROPERTY_GUID           := 2;
	ACCESS_MAX_LEVEL               := 4;
	AUDIT_ALLOW_NO_PRIVILEGE       := $1;
	ACCESS_DS_SOURCE_A             :=  "DS";
	ACCESS_DS_OBJECT_TYPE_NAME_A   :=  "Directory Service Object";
	SE_CREATE_TOKEN_NAME           :=  "SeCreateTokenPrivilege";
	SE_ASSIGNPRIMARYTOKEN_NAME     :=  "SeAssignPrimaryTokenPrivilege";
	SE_LOCK_MEMORY_NAME            :=  "SeLockMemoryPrivilege";
	SE_INCREASE_QUOTA_NAME         :=  ("SeIncreaseQuotaPrivilege");
	SE_UNSOLICITED_INPUT_NAME      :=  ("SeUnsolicitedInputPrivilege");
	SE_MACHINE_ACCOUNT_NAME        :=  ("SeMachineAccountPrivilege");
	SE_TCB_NAME                    :=  ("SeTcbPrivilege");
	SE_SECURITY_NAME               :=  ("SeSecurityPrivilege");
	SE_TAKE_OWNERSHIP_NAME         :=  ("SeTakeOwnershipPrivilege");
	SE_LOAD_DRIVER_NAME            :=  ("SeLoadDriverPrivilege");
	SE_SYSTEM_PROFILE_NAME         :=  ("SeSystemProfilePrivilege");
	SE_SYSTEMTIME_NAME             :=  ("SeSystemtimePrivilege");
	SE_PROF_SINGLE_PROCESS_NAME    :=  ("SeProfileSingleProcessPrivilege");
	SE_INC_BASE_PRIORITY_NAME      :=  ("SeIncreaseBasePriorityPrivilege");
	SE_CREATE_PAGEFILE_NAME        :=  ("SeCreatePagefilePrivilege");
	SE_CREATE_PERMANENT_NAME       :=  ("SeCreatePermanentPrivilege");
	SE_BACKUP_NAME                 :=  ("SeBackupPrivilege");
	SE_RESTORE_NAME                :=  ("SeRestorePrivilege");
	SE_SHUTDOWN_NAME               :=  ("SeShutdownPrivilege");
	SE_DEBUG_NAME                  :=  ("SeDebugPrivilege");
	SE_AUDIT_NAME                  :=  ("SeAuditPrivilege");
	SE_SYSTEM_ENVIRONMENT_NAME     :=  ("SeSystemEnvironmentPrivilege");
	SE_CHANGE_NOTIFY_NAME          :=  ("SeChangeNotifyPrivilege");
	SE_REMOTE_SHUTDOWN_NAME        :=  ("SeRemoteShutdownPrivilege");
	TOKEN_ASSIGN_PRIMARY           :=  (1);
	TOKEN_DUPLICATE                :=  (2);
	TOKEN_IMPERSONATE              :=  (4);
	TOKEN_QUERY                    :=  (8);
	TOKEN_QUERY_SOURCE             :=  ($10);
	TOKEN_ADJUST_GROUPS            :=  ($40);
	TOKEN_ADJUST_DEFAULT           :=  ($80);
	TOKEN_ADJUST_SESSIONID         :=  ($100);
	TOKEN_ALL_ACCESS               :=  (STANDARD_RIGHTS_REQUIRED+TOKEN_ASSIGN_PRIMARY+TOKEN_DUPLICATE+ TOKEN_IMPERSONATE+TOKEN_QUERY+TOKEN_QUERY_SOURCE+ TOKEN_ADJUST_PRIVILEGES+TOKEN_ADJUST_GROUPS+TOKEN_ADJUST_SESSIONID+ TOKEN_ADJUST_DEFAULT);
	TOKEN_READ                     :=  (STANDARD_RIGHTS_READ+TOKEN_QUERY);
	TOKEN_WRITE                    :=  (STANDARD_RIGHTS_WRITE+TOKEN_ADJUST_PRIVILEGES+TOKEN_ADJUST_GROUPS+TOKEN_ADJUST_DEFAULT);
	TOKEN_EXECUTE                  :=  (STANDARD_RIGHTS_EXECUTE);
	SECURITY_DYNAMIC_TRACKING      :=  @global:true;
	SECURITY_STATIC_TRACKING       :=  @global:false;
	OWNER_SECURITY_INFORMATION     :=  (1);
	GROUP_SECURITY_INFORMATION     :=  (2);
	DACL_SECURITY_INFORMATION      :=  (4);
	SACL_SECURITY_INFORMATION      :=  (8);
	PROCESS_TERMINATE              :=  (1);
	PROCESS_CREATE_THREAD          :=  (2);
	PROCESS_SET_SESSIONID          :=  (4);
	PROCESS_VM_OPERATION           :=  (8);
	PROCESS_VM_READ                :=  ($10);
	PROCESS_VM_WRITE               :=  ($20);
	PROCESS_DUP_HANDLE             :=  ($40);
	PROCESS_CREATE_PROCESS         :=  ($80);
	PROCESS_SET_QUOTA              :=  ($100);
	PROCESS_SET_INFORMATION        :=  ($200);
	PROCESS_QUERY_INFORMATION      :=  ($400);
	PROCESS_ALL_ACCESS             :=  (STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE + $0FFF);
	MAXIMUM_PROCESSORS             := 32;
	THREAD_TERMINATE               :=  ($0001);
	THREAD_SUSPEND_RESUME          :=  ($0002);
	THREAD_GET_CONTEXT             :=  ($0008);
	THREAD_SET_CONTEXT             :=  ($0010);
	THREAD_SET_INFORMATION         :=  ($0020);
	THREAD_QUERY_INFORMATION       :=  ($0040);
	THREAD_SET_THREAD_TOKEN        :=  ($0080);
	THREAD_IMPERSONATE             :=  ($0100);
	THREAD_DIRECT_IMPERSONATION    :=  ($0200);
	THREAD_ALL_ACCESS              :=  (STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE + $3FF);

	JOB_OBJECT_ASSIGN_PROCESS      :=  ($0001);
	JOB_OBJECT_SET_ATTRIBUTES      :=  ($0002);
	JOB_OBJECT_QUERY               :=  ($0004);
	JOB_OBJECT_TERMINATE           :=  ($0008);
	JOB_OBJECT_SET_SECURITY_ATTRIBUTES :=  ($0010);
	JOB_OBJECT_ALL_ACCESS          :=  (STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE + $1F );

	TLS_MINIMUM_AVAILABLE          := 64;
	EVENT_ALL_ACCESS               :=  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+$3);
	MUTANT_QUERY_STATE             := $0001;
	MUTANT_ALL_ACCESS              :=  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+ MUTANT_QUERY_STATE);
	SEMAPHORE_MODIFY_STATE         := $0002;
	SEMAPHORE_ALL_ACCESS           :=  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+$3);
	TIMER_QUERY_STATE              := $0001;
	TIMER_MODIFY_STATE             := $0002;
	TIMER_ALL_ACCESS               :=  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+TIMER_QUERY_STATE+TIMER_MODIFY_STATE);
	TIME_ZONE_ID_UNKNOWN           := 0;
	TIME_ZONE_ID_STANDARD          := 1;
	TIME_ZONE_ID_DAYLIGHT          := 2;
	PROCESSOR_PPC_601              := 601;
	PROCESSOR_PPC_603              := 603;
	PROCESSOR_PPC_604              := 604;
	PROCESSOR_PPC_620              := 620;
	PROCESSOR_HITACHI_SH3          := 10003;
	PROCESSOR_HITACHI_SH3E         := 10004;
	PROCESSOR_HITACHI_SH4          := 10005;
	PROCESSOR_MOTOROLA_821         := 821;
	PROCESSOR_SHx_SH3              := 103;
	PROCESSOR_SHx_SH4              := 104;
	PROCESSOR_STRONGARM            := 2577;
	PROCESSOR_ARM720               := 1824;
	PROCESSOR_ARM820               := 2080;
	PROCESSOR_ARM920               := 2336;
	PROCESSOR_ARM_7TDMI            := 70001;
	PROCESSOR_ARCHITECTURE_INTEL   := 0;
	PROCESSOR_ARCHITECTURE_MIPS    := 1;
	PROCESSOR_ARCHITECTURE_ALPHA   := 2;
	PROCESSOR_ARCHITECTURE_PPC     := 3;
	PROCESSOR_ARCHITECTURE_SHX     := 4;
	PROCESSOR_ARCHITECTURE_ARM     := 5;
	PROCESSOR_ARCHITECTURE_IA64    := 6;
	PROCESSOR_ARCHITECTURE_ALPHA64 := 7;
	PROCESSOR_ARCHITECTURE_UNKNOWN := $0FFFF;
	PF_FLOATING_POINT_PRECISION_ERRATA := 0;
	PF_FLOATING_POINT_EMULATED     := 1;
	PF_COMPARE_EXCHANGE_DOUBLE     := 2;
	PF_MMX_INSTRUCTIONS_AVAILABLE  := 3;
	PF_PPC_MOVEMEM_64BIT_OK        := 4;
	PF_ALPHA_BYTE_INSTRUCTIONS     := 5;
	PF_XMMI_INSTRUCTIONS_AVAILABLE := 6;
	PF_AMD3D_INSTRUCTIONS_AVAILABLE := 7;
	SYSTEM_FLAG_REMOTE_BOOT_CLIENT := $00000001;
	SYSTEM_FLAG_DISKLESS_CLIENT    := $00000002;
	PAGE_WRITECOMBINE              := $400;
	MEM_4MB_PAGES                  := $80000000;
	SEC_VLM                        := $2000000;
//const	MEM_IMAGE               :=  SEC_IMAGE;
	FILE_SHARE_DELETE              := $00000004;
	FILE_ATTRIBUTE_ENCRYPTED       := $00000040;
	FILE_ATTRIBUTE_SPARSE_FILE     := $00000200;
	FILE_ATTRIBUTE_REPARSE_POINT   := $00000400;
//const	FILE_ATTRIBUTE_COMPRESSED := $00000800;
	FILE_ATTRIBUTE_OFFLINE         := $00001000;
	FILE_ATTRIBUTE_NOT_CONTENT_INDEXED := $00002000;
	FILE_NOTIFY_CHANGE_LAST_ACCESS := $00000020;
	FILE_NOTIFY_CHANGE_CREATION    := $00000040;
	FILE_ACTION_ADDED              := $00000001;
	FILE_ACTION_REMOVED            := $00000002;
	FILE_ACTION_MODIFIED           := $00000003;
	FILE_ACTION_RENAMED_OLD_NAME   := $00000004;
	FILE_ACTION_RENAMED_NEW_NAME   := $00000005;
	FILE_VOLUME_QUOTAS             := $00000020;
	FILE_SUPPORTS_SPARSE_FILES     := $00000040;
	FILE_SUPPORTS_REPARSE_POINTS   := $00000080;
	FILE_SUPPORTS_REMOTE_STORAGE   := $00000100;
	FILE_SUPPORTS_OBJECT_IDS       := $00010000;
	FILE_SUPPORTS_ENCRYPTION       := $00020000;
	MAXIMUM_REPARSE_DATA_BUFFER_SIZE :=  ( 16 * 1024 );
	IO_REPARSE_TAG_RESERVED_ZERO   :=  (0);
	IO_REPARSE_TAG_RESERVED_ONE    :=  (1);
	IO_REPARSE_TAG_RESERVED_RANGE  :=  IO_REPARSE_TAG_RESERVED_ONE;
	IO_REPARSE_TAG_VALID_VALUES    :=  ($E000FFFF);
	IO_REPARSE_TAG_SYMBOLIC_LINK   :=  IO_REPARSE_TAG_RESERVED_ZERO;
	IO_REPARSE_TAG_MOUNT_POINT     :=  ($A0000003);
	IO_REPARSE_TAG_HSM             :=  ($C0000004);
	IO_REPARSE_TAG_NSS             :=  ($80000005);
	IO_REPARSE_TAG_NSSRECOVER      :=  ($80000006);
	IO_REPARSE_TAG_SIS             :=  ($80000007);
	IO_REPARSE_TAG_DFS             :=  ($80000008);
	ES_SYSTEM_REQUIRED             :=  ($1);
	ES_DISPLAY_REQUIRED            :=  ($2);
	ES_USER_PRESENT                :=  ($4);
	ES_CONTINUOUS                  :=  ($80000000);
	IMAGE_DOS_SIGNATURE            := $5A4D;
	IMAGE_OS2_SIGNATURE            := $454E;
	IMAGE_OS2_SIGNATURE_LE         := $454C;
	IMAGE_VXD_SIGNATURE            := $454C;
	IMAGE_NT_SIGNATURE             := $00004550;
	IMAGE_SIZEOF_FILE_HEADER       := 20;
	IMAGE_FILE_RELOCS_STRIPPED     := $0001;
	IMAGE_FILE_EXECUTABLE_IMAGE    := $0002;
	IMAGE_FILE_LINE_NUMS_STRIPPED  := $0004;
	IMAGE_FILE_LOCAL_SYMS_STRIPPED := $0008;
	IMAGE_FILE_AGGRESIVE_WS_TRIM   := $0010;
	IMAGE_FILE_LARGE_ADDRESS_AWARE := $0020;
	IMAGE_FILE_BYTES_REVERSED_LO   := $0080;
	IMAGE_FILE_32BIT_MACHINE       := $0100;
	IMAGE_FILE_DEBUG_STRIPPED      := $0200;
	IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP := $0400;
	IMAGE_FILE_NET_RUN_FROM_SWAP   := $0800;
	IMAGE_FILE_SYSTEM              := $1000;
	IMAGE_FILE_DLL                 := $2000;
	IMAGE_FILE_UP_SYSTEM_ONLY      := $4000;
	IMAGE_FILE_BYTES_REVERSED_HI   := $8000;
	IMAGE_FILE_MACHINE_UNKNOWN     := 0;
	IMAGE_FILE_MACHINE_I386        := $014c;
	IMAGE_FILE_MACHINE_R3000       := $0162;
	IMAGE_FILE_MACHINE_R4000       := $0166;
	IMAGE_FILE_MACHINE_R10000      := $0168;
	IMAGE_FILE_MACHINE_WCEMIPSV2   := $0169;
	IMAGE_FILE_MACHINE_ALPHA       := $0184;
	IMAGE_FILE_MACHINE_POWERPC     := $01F0;
	IMAGE_FILE_MACHINE_SH3         := $01a2;
	IMAGE_FILE_MACHINE_SH3E        := $01a4;
	IMAGE_FILE_MACHINE_SH4         := $01a6;
	IMAGE_FILE_MACHINE_ARM         := $01c0;
	IMAGE_FILE_MACHINE_THUMB       := $01c2;
	IMAGE_FILE_MACHINE_IA64        := $0200;
	IMAGE_FILE_MACHINE_MIPS16      := $0266;
	IMAGE_FILE_MACHINE_MIPSFPU     := $0366;
	IMAGE_FILE_MACHINE_MIPSFPU16   := $0466;
	IMAGE_FILE_MACHINE_ALPHA64     := $0284;
	IMAGE_FILE_MACHINE_AXP64       :=  IMAGE_FILE_MACHINE_ALPHA64;
	IMAGE_SIZEOF_ROM_OPTIONAL_HEADER := 56;
	IMAGE_SIZEOF_STD_OPTIONAL_HEADER := 28;
	IMAGE_SIZEOF_NT_OPTIONAL32_HEADER := 224;
	IMAGE_SIZEOF_NT_OPTIONAL64_HEADER := 240;
	IMAGE_NT_OPTIONAL_HDR32_MAGIC  := $10b;
	IMAGE_NT_OPTIONAL_HDR64_MAGIC  := $20b;
	IMAGE_ROM_OPTIONAL_HDR_MAGIC   := $107;
	IMAGE_SUBSYSTEM_UNKNOWN        := 0;
	IMAGE_SUBSYSTEM_NATIVE         := 1;
	IMAGE_SUBSYSTEM_WINDOWS_GUI    := 2;
	IMAGE_SUBSYSTEM_WINDOWS_CUI    := 3;
	IMAGE_SUBSYSTEM_OS2_CUI        := 5;
	IMAGE_SUBSYSTEM_POSIX_CUI      := 7;
	IMAGE_SUBSYSTEM_NATIVE_WINDOWS := 8;
	IMAGE_SUBSYSTEM_WINDOWS_CE_GUI := 9;
	IMAGE_DLLCHARACTERISTICS_WDM_DRIVER := $2000;
//const	IMAGE_DIRECTORY_ENTRY_EXPORT := 0;
	IMAGE_DIRECTORY_ENTRY_ARCHITECTURE := 7;
	IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT := 13;
	IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR := 14;
	IMAGE_SCN_TYPE_NO_PAD          := $00000008;
	IMAGE_SCN_CNT_CODE             := $00000020;
	IMAGE_SCN_CNT_INITIALIZED_DATA := $00000040;
	IMAGE_SCN_CNT_UNINITIALIZED_DATA := $00000080;
	IMAGE_SCN_LNK_OTHER            := $00000100;
	IMAGE_SCN_LNK_INFO             := $00000200;
	IMAGE_SCN_LNK_REMOVE           := $00000800;
	IMAGE_SCN_LNK_COMDAT           := $00001000;
	IMAGE_SCN_LNK_NRELOC_OVFL      := $01000000;
	IMAGE_SCN_NO_DEFER_SPEC_EXC    := $00004000;
	IMAGE_SCN_GPREL                := $00008000;
	IMAGE_SCN_MEM_FARDATA          := $00008000;
	IMAGE_SCN_MEM_PURGEABLE        := $00020000;
	IMAGE_SCN_MEM_16BIT            := $00020000;
	IMAGE_SCN_MEM_LOCKED           := $00040000;
	IMAGE_SCN_MEM_PRELOAD          := $00080000;
	IMAGE_SCN_ALIGN_1BYTES         := $00100000;
	IMAGE_SCN_ALIGN_2BYTES         := $00200000;
	IMAGE_SCN_ALIGN_4BYTES         := $00300000;
	IMAGE_SCN_ALIGN_8BYTES         := $00400000;
	IMAGE_SCN_ALIGN_16BYTES        := $00500000;
	IMAGE_SCN_ALIGN_32BYTES        := $00600000;
	IMAGE_SCN_ALIGN_64BYTES        := $00700000;
	IMAGE_SCN_ALIGN_128BYTES       := $00800000;
	IMAGE_SCN_ALIGN_256BYTES       := $00900000;
	IMAGE_SCN_ALIGN_512BYTES       := $00A00000;
	IMAGE_SCN_ALIGN_1024BYTES      := $00B00000;
	IMAGE_SCN_ALIGN_2048BYTES      := $00C00000;
	IMAGE_SCN_ALIGN_4096BYTES      := $00D00000;
	IMAGE_SCN_ALIGN_8192BYTES      := $00E00000;
	IMAGE_SCN_MEM_DISCARDABLE      := $02000000;
	IMAGE_SCN_MEM_NOT_CACHED       := $04000000;
	IMAGE_SCN_MEM_NOT_PAGED        := $08000000;
	IMAGE_SCN_MEM_SHARED           := $10000000;
	IMAGE_SCN_MEM_EXECUTE          := $20000000;
	IMAGE_SCN_MEM_READ             := $40000000;
	IMAGE_SCN_MEM_WRITE            := $80000000;
	IMAGE_SCN_SCALE_INDEX          := $00000001;
	IMAGE_SYM_UNDEFINED            := 0;
	IMAGE_SYM_ABSOLUTE             := 1;
	IMAGE_SYM_DEBUG                := 2;
	IMAGE_SYM_TYPE_NULL            := $0000;
	IMAGE_SYM_TYPE_VOID            := $0001;
	IMAGE_SYM_TYPE_CHAR            := $0002;
	IMAGE_SYM_TYPE_SHORT           := $0003;
	IMAGE_SYM_TYPE_INT             := $0004;
	IMAGE_SYM_TYPE_LONG            := $0005;
	IMAGE_SYM_TYPE_FLOAT           := $0006;
	IMAGE_SYM_TYPE_DOUBLE          := $0007;
	IMAGE_SYM_TYPE_STRUCT          := $0008;
	IMAGE_SYM_TYPE_UNION           := $0009;
	IMAGE_SYM_TYPE_ENUM            := $000A;
	IMAGE_SYM_TYPE_MOE             := $000B;
	IMAGE_SYM_TYPE_BYTE            := $000C;
	IMAGE_SYM_TYPE_WORD            := $000D;
	IMAGE_SYM_TYPE_UINT            := $000E;
	IMAGE_SYM_TYPE_DWORD           := $000F;
	IMAGE_SYM_TYPE_PCODE           := $8000;
	IMAGE_SYM_DTYPE_NULL           := 0;
	IMAGE_SYM_DTYPE_POINTER        := 1;
	IMAGE_SYM_DTYPE_FUNCTION       := 2;
	IMAGE_SYM_DTYPE_ARRAY          := 3;
	IMAGE_SYM_CLASS_END_OF_FUNCTION := 1;
	IMAGE_SYM_CLASS_NULL           := $0000;
	IMAGE_SYM_CLASS_AUTOMATIC      := $0001;
	IMAGE_SYM_CLASS_EXTERNAL       := $0002;
	IMAGE_SYM_CLASS_STATIC         := $0003;
	IMAGE_SYM_CLASS_REGISTER       := $0004;
	IMAGE_SYM_CLASS_EXTERNAL_DEF   := $0005;
	IMAGE_SYM_CLASS_LABEL          := $0006;
	IMAGE_SYM_CLASS_UNDEFINED_LABEL := $0007;
	IMAGE_SYM_CLASS_MEMBER_OF_STRUCT := $0008;
	IMAGE_SYM_CLASS_ARGUMENT       := $0009;
	IMAGE_SYM_CLASS_STRUCT_TAG     := $000A;
	IMAGE_SYM_CLASS_MEMBER_OF_UNION := $000B;
	IMAGE_SYM_CLASS_UNION_TAG      := $000C;
	IMAGE_SYM_CLASS_TYPE_DEFINITION := $000D;
	IMAGE_SYM_CLASS_UNDEFINED_STATIC := $000E;
	IMAGE_SYM_CLASS_ENUM_TAG       := $000F;
	IMAGE_SYM_CLASS_MEMBER_OF_ENUM := $0010;
	IMAGE_SYM_CLASS_REGISTER_PARAM := $0011;
	IMAGE_SYM_CLASS_BIT_FIELD      := $0012;
	IMAGE_SYM_CLASS_FAR_EXTERNAL   := $0044;
	IMAGE_SYM_CLASS_BLOCK          := $0064;
	IMAGE_SYM_CLASS_FUNCTION       := $0065;
	IMAGE_SYM_CLASS_END_OF_STRUCT  := $0066;
	IMAGE_SYM_CLASS_FILE           := $0067;
	IMAGE_SYM_CLASS_SECTION        := $0068;
	IMAGE_SYM_CLASS_WEAK_EXTERNAL  := $0069;
	N_BTMASK                       := $000F;
	N_TMASK                        := $0030;
	N_TMASK1                       := $00C0;
	N_TMASK2                       := $00F0;
	N_BTSHFT                       := 4;
	N_TSHIFT                       := 2;
	IMAGE_SIZEOF_AUX_SYMBOL        := 18;
	IMAGE_COMDAT_SELECT_NODUPLICATES := 1;
	IMAGE_COMDAT_SELECT_ANY        := 2;
	IMAGE_COMDAT_SELECT_SAME_SIZE  := 3;
	IMAGE_COMDAT_SELECT_EXACT_MATCH := 4;
	IMAGE_COMDAT_SELECT_ASSOCIATIVE := 5;
	IMAGE_COMDAT_SELECT_LARGEST    := 6;
	IMAGE_COMDAT_SELECT_NEWEST     := 7;
	IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY := 1;
	IMAGE_WEAK_EXTERN_SEARCH_LIBRARY := 2;
	IMAGE_WEAK_EXTERN_SEARCH_ALIAS := 3;
	IMAGE_SIZEOF_RELOCATION        := 10;
	IMAGE_REL_I386_ABSOLUTE        := $0000;
	IMAGE_REL_I386_DIR16           := $0001;
	IMAGE_REL_I386_REL16           := $0002;
	IMAGE_REL_I386_DIR32           := $0006;
	IMAGE_REL_I386_DIR32NB         := $0007;
	IMAGE_REL_I386_SEG12           := $0009;
	IMAGE_REL_I386_SECTION         := $000A;
	IMAGE_REL_I386_SECREL          := $000B;
	IMAGE_REL_I386_REL32           := $0014;
	IMAGE_SIZEOF_LINENUMBER        := 6;
	IMAGE_SIZEOF_BASE_RELOCATION   := 8;
	IMAGE_REL_BASED_ABSOLUTE       := 0;
	IMAGE_REL_BASED_HIGH           := 1;
	IMAGE_REL_BASED_LOW            := 2;
	IMAGE_REL_BASED_HIGHLOW        := 3;
	IMAGE_REL_BASED_HIGHADJ        := 4;
	IMAGE_REL_BASED_MIPS_JMPADDR   := 5;
	IMAGE_REL_BASED_SECTION        := 6;
	IMAGE_REL_BASED_REL32          := 7;
	IMAGE_REL_BASED_MIPS_JMPADDR16 := 9;
	IMAGE_REL_BASED_IA64_IMM64     := 9;
	IMAGE_REL_BASED_DIR64          := 10;
	IMAGE_REL_BASED_HIGH3ADJ       := 11;
	IMAGE_ARCHIVE_START_SIZE       := 8;
	IMAGE_ARCHIVE_START            :=  "!<arch>" #$a;
	IMAGE_ARCHIVE_END              :=  "`"  #$a;
	IMAGE_ARCHIVE_PAD              :=  "" #$a;
	IMAGE_ARCHIVE_LINKER_MEMBER    :=  "/               ";
	IMAGE_ARCHIVE_LONGNAMES_MEMBER :=  "//              ";
	IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR := 60;
	IMAGE_ORDINAL_FLAG32           := $80000000;
	IMAGE_RESOURCE_NAME_IS_STRING  := $80000000;
	IMAGE_RESOURCE_DATA_IS_DIRECTORY := $80000000;
	IMAGE_DEBUG_TYPE_UNKNOWN       := 0;
	IMAGE_DEBUG_TYPE_COFF          := 1;
	IMAGE_DEBUG_TYPE_CODEVIEW      := 2;
	IMAGE_DEBUG_TYPE_FPO           := 3;
	IMAGE_DEBUG_TYPE_MISC          := 4;
	IMAGE_DEBUG_TYPE_EXCEPTION     := 5;
	IMAGE_DEBUG_TYPE_FIXUP         := 6;
	IMAGE_DEBUG_TYPE_OMAP_TO_SRC   := 7;
	IMAGE_DEBUG_TYPE_OMAP_FROM_SRC := 8;
	IMAGE_DEBUG_TYPE_BORLAND       := 9;
	IMAGE_DEBUG_TYPE_RESERVED10    := 10;
	FRAME_FPO                      := 0;
	FRAME_TRAP                     := 1;
	FRAME_TSS                      := 2;
	FRAME_NONFPO                   := 3;
	SIZEOF_RFPO_DATA               := 16;
	IMAGE_DEBUG_MISC_EXENAME       := 1;
	IMAGE_SEPARATE_DEBUG_SIGNATURE := $4944;
	IMAGE_SEPARATE_DEBUG_FLAGS_MASK := $8000;
	IMAGE_SEPARATE_DEBUG_MISMATCH  := $8000;
	HEAP_NO_SERIALIZE              := $00000001;
	HEAP_GROWABLE                  := $00000002;
	HEAP_GENERATE_EXCEPTIONS       := $00000004;
	HEAP_ZERO_MEMORY               := $00000008;
	HEAP_REALLOC_IN_PLACE_ONLY     := $00000010;
	HEAP_TAIL_CHECKING_ENABLED     := $00000020;
	HEAP_FREE_CHECKING_ENABLED     := $00000040;
	HEAP_DISABLE_COALESCE_ON_FREE  := $00000080;
	HEAP_CREATE_ALIGN_16           := $00010000;
	HEAP_CREATE_ENABLE_TRACING     := $00020000;
	HEAP_MAXIMUM_TAG               := $0FFF;
	HEAP_PSEUDO_TAG_FLAG           := $8000;
	HEAP_TAG_SHIFT                 := 18;
	IS_TEXT_UNICODE_ASCII16        := $0001;
	IS_TEXT_UNICODE_REVERSE_ASCII16 := $0010;
	IS_TEXT_UNICODE_STATISTICS     := $0002;
	IS_TEXT_UNICODE_REVERSE_STATISTICS := $0020;
	IS_TEXT_UNICODE_CONTROLS       := $0004;
	IS_TEXT_UNICODE_REVERSE_CONTROLS := $0040;
	IS_TEXT_UNICODE_SIGNATURE      := $0008;
	IS_TEXT_UNICODE_REVERSE_SIGNATURE := $0080;
	IS_TEXT_UNICODE_ILLEGAL_CHARS  := $0100;
	IS_TEXT_UNICODE_ODD_LENGTH     := $0200;
	IS_TEXT_UNICODE_DBCS_LEADBYTE  := $0400;
	IS_TEXT_UNICODE_NULL_BYTES     := $1000;
	IS_TEXT_UNICODE_UNICODE_MASK   := $000F;
	IS_TEXT_UNICODE_REVERSE_MASK   := $00F0;
	IS_TEXT_UNICODE_NOT_UNICODE_MASK := $0F00;
	IS_TEXT_UNICODE_NOT_ASCII_MASK := $0F000;
	COMPRESSION_FORMAT_NONE        :=  ($0);
	COMPRESSION_FORMAT_DEFAULT     :=  ($1);
	COMPRESSION_FORMAT_LZNT1       :=  ($2);
	COMPRESSION_ENGINE_STANDARD    :=  ($0);
	COMPRESSION_ENGINE_MAXIMUM     :=  ($100);
	MESSAGE_RESOURCE_UNICODE       := $0001;
	RTL_CRITSECT_TYPE              := 0;
	RTL_RESOURCE_TYPE              := 1;
	SEF_DACL_AUTO_INHERIT          := $1;
	SEF_SACL_AUTO_INHERIT          := $2;
	SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT := $4;
	SEF_AVOID_PRIVILEGE_CHECK      := $8;
	WT_EXECUTEDEFAULT              := $00000000;
	WT_EXECUTEINIOTHREAD           := $00000001;
	WT_EXECUTEINUITHREAD           := $00000002;
	WT_EXECUTEINWAITTHREAD         := $00000004;
	WT_EXECUTEDELETEWAIT           := $00000008;
	WT_EXECUTEINLONGTHREAD         := $00000010;
	EVENTLOG_SEQUENTIAL_READ       := $0001;
	EVENTLOG_SEEK_READ             := $0002;
	EVENTLOG_FORWARDS_READ         := $0004;
	EVENTLOG_BACKWARDS_READ        := $0008;
	EVENTLOG_SUCCESS               := $0000;
	EVENTLOG_ERROR_TYPE            := $0001;
	EVENTLOG_WARNING_TYPE          := $0002;
	EVENTLOG_INFORMATION_TYPE      := $0004;
	EVENTLOG_AUDIT_SUCCESS         := $0008;
	EVENTLOG_AUDIT_FAILURE         := $0010;
	EVENTLOG_START_PAIRED_EVENT    := $0001;
	EVENTLOG_END_PAIRED_EVENT      := $0002;
	EVENTLOG_END_ALL_PAIRED_EVENTS := $0004;
	EVENTLOG_PAIRED_EVENT_ACTIVE   := $0008;
	EVENTLOG_PAIRED_EVENT_INACTIVE := $0010;
	REG_OPTION_OPEN_LINK           :=  ($8);
//const	REG_CREATED_NEW_KEY     :=  ($1);
	REG_NO_LAZY_FLUSH              :=  ($4);
	SERVICE_KERNEL_DRIVER          := $00000001;
	SERVICE_FILE_SYSTEM_DRIVER     := $00000002;
	SERVICE_ADAPTER                := $00000004;
	SERVICE_RECOGNIZER_DRIVER      := $00000008;
	SERVICE_DRIVER                 :=  (SERVICE_KERNEL_DRIVER + SERVICE_FILE_SYSTEM_DRIVER + SERVICE_RECOGNIZER_DRIVER);
	SERVICE_WIN32_OWN_PROCESS      := $00000010;
	SERVICE_WIN32_SHARE_PROCESS    := $00000020;
	SERVICE_WIN32                  :=  (SERVICE_WIN32_OWN_PROCESS + SERVICE_WIN32_SHARE_PROCESS);
	SERVICE_INTERACTIVE_PROCESS    := $00000100;
	SERVICE_TYPE_ALL               :=  (SERVICE_WIN32+SERVICE_ADAPTER + SERVICE_DRIVER + SERVICE_INTERACTIVE_PROCESS);
	SERVICE_BOOT_START             := $00000000;
	SERVICE_SYSTEM_START           := $00000001;
	SERVICE_AUTO_START             := $00000002;
	SERVICE_DEMAND_START           := $00000003;
	SERVICE_DISABLED               := $00000004;
	SERVICE_ERROR_IGNORE           := $00000000;
	SERVICE_ERROR_NORMAL           := $00000001;
	SERVICE_ERROR_SEVERE           := $00000002;
	SERVICE_ERROR_CRITICAL         := $00000003;
	TAPE_ERASE_SHORT               := 0;
	TAPE_ERASE_LONG                := 1;
	TAPE_LOAD                      := 0;
	TAPE_UNLOAD                    := 1;
	TAPE_TENSION                   := 2;
	TAPE_LOCK                      := 3;
	TAPE_UNLOCK                    := 4;
	TAPE_FORMAT                    := 5;
	TAPE_SETMARKS                  := 0;
	TAPE_FILEMARKS                 := 1;
	TAPE_SHORT_FILEMARKS           := 2;
	TAPE_LONG_FILEMARKS            := 3;
	TAPE_ABSOLUTE_POSITION         := 0;
	TAPE_LOGICAL_POSITION          := 1;
	TAPE_PSEUDO_LOGICAL_POSITION   := 2;
	TAPE_REWIND                    := 0;
	TAPE_ABSOLUTE_BLOCK            := 1;
	TAPE_LOGICAL_BLOCK             := 2;
	TAPE_PSEUDO_LOGICAL_BLOCK      := 3;
	TAPE_SPACE_END_OF_DATA         := 4;
	TAPE_SPACE_RELATIVE_BLOCKS     := 5;
	TAPE_SPACE_FILEMARKS           := 6;
	TAPE_SPACE_SEQUENTIAL_FMKS     := 7;
	TAPE_SPACE_SETMARKS            := 8;
	TAPE_SPACE_SEQUENTIAL_SMKS     := 9;
	TAPE_DRIVE_FIXED               := $00000001;
	TAPE_DRIVE_SELECT              := $00000002;
	TAPE_DRIVE_INITIATOR           := $00000004;
	TAPE_DRIVE_ERASE_SHORT         := $00000010;
	TAPE_DRIVE_ERASE_LONG          := $00000020;
	TAPE_DRIVE_ERASE_BOP_ONLY      := $00000040;
	TAPE_DRIVE_ERASE_IMMEDIATE     := $00000080;
	TAPE_DRIVE_TAPE_CAPACITY       := $00000100;
	TAPE_DRIVE_TAPE_REMAINING      := $00000200;
	TAPE_DRIVE_FIXED_BLOCK         := $00000400;
	TAPE_DRIVE_VARIABLE_BLOCK      := $00000800;
	TAPE_DRIVE_WRITE_PROTECT       := $00001000;
	TAPE_DRIVE_EOT_WZ_SIZE         := $00002000;
	TAPE_DRIVE_ECC                 := $00010000;
	TAPE_DRIVE_COMPRESSION         := $00020000;
	TAPE_DRIVE_PADDING             := $00040000;
	TAPE_DRIVE_REPORT_SMKS         := $00080000;
	TAPE_DRIVE_GET_ABSOLUTE_BLK    := $00100000;
	TAPE_DRIVE_GET_LOGICAL_BLK     := $00200000;
	TAPE_DRIVE_SET_EOT_WZ_SIZE     := $00400000;
	TAPE_DRIVE_EJECT_MEDIA         := $01000000;
	TAPE_DRIVE_CLEAN_REQUESTS      := $02000000;
	TAPE_DRIVE_SET_CMP_BOP_ONLY    := $04000000;
	TAPE_DRIVE_RESERVED_BIT        := $80000000;
	TAPE_DRIVE_LOAD_UNLOAD         := $80000001;
	TAPE_DRIVE_TENSION             := $80000002;
	TAPE_DRIVE_LOCK_UNLOCK         := $80000004;
	TAPE_DRIVE_REWIND_IMMEDIATE    := $80000008;
	TAPE_DRIVE_SET_BLOCK_SIZE      := $80000010;
	TAPE_DRIVE_LOAD_UNLD_IMMED     := $80000020;
	TAPE_DRIVE_TENSION_IMMED       := $80000040;
	TAPE_DRIVE_LOCK_UNLK_IMMED     := $80000080;
	TAPE_DRIVE_SET_ECC             := $80000100;
	TAPE_DRIVE_SET_COMPRESSION     := $80000200;
	TAPE_DRIVE_SET_PADDING         := $80000400;
	TAPE_DRIVE_SET_REPORT_SMKS     := $80000800;
	TAPE_DRIVE_ABSOLUTE_BLK        := $80001000;
	TAPE_DRIVE_ABS_BLK_IMMED       := $80002000;
	TAPE_DRIVE_LOGICAL_BLK         := $80004000;
	TAPE_DRIVE_LOG_BLK_IMMED       := $80008000;
	TAPE_DRIVE_END_OF_DATA         := $80010000;
	TAPE_DRIVE_RELATIVE_BLKS       := $80020000;
	TAPE_DRIVE_FILEMARKS           := $80040000;
	TAPE_DRIVE_SEQUENTIAL_FMKS     := $80080000;
	TAPE_DRIVE_SETMARKS            := $80100000;
	TAPE_DRIVE_SEQUENTIAL_SMKS     := $80200000;
	TAPE_DRIVE_REVERSE_POSITION    := $80400000;
	TAPE_DRIVE_SPACE_IMMEDIATE     := $80800000;
	TAPE_DRIVE_WRITE_SETMARKS      := $81000000;
	TAPE_DRIVE_WRITE_FILEMARKS     := $82000000;
	TAPE_DRIVE_WRITE_SHORT_FMKS    := $84000000;
	TAPE_DRIVE_WRITE_LONG_FMKS     := $88000000;
	TAPE_DRIVE_WRITE_MARK_IMMED    := $090000000;
	TAPE_DRIVE_FORMAT              := $0A0000000;
	TAPE_DRIVE_FORMAT_IMMEDIATE    := $0C0000000;
	TAPE_DRIVE_HIGH_FEATURES       := $80000000;
	IMPORT_OBJECT_HDR_SIG2         := $0ffff;
	TAPE_FIXED_PARTITIONS          := 0;
	TAPE_SELECT_PARTITIONS         := 1;
	TAPE_INITIATOR_PARTITIONS      := 2;




	DriverType                     :=  SERVICE_KERNEL_DRIVER;
	FileSystemType                 :=  SERVICE_FILE_SYSTEM_DRIVER;
	Win32ServiceOwnProcess         :=  SERVICE_WIN32_OWN_PROCESS;
	Win32ServiceShareProcess       :=  SERVICE_WIN32_SHARE_PROCESS;
	AdapterType                    :=  SERVICE_ADAPTER;
	RecognizerType                 :=  SERVICE_RECOGNIZER_DRIVER;

	BootLoad                       :=  SERVICE_BOOT_START;
	SystemLoad                     :=  SERVICE_SYSTEM_START;
	AutoLoad                       :=  SERVICE_AUTO_START;
	DemandLoad                     :=  SERVICE_DEMAND_START;
	DisableLoad                    :=  SERVICE_DISABLED;

	IgnoreError                    :=  SERVICE_ERROR_IGNORE;
	NormalError                    :=  SERVICE_ERROR_NORMAL;
	SevereError                    :=  SERVICE_ERROR_SEVERE;
	CriticalError                  :=  SERVICE_ERROR_CRITICAL;

	IMPORT_OBJECT_CODE             := 0;
	IMPORT_OBJECT_DATA             := 1;
	IMPORT_OBJECT_CONST            := 2;

	IMPORT_OBJECT_ORDINAL          :=  0 ;	//Import by |;
	IMPORT_OBJECT_NAME             :=  1 ; 		//Import name == public symbol name.;
	IMPORT_OBJECT_NAME_NO_PREFIX   :=  2 ; //Import name == public symbol name skipping leading ?, @, | optionally _.;
	IMPORT_OBJECT_NAME_UNDECORATE  :=  3 ; //Import name == public symbol name skipping leading ?, @, | optionally _;





	MAXPROPPAGES                   := 100;
	PSP_DEFAULT                    := $00000000;
	PSP_DLGINDIRECT                := $00000001;
	PSP_USEDWORD                   := $00000002;
	PSP_USEICONID                  := $00000004;
	PSP_USETITLE                   := $00000008;
	PSP_RTLREADING                 := $00000010;

	PSP_HASHELP                    := $00000020;
	PSP_USEREFPARENT               := $00000040;
	PSP_USECALLBACK                := $00000080;
	PSP_PREMATURE                  := $00000400;

	PSP_HIDEHEADER                 := $00000800;
	PSP_USEHEADERTITLE             := $00001000;
	PSP_USEHEADERSUBTITLE          := $00002000;

	PSPCB_RELEASE                  := 1;
	PSPCB_CREATE                   := 2;


	LT_DONT_CARE                   := 0;
	LT_LOWEST_LATENCY              := 1;

	TokenPrimary                   := 1;
	TokenImpersonation             := 2;

	TokenRestrictedSids            := 11;
	TokenSessionId                 := 12;

	AuditEventObjectAccess         := 0;
	AuditEventDirectoryServiceAccess := 1;


	SidTypeComputer                := 9;


	CHECKSUM_SUCCESS               := 0;
	CHECKSUM_OPEN_FAILURE          := 1;
	CHECKSUM_MAP_FAILURE           := 2;
	CHECKSUM_MAPVIEW_FAILURE       := 3;
	CHECKSUM_UNICODE_FAILURE       := 4;
	SPLITSYM_REMOVE_PRIVATE        := $000000001;
	SPLITSYM_EXTRACT_ALL           := $000000002;
	SPLITSYM_SYMBOLPATH_IS_SRC     := $000000004;
	BIND_NO_BOUND_IMPORTS          := $000000001;
	BIND_NO_UPDATE                 := $000000002;
	BIND_ALL_IMAGES                := $000000004;
	BIND_CACHE_IMPORT_DLLS         := $000000008;

	IMAGE_SEPARATION               := 65536;

	UNDNAME_COMPLETE               := $00000;
	UNDNAME_NO_LEADING_UNDERSCORES := $00001;
	UNDNAME_NO_MS_KEYWORDS         := $00002;
	UNDNAME_NO_FUNCTION_RETURNS    := $00004;
	UNDNAME_NO_ALLOCATION_MODEL    := $00008;
	UNDNAME_NO_ALLOCATION_LANGUAGE := $00010;
	UNDNAME_NO_MS_THISTYPE         := $00020;
	UNDNAME_NO_CV_THISTYPE         := $00040;
	UNDNAME_NO_THISTYPE            := $00060;
	UNDNAME_NO_ACCESS_SPECIFIERS   := $00080;
	UNDNAME_NO_THROW_SIGNATURES    := $00100;
	UNDNAME_NO_MEMBER_TYPE         := $00200;
	UNDNAME_NO_RETURN_UDT_MODEL    := $00400;
	UNDNAME_32_BIT_DECODE          := $00800;
	UNDNAME_NAME_ONLY              := $01000;
	UNDNAME_NO_ARGUMENTS           := $02000;
	UNDNAME_NO_SPECIAL_SYMS        := $04000;
	SYMF_OMAP_GENERATED            := $000000001;
	SYMF_OMAP_MODIFIED             := $000000002;
	CBA_DEFERRED_SYMBOL_LOAD_START := $000000001;
	CBA_DEFERRED_SYMBOL_LOAD_COMPLETE := $000000002;
	CBA_DEFERRED_SYMBOL_LOAD_FAILURE := $000000003;
	CBA_SYMBOLS_UNLOADED           := $000000004;
	CBA_DUPLICATE_SYMBOL           := $000000005;
	SYMOPT_CASE_INSENSITIVE        := $000000001;
	SYMOPT_UNDNAME                 := $000000002;
	SYMOPT_DEFERRED_LOADS          := $000000004;
	SYMOPT_NO_CPP                  := $000000008;
	SYMOPT_LOAD_LINES              := $000000010;
	SYMOPT_OMAP_FIND_NEAREST       := $000000020;
	CERT_PE_IMAGE_DIGEST_DEBUG_INFO := $001;
	CERT_PE_IMAGE_DIGEST_RESOURCES := $002;
	CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO := $004;
	CERT_PE_IMAGE_DIGEST_NON_PE_INFO := $008;
	CERT_SECTION_TYPE_ANY          := $0FF;

	AddrMode1616                   := 0;
	AddrMode1632                   := 1;
	AddrModeReal                   := 2;
	AddrModeFlat                   := 3;
//; SYM_TYPE enum
	SymNone                        := 0;
	SymCoff                        := 1;
	SymCv                          := 2;
	SymPdb                         := 3;
	SymExport                      := 4;
	SymDeferred                    := 5;
	SymSym                         := 6;
	ExceptionContinueExecution     := 0;
	ExceptionContinueSearch        := 1;
	ExceptionNestedException       := 2;
	ExceptionCollidedUnwind        := 3;



	DIFFERENCE                     := 11;
	RT_GROUP_CURSOR                :=  RT_CURSOR + DIFFERENCE;
	RT_GROUP_ICON                  :=  RT_ICON + DIFFERENCE;
	RT_VERSION                     := 16;
	RT_DLGINCLUDE                  := 17;
	RT_PLUGPLAY                    := 19;
	RT_VXD                         := 20;
	RT_ANICURSOR                   := 21;
	RT_ANIICON                     := 22;
	RT_HTML                        := 23;
	AW_HOR_POSITIVE                := $1;
	AW_HOR_NEGATIVE                := $2;
	AW_VER_POSITIVE                := $4;
	AW_VER_NEGATIVE                := $8;
	AW_CENTER                      := $10;
	AW_HIDE                        := $10000;
	AW_ACTIVATE                    := $20000;
	AW_SLIDE                       := $40000;
	AW_BLEND                       := $80000;
	VK_KANA                        := $15;
	VK_HANGEUL                     := $15;
	VK_HANGUL                      := $15;
	VK_JUNJA                       := $17;
	VK_FINAL                       := $18;
	VK_HANJA                       := $19;
	VK_KANJI                       := $19;
	VK_CONVERT                     := $1C;
	VK_NONCONVERT                  := $1D;
	VK_ACCEPT                      := $1E;
	VK_MODECHANGE                  := $1F;
	VK_LWIN                        := $5B;
	VK_RWIN                        := $5C;
	VK_APPS                        := $5D;
	WH_CALLWNDPROCRET              := 12;
	WH_KEYBOARD_LL                 := 13;
	WH_MOUSE_LL                    := 14;
	WH_MINHOOK                     :=  WH_MIN;
	WH_MAXHOOK                     :=  WH_MAX;
	MSGF_DIALOGBOX                 := 0;
	MSGF_MESSAGEBOX                := 1;
	MSGF_MENU                      := 2;
	MSGF_SCROLLBAR                 := 5;
	MSGF_NEXTWINDOW                := 6;
	MSGF_MAX                       := 8;
	MSGF_USER                      := 4096;
	HSHELL_WINDOWACTIVATED         := 4;
	HSHELL_GETMINRECT              := 5;
	HSHELL_REDRAW                  := 6;
	HSHELL_TASKMAN                 := 7;
	HSHELL_LANGUAGE                := 8;
	HSHELL_ACCESSIBILITYSTATE      := 11;
	ACCESS_STICKYKEYS              := 1;
	ACCESS_FILTERKEYS              := 2;
	ACCESS_MOUSEKEYS               := 3;
	LLKHF_EXTENDED                 := 1;
	LLKHF_INJECTED                 := $10;
	LLKHF_ALTDOWN                  := $20;
	LLKHF_UP                       := $80;
	LLMHF_INJECTED                 := 1;
	KLF_REPLACELANG                := $10;
	KLF_NOTELLSHELL                := $80;
	KLF_SETFORPROCESS              := $100;
	GMMP_USE_DISPLAY_POINTS        := 1;
	GMMP_USE_DRIVER_POINTS         := 2;
	DESKTOP_SWITCHDESKTOP          := $100;
	DF_ALLOWOTHERACCOUNTHOOK       := 1;
	WSF_VISIBLE                    := 1;
	UOI_FLAGS                      := 1;
	UOI_NAME                       := 2;
	UOI_TYPE                       := 3;
	UOI_USER_SID                   := 4;
	GCL_HICONSM                    := 34;
	NFR_ANSI                       := 1;
	NFR_UNICODE                    := 2;
	NF_QUERY                       := 3;
	NF_REQUERY                     := 4;
	WM_MENURBUTTONUP               := $122;
	WM_MENUDRAG                    := $0123;
	WM_MENUGETOBJECT               := $124;
	WM_UNINITMENUPOPUP             := $125;
	WM_MENUCOMMAND                 := $126;
	WM_MOUSEWHEEL                  := $20A;
	WHEEL_DELTA                    := 120;
	WHEEL_PAGESCROLL               :=  uns32( $FFFF_FFFF );
	WM_NEXTMENU                    := $213;
	WM_SIZING                      := $214;
	WM_CAPTURECHANGED              := $215;
	WM_MOVING                      := $216;
	WM_POWERBROADCAST              := $218;
	PBT_APMQUERYSUSPEND            := 0;
	PBT_APMQUERYSTANDBY            := 1;
	PBT_APMQUERYSUSPENDFAILED      := 2;
	PBT_APMQUERYSTANDBYFAILED      := 3;
	PBT_APMSUSPEND                 := 4;
	PBT_APMSTANDBY                 := 5;
	PBT_APMRESUMECRITICAL          := 6;
	PBT_APMRESUMESUSPEND           := 7;
	PBT_APMRESUMESTANDBY           := 8;
	PBTF_APMRESUMEFROMFAILURE      := 1;
	PBT_APMBATTERYLOW              := 9;
	PBT_APMPOWERSTATUSCHANGE       := $0A;
	PBT_APMOEMEVENT                := $0B;
	PBT_APMRESUMEAUTOMATIC         := $12;
	WM_DEVICECHANGE                := $219;
	WM_ENTERSIZEMOVE               := $231;
	WM_EXITSIZEMOVE                := $232;
	WM_MOUSEHOVER                  := $2A1;
	WM_MOUSELEAVE                  := $2A3;
	WM_HANDHELDFIRST               := $358;
	WM_HANDHELDLAST                := $35F;
	WM_AFXFIRST                    := $360;
	WM_AFXLAST                     := $37F;
	WM_APP                         := $8000;
	WMSZ_LEFT                      := 1;
	WMSZ_RIGHT                     := 2;
	WMSZ_TOP                       := 3;
	WMSZ_TOPLEFT                   := 4;
	WMSZ_TOPRIGHT                  := 5;
	WMSZ_BOTTOM                    := 6;
	WMSZ_BOTTOMLEFT                := 7;
	WMSZ_BOTTOMRIGHT               := 8;
	ICON_SMALL                     := 0;
	ICON_BIG                       := 1;
	TME_HOVER                      := 1;
	TME_LEAVE                      := 2;
	TME_QUERY                      := $40000000;
	TME_CANCEL                     := $80000000;
	DC_ACTIVE                      := 1;
	DC_SMALLCAP                    := 2;
	DC_ICON                        := 4;
	DC_TEXT                        := 8;
	DC_INBUTTON                    := $10;
	DC_GRADIENT                    := $20;
	IDANI_OPEN                     := 1;
	IDANI_CLOSE                    := 2;
	IDANI_CAPTION                  := 3;
	ENDSESSION_LOGOFF              := $80000000;
	BSM_ALLCOMPONENTS              := 0;
	BSM_VXDS                       := 1;
	BSM_NETDRIVER                  := 2;
	BSM_INSTALLABLEDRIVERS         := 4;
	BSM_APPLICATIONS               := 8;
	BSM_ALLDESKTOPS                := $10;
	BSF_QUERY                      := 1;
	BSF_IGNORECURRENTTASK          := 2;
	BSF_FLUSHDISK                  := 4;
	BSF_NOHANG                     := 8;
	BSF_POSTMESSAGE                := $10;
	BSF_FORCEIFHUNG                := $20;
	BSF_NOTIMEOUTIFNOTHUNG         := $40;
	BROADCAST_QUERY_DENY           := $424D5144;
	DEVICE_NOTIFY_WINDOW_HANDLE    := 0;
	ISMEX_NOSEND                   := 0;
	ISMEX_SEND                     := $1;
	ISMEX_NOTIFY                   := $2;
	ISMEX_CALLBACK                 := $4;
	ISMEX_REPLIED                  := $8;
	FLASHW_STOP                    := 0;
	FLASHW_CAPTION                 := 1;
	FLASHW_TRAY                    := 2;
	FLASHW_ALL                     :=  FLASHW_CAPTION + FLASHW_TRAY;
	FLASHW_TIMER                   := 4;
	FLASHW_TIMERNOFG               := $0C;
	INPUT_MOUSE                    := 0;
	INPUT_KEYBOARD                 := 1;
	INPUT_HARDWARE                 := 2;
	MWMO_WAITALL                   := 1;
	MWMO_ALERTABLE                 := 2;
	MWMO_INPUTAVAILABLE            := 4;
	MNC_IGNORE                     := 0;
	MNC_CLOSE                      := 1;
	MNC_EXECUTE                    := 2;
	MNC_SELECT                     := 3;
	MNS_NOCHECK                    := $80000000;
	MNS_MODELESS                   := $40000000;
	MNS_DRAGDROP                   := $20000000;
	MNS_AUTODISMISS                := $10000000;
	MNS_NOTIFYBYPOS                := $08000000;
	MNS_CHECKORBMP                 := $04000000;
	MIM_MAXHEIGHT                  := 1;
	MIM_BACKGROUND                 := 2;
	MIM_HELPID                     := 4;
	MIM_MENUDATA                   := 8;
	MIM_STYLE                      := $10;
	MIM_APPLYTOSUBMENUS            := $80000000;
	MND_CONTINUE                   := 0;
	MND_ENDMENU                    := 1;
	MNGOF_GAP                      := 3;
	MNGO_NOINTERFACE               := 0;
	MNGO_NOERROR                   := 1;
	MIIM_STATE                     := 1;
	MIIM_ID                        := 2;
	MIIM_SUBMENU                   := 4;
	MIIM_CHECKMARKS                := 8;
	MIIM_TYPE                      := $10;
	MIIM_DATA                      := $20;
	MIIM_STRING                    := $40;
	MIIM_BITMAP                    := $80;
	MIIM_FTYPE                     := $100;
	HBMMENU_CALLBACK               := 1;
	HBMMENU_SYSTEM                 := 1;
	HBMMENU_MBAR_RESTORE           := 2;
	HBMMENU_MBAR_MINIMIZE          := 3;
	HBMMENU_MBAR_CLOSE             := 5;
	HBMMENU_MBAR_CLOSE_D           := 6;
	HBMMENU_MBAR_MINIMIZE_D        := 7;
	HBMMENU_POPUP_CLOSE            := 8;
	HBMMENU_POPUP_RESTORE          := 9;
	HBMMENU_POPUP_MAXIMIZE         := 10;
	HBMMENU_POPUP_MINIMIZE         := 11;
	GMDI_USEDISABLED               := 1;
	GMDI_GOINTOPOPUPS              := 2;
	DOF_EXECUTABLE                 := $8001;
	DOF_DOCUMENT                   := $8002;
	DOF_DIRECTORY                  := $8003;
	DOF_MULTIPLE                   := $8004;
	DOF_PROGMAN                    := 1;
	DOF_SHELLDATA                  := 2;
	DO_DROPFILE                    := $454C4946;
	DO_PRINTFILE                   := $544E5250;
	DST_COMPLEX                    := 0;
	DST_TEXT                       := 1;
	DST_PREFIXTEXT                 := 2;
	DST_ICON                       := 3;
	DST_BITMAP                     := 4;
	DSS_NORMAL                     := 0;
	DSS_UNION                      := $10;
	DSS_DISABLED                   := $20;
	DSS_MONO                       := $80;
	DSS_RIGHT                      := $8000;
	CUDR_NORMAL                    := 0;
	CUDR_NOSNAPTOGRID              := 1;
	CUDR_NORESOLVEPOSITIONS        := 2;
	CUDR_NOCLOSEGAPS               := 4;
	CUDR_NEGATIVECOORDS            := 8;
	CUDR_NOPRIMARY                 := $10;
	CWP_ALL                        := 0;
	CWP_SKIPINVISIBLE              := 1;
	CWP_SKIPDISABLED               := 2;
	CWP_SKIPTRANSPARENT            := 4;
	MFT_STRING                     :=  MF_STRING;
	MFT_BITMAP                     :=  MF_BITMAP;
	MFT_MENUBARBREAK               :=  MF_MENUBARBREAK;
	MFT_MENUBREAK                  :=  MF_MENUBREAK;
	MFT_OWNERDRAW                  :=  MF_OWNERDRAW;
	MFT_RADIOCHECK                 := $200;
	MFT_SEPARATOR                  :=  MF_SEPARATOR;
	MFT_RIGHTORDER                 := $2000;
	MFT_RIGHTJUSTIFY               :=  MF_RIGHTJUSTIFY;
	MFS_GRAYED                     := 3;
	MFS_DISABLED                   :=  MFS_GRAYED;
	MFS_CHECKED                    :=  MF_CHECKED;
	MFS_HILITE                     :=  MF_HILITE;
	MFS_ENABLED                    :=  MF_ENABLED;
	MFS_UNCHECKED                  :=  MF_UNCHECKED;
	MFS_UNHILITE                   :=  MF_UNHILITE;
	MFS_DEFAULT                    :=  MF_DEFAULT;
	MFS_MASK                       := $108B;
	MFS_HOTTRACKDRAWN              := $10000000;
	MFS_CACHEDBMP                  := $20000000;
	MFS_BOTTOMGAPDROP              := $40000000;
	MFS_TOPGAPDROP                 := $80000000;
	MFS_GAPDROP                    := $0C0000000;
	LR_DEFAULTCOLOR                := 0;
	LR_MONOCHROME                  := 1;
	LR_COLOR                       := 2;
	LR_COPYRETURNORG               := 4;
	LR_COPYDELETEORG               := 8;
	LR_LOADFROMFILE                := $10;
	LR_LOADTRANSPARENT             := $20;
	LR_DEFAULTSIZE                 := $40;
	LR_VGACOLOR                    := $80;
	LR_LOADMAP3DCOLORS             := $1000;
	LR_CREATEDIBSECTION            := $2000;
	LR_COPYFROMRESOURCE            := $4000;
	LR_SHARED                      := $8000;
	DI_MASK                        := 1;
	DI_IMAGE                       := 2;
	DI_NORMAL                      := 3;
	DI_COMPAT                      := 4;
	DI_DEFAULTSIZE                 := 8;
	RES_ICON                       := 1;
	RES_CURSOR                     := 2;
	EC_LEFTMARGIN                  := 1;
	EC_RIGHTMARGIN                 := 2;
	EC_USEFONTINFO                 := $0ffff;
	EMSIS_COMPOSITIONSTRING        := 1;
	EIMES_GETCOMPSTRATONCE         := 1;
	EIMES_CANCELCOMPSTRINFOCUS     := 2;
	EIMES_COMPLETECOMPSTRKILLFOCUS := 4;
	SS_OWNERDRAW                   := $0D;
	SS_BITMAP                      := $0E;
	SS_ENHMETAFILE                 := $0F;
	SS_ETCHEDHORZ                  := $10;
	SS_ETCHEDVERT                  := $11;
	SS_ETCHEDFRAME                 := $12;
	SS_TYPEMASK                    := $1F;
	SS_NOTIFY                      := $100;
	SS_CENTERIMAGE                 := $200;
	SS_RIGHTJUST                   := $400;
	SS_REALSIZEIMAGE               := $800;
	SS_SUNKEN                      := $1000;
	SS_ENDELLIPSIS                 := $4000;
	SS_PATHELLIPSIS                := $8000;
	SS_WORDELLIPSIS                := $0C000;
	SS_ELLIPSISMASK                := $0C000;
	STM_SETIMAGE                   := $172;
	STM_GETIMAGE                   := $173;
	STN_CLICKED                    := 0;
	STN_DBLCLK                     := 1;
	STN_ENABLE                     := 2;
	STN_DISABLE                    := 3;
	DM_REPOSITION                  :=  WM_USER+2;
	LB_INITSTORAGE                 := $1A8;
	LB_ITEMFROMPOINT               := $1A9;
	LBS_NOSEL                      := $4000;
	CBS_UPPERCASE                  := $2000;
	CBS_LOWERCASE                  := $4000;
	GR_GDIOBJECTS                  := 0;
	GR_USEROBJECTS                 := 1;
	SPI_SETSCREENSAVERRUNNING      := 97;
	SPI_GETMOUSEHOVERWIDTH         := 98;
	SPI_SETMOUSEHOVERWIDTH         := 99;
	SPI_GETMOUSEHOVERHEIGHT        := 100;
	SPI_SETMOUSEHOVERHEIGHT        := 101;
	SPI_GETMOUSEHOVERTIME          := 102;
	SPI_SETMOUSEHOVERTIME          := 103;
	SPI_GETWHEELSCROLLLINES        := 104;
	SPI_SETWHEELSCROLLLINES        := 105;
	SPI_GETSHOWIMEUI               := 110;
	SPI_SETSHOWIMEUI               := 111;
	SPI_GETMOUSESPEED              := 112;
	SPI_SETMOUSESPEED              := 113;
	SPI_GETSCREENSAVERRUNNING      := 114;
	SPI_GETACTIVEWINDOWTRACKING    := $1000;
	SPI_SETACTIVEWINDOWTRACKING    := $1001;
	SPI_GETMENUANIMATION           := $1002;
	SPI_SETMENUANIMATION           := $1003;
	SPI_GETCOMBOBOXANIMATION       := $1004;
	SPI_SETCOMBOBOXANIMATION       := $1005;
	SPI_GETLISTBOXSMOOTHSCROLLING  := $1006;
	SPI_SETLISTBOXSMOOTHSCROLLING  := $1007;
	SPI_GETGRADIENTCAPTIONS        := $1008;
	SPI_SETGRADIENTCAPTIONS        := $1009;
	SPI_GETMENUUNDERLINES          := $100A;
	SPI_SETMENUUNDERLINES          := $100B;
	SPI_GETACTIVEWNDTRKZORDER      := $100C;
	SPI_SETACTIVEWNDTRKZORDER      := $100D;
	SPI_GETHOTTRACKING             := $100E;
	SPI_SETHOTTRACKING             := $100F;
	SPI_GETFOREGROUNDLOCKTIMEOUT   := $2000;
	SPI_SETFOREGROUNDLOCKTIMEOUT   := $2001;
	SPI_GETACTIVEWNDTRKTIMEOUT     := $2002;
	SPI_SETACTIVEWNDTRKTIMEOUT     := $2003;
	SPI_GETFOREGROUNDFLASHCOUNT    := $2004;
	SPI_SETFOREGROUNDFLASHCOUNT    := $2005;
	SPIF_SENDCHANGE                :=  SPIF_SENDWININICHANGE;
	METRICS_USEDEFAULT             := 1;
	ARW_BOTTOMLEFT                 := 0;
	ARW_BOTTOMRIGHT                := 1;
	ARW_TOPLEFT                    := 2;
	ARW_TOPRIGHT                   := 3;
	ARW_STARTMASK                  := 3;
	ARW_STARTRIGHT                 := 1;
	ARW_STARTTOP                   := 2;
	ARW_LEFT                       := 0;
	ARW_RIGHT                      := 0;
	ARW_UP                         := 4;
	ARW_DOWN                       := 4;
	ARW_HIDE                       := 8;
	SERKF_SERIALKEYSON             := 1;
	SERKF_AVAILABLE                := 2;
	SERKF_INDICATOR                := 4;
	HCF_HIGHCONTRASTON             := 1;
	HCF_AVAILABLE                  := 2;
	HCF_HOTKEYACTIVE               := 4;
	HCF_CONFIRMHOTKEY              := 8;
	HCF_HOTKEYSOUND                := $10;
	HCF_INDICATOR                  := $20;
	HCF_HOTKEYAVAILABLE            := $40;
	CDS_UPDATEREGISTRY             := 1;
	CDS_TEST                       := 2;
	CDS_FULLSCREEN                 := 4;
	CDS_GLOBAL                     := 8;
	CDS_SET_PRIMARY                := $10;
	CDS_RESET                      := $40000000;
	CDS_SETRECT                    := $20000000;
	CDS_NORESET                    := $10000000;
	DISP_CHANGE_SUCCESSFUL         := 0;
	DISP_CHANGE_RESTART            := 1;
	DISP_CHANGE_FAILED             := 1;
	DISP_CHANGE_BADMODE            := 2;
	DISP_CHANGE_NOTUPDATED         := 3;
	DISP_CHANGE_BADFLAGS           := 4;
	DISP_CHANGE_BADPARAM           := 5;
	ENUM_CURRENT_SETTINGS          := 1;
	ENUM_REGISTRY_SETTINGS         := 2;
	FKF_FILTERKEYSON               := 1;
	FKF_AVAILABLE                  := 2;
	FKF_HOTKEYACTIVE               := 4;
	FKF_CONFIRMHOTKEY              := 8;
	FKF_HOTKEYSOUND                := $10;
	FKF_INDICATOR                  := $20;
	FKF_CLICKON                    := $40;
	SKF_STICKYKEYSON               := 1;
	SKF_AVAILABLE                  := 2;
	SKF_HOTKEYACTIVE               := 4;
	SKF_CONFIRMHOTKEY              := 8;
	SKF_HOTKEYSOUND                := $10;
	SKF_INDICATOR                  := $20;
	SKF_AUDIBLEFEEDBACK            := $40;
	SKF_TRISTATE                   := $80;
	SKF_TWOKEYSOFF                 := $100;
	SKF_LALTLATCHED                := $10000000;
	SKF_LCTLLATCHED                := $4000000;
	SKF_LSHIFTLATCHED              := $1000000;
	SKF_RALTLATCHED                := $20000000;
	SKF_RCTLLATCHED                := $08000000;
	SKF_RSHIFTLATCHED              := $2000000;
	SKF_LWINLATCHED                := $40000000;
	SKF_RWINLATCHED                := $80000000;
	SKF_LALTLOCKED                 := $100000;
	SKF_LCTLLOCKED                 := $40000;
	SKF_LSHIFTLOCKED               := $10000;
	SKF_RALTLOCKED                 := $200000;
	SKF_RCTLLOCKED                 := $80000;
	SKF_RSHIFTLOCKED               := $20000;
	SKF_LWINLOCKED                 := $400000;
	SKF_RWINLOCKED                 := $800000;
	MKF_MOUSEKEYSON                := 1;
	MKF_AVAILABLE                  := 2;
	MKF_HOTKEYACTIVE               := 4;
	MKF_CONFIRMHOTKEY              := 8;
	MKF_HOTKEYSOUND                := $10;
	MKF_INDICATOR                  := $20;
	MKF_MODIFIERS                  := $40;
	MKF_REPLACENUMBERS             := $80;
	MKF_LEFTBUTTONSEL              := $10000000;
	MKF_RIGHTBUTTONSEL             := $20000000;
	MKF_LEFTBUTTONDOWN             := $1000000;
	MKF_RIGHTBUTTONDOWN            := $2000000;
	MKF_MOUSEMODE                  := $80000000;
	ATF_TIMEOUTON                  := 1;
	ATF_ONOFFFEEDBACK              := 2;
	SSGF_NONE                      := 0;
	SSGF_DISPLAY                   := 3;
	SSTF_NONE                      := 0;
	SSTF_CHARS                     := 1;
	SSTF_BORDER                    := 2;
	SSTF_DISPLAY                   := 3;
	SSWF_NONE                      := 0;
	SSWF_TITLE                     := 1;
	SSWF_WINDOW                    := 2;
	SSWF_DISPLAY                   := 3;
	SSWF_CUSTOM                    := 4;
	SSF_SOUNDSENTRYON              := 1;
	SSF_AVAILABLE                  := 2;
	SSF_INDICATOR                  := 4;
	TKF_TOGGLEKEYSON               := 1;
	TKF_AVAILABLE                  := 2;
	TKF_HOTKEYACTIVE               := 4;
	TKF_CONFIRMHOTKEY              := 8;
	TKF_HOTKEYSOUND                := $10;
	TKF_INDICATOR                  := $20;
	MONITOR_DEFAULTTONULL          := 0;
	MONITOR_DEFAULTTOPRIMARY       := 1;
	MONITOR_DEFAULTTONEAREST       := 2;
	MONITORINFOF_PRIMARY           := 1;
	CHILDID_SELF                   := 0;
	INDEXID_OBJECT                 := 0;
	INDEXID_CONTAINER              := 0;
	OBJID_WINDOW                   := 0;
	OBJID_SYSMENU                  := $0FFFFFFFF;
	OBJID_TITLEBAR                 := $0FFFFFFFE;
	OBJID_MENU                     := $0FFFFFFFD;
	OBJID_CLIENT                   := $0FFFFFFFC;
	OBJID_VSCROLL                  := $0FFFFFFFB;
	OBJID_HSCROLL                  := $0FFFFFFFA;
	OBJID_SIZEGRIP                 := $0FFFFFFF9;
	OBJID_CARET                    := $0FFFFFFF8;
	OBJID_CURSOR                   := $0FFFFFFF7;
	OBJID_ALERT                    := $0FFFFFFF6;
	OBJID_SOUND                    := $0FFFFFFF5;
	EVENT_MIN                      := 1;
	EVENT_MAX                      := $7FFFFFFF;
	EVENT_SYSTEM_SOUND             := 1;
	EVENT_SYSTEM_ALERT             := 2;
	EVENT_SYSTEM_FOREGROUND        := 3;
	EVENT_SYSTEM_MENUSTART         := 4;
	EVENT_SYSTEM_MENUEND           := 5;
	EVENT_SYSTEM_MENUPOPUPSTART    := 6;
	EVENT_SYSTEM_MENUPOPUPEND      := 7;
	EVENT_SYSTEM_CAPTURESTART      := 8;
	EVENT_SYSTEM_CAPTUREEND        := 9;
	EVENT_SYSTEM_MOVESIZESTART     := $0A;
	EVENT_SYSTEM_MOVESIZEEND       := $0B;
	EVENT_SYSTEM_CONTEXTHELPSTART  := $0C;
	EVENT_SYSTEM_CONTEXTHELPEND    := $0D;
	EVENT_SYSTEM_DRAGDROPSTART     := $0E;
	EVENT_SYSTEM_DRAGDROPEND       := $0F;
	EVENT_SYSTEM_DIALOGSTART       := $10;
	EVENT_SYSTEM_DIALOGEND         := $11;
	EVENT_SYSTEM_SCROLLINGSTART    := $12;
	EVENT_SYSTEM_SCROLLINGEND      := $13;
	EVENT_SYSTEM_SWITCHSTART       := $14;
	EVENT_SYSTEM_SWITCHEND         := $15;
	EVENT_SYSTEM_MINIMIZESTART     := $16;
	EVENT_SYSTEM_MINIMIZEEND       := $17;
	EVENT_OBJECT_CREATE            := $8000;
	EVENT_OBJECT_DESTROY           := $8001;
	EVENT_OBJECT_SHOW              := $8002;
	EVENT_OBJECT_HIDE              := $8003;
	EVENT_OBJECT_REORDER           := $8004;
	EVENT_OBJECT_FOCUS             := $8005;
	EVENT_OBJECT_SELECTION         := $8006;
	EVENT_OBJECT_SELECTIONADD      := $8007;
	EVENT_OBJECT_SELECTIONREMOVE   := $8008;
	EVENT_OBJECT_SELECTIONWITHIN   := $8009;
	EVENT_OBJECT_STATECHANGE       := $800A;
	EVENT_OBJECT_LOCATIONCHANGE    := $800B;
	EVENT_OBJECT_NAMECHANGE        := $800C;
	EVENT_OBJECT_DESCRIPTIONCHANGE := $800D;
	EVENT_OBJECT_VALUECHANGE       := $800E;
	EVENT_OBJECT_PARENTCHANGE      := $800F;
	EVENT_OBJECT_HELPCHANGE        := $8010;
	EVENT_OBJECT_DEFACTIONCHANGE   := $8011;
	EVENT_OBJECT_ACCELERATORCHANGE := $8012;
	SOUND_SYSTEM_STARTUP           := 1;
	SOUND_SYSTEM_SHUTDOWN          := 2;
	SOUND_SYSTEM_BEEP              := 3;
	SOUND_SYSTEM_ERROR             := 4;
	SOUND_SYSTEM_QUESTION          := 5;
	SOUND_SYSTEM_WARNING           := 6;
	SOUND_SYSTEM_INFORMATION       := 7;
	SOUND_SYSTEM_MAXIMIZE          := 8;
	SOUND_SYSTEM_MINIMIZE          := 9;
	SOUND_SYSTEM_RESTOREUP         := 10;
	SOUND_SYSTEM_RESTOREDOWN       := 11;
	SOUND_SYSTEM_APPSTART          := 12;
	SOUND_SYSTEM_FAULT             := 13;
	SOUND_SYSTEM_APPEND            := 14;
	SOUND_SYSTEM_MENUCOMMAND       := 15;
	SOUND_SYSTEM_MENUPOPUP         := 16;
	CSOUND_SYSTEM                  := 16;
	ALERT_SYSTEM_INFORMATIONAL     := 1;
	ALERT_SYSTEM_WARNING           := 2;
	ALERT_SYSTEM_ERROR             := 3;
	ALERT_SYSTEM_QUERY             := 4;
	ALERT_SYSTEM_CRITICAL          := 5;
	CALERT_SYSTEM                  := 6;
	WINEVENT_OUTOFCONTEXT          := 0;
	WINEVENT_SKIPOWNTHREAD         := 1;
	WINEVENT_SKIPOWNPROCESS        := 2;
	WINEVENT_INCONTEXT             := 4;
	GUI_CARETBLINKING              := 1;
	GUI_INMOVESIZE                 := 2;
	GUI_INMENUMODE                 := 4;
	GUI_SYSTEMMENUMODE             := 8;
	GUI_POPUPMENUMODE              := $10;
	STATE_SYSTEM_UNAVAILABLE       := 1;
	STATE_SYSTEM_SELECTED          := 2;
	STATE_SYSTEM_FOCUSED           := 4;
	STATE_SYSTEM_PRESSED           := 8;
	STATE_SYSTEM_CHECKED           := $10;
	STATE_SYSTEM_MIXED             := $20;
	STATE_SYSTEM_READONLY          := $40;
	STATE_SYSTEM_HOTTRACKED        := $80;
	STATE_SYSTEM_DEFAULT           := $100;
	STATE_SYSTEM_EXPANDED          := $200;
	STATE_SYSTEM_COLLAPSED         := $400;
	STATE_SYSTEM_BUSY              := $800;
	STATE_SYSTEM_FLOATING          := $1000;
	STATE_SYSTEM_MARQUEED          := $2000;
	STATE_SYSTEM_ANIMATED          := $4000;
	STATE_SYSTEM_INVISIBLE         := $8000;
	STATE_SYSTEM_OFFSCREEN         := $10000;
	STATE_SYSTEM_SIZEABLE          := $20000;
	STATE_SYSTEM_MOVEABLE          := $40000;
	STATE_SYSTEM_SELFVOICING       := $80000;
	STATE_SYSTEM_FOCUSABLE         := $100000;
	STATE_SYSTEM_SELECTABLE        := $200000;
	STATE_SYSTEM_LINKED            := $400000;
	STATE_SYSTEM_TRAVERSED         := $800000;
	STATE_SYSTEM_MULTISELECTABLE   := $1000000;
	STATE_SYSTEM_EXTSELECTABLE     := $2000000;
	STATE_SYSTEM_ALERT_LOW         := $4000000;
	STATE_SYSTEM_ALERT_MEDIUM      := $8000000;
	STATE_SYSTEM_ALERT_HIGH        := $10000000;
	STATE_SYSTEM_VALID             := $1FFFFFFF;
	GA_MIC                         := 1;
	GA_PARENT                      := 1;
	GA_ROOT                        := 2;
	GA_ROOTOWNER                   := 3;
	GA_MAC                         := 4;
	CURSOR_SHOWING                 := 1;
	WS_ACTIVECAPTION               := 1;

	MEMCTX_TASK                    := 1;
	MEMCTX_SHARED                  := 2;
	MEMCTX_MACSYSTEM               := 3;
	MEMCTX_UNKNOWN                 := 1;
	MEMCTX_SAME                    := 2;
	ROTFLAGS_REGISTRATIONKEEPSALIVE := 1;
	ROTFLAGS_ALLOWANYCLIENT        := 2;
	ROT_COMPARE_MAX                := 2048;
	CLSCTX_INPROC_SERVER           := 1;
	CLSCTX_INPROC_HANDLER          := 2;
	CLSCTX_LOCAL_SERVER            := 4;
	CLSCTX_INPROC_SERVER16         := 8;
	CLSCTX_REMOTE_SERVER           := $10;
	CLSCTX_INPROC_HANDLER16        := $20;
	CLSCTX_INPROC_SERVERX86        := $40;
	CLSCTX_INPROC_HANDLERX86       := $80;
	CLSCTX_ESERVER_HANDLER         := $100;
	MSHLFLAGS_NORMAL               := 0;
	MSHLFLAGS_TABLESTRONG          := 1;
	MSHLFLAGS_TABLEWEAK            := 2;
	MSHLFLAGS_NOPING               := 4;
	MSHCTX_LOCAL                   := 0;
	MSHCTX_NOSHAREDMEM             := 1;
	MSHCTX_DIFFERENTMACHINE        := 2;
	MSHCTX_INPROC                  := 3;
	DVASPECT_CONTENT               := 1;
	DVASPECT_THUMBNAIL             := 2;
	DVASPECT_ICON                  := 4;
	DVASPECT_DOCPRINT              := 8;
	STGC_DEFAULT                   := 0;
	STGC_OVERWRITE                 := 1;
	STGC_ONLYIFCURRENT             := 2;
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE := 4;
	STGC_CONSOLIDATE               := 8;
	STGMOVE_MOVE                   := 0;
	STGMOVE_COPY                   := 1;
	STGMOVE_SHALLOWCOPY            := 2;
	STATFLAG_DEFAULT               := 0;
	STATFLAG_NONAME                := 1;
	STATFLAG_NOOPEN                := 2;
	WDT_INPROC_CALL                := $48746457;
	WDT_REMOTE_CALL                := $52746457;
	VARIANT_TRUE                   := $0ffff;
	VARIANT_FALSE                  := 0;
	DECIMAL_NEG                    := 80;
	APPINFO_PUBLISHED              := 1;
	APPINFO_SHELLNEW               :=  APPINFO_PUBLISHED + 1;
	APPINFO_INSERTABLE             :=  APPINFO_SHELLNEW + 1;
	ACTFLG_RunLocally              := 1;
	ACTFLG_RunOnce                 := 2;
	ACTFLG_SystemWide              := 4;
	ACTFLG_Published               := 8;
	ACTFLG_Assigned                := 16;
	ACTFLG_UserInstall             := 32;
	ExeNamePath                    := 0;
	DllNamePath                    :=  ExeNamePath + 1;
	TlbNamePath                    :=  DllNamePath + 1;
	CabFilePath                    :=  TlbNamePath + 1;
	InfFilePath                    :=  CabFilePath + 1;
	DrwFilePath                    :=  InfFilePath + 1;
	SetupNamePath                  :=  DrwFilePath + 1;
	TYSPEC_CLSID                   := 0;
	TYSPEC_FILEEXT                 :=  TYSPEC_CLSID + 1;
	TYSPEC_MIMETYPE                :=  TYSPEC_FILEEXT + 1;
	TYSPEC_PROGID                  :=  TYSPEC_MIMETYPE + 1;
	TYSPEC_IID                     :=  TYSPEC_PROGID + 1;
	TYSPEC_TYPELIB                 :=  TYSPEC_IID + 1;
	TYSPEC_FILENAME                :=  TYSPEC_TYPELIB + 1;
	TYSPEC_JAVACLASS               :=  TYSPEC_FILENAME + 1;
	TYSPEC_PACKAGENAME             :=  TYSPEC_JAVACLASS + 1;
	VT_EMPTY                       := 0;
	VT_NULL                        := 1;
	VT_I2                          := 2;
	VT_I4                          := 3;
	VT_R4                          := 4;
	VT_R8                          := 5;
	VT_CY                          := 6;
	VT_DATE                        := 7;
	VT_BSTR                        := 8;
	VT_DISPATCH                    := 9;
	VT_ERROR                       := 10;
	VT_BOOL                        := 11;
	VT_VARIANT                     := 12;
	VT_UNKNOWN                     := 13;
	VT_DECIMAL                     := 14;
	VT_I1                          := 16;
	VT_UI1                         := 17;
	VT_UI2                         := 18;
	VT_UI4                         := 19;
	VT_I8                          := 20;
	VT_UI8                         := 21;
	VT_INT                         := 22;
	VT_UINT                        := 23;
	VT_VOID                        := 24;
	VT_HRESULT                     := 25;
	VT_PTR                         := 26;
	VT_SAFEARRAY                   := 27;
	VT_CARRAY                      := 28;
	VT_USERDEFINED                 := 29;
	VT_LPSTR                       := 30;
	VT_LPWSTR                      := 31;
	VT_RECORD                      := 36;
	VT_FILETIME                    := 64;
	VT_BLOB                        := 65;
	VT_STREAM                      := 66;
	VT_STORAGE                     := 67;
	VT_STREAMED_OBJECT             := 68;
	VT_STORED_OBJECT               := 69;
	VT_BLOB_OBJECT                 := 70;
	VT_CF                          := 71;
	VT_CLSID                       := 72;
	VT_BSTR_BLOB                   := $0fff;
	VT_VECTOR                      := $1000;
	VT_ARRAY                       := $2000;
	VT_BYREF                       := $4000;
	VT_RESERVED                    := $8000;
	VT_ILLEGAL                     := $0ffff;
	VT_ILLEGALMASKED               := $0fff;
	VT_TYPEMASK                    := $0fff;


	DRAGLISTMSGSTRING              := "commctrl_DragListMsg";


static

	AddAtom: procedure
	( 
		lpString: string
	);
		@stdcall;
		@returns( "eax" ); // Zero if error, atom if successful
		external( "__imp__AddAtomA@4" );

	AddConsoleAlias: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AddConsoleAliasA@12" );

	AllocConsole: procedure;
		@stdcall;
		@returns( "eax" ); // Zero if failure
		external( "__imp__AllocConsole@0" );

	AreFileApisANSI: procedure;
		@stdcall;
		@returns( "eax" );  // Zero for OEM code page, non-zero for ANSI.
		external( "__imp__AreFileApisANSI@0" );




	AssignProcessToJobObject: procedure
	( 
		hJob:dword; 
		hProcess:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AssignProcessToJobObject@8" );




	BackupRead: procedure
	( 
			hFile:					dword; 
		var	lpBuffer:				var; 
			nNumberOfBytesToRead:	dword; 
		var	lpNumberOfBytesRead:	dword; 
			bAbort:					boolean; 
			bProcessSecurity:		boolean; 
		var	lpContext:				var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BackupRead@28" );


	BackupSeek: procedure
	( 
			hFile:				dword; 
			dwLowBytesToSeek:	dword; 
			dwHighBytesToSeek:	dword; 
		var	lpdwLowByteSeeked:	dword; 
		var	lpdwHighByteSeeked:	dword; 
		var	lpContext:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BackupSeek@24" );



	BackupWrite: procedure
	( 
			hFile:					dword; 
		var	lpBuffer:				var; 
			nNumberOfBytesToWrite:	dword; 
		var	lpNumberOfBytesWritten:	dword; 
			bAbort:					boolean; 
			bProcessSecurity:		boolean; 
		var	lpContext:				var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BackupWrite@28" );



	BaseAttachCompleteThunk: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__BaseAttachCompleteThunk@0" );

	Beep: procedure
	( 
		dwFreq:		dword; 
		dwDuration:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Beep@8" );



	BeginUpdateResource: procedure
	( 
		filename: string; 
		bDeleteExistingResources: boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BeginUpdateResourceA@8" );


	BuildCommDCB: procedure
	( 
			lpDef:	string; 
		var	lpDCB:	DCB
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BuildCommDCBA@8" );


	BuildCommDCBAndTimeouts: procedure
	( 
			lpDef:			string; 
		var	lpDCB:			DCB;
		var	lpCommTimeouts:	COMMTIMEOUTS  
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BuildCommDCBAndTimeoutsA@12" );

	CallNamedPipe: procedure
	( 
			lpNamedPipeName:	string; 
		var	lpInBuffer:			var; 
			nInBufferSize:		dword; 
		var	lpOutBuffer:		var; 
			nOutBufferSize:		dword; 
		var	lpBytesRead:		dword; 
			nTimeOut:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CallNamedPipeA@28" );


	CancelIo: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CancelIo@4" );


	CancelWaitableTimer: procedure
	( 
		hTimer:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CancelWaitableTimer@4" );


	CloseConsoleHandle: procedure
	( 
		handle:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseConsoleHandle@4" );


	CloseHandle: procedure
	( 
		handle:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseHandle@4" );

	CloseProfileUserMapping: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseProfileUserMapping@0" );

	CmdBatNotification: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CmdBatNotification@4" );

	CommConfigDialog: procedure
	( 
			lpszName:	string; 
			hWnd:		dword; 
		var	lpCC:		COMMCONFIG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CommConfigDialogA@12" );


	CompareFileTime: procedure
	( 
		var	lpfileTime1:	FILETIME; 
		var	lpfileTime2:	FILETIME 
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CompareFileTime@8" );



	CompareString: procedure
	( 
		Locale:		LCID; 
		dwCmpFlags:	dword; 
		lpString1:	string; 
		cchCount1:	uns32; 
		lpString2:	string; 
		cchCount2:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CompareStringA@24" );


	ConnectNamedPipe: procedure
	( 
			hNamedPipe:		dword; 
		var	lpOverlapped:	OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ConnectNamedPipe@8" );


	ConsoleMenuControl: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ConsoleMenuControl@12" );


	ContinueDebugEvent: procedure
	( 
		dwProcessID:		dword; 
		dwThreadID:			dword; 
		dwContinueStatus:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ContinueDebugEvent@12" );


	ConvertDefaultLocale: procedure
	( 
		Local:	LCID
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ConvertDefaultLocale@4" );


	ConvertThreadToFiber: procedure
	( 
		var	lpParameter: var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ConvertThreadToFiber@4" );


	CopyFile: procedure
	( 
		lpExistingFileName:	string; 
		lpNewFileName:		string; 
		bFailIfExists:		boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyFileA@12" );


	CopyFileEx: procedure
	( 
			lpExistingFileName:	string; 
			lpNewFileName:		string; 
		var	lpProgressRoutine:	PROGRESS_ROUTINE; 
		var	lpData:				var; 
		var	pbCancel:			boolean; 
			dwCopyFlags:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyFileExA@24" );


	CreateConsoleScreenBuffer: procedure
	( 
			dwDesiredAccess:		dword; 
			dwShareMode:			dword; 
		var	lpSecurityAttributes:	SECURITY_ATTRIBUTES; 
			dwFlags:				dword; 
			lpScreenBufferData:		dword  // Should be NULL.
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateConsoleScreenBuffer@20" );


	CreateDirectory: procedure
	( 
		lpPathName:				string; 
		lpSecurityAttributes:	dword   // Should be NULL
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDirectoryA@8" );


	CreateDirectoryEx: procedure
	( 
		lpTemplateDirectory:	string; 
		lpNewDirectory:			string; 
		lpSecurityAttributes:	dword   // Should be NULL
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDirectoryExA@12" );


	CreateEvent: procedure
	( 
		lpEventAttributes:	dword;   // Should be NULL 
		bManualReset:		boolean; 
		bInitialState:		boolean; 
		lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateEventA@16" );


	CreateFiber: procedure
	( 
			dwStackSize:	dword; 
		var	lpStartAddress:	FIBER_START_ROUTINE; 
			lpParameter:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateFiber@12" );

	CreateFile: procedure
	( 
		lpFileName:				string; 
		dwDesiredAccess:		dword; 
		dwShareMode:			dword; 
		lpSecurityAttributes:	dword;  // Should be NULL 
		dwCreationDisposition:	dword; 
		dwFlagsAndAttributes:	dword; 
		hTemplateFile:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateFileA@28" );



	CreateFileMapping: procedure
	( 
		hFile:						dword; 
		lpFileMappingAttributes:	dword;  // Should be NULL 
		flProtect:					dword; 
		dwMaximumSizeHigh:			dword; 
		dwMaximumSizeLow:			dword; 
		lpName:						string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateFileMappingA@24" );


	CreateHardLink: procedure
	( 
			lpFileName:				string; 
			lpExistingFileName:		string; 
		var	lpSecurityAttributes:	SECURITY_ATTRIBUTES
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateHardLinkA@12" );


	CreateIoCompletionPort: procedure
	( 
			FileHandle:					dword; 
			ExistingCompletionPort:		dword; 
		var	CompletionKey:				dword; 
			NumberOfConcurrentThreads:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateIoCompletionPort@16" );



	CreateJobObject: procedure
	( 
		var	lpJobAttributes:	SECURITY_ATTRIBUTES; 
			lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateJobObjectA@8" );

	CreateMailslot: procedure
	( 
			lpName:					string; 
			nMaxMessageSize:		dword; 
			lReadTimneout:			dword; 
		var	lpSecurityAttributes:	SECURITY_ATTRIBUTES
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateMailslotA@16" );

	CreateMutex: procedure
	( 
		var	lpMutexAttributes :	SECURITY_ATTRIBUTES;
			bInitialOwner:		boolean; 
			lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateMutexA@12" );

	CreateNamedPipe: procedure
	( 
	    	lpName:					string; 
			dwOpenMode:				dword; 
			dwPipeMode:				dword; 
			nMaxInstances:			dword; 
			nOutBufferSize:			dword; 
			nInbufferSize:			dword; 
			nDefaultTimeOut:		dword; 
		var	lpSecurityAttributes:	SECURITY_ATTRIBUTES
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateNamedPipeA@32" );

	CreatePipe: procedure
	( 
		var	hReadPipe:			dword; 
		var	hWritePipe:			dword; 
		var	lpPipeAttributes:	SECURITY_ATTRIBUTES;
		nSize:					dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePipe@16" );

	CreateProcess: procedure
	( 
			lpApplicationName:		string; 
			lpCommandLine:			string; 
		var	lpProcessAttributes:	SECURITY_ATTRIBUTES;
		var	lpThreadAttributes:		SECURITY_ATTRIBUTES;
			InheritHandles:			boolean; 
			dwCreationFlags:		dword; 
		var	lpEnvironment:			var; 
			lpCurrentyDirectory:	string; 
		var	lpStartupInfo:			STARTUPINFO; 
		var	lpProcessInformation:	PROCESS_INFORMATION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateProcessA@40" );

	CreateRemoteThread: procedure
	( 
			hProcess:			dword; 
		var	lpThreadAttributes:	SECURITY_ATTRIBUTES; 
			dwStackSize:		dword; 
			lpStartAddress:		THREAD_START_ROUTINE; 
			lpParameter:		dword; 
			dwCreationFlags:	dword; 
		var	lpThreadId:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateRemoteThread@28" );

	CreateSemaphore: procedure
	( 
		var	lpSemaphoreAttributes:	SECURITY_ATTRIBUTES; 
			lInitialCount:			int32; 
			lMaximumCount:			int32; 
			lpName:					string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateSemaphoreA@16" );

	CreateTapePartition: procedure
	( 
		hDevice:			dword; 
		dwParitionMethod:	dword; 
		dwCount:			dword; 
		dwSize:				dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateTapePartition@16" );

	CreateThread: procedure
	( 
		var	lpThreadAttributes:	SECURITY_ATTRIBUTES; 
			dwStackSize:		dword; 
			lpStartAddress:		THREAD_START_ROUTINE; 
			lpParameter:		dword; 
			dwCreationFlags:	dword; 
		var	lpThreadID:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateThread@24" );

	CreateToolhelp32Snapshot: procedure
	( 
		dwFlags:		dword; 
		th32ProcessID:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateToolhelp32Snapshot@8" );

	CreateVirtualBuffer: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateVirtualBuffer@12" );

	CreateWaitableTimer: procedure
	( 
		var	lpTimerAttributes:	SECURITY_ATTRIBUTES; 
			bManualReset:		boolean; 
			lpTimerName:		string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateWaitableTimerA@12" );

	DebugActiveProcess: procedure
	( 
			dwProcessID:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DebugActiveProcess@4" );

	DebugBreak: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__DebugBreak@0" );

	DefineDosDevice: procedure
	( 
		dwFlags:		dword; 
		lpDeviceName:	string; 
		lpTargetPath:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DefineDosDeviceA@12" );

	DeleteAtom: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteAtom@4" );

	DeleteCriticalSection: procedure
	( 
		var critSection:CRITICAL_SECTION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteCriticalSection@4" );

	DeleteFiber: procedure
	( 
		nAtom:	ATOM
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteFiber@4" );

	DeleteFile: procedure
	( 
		lpFileName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteFileA@4" );

	DeviceIoControl: procedure
	( 
			hDevice:			dword; 
			dwIoControlCode:	dword; 
		var	lpInBuffer:			var; 
			nInBufferSize:		dword; 
		var	lpOutBuffer:		var; 
			nOutBufferSize:		dword; 
		var	lpBytesReturned:	dword; 
		var	lpOverlapped:		OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeviceIoControl@32" );

	DisableThreadLibraryCalls: procedure
	( 
		hModule:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DisableThreadLibraryCalls@4" );

	DisconnectNamedPipe: procedure
	( 
		hNamedPipe:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DisconnectNamedPipe@4" );

	DosDateTimeToFileTime: procedure
	( 
			wFateDate:	word; 
			wFatTime:	word; 
		var	lpFileTime:	FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DosDateTimeToFileTime@12" );

	DuplicateConsoleHandle: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DuplicateConsoleHandle@16" );

	DuplicateHandle: procedure
	( 
			hSourceProcessHandle:	dword; 
			hSourceHandle:			dword; 
			hTargetProcessHandle:	dword; 
		var	lpTargetProcesHandle:	dword; 
			dwDesiredAccess:		dword; 
			bInheritHandle:			boolean; 
			dwOptions:				dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DuplicateHandle@28" );

	EndUpdateResource: procedure
	( 
		hUpdate:	dword; 
		fDiscard:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndUpdateResourceA@8" );

	EnterCriticalSection: procedure
	( 
		var lpCriticalSection:	CRITICAL_SECTION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnterCriticalSection@4" );

	EnumCalendarInfo: procedure
	( 
		pCalInfoEnumProc:	CALINFO_ENUMPROC; 
		Locale:				LCID; 
		Calendar:			CALID; 
		CalendarType:		CALTYPE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumCalendarInfoA@16" );

	EnumCalendarInfoEx: procedure
	( 
		pCalInfoEnumProcEx:	CALINFO_ENUMPROCEX; 
		Locale:				LCID; 
		Calendar:			CALID; 
		CalendarType:		CALTYPE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumCalendarInfoExA@16" );

	EnumDateFormats: procedure
	( 
		lpDateFmtEnumProc:	DATEFMT_ENUMPROC; 
		Locale:				LCID; 
		dwFlags:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDateFormatsA@12" );

	EnumDateFormatsEx: procedure
	( 
		lpDateFmtEnumProcEx:	DATEFMT_ENUMPROCEX; 
		Locale:					LCID; 
		dwFlags:				dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDateFormatsExA@12" );

	EnumResourceLanguages: procedure
	( 
		hModule:		dword; 
		lpType:		string; 
		lpName:		string; 
		lpEnumFunc:	ENUMRESLANGPROC; 
		lParam:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumResourceLanguagesA@20" );

	EnumResourceNames: procedure
	( 
		hModule:	dword; 
		lpszType:	string; 
		lpEnumFunc:	ENUMRESNAMEPROC; 
		lParam:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumResourceNamesA@16" );

	EnumResourceTypes: procedure
	( 
		hModule:	dword; 
		lpEnumFunc:	ENUMRESTYPEPROC; 
		lParam:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumResourceTypesA@12" );

	EnumSystemCodePages: procedure
	( 
		lpCodePageEnumProc:	CODEPAGE_ENUMPROC; 
		dwFlags:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumSystemCodePagesA@8" );

	EnumSystemLocales: procedure
	( 
		lpLocaleEnumProc:	LOCALE_ENUMPROC; 
		dwFlags:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumSystemLocalesA@8" );

	EnumTimeFormats: procedure
	( 
		lpTimeFmtEnumProc:	TIMEFMT_ENUMPROC; 
		Locale:				LCID; 
		dwFlags:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumTimeFormatsA@12" );

	EraseTape: procedure
	( 
		hDevice:		dword; 
		dwEraseType:	dword; 
		bImmediate:		boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EraseTape@12" );

	EscapeCommFunction: procedure
	( 
		hFile:	dword; 
		dwFunc:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EscapeCommFunction@8" );

	ExitProcess: procedure
	( 
		uExitCode:uns32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExitProcess@4" );

	ExitThread: procedure
	( 
		dwExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExitThread@4" );

	ExitVDM: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExitVDM@8" );

	ExpandEnvironmentStrings: procedure
	( 
		lpSrc:	string; 
		lpDst:	string; 
		nSize:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExpandEnvironmentStringsA@12" );

	ExpungeConsoleCommandHistory: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExpungeConsoleCommandHistoryA@4" );

	ExtendVirtualBuffer: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtendVirtualBuffer@8" );

	FatalAppExit: procedure
	( 
		uAction:		uns32; 
		lpMessageText:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FatalAppExitA@8" );

	FatalExit: procedure
	( 
		ExitCode:	int32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FatalExit@4" );

	FileTimeToDosDateTime: procedure
	( 
		var	lpFileTime:	FILETIME; 
		var	lpFatDate:	word; 
		var	lpFatTime:	word
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FileTimeToDosDateTime@12" );

	FileTimeToLocalFileTime: procedure
	( 
		var	lpFileTime:			FILETIME; 
		var	lpLocalFileTime:	FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FileTimeToLocalFileTime@8" );

	FileTimeToSystemTime: procedure
	( 
		var	lpFileTime:		FILETIME; 
		var	lpSystemTime:	SYSTEMTIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FileTimeToSystemTime@8" );

	FillConsoleOutputAttribute: procedure
	( 
			hConsoleOutput			:dword; 
			wAttribute				:word; 
			nLength					:dword; 
			dwWriteCoord			:COORD; 
		var	lpNumberOfAttrsWritten	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FillConsoleOutputAttribute@20" );

	FillConsoleOutputCharacter: procedure
	( 
		hConsoleOutput:				dword; 
		cCharacter:					char; 
		nLength:					dword; 
		dwWriteCoord:				COORD; 
		var	lpNumberOfAttrsWritten:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FillConsoleOutputCharacterA@20" );

	FindAtom: procedure
	( 
		lpString:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindAtomA@4" );

	FindClose: procedure
	( 
		hFindFile:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindClose@4" );

	FindCloseChangeNotification: procedure
	( 
		hChangeHandle:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindCloseChangeNotification@4" );

	FindFirstChangeNotification: procedure
	( 
		lpPathName:		string; 
		bWatchSubtree:	boolean; 
		dwNotifyFilter:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindFirstChangeNotificationA@12" );

	FindFirstFile: procedure
	( 
			lpFileName:		string; 
		var	lpFindFileData:	WIN32_FIND_DATA
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindFirstFileA@8" );

	FindFirstFileEx: procedure
	( 
			lpFileName:			string; 
			fInfoLevelId:		FINDEX_INFO_LEVELS; 
		var	lpFindFileData:		var; 
			fSearchOp:			FINDEX_SEARCH_OPS; 
		var	lpSearchFilter:		var; 
			dwAdditionalFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindFirstFileExA@24" );

	FindNextChangeNotification: procedure
	( 
		hChangeHandle:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindNextChangeNotification@4" );

	FindNextFile: procedure
	( 
			hFindFile:		dword; 
		var	lpFindFileData:	WIN32_FIND_DATA
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindNextFileA@8" );

	FindResource: procedure
	( 
		hModule:	dword; 
		lpName:		string; 
		lpType:		string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindResourceA@12" );

	FindResourceEx: procedure
	( 
		hModule:	dword; 
		lpType:		string; 
		lpName:		string; 
		wLanguage:	word
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindResourceExA@16" );

	FlushConsoleInputBuffer: procedure
	( 
		hConsoleInput:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FlushConsoleInputBuffer@4" );

	FlushFileBuffers: procedure
	( 
		hFile:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FlushFileBuffers@4" );

	FlushInstructionCache: procedure
	( 
			hProcess:		dword; 
		var	lpBaseAddress:	var; 
			dwSize:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FlushInstructionCache@12" );

	FlushViewOfFile: procedure
	( 
		var	lpBaseAddress:			var; 
			dwNumberOfBytesToFlush:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FlushViewOfFile@8" );

	FoldString: procedure
	( 
			dwMapFlags:	dword; 
			lpSrcStr:	string; 
			cchSrc:		int32; 
		var	lpDestStr:	var; 
			cchDest:	int32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FoldStringA@20" );

	FormatMessage: procedure
	( 
			dwFlags:		dword; 
		var	lpSource:		var; 
			dwMessageId:	dword; 
			dwLanguageId:	dword; 
		var	lpBuffer:		var; 
			nSize:			uns32; 
		var	Arguments:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FormatMessageA@28" );

	FreeConsole: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeConsole@0" );

	FreeEnvironmentStrings: procedure
	( 
		lpszEnvironmentBlock:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeEnvironmentStringsA@4" );

	FreeLibrary: procedure
	( 
		hModule:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeLibrary@4" );

	FreeLibraryAndExitThread: procedure
	( 
		hModule:	dword; 
		dwExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeLibraryAndExitThread@8" );

	FreeResource: procedure
	( 
		hResource:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeResource@4" );

	FreeVirtualBuffer: procedure
	( 
		hVBuf:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeVirtualBuffer@4" );

	GenerateConsoleCtrlEvent: procedure
	( 
		dwCtrlEvent:		dword; 
		dwProcessGroupId:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GenerateConsoleCtrlEvent@8" );

	GetACP: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetACP@0" );

	GetAtomName: procedure
	( 
			nAtom:		ATOM; 
		VAR	lpBuffer:	var; 
			nSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetAtomNameA@12" );

	GetBinaryType: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBinaryType@8" );


	GetCPInfo: procedure
	( 
			lpApplicationName:	string; 
		var	lpBinaryType:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCPInfo@8" );

	GetCPInfoEx: procedure
	( 
			CodePage:	uns32; 
			dwFlags:	dword; 
		var	lpCPInfoEx:	CPINFOEX
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCPInfoExA@12" );

	GetCommConfig: procedure
	( 
			hCommDev:	dword; 
		var	lpCC:		COMMCONFIG; 
		var	lpdwSize:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommConfig@12" );

	GetCommMask: procedure
	( 
			hFile:		dword; 
		var	lpEvtMask:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommMask@8" );

	GetCommModemStatus: procedure
	( 
			hFile:			dword; 
		var	lpModemStat:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommModemStatus@8" );

	GetCommProperties: procedure
	( 
			hFile:		dword; 
		var	lpCommProp:	COMMPROP
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommProperties@8" );

	GetCommState: procedure
	( 
			hFile:	dword; 
		var	lpDCB:	DCB
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommState@8" );

	GetCommTimeouts: procedure
	( 
			hFile:			dword; 
		var	lpCommTimeouts:	COMMTIMEOUTS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommTimeouts@8" );

	GetCommandLine: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCommandLineA@0" );

	GetCompressedFileSize: procedure
	( 
			lpFileName:		string; 
		var	lpFileSizeHigh:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCompressedFileSizeA@8" );

	GetComputerName: procedure
	( 
		var	lpBuffer:	var; 
		var	lpnSize:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetComputerNameA@8" );

	GetConsoleAlias: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleAliasA@16" );

	GetConsoleAliasExes: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleAliasExesA@8" );

	GetConsoleAliasExesLength: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleAliasExesLengthA@0" );

	GetConsoleAliases: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleAliasesA@12" );

	GetConsoleAliasesLength: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleAliasesLengthA@4" );

	GetConsoleCP: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleCP@0" );

	GetConsoleCommandHistory: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleCommandHistoryA@12" );

	GetConsoleCommandHistoryLength: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleCommandHistoryLengthA@4" );

	GetConsoleCursorInfo: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpConsoleCursorInfo:	CONSOLE_CURSOR_INFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleCursorInfo@8" );

	GetConsoleDisplayMode: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleDisplayMode@4" );

	GetConsoleFontInfo: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleFontInfo@16" );

	GetConsoleFontSize: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleFontSize@8" );

	GetConsoleHardwareState: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleHardwareState@12" );

	GetConsoleInputExeName: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleInputExeNameA@8" );

	GetConsoleInputWaitHandle: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleInputWaitHandle@0" );

	GetConsoleKeyboardLayoutName: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleKeyboardLayoutNameA@4" );

	GetConsoleMode: procedure
	( 
			hConsoleHandle:	dword; 
		var	lpMode:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleMode@8" );

	GetConsoleOutputCP: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleOutputCP@0" );

	GetConsoleScreenBufferInfo: procedure
	( 
			handle:	dword; 
		var csbi:	CONSOLE_SCREEN_BUFFER_INFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleScreenBufferInfo@8" );

	GetConsoleTitle: procedure
	( 
		var	lpConsoleTitle:	var; 
			nSize:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleTitleA@8" );

	GetConsoleWindow: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetConsoleWindow@0" );

	GetCurrencyFormat: procedure
	( 
			Locale:			LCID; 
			dwFlags:		dword; 
			lpValue:		string; 
		var	lpFormat:		CURRENCYFMT; 
		var	lpCurrencyStr:	var; 
			cchCurrency:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrencyFormatA@24" );

	GetCurrentConsoleFont: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentConsoleFont@12" );

	GetCurrentDirectory: procedure
	( 
			nBufferLength:	dword; 
		var	lpBuffer:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentDirectoryA@8" );

	GetCurrentProcess: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentProcess@0" );

	GetCurrentProcessId: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentProcessId@0" );

	GetCurrentThread: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentThread@0" );

	GetCurrentThreadId: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentThreadId@0" );

	GetDateFormat: procedure
	( 
			Locale:		LCID; 
			dwFlags:	dword; 
		var	lpDate:		SYSTEMTIME; 
			lpFormat:	string; 
		var	lpDateStr:	var; 
			cchDate:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDateFormatA@24" );

	GetDefaultCommConfig: procedure
	( 
			lpszName:	string; 
		var	lpCC:		COMMCONFIG; 
		var	lpdwSize:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDefaultCommConfigA@12" );

	GetDevicePowerState: procedure
	( 
		hDevice:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDevicePowerState@4" );

	GetDiskFreeSpace: procedure
	( 
			lpRootPathName:			string; 
		var	lpSectorsPerCluster:	dword; 
		var	lpBytesPerSector:		dword; 
		var	lpNumberOfFreeClusters:	dword; 
		var	lpTotalNumberOfClusters:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDiskFreeSpaceA@20" );

	GetDiskFreeSpaceEx: procedure
	( 
			lpDirectoryName:			string; 
		var	lpFreeBytesAvailable:		qword; 
		var	lpTotalNumberOfBytes:		qword; 
		var	lpTotalNumberOfFreeBytes:	qword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDiskFreeSpaceExA@16" );

	GetDriveType: procedure
	( 
		lpRootPathName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDriveTypeA@4" );

	GetEnvironmentStrings: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnvironmentStrings@0" );

	GetEnvironmentVariable: procedure
	( 
			lpName:		string; 
		var	lpBuffer:	var; 
			nSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnvironmentVariableA@12" );

	GetExitCodeProcess: procedure
	( 
			hProcess:	dword; 
		var	lpExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetExitCodeProcess@8" );

	GetExitCodeThread: procedure
	( 
			hThread:	dword; 
		var	lpExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetExitCodeThread@8" );

	GetFileAttributes: procedure
	( 
		lpFileName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileAttributesA@4" );

	GetFileAttributesEx: procedure
	( 
			lpFileName:			string; 
			fInfoLevelId:		GET_FILEEX_INFO_LEVELS; 
		var	lpFileInformation:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileAttributesExA@12" );

	GetFileInformationByHandle: procedure
	( 
			hFile:				dword; 
		var	lpFileInformation:	BY_HANDLE_FILE_INFORMATION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileInformationByHandle@8" );

	GetFileSize: procedure
	( 
			hFile:			dword; 
		var	lpFileSizeHigh:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileSize@8" );

	GetFileTime: procedure
	( 
			hFile:				dword; 
		var	lpCreationTime:		FILETIME; 
		var	lpLastAccessTime:	FILETIME; 
		var	lpLastWriteTime:	FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileTime@16" );

	GetFileType: procedure
	( 
		hFile:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileType@4" );

	GetFullPathName: procedure
	( 
			lpFileName:		string; 
			nBufferLength:	dword; 
		var	lpBuffer:		var; 
		var	lpFilePart:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFullPathNameA@16" );

	GetHandleInformation: procedure
	( 
			hObject:	dword; 
		var	lpdwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetHandleInformation@8" );

	GetLargestConsoleWindowSize: procedure
	( 
		hConsoleOutput:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLargestConsoleWindowSize@4" );

	GetLastError: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLastError@0" );

	WSAGetLastError: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__WSAGetLastError@0" );

	GetLocalTime: procedure
	( 
		var	lpSystemTime: SYSTEMTIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLocalTime@4" );

	GetLocaleInfo: procedure
	( 
			Locale:		LCID; 
			LCType:		LCTYPE; 
		var	lpLCData:	var; 
			cchData:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLocaleInfoA@16" );

	GetLogicalDriveStrings: procedure
	( 
			nBufferLength:	dword; 
		var	lpBuffer:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLogicalDriveStringsA@8" );

	GetLogicalDrives: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLogicalDrives@0" );

	GetLongPathName: procedure
	( 
			lpszShortPath:	string; 
		var	lpszLongPath:	var; 
			cchBuffer:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLongPathNameA@12" );

	GetMailslotInfo: procedure
	( 
			hMailslot:			dword; 
		var	lpMaxMessageSize:	dword; 
		var	lpNextSize:			dword; 
		var	lpMessageCount:		dword; 
		var	lpReadTimeout:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMailslotInfo@20" );

	GetModuleFileName: procedure
	( 
			hModule:	dword; 
		var	lpFilename:	var; 
			nSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetModuleFileNameA@12" );

	GetModuleHandle: procedure
	( 
		lpModuleName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetModuleHandleA@4" );

	GetNamedPipeHandleState: procedure
	( 
			hNamedPipe:				dword; 
		var	lpState:				var; 
		var	lpCurInstances:			var; 
		var	lpMaxCollectionCount:	var; 
		var	lpCollectDataTimeout:	var; 
		var	lpUserName:				var; 
			nMaxUserNameSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNamedPipeHandleStateA@28" );

	GetNamedPipeInfo: procedure
	( 
			hNamedPipe:			dword; 
		var	lpFlags:			dword; 
		var	lpOutBufferSize:	dword; 
		var	lpInBufferSize:		dword; 
		var	lpMaxInstances:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNamedPipeInfo@20" );

	GetNextVDMCommand: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNextVDMCommand@4" );

	#macro GetNumberFormat( _parms_[] );
	
		#if( @elements( _parms_ ) = 5 )
		
			w_GetNumberFormat
			(
				_parms_[0],	// Local
				_parms_[1], // dwFlags
				_parms_[2], // lpValue
				_parms_[3], // lpFormat
				_parms_[4]  // lpNumberStr
			)
			
		#elseif( @elements( _parms_ ) = 6 )
		
			w.GetNumberFormatA
			(
				_parms_[0],	// Local
				_parms_[1], // dwFlags
				_parms_[2], // lpValue
				_parms_[3], // lpFormat
				_parms_[4], // lpNumberStr
				_parms_[5]	// cchNumber
			)
			
		#else
		
			#error( "Illegal # of parameters in GetNumberFormat call " )
			
		#endif
		
	#endmacro
		
	GetNumberFormatA :procedure
	( 
			Locale:		LCID; 
			dwFlags:	dword; 
			lpValue:	string; 
		var	lpFormat:	NUMBERFMT; 
		var	lpNumberStr:var; 
			cchNumber:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNumberFormatA@24" );

		
	procedure w_GetNumberFormat
	( 
			Locale:		LCID; 
			dwFlags:	dword; 
			lpValue:	string; 
		var	lpFormat:	NUMBERFMT; 
			lpNumberStr:string
	);
		@returns( "eax" );
		external;
		
static

	GetNumberOfConsoleFonts: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNumberOfConsoleFonts@0" );

	GetNumberOfConsoleInputEvents: procedure
	( 
			hConsoleInput:		dword; 
		var	lpcNumberOfEvents:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNumberOfConsoleInputEvents@8" );

	GetNumberOfConsoleMouseButtons: procedure
	( 
		var	lpNumberOfMouseButtons:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNumberOfConsoleMouseButtons@4" );

	GetOEMCP: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetOEMCP@0" );

	GetOverlappedResult: procedure
	( 
			hFile:						dword; 
		var	lpOverlapped:				OVERLAPPED; 
		var	lpNumberOfBytesTransferred:	dword; 
			bWait:						dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetOverlappedResult@16" );

	GetPriorityClass: procedure
	( 
		hProcess:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPriorityClass@4" );

	GetPrivateProfileInt: procedure
	( 
		lpAppName:	string; 
		lpKeyName:	string; 
		nDefault:	dword; 
		lpFileName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPrivateProfileIntA@16" );

	GetPrivateProfileSection: procedure
	( 
			lpAppName:			string; 
		var	lpReturnedString:	var; 
			nSize:				dword; 
			lpFileName:			string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPrivateProfileSectionA@16" );

	GetPrivateProfileSectionNames: procedure
	( 
		var	lpszReturnBuffer:	var; 
			nSize:				dword; 
			lpFileName:			string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPrivateProfileSectionNamesA@12" );

	GetPrivateProfileString: procedure
	( 
			lpAppName:			string; 
			lpKeyName:			string; 
			lpDefault:			string; 
		var	lpReturnedString:	var; 
			nSize:				dword; 
			lpFileName:			string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPrivateProfileStringA@24" );

	GetPrivateProfileStruct: procedure
	( 
			lpszSection:	string; 
			lpszKey:		string; 
		var	lpStruct:		var; 
			uSizeStruct:	dword; 
			szFile:			string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPrivateProfileStructA@20" );

	GetProcAddress: procedure
	( 
		hModule:	dword; 
		lpProcName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcAddress@8" );

	GetProcessAffinityMask: procedure
	( 
			hProcess:				dword; 
		var	lpProcessAffinityMask:	dword; 
		var	lpSystemAffinityMask:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessAffinityMask@12" );

	GetProcessHeap: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessHeap@0" );

	GetProcessHeaps: procedure
	( 
			NumberOfHeaps:	dword; 
		var	ProcessHeaps:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessHeaps@8" );

	GetProcessPriorityBoost: procedure
	( 
			hProcess:				dword; 
		var	pDisablePriorityBoost:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessPriorityBoost@8" );

	GetProcessShutdownParameters: procedure
	( 
		var	lpdwLevel:	dword; 
		var	lpdwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessShutdownParameters@8" );

	GetProcessTimes: procedure
	( 
			hProcess:		dword; 
		var	lpCreationTime:	FILETIME; 
		var	lpExitTime:		FILETIME; 
		var	lpKernelTime:	FILETIME; 
		var	lpUserTime:		FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessTimes@20" );

	GetProcessVersion: procedure
	( 
		ProcessId:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessVersion@4" );

	GetProcessWorkingSetSize: procedure
	( 
			hProcess:					dword; 
		var	lpMinimumWorkingSetSize:	SIZE_T; 
		var	lpMaximumWorkingSetSize:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessWorkingSetSize@12" );

	GetProfileInt: procedure
	( 
		lpAppName:	string; 
		lpKeyName:	string; 
		nDefault:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProfileIntA@12" );

	GetProfileSection: procedure
	( 
		lpAppName:			string; 
		lpReturnedString:	string; 
		nSize:				dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProfileSectionA@12" );

	GetProfileString: procedure
	( 
			lpAppName:			string; 
			lpKeyName:			string; 
			lpDefault:			string; 
		var	lpReturnedString:	var; 
			nSize:				dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProfileStringA@20" );

	GetQueuedCompletionStatus: procedure
	( 
			CompletionPort:		dword; 
		var	lpNumberOfBytes:	dword; 
		var	lpCompletionKey:	dword; 
		var	lpOverlapped:		OVERLAPPED; 
			dwMilliseconds:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetQueuedCompletionStatus@20" );

	GetShortPathName: procedure
	( 
			lpszLongPath:	string; 
		var	lpszShortPath:	var; 
			cchBuffer:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetShortPathNameA@12" );

	GetStartupInfo: procedure
	( 
		var	lpStartupInfo:	STARTUPINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetStartupInfoA@4" );

	GetStdHandle: procedure
	( 
		nStdHandle:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetStdHandle@4" );

	GetStringType: procedure
	( 
			Locale:			LCID; 
			dwInfoType:		dword; 
			lpSrcStr:		string; 
			cchSrc:			dword; 
		var	lpCharType:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetStringTypeA@20" );

	GetStringTypeEx: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetStringTypeExA@20" );

	GetSystemDefaultLCID: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemDefaultLCID@0" );

	GetSystemDefaultLangID: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemDefaultLangID@0" );

	GetSystemDirectory: procedure
	( 
		var	lpBuffer:	var; 
			uSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemDirectoryA@8" );

	GetSystemInfo: procedure
	( 
		var	lpSystemInfo:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemInfo@4" );

	GetSystemPowerStatus: procedure
	( 
		var	lpSystemPowerStatus:	SYSTEM_POWER_STATUS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemPowerStatus@4" );

	GetSystemTime: procedure
	( 
		var	lpSystemTime:	SYSTEMTIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemTime@4" );

	GetSystemTimeAdjustment: procedure
	( 
		var	lpTimeAdjustment:			dword; 
		var	lpTimeIncrement:			dword; 
		var	lpTimeAdjustmentDisabled:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemTimeAdjustment@12" );

	GetSystemTimeAsFileTime: procedure
	( 
		var	lpSystemTimeAsFileTime:	FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemTimeAsFileTime@4" );

	GetTapeParameters: procedure
	( 
			hDevice:			dword; 
			dwOperation:		dword; 
		var	lpdwSize:			dword; 
		var	lpTapeInformation:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTapeParameters@16" );

	GetTapePosition: procedure
	( 
			hDevice:		dword; 
			dwPositionType:	dword; 
		var	lpdwPartition:	dword; 
		var	lpdwOffsetLow:	dword; 
		var	lpdwOffsetHigh:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTapePosition@20" );

	GetTapeStatus: procedure
	( 
		hDevice:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTapeStatus@4" );

	GetTempFileName: procedure
	( 
			lpPathName:		string; 
			lpPrefixString:	string; 
			uUnique:		dword; 
		var	lpTempFileName:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTempFileNameA@16" );

	GetTempPath: procedure
	( 
			nBufferLength:	dword; 
		var	lpBuffer:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTempPathA@8" );

	GetThreadContext: procedure
	( 
			hThread:	dword; 
		var	lpContext:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadContext@8" );

	GetThreadLocale: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadLocale@0" );

	GetThreadPriority: procedure
	( 
		hThread:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadPriority@4" );

	GetThreadPriorityBoost: procedure
	( 
			hThread:				dword; 
		var	pDisablePriorityBoost:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadPriorityBoost@8" );

	GetThreadSelectorEntry: procedure
	( 
			hThread:			dword; 
			dwSelector:			dword; 
		var	lpSelectorEntry:	LDT_ENTRY
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadSelectorEntry@12" );

	GetThreadTimes: procedure
	( 
			hThread:		dword; 
		var	lpCreationTime:	FILETIME; 
		var	lpExitTime:		FILETIME; 
		var	lpKernelTime:	FILETIME; 
		var	lpUserTime:		FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadTimes@20" );

	GetTickCount: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTickCount@0" );

	GetTimeFormat: procedure
	( 
			Locale:			LCID; 
			dwFlags:		dword; 
		var	lpTime:			SYSTEMTIME; 
			lpFormat:		string; 
		var	lpTimeStr:		var; 
			cchTime:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTimeFormatA@24" );

	GetTimeZoneInformation: procedure
	( 
		var	lpTimeZoneInformation:	TIME_ZONE_INFORMATION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTimeZoneInformation@4" );

	GetUserDefaultLCID: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetUserDefaultLCID@0" );

	GetUserDefaultLangID: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetUserDefaultLangID@0" );

	GetVDMCurrentDirectories: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetVDMCurrentDirectories@8" );

	GetVersion: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetVersion@0" );

	GetVersionEx: procedure
	( 
		var	lpVersionInfo:	OSVERSIONINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetVersionExA@4" );

	GetVolumeInformation: procedure
	( 
			lpRootPathName:				string; 
		var	lpVolumeNameBuffer:			var; 
			nVolumeNameSize:			dword; 
		var	lpVolumeSerialNumber:		dword; 
		var	lpMaximumComponentLength:	dword; 
		var	lpFileSystemFlags:			dword; 
		var	lpFileSystemNameBuffer:		var; 
			nFileSystemNameSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetVolumeInformationA@32" );

	GetWindowsDirectory: procedure
	( 
		var	lpBuffer:	var; 
			uSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowsDirectoryA@8" );

	GlobalAddAtom: procedure
	( 
		lpString:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalAddAtomA@4" );

	GlobalAlloc: procedure
	( 
		uFlags:		uns32; 
		dwBytes:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalAlloc@8" );

	GlobalCompact: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalCompact@4" );

	GlobalDeleteAtom: procedure
	( 
		nAtom:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalDeleteAtom@4" );

	GlobalFindAtom: procedure
	( 
		lpString:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalFindAtomA@4" );

	GlobalFix: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalFix@4" );

	GlobalFlags: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalFlags@4" );

	GlobalFree: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalFree@4" );

	GlobalGetAtomName: procedure
	( 
			nAtom:		dword; 
		var	lpBuffer:	var; 
			nSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalGetAtomNameA@12" );

	GlobalHandle: procedure
	( 
		var	pMem:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalHandle@4" );

	GlobalLock: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalLock@4" );

	GlobalMemoryStatus: procedure
	( 
		var	lpBuffer:	MEMORYSTATUS
	);
		@stdcall;
		external( "__imp__GlobalMemoryStatus@4" );

	GlobalMemoryStatusVlm: procedure
	( 
		var	lpBuffer:	MEMORYSTATUSEX
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalMemoryStatusVlm@4" );

	GlobalReAlloc: procedure
	( 
		hMem:		dword; 
		dwBytes:	SIZE_T; 
		uFlags:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalReAlloc@12" );

	GlobalSize: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalSize@4" );

	GlobalUnWire: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalUnWire@4" );

	GlobalUnfix: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalUnfix@4" );

	GlobalUnlock: procedure
	( 
		hMem:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalUnlock@4" );

	GlobalWire: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GlobalWire@4" );

	Heap32First: procedure
	( 
		var	lphe:			HEAPENTRY32; 
			th32ProcessID:	dword; 
		var	th32HeapID:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Heap32First@12" );

	Heap32ListFirst: procedure
	( 
			hSnapshot:	dword; 
		var	lphl:		HEAPLIST32
	);

		@stdcall;
		@returns( "eax" );
		external( "__imp__Heap32ListFirst@8" );

	Heap32ListNext: procedure
	( 
			hSnapshot:	dword; 
		var	lphl:		HEAPLIST32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Heap32ListNext@8" );

	Heap32Next: procedure
	( 
		var	lphe:	HEAPENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Heap32Next@4" );

	HeapAlloc: procedure
	( 
		hHeap:		dword; 
		dwFlags:	dword; 
		dwBytes:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapAlloc@12" );

	HeapCompact: procedure
	( 
		hHeap:		dword; 
		dwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapCompact@8" );

	HeapCreate: procedure
	( 
		flOptions:		dword; 
		dwInitialSize:	SIZE_T; 
		dwMaximumSize:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapCreate@12" );

	HeapDestroy: procedure
	( 
		hHeap:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapDestroy@4" );

	HeapExtend: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapExtend@16" );

	HeapFree: procedure
	( 
			hHeap:		dword; 
			dwFlags:	dword; 
		var	lpMem:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapFree@12" );

	HeapLock: procedure
	( 
		hHeap:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapLock@4" );

	HeapReAlloc: procedure
	( 
			hHeap:		dword; 
			dwFlags:	dword; 
		var	lpMem:		var; 
			dwBytes:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapReAlloc@16" );

	HeapSize: procedure
	( 
			hHeap:		dword; 
			dwFlags:	dword; 
		var	lpMem:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapSize@12" );

	HeapSummary: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapSummary@12" );

	HeapUnlock: procedure
	( 
		hHeap:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapUnlock@4" );

	HeapUsage: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapUsage@20" );

	HeapValidate: procedure
	( 
			hHeap:		dword; 
			dwFlags:	dword; 
		var	lpMem:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapValidate@12" );

	HeapWalk: procedure
	( 
			hHeap:		dword; 
		var	lpEntry:	PROCESS_HEAP_ENTRY
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HeapWalk@8" );

	InitAtomTable: procedure
	( 
		nSize:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InitAtomTable@4" );

	InitializeCriticalSection: procedure
	( 
		var	lpCriticalSection:	CRITICAL_SECTION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InitializeCriticalSection@4" );

	InitializeCriticalSectionAndSpinCount: procedure
	( 
		var	lpCriticalSection:	CRITICAL_SECTION; 
			dwSpinCount:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InitializeCriticalSectionAndSpinCount@8" );

	InterlockedCompareExchange: procedure
	( 
		var	Destination:	LONG; 
			Exchange:		LONG; 
			Comperand:		LONG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InterlockedCompareExchange@12" );

	InterlockedDecrement: procedure
	( 
		var	lpAddend:	LONG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InterlockedDecrement@4" );

	InterlockedExchange: procedure
	( 
		var	Target:	LONG; 
			Value:	LONG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InterlockedExchange@8" );

	InterlockedExchangeAdd: procedure
	( 
		var	Addend:		LONG; 
			Increment:	LONG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InterlockedExchangeAdd@8" );

	InterlockedIncrement: procedure
	( 
		var	lpAddend:	LONG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InterlockedIncrement@4" );

	InvalidateConsoleDIBits: procedure
	( 
		p0:dword; 

		p1:dword

	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InvalidateConsoleDIBits@8" );

	IsBadCodePtr: procedure
	( 
		lpfn:	procedure
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsBadCodePtr@4" );

	IsBadHugeReadPtr: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsBadHugeReadPtr@8" );

	IsBadHugeWritePtr: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsBadHugeWritePtr@8" );

	IsBadReadPtr: procedure
	( 
		var	lp:		var; 
		var	ucb:	uns32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsBadReadPtr@8" );

	IsBadStringPtr: procedure
	( 
		lpsz:		string; 
		ucchMax:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsBadStringPtrA@8" );

	IsBadWritePtr: procedure
	( 
		var	lp:		var; 
			ucb:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsBadWritePtr@8" );

	IsDBCSLeadByte: procedure
	( 
		TestChar:	byte
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsDBCSLeadByte@4" );

	IsDBCSLeadByteEx: procedure
	( 
		CodePage:	dword; 
		TestChar:	byte
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsDBCSLeadByteEx@8" );

	IsDebuggerPresent: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsDebuggerPresent@0" );

	IsProcessorFeaturePresent: procedure
	( 
		ProcessorFeature:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsProcessorFeaturePresent@4" );

	IsValidCodePage: procedure
	( 
		CodePage:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsValidCodePage@4" );

	IsValidLocale: procedure
	( 
		Locale:		LCID; 
		dwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsValidLocale@8" );

	LCMapString: procedure
	( 
			Locale:		LCID; 
			dwMapFlags:	dword; 
			lpSrcStr:	string; 
			cchSrc:		dword; 
		var	lpDestStr:	var; 
			cchDest:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LCMapStringA@24" );

	LeaveCriticalSection: procedure
	( 
		var	lpCriticalSection:	CRITICAL_SECTION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LeaveCriticalSection@4" );

	LoadLibrary: procedure
	( 
		lpFileName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadLibraryA@4" );

	LoadLibraryEx: procedure
	( 
		lpFileName:	string; 
		hFile:		dword; 
		dwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadLibraryExA@12" );

	LoadModule: procedure
	( 
			lpModuleName:		string; 
		var	lpParameterBlock:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadModule@8" );

	LoadResource: procedure
	( 
		hModule:	dword; 
		hResInfo:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadResource@8" );

	LocalAlloc: procedure
	( 
		uFlags:	dword; 
		uBytes:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalAlloc@8" );

	LocalCompact: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalCompact@4" );

	LocalFileTimeToFileTime: procedure
	( 
		var	lpLocalFileTime:	FILETIME; 
		var	lpFileTime:			FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalFileTimeToFileTime@8" );

	LocalFlags: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalFlags@4" );

	LocalFree: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalFree@4" );

	LocalHandle: procedure
	( 
		var	pMem:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalHandle@4" );

	LocalLock: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalLock@4" );

	LocalReAlloc: procedure
	( 
		hMem:		dword; 
		uBytes:		SIZE_T; 
		uFlags:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalReAlloc@12" );

	LocalShrink: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalShrink@8" );

	LocalSize: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalSize@4" );

	LocalUnlock: procedure
	( 
		hMem:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LocalUnlock@4" );

	LockFile: procedure
	( 
		hFile:						dword; 
		dwFileOffsetLow:			dword; 
		dwFileOffsetHigh:			dword; 
		nNumberOfBytesToLockLow:	dword; 
		nNumberOfBytesToLockHigh:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LockFile@20" );

	LockFileEx: procedure
	( 
			hFile:						dword; 
			dwFlags:					dword; 
			dwReserved:					dword; 
			nNumberOfBytesToLockLow:	dword; 
			nNumberOfBytesToLockHigh:	dword; 
		var	lpOverlapped:				OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LockFileEx@24" );

	LockResource: procedure
	( 
		hResData:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LockResource@4" );


	lstrcat: procedure
	( 
		var	lpString1:	var; 
		var	lpString2:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__lstrcatA@8" );

	lstrcmp: procedure
	( 
		var	lpString1:	var; 
		var	lpString2:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__lstrcmpA@8" );

	lstrcmpi: procedure
	( 
		var	lpString1:	var; 
		var	lpString2:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__lstrcmpiA@8" );

	lstrcpy: procedure
	( 
		var	lpString1:	var; 
		var	lpString2:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__lstrcpyA@8" );

	lstrcpyn: procedure
	( 
		var	lpString1:	var; 
		var	lpString2:	var;
			iMaxLength:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__lstrcpynA@12" );

	lstrlen: procedure
	( 
		var	lpString:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__lstrlenA@4" );



	MapViewOfFile: procedure
	( 
		hFileMappingObject:		dword; 
		dwDesiredAccess:		dword; 
		dwFileOffsetHigh:		dword; 
		dwFileOffsetLow:		dword; 
		dwNumberOfBytesToMap:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapViewOfFile@20" );

	MapViewOfFileEx: procedure
	( 
			hFileMappingObject:		dword; 
			dwDesiredAccess:		dword; 
			dwFileOffsetHigh:		dword; 
			dwFileOffsetLow:		dword; 
			dwNumberOfBytesToMap:	SIZE_T; 
		var	lpBaseAddress:			var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapViewOfFileEx@24" );

	MapViewOfFileVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword; 
		p6:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapViewOfFileVlm@28" );



	midiConnect:
		procedure
		(
			hMidi		:dword;
			hmo			:dword;
			pReserved	:dword
		);	@stdcall; external( "__imp__midiConnect@12" );


	midiInAddBuffer:
		procedure
		(
				hMidiIn		:dword;
			var	lpMidiInHdr	:MIDIHDR;
				cbMidiInHdr	:dword
		);	@stdcall; external( "__imp__midiInAddBuffer@12" );


	midiInClose:
		procedure
		(
				hMidiIn		:dword
		);	@stdcall; external( "__imp__midiInClose@4" );


	midiInGetDevCaps:
		procedure
		(
				uDeviceID		:dword;
			var	lpMidiInCaps	:MIDIINCAPS;
				cbMidiInCaps	:dword
		); @stdcall; external( "__imp__midiInGetDevCapsA@12" );


	_midiInGetErrorText:
		procedure
		(
			wError		:dword;
			lpText		:dword;
			cchText		:dword
		);	@stdcall; external( "__imp__midiInGetErrorTextA@12" );


	midiInGetNumDevs:
		procedure; @stdcall; external( "__imp__midiInGetNumDevs@0" );


	midiInMsg:procedure
	(
		deviceID	:dword;
		msg			:dword;
		dw1			:dword;
		dw2			:dword
	); @stdcall; external( "__imp__midiInMsg@16" );


	midiInOpen:
		procedure
		(
			var midiIn		:dword;
				uDeviceID	:dword;
				dwCallback	:dword;
				dwCBInst	:dword;
				dwFlags		:dword
		); @stdcall; external( "__imp__midiInOpen@20" );


	midiInPrepareHeader:
		procedure
		(
				hMidiIn		:dword;
			var	lpMidiHdr	:MIDIHDR;
				cbMidiHdr	:dword
		);	@stdcall; external( "__imp__midiInPrepareHeader@12" );


	midiInReset:
		procedure
		(
				midiIn	:dword
		); @stdcall; external( "__imp__midiInReset@4" );
	
	
	midiInStart:
		procedure( hndl:dword ); external( "__imp__midiInStart@4" );
	
	
	midiInStop:
		procedure( hndl:dword ); external( "__imp__midiInStop@4" );
	
	
	midiInUnprepareHeader:
		procedure
		(
				hMidiIn		:dword;
			var	lpMidiHdr	:MIDIHDR;
				cbMidiHdr	:dword
		);	@stdcall; external( "__imp__midiInUnprepareHeader@12" );


	midiOutCacheDrumPatches:procedure
	(
			hmo			:dword;
			wPatch		:dword;
		var	lpKeyArray	:dword;
			wFlags		:dword
	); @stdcall; external( "__imp__midiOutCacheDrumPatches@16" );


	midiOutCachePatches:procedure
	(
			hmo			:dword;
			wBank		:dword;
		var	lpKeyArray	:dword;
			wFlags		:dword
	); @stdcall; external( "__imp__midiOutCachePatches@16" );
	
	
	midiOutClose:
		procedure
		(
			hMidiOut	:dword
		);	@stdcall; external( "__imp__midiOutClose@4" );


	midiOutGetDevCaps:
		procedure
		(
				uDeviceID		:dword;
			var	lpMidiOutCaps	:MIDIOUTCAPS;
				cbMidiOutCaps	:dword
		); @stdcall; external( "__imp__midiOutGetDevCapsA@12" );
	
	
	_midiOutGetErrorText:
		procedure
		(
			wError		:dword;
			lpText		:dword;
			cchText		:dword
		);	@stdcall; external( "__imp__midiOutGetErrorTextA@12" );


	midiOutGetNumDevs:
		procedure; @stdcall; external( "__imp__midiOutGetNumDevs@0" );
	
	
	midiOutGetVolume:
		procedure
		(
			hmo				:dword;
			var	lpdwVolume	:dword
		);	@stdcall; external( "__imp__midiOutGetVolume@8" );
	
	
	midiOutLongMsg:
		procedure
		(
				hmo				:dword;
			var	lpMidiOutHdr	:MIDIHDR;
				cbMidiOutHdr	:dword
		);	@stdcall; external( "__imp__midiOutLongMsg@12" );


	midiOutMessage:procedure
	(
		deviceID	:dword;
		msg			:dword;
		dw1			:dword;
		dw2			:dword
	); @stdcall; external( "__imp__midiOutMessage@16" );


	midiOutOpen:procedure
	(
		var lphmo				:dword;
			uDeviceID			:dword;
			dwCallback			:dword;
			dwCallbackInstance	:dword;
			dwFlags				:dword
	); @stdcall; external( "__imp__midiOutOpen@20" );


	midiOutPrepareHeader:
		procedure
		(
				hmo			:dword;
			var	lpMidiHdr	:MIDIHDR;
				cbMidiHdr	:dword
		);	@stdcall; external( "__imp__midiOutPrepareHeader@12" );


	midiOutReset:
		procedure
		(
			midiOut	:dword
		); @stdcall; external( "__imp__midiOutReset@4" );
	
	
	midiOutSetVolume:
		procedure
		( 
			hndl	:dword; 
			volume	:dword 
		); @stdcall; external( "__imp__midiOutSetVolume@8" );
	
	
	midiOutShortMsg:
		procedure
		( 
			hmo		:dword; 
			data	:dword 
		); @stdcall; external( "__imp__midiOutShortMsg@8" );


	midiOutUnrepareHeader:
		procedure
		(
				hmo			:dword;
			var	lpMidiHdr	:MIDIHDR;
				cbMidiHdr	:dword
		);	@stdcall; external( "__imp__midiOutUnrepareHeader@12" );


	midiStreamClose:
		procedure
		(
			hStream	:dword
		); @stdcall; external( "__imp__midiStreamClose@4" );


	midiStreamOpen:procedure
	(
		var lphstream			:dword;
		var	puDeviceID			:dword;
			cMidi				:dword;
			dwCallback			:dword;
			dwInstance			:dword;
			fdwOpen				:dword
	); @stdcall; external( "__imp__midiStreamOpen@24" );


	midiStreamOut:
		procedure
		(
				hMidiStream	:dword;
			var	lpMidiHdr	:MIDIHDR;
				cbMidiHdr	:dword
		);	@stdcall; external( "__imp__midiStreamOut@12" );


	midiStreamPause:
		procedure
		(
			hStream	:dword
		); @stdcall; external( "__imp__midiStreamPause@4" );


	midiStreamPosition:
		procedure
		(
				hMidiStream	:dword;
			var	pmmt		:MMTIME;
				cbMMT		:dword
		);	@stdcall; external( "__imp__midiStreamPosition@12" );


	midiStreamRestart:
		procedure
		(
			hStream	:dword
		); @stdcall; external( "__imp__midiStreamRestart@4" );


	midiStreamStop:
		procedure
		(
			hStream	:dword
		); @stdcall; external( "__imp__midiStreamStop@4" );
	









	procedure midiInGetErrorText
	(
		wError		:dword;
		lpText		:string
	);	@stdcall; external( "w_midiInGetErrorText" );


	procedure midiOutGetErrorText
	(
		wError		:dword;
		lpText		:string
	);	@stdcall; external( "w_midiOutGetErrorText" );





static
	timeGetTime:procedure; @stdcall; external( "__imp__timeGetTime@0" );
	
	Module32First: procedure
	( 
			hSnapshot:	dword; 
		var	lpme:		MODULEENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Module32First@8" );

	Module32Next: procedure
	( 
			hSnapshot:	dword; 
		var	lpme:		MODULEENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Module32Next@8" );

	MoveFile: procedure
	( 
		lpExistingFileName:	string; 
		lpNewFileName:		string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MoveFileA@8" );

	MoveFileEx: procedure
	( 
		lpExistingFileName:	string; 
		lpNewFileName:		string; 
		dwFlags:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MoveFileExA@12" );

	MoveFileWithProgress: procedure
	( 
			lpExistingFileName:	string; 
			lpNewFileName:		string; 
			lpProgressRoutine:	procedure; 
		var	lpData:				var; 
			dwFlags:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MoveFileWithProgressA@20" );

	MulDiv: procedure
	( 
		nNumber:		dword; 
		nNumerator:		dword; 
		nDenominator:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MulDiv@12" );

	MultiByteToWideChar: procedure
	( 
			CodePage:		dword; 
			dwFlags:		dword; 
			lpMultiByteStr:	string; 
			cbMultiByte:	dword; 
		var	lpWideCharStr:	var; 
			cchWideChar:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MultiByteToWideChar@24" );

	OpenEvent: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandle:		boolean; 
		lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenEventA@12" );

	OpenFile: procedure
	( 
			lpFileName:		string; 
		var	lpReOpenBuff:	OFSTRUCT; 
			uStyle:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenFile@12" );

	OpenFileMapping: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandle:		boolean; 
		lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenFileMappingA@12" );

	OpenJobObject: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandles:	boolean; 
		lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenJobObjectA@12" );

	OpenMutex: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandle:		boolean; 
		lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenMutexA@12" );

	OpenProcess: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandle:		boolean; 
		dwProcessId:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenProcess@12" );

	OpenProfileUserMapping: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenProfileUserMapping@0" );

	OpenSemaphore: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandles:	boolean; 
		lpName:				string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenSemaphoreA@12" );

	OpenWaitableTimer: procedure
	( 
		dwDesiredAccess:	dword; 
		bInheritHandles:	boolean; 
		lpTimerName:		string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenWaitableTimerA@12" );

	OutputDebugString: procedure
	( 
		lpOutputString:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OutputDebugStringA@4" );

	PeekConsoleInput: procedure
	( 
			hConsoleInput:			dword; 
		var	lpBuffer:				INPUT_RECORD; 
			nLength:				dword; 
		var	lpNumberOfEventsRead:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PeekConsoleInputA@16" );

	PeekNamedPipe: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PeekNamedPipe@24" );

	PostQueuedCompletionStatus: procedure
	( 
			CompletionPort:				dword; 
			dwNumberOfBytesTransferred:	dword; 
			dwCompletionKey:			dword; 
		var	lpOverlapped:				OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PostQueuedCompletionStatus@16" );

	PrepareTape: procedure
	( 
		hDevice:		dword; 
		dwOperation:	dword; 
		bImmediate:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PrepareTape@12" );

	Process32First: procedure
	( 
			hSnapshot:	dword; 
		var	lppe:		PROCESSENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Process32First@8" );

	Process32Next: procedure
	( 
			hSnapshot:	dword; 
		var	lppe:		PROCESSENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Process32Next@8" );

	PulseEvent: procedure
	( 
		hEvent:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PulseEvent@4" );

	PurgeComm: procedure
	( 
		hFile:		dword; 
		dwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PurgeComm@8" );

	QueryDosDevice: procedure
	( 
		lpDeviceName:	string; 
		lpTargetPath:	string; 
		ucchMax:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__QueryDosDeviceA@12" );

	QueryInformationJobObject: procedure
	( 
			hJob:					dword; 
		var	vJobObjectInfoClass:	var; 
		var	lpJobObjectInfo:		var; 
			cbJobObjectInfoLength:	dword; 
		var	lpReturnLength:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__QueryInformationJobObject@20" );

	QueryPerformanceCounter: procedure
	( 
		var	lpPerformanceCount:	qword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__QueryPerformanceCounter@4" );

	QueryPerformanceFrequency: procedure
	( 
		var	lpPerformanceCount:	qword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__QueryPerformanceFrequency@4" );

	QueryWin31IniFilesMappedToRegistry: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__QueryWin31IniFilesMappedToRegistry@16" );

	QueueUserAPC: procedure
	( 
		pfnAPC:		procedure( dwParam:dword ); 
		hThread:	dword; 
		dwData:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__QueueUserAPC@12" );

	RaiseException: procedure
	( 
			dwExceptionCode:	dword; 
			dwExceptionFlags:	dword; 
			nNumberOfArguments:	dword; 
		var	lpArguments:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RaiseException@16" );

	ReadConsole: procedure
	( 
			hConsoleInput:			dword; 
		var	lpBuffer:				var; 
			nNumberOfCharsToRead:	dword; 
		var	lpNumberOfCharsRead:	dword; 
		var	lpReserved:				var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadConsoleA@20" );

	ReadConsoleInput: procedure
	( 
			hConsoleInput:			dword; 
		var	lpBuffer:				INPUT_RECORD; 
			nLength:				dword; 
		var	lpNumberOfEventsRead:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadConsoleInputA@16" );

	ReadConsoleInputEx: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadConsoleInputExA@20" );

	ReadConsoleOutput: procedure
	( 
			hConsoleOutput:	dword; 
		var	lpBuffer:		CHAR_INFO; 
			dwBufferSize:	COORD; 
			dwBufferCoord:	COORD; 
		var	lpReadRegion:	SMALL_RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadConsoleOutputA@20" );

	ReadConsoleOutputAttribute: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpAttribute:			word; 
			nLength:				dword; 
			dwReadCoord:			COORD; 
		var	lpNumberOfAttrsRead:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadConsoleOutputAttribute@20" );

	ReadConsoleOutputCharacter: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpCharacter:			char; 
			nLength:				dword; 
			dwReadCoord:			COORD; 
		var	lpNumberOfCharsRead:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadConsoleOutputCharacterA@20" );

	ReadFile: procedure
	( 
			hFile:					dword; 
		var	lpBuffer:				var; 
			nNumberOfBytesToRead:	dword; 
		var	lpNumberOfBytesRead:	dword; 
		var	lpOverlapped:			OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadFile@20" );

	ReadFileEx: procedure
	( 
			hFile:					dword; 
		var	lpBuffer:				dword; 
			nNumberOfBytesToRead:	dword; 
		var	lpOverlapped:			OVERLAPPED; 
			lpCompletionRoutine:	procedure
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadFileEx@20" );

	ReadFileScatter: procedure
	( 
			hFile:					dword; 
		var	aSegmentArray:			var; 
			nNumberOfBytesToRead:	dword; 
		var	lpReserved:				dword; 
		var	lpOverlapped:			OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadFileScatter@20" );

	ReadFileVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadFileVlm@20" );

	ReadProcessMemory: procedure
	( 
			hProcess:				dword; 
		var	lpBaseAddress:			var; 
		var	lpBuffer:				var; 
			nSize:					dword; 
		var	lpNumberOfBytesRead:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadProcessMemory@20" );

	ReadProcessMemoryVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReadProcessMemoryVlm@20" );

	RegisterConsoleVDM: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword; 
		p6:dword; 
		p7:dword; 
		p8:dword; 
		p9:dword; 
		p10:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterConsoleVDM@44" );

	RegisterWaitForInputIdle: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterWaitForInputIdle@4" );

	RegisterWowBaseHandlers: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterWowBaseHandlers@4" );

	RegisterWowExec: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterWowExec@4" );

	ReleaseMutex: procedure
	( 
		hMutex:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReleaseMutex@4" );

	ReleaseSemaphore: procedure
	( 
			hSemaphore:			dword; 
			lReleaseCount:		dword; 
		var	lpPreviousCount:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReleaseSemaphore@12" );

	RemoveDirectory: procedure
	( 
		lpPathName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RemoveDirectoryA@4" );

	RequestWakeupLatency: procedure
	( 
		latency:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RequestWakeupLatency@4" );

	ResetEvent: procedure
	( 
		hEvent:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ResetEvent@4" );

	ResumeThread: procedure
	( 
		hThread:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ResumeThread@4" );

	RtlFillMemory: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RtlFillMemory@12" );

	RtlMoveMemory: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RtlMoveMemory@12" );

	RtlUnwind: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RtlUnwind@16" );

	RtlZeroMemory: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RtlZeroMemory@8" );

	ScrollConsoleScreenBuffer: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpScrollRectangle:		SMALL_RECT; 
		var	lpClipRectangle:		SMALL_RECT; 
			dwDestinationOrigin:	COORD; 
		var	lpFill:					CHAR_INFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScrollConsoleScreenBufferA@20" );

	SearchPath: procedure
	( 
			lpPath:			string; 
			lpFileName:		string; 
			lpExtension:	string; 
			nBufferLength:	dword; 
		var	lpBuffer:		var; 
		var	lpFilePart:		var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SearchPathA@24" );

	SetCommBreak: procedure
	( 
		hFile:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCommBreak@4" );

	SetCommConfig: procedure
	( 
			hCommDev:	dword; 
		var	lpCC:		COMMCONFIG; 
			dwSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCommConfig@12" );

	SetCommMask: procedure
	( 
		hFile:		dword; 
		dwEvtMask:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCommMask@8" );

	SetCommState: procedure
	( 
			hFile:	dword; 
		var	lpDCB:	DCB
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCommState@8" );

	SetCommTimeouts: procedure
	( 
			hFile:			dword; 
		var	lpCommTimeouts:	COMMTIMEOUTS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCommTimeouts@8" );

	SetComputerName: procedure
	( 
		lpComputerName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetComputerNameA@4" );

	SetConsoleActiveScreenBuffer: procedure
	( 
		hConsoleOutput:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleActiveScreenBuffer@4" );

	SetConsoleCP: procedure
	( 
		wCodePageID:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleCP@4" );

	SetConsoleCommandHistoryMode: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleCommandHistoryMode@4" );

	SetConsoleCtrlHandler: procedure
	( 
		HandlerRoutine:	procedure; 
		AddOrRmv:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleCtrlHandler@8" );

	SetConsoleCursor: procedure
	( 

		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleCursor@8" );

	SetConsoleCursorInfo: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpConsoleCursorInfo:	CONSOLE_CURSOR_INFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleCursorInfo@8" );

	SetConsoleCursorPosition: procedure
	( 
		hConsoleOutput:		dword;
		dwCursorPosition:	COORD	
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleCursorPosition@8" );

	SetConsoleDisplayMode: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleDisplayMode@12" );

	SetConsoleFont: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleFont@8" );

	SetConsoleHardwareState: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleHardwareState@12" );

	SetConsoleIcon: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleIcon@4" );

	SetConsoleInputExeName: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleInputExeNameA@4" );

	SetConsoleKeyShortcuts: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleKeyShortcuts@16" );

	SetConsoleMaximumWindowSize: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleMaximumWindowSize@8" );

	SetConsoleMenuClose: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleMenuClose@4" );

	SetConsoleMode: procedure
	( 
		hConsoleHandle:	dword; 
		dwMode:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleMode@8" );

	SetConsoleNumberOfCommands: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleNumberOfCommandsA@8" );

	SetConsoleOutputCP: procedure
	( 
		wCodePageID:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleOutputCP@4" );

	SetConsolePalette: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsolePalette@12" );

	SetConsoleScreenBufferSize: procedure
	( 
		hConsoleOutput:	dword; 
		dwSize:			COORD
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleScreenBufferSize@8" );

	SetConsoleTextAttribute: procedure
	( 
		hConsoleOutput:	dword; 
		wAttributes:	word
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleTextAttribute@8" );

	SetConsoleTitle: procedure
	( 
		lpConsoleTitle:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleTitleA@4" );

	SetConsoleWindowInfo: procedure
	( 
			hConsoleOutput:		dword; 
			bAbsolute:			dword; 
		var	lpConsoleWindow:	SMALL_RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetConsoleWindowInfo@12" );

	SetCriticalSectionSpinCount: procedure
	( 
		var	lpCriticalSection:	CRITICAL_SECTION; 
			dwSpinCount:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCriticalSectionSpinCount@8" );

	SetCurrentDirectory: procedure
	( 
		lpPathName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCurrentDirectoryA@4" );

	SetDefaultCommConfig: procedure
	( 
			lpszName:	string; 
		var	lpCC:		COMMCONFIG; 
			dwSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDefaultCommConfigA@12" );

	SetEndOfFile: procedure
	( 
		hFile:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetEndOfFile@4" );

	SetEnvironmentVariable: procedure
	( 
		lpName:		string; 
		lpValue:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetEnvironmentVariableA@8" );

	SetErrorMode: procedure
	( 
		uMode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetErrorMode@4" );

	SetEvent: procedure
	( 
		hEvent:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetEvent@4" );

	SetFileApisToANSI: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFileApisToANSI@0" );

	SetFileApisToOEM: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFileApisToOEM@0" );

	SetFileAttributes: procedure
	( 
		lpFileName:			string; 
		dwFileAttributes:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFileAttributesA@8" );

	SetFilePointer: procedure
	( 
			hFile:					dword; 
			lDistanceToMove:		dword; 
		var	lpDistanceToMoveHigh:	dword; 
			dwMoveMethod:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFilePointer@16" );

	SetFileTime: procedure
	( 
			hFile:				dword; 
		var	lpCreationTime:		FILETIME; 
		var	lpLastAccessTime:	FILETIME; 
		var	lpLastWriteTime:	FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFileTime@16" );

	SetHandleCount: procedure
	( 
		uNumber:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetHandleCount@4" );

	SetHandleInformation: procedure
	( 
		hObject:	dword; 
		dwMask:		dword; 
		dwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetHandleInformation@12" );

	SetInformationJobObject: procedure
	( 
			hJob:					dword; 
		var	JobObjectInfoClass:		var; 
		var	lpJobObjectInfo:		var; 
			cbJobObjectInfoLength:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetInformationJobObject@16" );

	SetLastConsoleEventActive: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetLastConsoleEventActive@0" );

	SetLastError: procedure
	( 
		dwErrCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetLastError@4" );

	SetLocalTime: procedure
	( 
		var	lpSystemTime:	SYSTEMTIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetLocalTime@4" );

	SetLocaleInfo: procedure
	( 
		Locale:		LCID; 
		LCType:		LCTYPE; 
		lpLCData:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetLocaleInfoA@12" );

	SetMailslotInfo: procedure
	( 
		hMailslot:		dword; 
		lReadTimeout:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMailslotInfo@8" );

	SetNamedPipeHandleState: procedure
	( 
			hNamedPipe:				dword; 
		var	lpMode:					dword; 
		var	lpMaxCollectionCount:	dword; 
		var	lpCollectDataTimeout:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetNamedPipeHandleState@16" );

	SetPriorityClass: procedure
	( 
		hProcess:			dword; 
		dwPriorityClass:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPriorityClass@8" );

	SetProcessAffinityMask: procedure
	( 
		hProcess:				dword; 
		dwProcessAffinityMask:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetProcessAffinityMask@8" );

	SetProcessPriorityBoost: procedure
	( 
		hProcess:				dword; 
		DisablePriorityBoost:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetProcessPriorityBoost@8" );

	SetProcessShutdownParameters: procedure
	( 
		dwLevel:	dword; 
		dwFlags:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetProcessShutdownParameters@8" );

	SetProcessWorkingSetSize: procedure
	( 
		hProcess:					dword; 
		dwMinimumWorkingSetSize:	SIZE_T; 
		dwMaximumWorkingSetSize:	SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetProcessWorkingSetSize@12" );

	SetStdHandle: procedure
	( 
		nStdHandle:	dword; 
		hHandle:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetStdHandle@8" );

	SetSystemPowerState: procedure
	( 
		fSuspend:	boolean; 
		fForce:		boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetSystemPowerState@8" );

	SetSystemTime: procedure
	( 
		var	lpSystemTime:	SYSTEMTIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetSystemTime@4" );

	SetSystemTimeAdjustment: procedure
	( 
		dwTimeAdjustment:			dword; 
		bTimeAdjustmentDisabled:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetSystemTimeAdjustment@8" );

	SetTapeParameters: procedure
	( 
			hDevice:			dword; 
			dwOperation:		dword; 
		var	lpTapeInformation:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTapeParameters@12" );

	SetTapePosition: procedure
	( 
		hDevice:			dword; 
		dwPositionMethod:	dword; 
		dwPartition:		dword; 
		dwOffsetLow:		dword; 
		dwOffsetHigh:		dword; 
		bImmediate:			boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTapePosition@24" );

	SetThreadAffinityMask: procedure
	( 
		hThread:				dword; 
		dwThreadAffinityMask:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadAffinityMask@8" );

	SetThreadContext: procedure
	( 
			hThread:	dword; 
		var	lpContext:	CONTEXT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadContext@8" );

	SetThreadExecutionState: procedure
	( 
		esFlags:	EXECUTION_STATE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadExecutionState@4" );

	SetThreadIdealProcessor: procedure
	( 
		hThread:			dword; 
		dwIdealProcessor:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadIdealProcessor@8" );

	SetThreadLocale: procedure
	( 
		Locale:	LCID
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadLocale@4" );

	SetThreadPriority: procedure
	( 
		hThread:	dword; 
		nPriority:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadPriority@8" );

	SetThreadPriorityBoost: procedure
	( 
		hThread:				dword; 
		DisablePriorityBoost:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadPriorityBoost@8" );

	SetTimeZoneInformation: procedure
	( 
		lpTimeZoneInformation:	TIME_ZONE_INFORMATION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTimeZoneInformation@4" );

	SetUnhandledExceptionFilter: procedure
	( 
		lpTopLevelExceptionFilter:	procedure( var p: var )
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetUnhandledExceptionFilter@4" );

	SetVDMCurrentDirectories: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetVDMCurrentDirectories@8" );

	SetVolumeLabel: procedure
	( 
		lpRootPathName:	string; 
		lpVolumeName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetVolumeLabelA@8" );

	SetWaitableTimer: procedure
	( 
			hTimer:						dword; 
		var	pDueTime:					LARGE_INTEGER; 
			lPeriod:					dword; 
			pfnCompletionRoutine:		procedure; 
		var	lpArgToCompletionRoutine:	var; 
			fResume:					boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWaitableTimer@24" );

	SetupComm: procedure
	( 
		hFile:		dword; 
		dwInQueue:	dword; 
		dwOutQueue:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetupComm@12" );

	ShowConsoleCursor: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowConsoleCursor@8" );

	SignalObjectAndWait: procedure
	( 
		hObjectToSignal:	dword; 
		hObjectToWaitOn:	dword; 
		dwMilliseconds:		dword; 
		bAlertable:			boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SignalObjectAndWait@16" );

	SizeofResource: procedure
	( 
		hModule:	dword; 
		hResInfo:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SizeofResource@8" );

	Sleep: procedure
	( 
		dwMilliseconds:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Sleep@4" );

	SleepEx: procedure
	( 
		dwMilliseconds:	dword; 
		bAlertable:		boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SleepEx@8" );

	SuspendThread: procedure
	( 
		hThread:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SuspendThread@4" );

	SwitchToFiber: procedure
	( 
		lpFiber:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SwitchToFiber@4" );

	SwitchToThread: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__SwitchToThread@0" );

	SystemTimeToFileTime: procedure
	( 
		var	lpSystemTime:	SYSTEMTIME; 
		var	lpFileTime:		FILETIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SystemTimeToFileTime@8" );

	SystemTimeToTzSpecificLocalTime: procedure
	( 
		var	lpTimeZone:			TIME_ZONE_INFORMATION; 
		var	lpUniversalTime:	SYSTEMTIME; 
		var	lpLocalTime:		SYSTEMTIME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SystemTimeToTzSpecificLocalTime@12" );

	TerminateJobObject: procedure
	( 
		hJob:		dword; 
		uExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TerminateJobObject@8" );

	TerminateProcess: procedure
	( 
		hProcess:	dword; 
		uExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TerminateProcess@8" );

	TerminateThread: procedure
	( 
		hThread:	dword; 
		dwExitCode:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TerminateThread@8" );

	Thread32First: procedure
	( 
			hSnapshot:	dword; 
		var	lpte:		THREADENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Thread32First@8" );

	Thread32Next: procedure
	( 
			hSnapshot:	dword; 
		var	lpte:		THREADENTRY32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Thread32Next@8" );

	TlsAlloc: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__TlsAlloc@0" );

	TlsFree: procedure
	( 
		dwTlsIndex:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TlsFree@4" );

	TlsGetValue: procedure
	( 
		dwTlsIndex:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TlsGetValue@4" );

	TlsSetValue: procedure
	( 
			dwTlsIndex:	dword; 
			lpTlsValue:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TlsSetValue@8" );

	Toolhelp32ReadProcessMemory: procedure
	( 
			th32ProcessID:			dword; 
		var	lpBaseAddress:			var; 
		var	lpBuffer:				var; 
			cbRead:					dword; 
		var	lpNumberOfBytesRead:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Toolhelp32ReadProcessMemory@20" );

	TransactNamedPipe: procedure
	( 
			hNamedPipe:		dword; 
		var	lpInBuffer:		var; 
			nInBufferSize:	dword; 
		var	lpOutBuffer:	var; 
			nOutBufferSize:	dword; 
		var	lpBytesRead:	dword; 
		var	lpOverlapped:	OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TransactNamedPipe@28" );

	TransmitCommChar: procedure
	( 
		hFile:	dword; 
		cChar:	char
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TransmitCommChar@8" );

	TrimVirtualBuffer: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TrimVirtualBuffer@4" );

	TryEnterCriticalSection: procedure
	( 
		var	lpCriticalSection:	CRITICAL_SECTION
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TryEnterCriticalSection@4" );

	UnhandledExceptionFilter: procedure
	( 
		var	ExceptionInfo:	var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnhandledExceptionFilter@4" );

	UnlockFile: procedure
	( 
		hFile:						dword; 
		dwFileOffsetLow:			dword; 
		dwFileOffsetHigh:			dword; 
		nNumberOfBytesToUnlockLow:	dword; 
		nNumberOfBytesToUnlockHigh:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnlockFile@20" );

	UnlockFileEx: procedure
	( 
			hFile:						dword; 
			dwReserved:					dword; 
			nNumberOfBytesToUnlockLow:	dword; 
			nNumberOfBytesToUnlockHigh:	dword; 
		var	lpOverlapped:				OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnlockFileEx@20" );

	UnmapViewOfFile: procedure
	( 
		lpBaseAddress:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnmapViewOfFile@4" );

	UnmapViewOfFileVlm: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnmapViewOfFileVlm@4" );

	UpdateResource: procedure
	( 
			hUpdate:	dword; 
			lpType:		string; 
			lpName:		string; 
			wLanguage:	word; 
		var	lpData:		var; 
			cbData:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UpdateResourceA@24" );

	VDMConsoleOperation: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VDMConsoleOperation@8" );

	VDMOperationStarted: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VDMOperationStarted@4" );

	VerLanguageName: procedure
	( 
		wLang:		dword; 
		szLang:		string; 
		nSize:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VerLanguageNameA@12" );

	VerifyConsoleIoHandle: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VerifyConsoleIoHandle@4" );

	VirtualAlloc: procedure
	( 
		var	lpAddress:			var; 
			dwSize:				SIZE_T; 
			flAllocationType:	dword; 
			flProtect:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualAlloc@16" );

	VirtualAllocEx: procedure
	( 
			hProcess:			dword; 
		var	lpAddress:			var; 
			dwSize:				SIZE_T; 
			flAllocationType:	dword; 
			flProtect:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualAllocEx@20" );

	VirtualAllocVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualAllocVlm@24" );

	VirtualBufferExceptionHandler: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualBufferExceptionHandler@12" );

	VirtualFree: procedure
	( 
		var	lpAddress:	var; 
			dwSize:		SIZE_T; 
			dwFreeType:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualFree@12" );

	VirtualFreeEx: procedure
	( 
			hProcess:	dword; 
		var	lpAddress:	dword; 
			dwSize:		SIZE_T; 
			dwFreeType:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualFreeEx@16" );

	VirtualFreeVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualFreeVlm@20" );

	VirtualLock: procedure
	( 
		var	lpAddress:	var; 
			dwSize:		SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualLock@8" );

	VirtualProtect: procedure
	( 
		var	lpAddress:		var; 
			dwSize:			SIZE_T; 
			flNewProtect:	dword; 
		var	lpflOldProtect:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualProtect@16" );

	VirtualProtectEx: procedure
	( 
			hProcess:		dword; 
		var	lpAddress:		var; 
			dwSize:			SIZE_T; 
			flNewProtect:	dword; 
		var	lpflOldProtect:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualProtectEx@20" );

	VirtualProtectVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualProtectVlm@24" );

	VirtualQuery: procedure
	( 
		var	lpAddress:	var; 
		var	lpBuffer:	MEMORY_BASIC_INFORMATION; 
			dwLength:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualQuery@12" );

	VirtualQueryEx: procedure
	( 
			hProcess:	dword; 
		var	lpAddress:	var; 
		var	lpBuffer:	MEMORY_BASIC_INFORMATION; 
			dwLength:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualQueryEx@16" );

	VirtualQueryVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualQueryVlm@16" );

	VirtualUnlock: procedure
	( 
		var	lpAddress:	var; 
			dwSize:		SIZE_T
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VirtualUnlock@8" );

	WaitCommEvent: procedure
	( 
			hFile:			dword; 
		var	lpEvtMask:		dword; 
		var	lpOverlapped:	OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitCommEvent@12" );

	WaitForDebugEvent: procedure
	( 
		var	lpDebugEvent:	DEBUG_EVENT; 
			dwMilliseconds:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitForDebugEvent@8" );

	WaitForMultipleObjects: procedure
	( 
			nCount:			dword; 
		var	lpHandles:		dword; 
			fWaitAll:		boolean; 
			dwMilliseconds:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitForMultipleObjects@16" );

	WaitForMultipleObjectsEx: procedure
	( 
			nCount:			dword; 
		var	lpHandles:		dword; 
			fWaitAll:		boolean; 
			dwMilliseconds:	dword; 
			bAlertable:		boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitForMultipleObjectsEx@20" );

	WaitForSingleObject: procedure
	( 
		hHandle:		dword; 
		dwMilliseconds:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitForSingleObject@8" );

	WaitForSingleObjectEx: procedure
	( 
		hHandle:		dword; 
		dwMilliseconds:	dword; 
		bAlertable:		boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitForSingleObjectEx@12" );

	WaitNamedPipe: procedure
	( 
		lpNamedPipeName:	string; 
		nTimeOut:			dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitNamedPipeA@8" );

	WideCharToMultiByte: procedure
	( 
			CodePage:			dword; 
			dwFlags:			dword; 
		var	lpWideCharStr:		var; 
			cchWideChar:		dword; 
		var	lpMultiByteStr:		var; 
			cbMultiByte:		dword; 
		var	lpDefaultChar:		var; 
		var	lpUsedDefaultChar:	boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WideCharToMultiByte@32" );

	WinExec: procedure
	( 
		lpCmdLine:	string; 
		uCmdShow:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WinExec@8" );

	WriteConsole: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpBuffer:				var; 
			nNumberOfCharsToWrite:	dword; 
		var	lpNumberOfCharsWritten:	dword; 
		var	lpReserved:				var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteConsoleA@20" );

	WriteConsoleInput: procedure
	( 
			hConsoleInput:				dword; 
		var	lpBuffer:					INPUT_RECORD; 
			nLength:					dword; 
		var	lpNumberOfEventsWritten:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteConsoleInputA@16" );

	WriteConsoleInputVDM: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteConsoleInputVDMA@16" );

	WriteConsoleOutput: procedure
	( 
			hConsoleOutput:	dword; 
		var	lpBuffer:		CHAR_INFO; 
			dwBufferSize:	COORD; 
			dwBufferCoord:	COORD; 
		VAR	lpWriteRegion:	SMALL_RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteConsoleOutputA@20" );

	WriteConsoleOutputAttribute: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpAttribute:			word; 
			nLength:				dword; 
			dwWriteCoord:			COORD; 
		var	lpNumberOfAttrsWritten:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteConsoleOutputAttribute@20" );

	WriteConsoleOutputCharacter: procedure
	( 
			hConsoleOutput:			dword; 
		var	lpCharacter:			char; 
			nLength:				dword; 
			dwWriteCoord:			COORD; 
		var	lpNumberOfCharsWritten:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteConsoleOutputCharacterA@20" );

	WriteFile: procedure
	( 
			hFile:					dword; 
		var	lpBuffer:				var; 
			nNumberOfBytesToWrite:	dword; 
		var	lpNumberOfBytesWritten:	dword; 
		var	lpOverlapped:			OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteFile@20" );

	WriteFileEx: procedure
	( 
			hFile:					dword; 
		var	lpBuffer:				var; 
			nNumberOfBytesToWrite:	dword; 
		var	lpOverlapped:			OVERLAPPED; 
			lpCompletionRoutine:	procedure
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteFileEx@20" );

	WriteFileGather: procedure
	( 
			hFile:					dword; 
		var	aSegmentArray:			var; 
			nNumberOfBytesToWrite:	dword; 
		var	lpReserved:				dword; 
		var	lpOverlapped:			OVERLAPPED
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteFileGather@20" );


	WriteFileVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteFileVlm@20" );

	WritePrivateProfileSection: procedure
	( 
		lpAppName:	string; 
		lpString:	string; 
		lpFileName:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WritePrivateProfileSectionA@12" );

	WritePrivateProfileString: procedure
	( 
		lpAppName:		string; 
		lpKeyName:		string; 
		lpString:		string; 
		lpFileName:		string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WritePrivateProfileStringA@16" );

	WritePrivateProfileStruct: procedure
	( 
			lpszSection:	string; 
			lpszKey:		string; 
		var	lpStruct:		var; 
			uSizeStruct:	dword; 
			szFile:			string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WritePrivateProfileStructA@20" );

	WriteProcessMemory: procedure
	( 
			hProcess:				dword; 
		var	lpBaseAddress:			var; 
		var	lpBuffer:				var; 
			nSize:					dword; 
		var	lpNumberOfBytesWritten:	dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteProcessMemory@20" );

	WriteProcessMemoryVlm: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteProcessMemoryVlm@20" );

	WriteProfileSection: procedure
	( 
		lpAppName:	string; 
		lpString:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteProfileSectionA@8" );

	WriteProfileString: procedure
	( 
		lpAppName:	string; 
		lpKeyName:	string; 
		lpString:	string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteProfileStringA@12" );

	WriteTapemark: procedure
	( 
		hDevice:			dword; 
		dwTapemarkType:		dword; 
		dwTapemarkCount:	dword; 
		bImmediate:			boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WriteTapemark@16" );





static

	AbortDoc: procedure
	( 
		hdc:dword
	);
		@stdcall;
		@use eax;
		@returns( "eax" );
		external( "__imp__AbortDoc@4" );

	AbortPath: procedure
	( 
		hdc:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AbortPath@4" );

	AddFontMemResourceEx: procedure
	( 
		var	pbFont:	var; 
			cbFont:	dword; 
		var	pdv:	var; 
		var	pcFonts:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AddFontMemResourceEx@16" );

	AddFontResource: procedure
	( 
		lpszFilename: string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AddFontResourceA@4" );

	AddFontResourceEx: procedure
	( 
			lpszFilename:	string; 
			fl:				dword; 
		var	pdv:			var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AddFontResourceExA@12" );

	AngleArc: procedure
	( 
		hdc:		dword; 
		x:			dword; 
		y:			dword; 
		dwRadius:	dword; 
		eStartAngle:real32; 
		eSweepAngle:real32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AngleArc@24" );

	AnimatePalette: procedure
	( 
			hpal:		dword; 
			iStartIndex:dword; 
			cEntries:	dword; 
		var	ppe:		PALETTEENTRY
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AnimatePalette@16" );

	Arc: procedure
	( 
		hdc:			dword; 
		nLeftRect:		dword; 
		nTopRect:		dword; 
		nRightRect:		dword; 
		nBottomRect:	dword; 
		nXStartArc:		dword; 
		nYStartArc:		dword; 
		nXEndArc:		dword; 
		nYEndArc:		dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Arc@36" );

	ArcTo: procedure
	( 
		hdc:			dword; 
		nLeftRect:		dword; 
		nTopRect:		dword; 
		nRightRect:		dword; 
		nBottomRect:	dword; 
		nXRadial1:		dword; 
		nYRadial1:		dword; 
		nXRadial2:		dword; 
		nYRadial2:		dword
	);
		@stdcall;

		@returns( "eax" );
		external( "__imp__ArcTo@36" );

	BeginPath: procedure
	( 
		hdc:dword
	);
		@stdcall;

		@returns( "eax" );
		external( "__imp__BeginPath@4" );

	BitBlt: procedure
	( 
		hdcDest		:dword; 
		nXDest		:dword; 
		nYDest		:dword; 
		nWidth		:dword; 
		nHeight		:dword; 
		hdcSrc		:dword; 
		nXSrc		:dword; 
		nYSrc		:dword; 
		dwRop		:dword
	);
		@stdcall;

		@returns( "eax" );
		external( "__imp__BitBlt@36" );

	CancelDC: procedure
	( 
		hdc:dword
	);
		@stdcall;

		@returns( "eax" );
		external( "__imp__CancelDC@4" );

	CheckColorsInGamut: procedure
	( 
			hdc				:dword; 
		var	lpRGBTriples	:var; 
		var	lpBuffer		:var; 
			nCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CheckColorsInGamut@16" );

	ChoosePixelFormat: procedure
	( 
			hdc		:dword; 
		var	ppfd	:PIXELFORMATDESCRIPTOR
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChoosePixelFormat@8" );

	Chord: procedure
	( 
		hdc			:dword; 
		nLeftRect	:dword; 
		nTopRect	:dword; 
		nRightRect	:dword; 
		nBottomRect	:dword; 
		nXRadial1	:dword; 
		nYRadial1	:dword; 
		nXRadial2	:dword; 
		nYRadial2	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Chord@36" );

	CloseEnhMetaFile: procedure
	( 
		hdc:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseEnhMetaFile@4" );

	CloseFigure: procedure
	( 
		hdc:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseFigure@4" );

	CloseMetaFile: procedure
	( 
		hdc:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseMetaFile@4" );

	ColorCorrectPalette: procedure
	( 
		hdc				:dword; 
		hPalette		:dword; 
		dwFirstEntry	:dword; 
		dwNumOfEntries	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ColorCorrectPalette@16" );

	ColorMatchToTarget: procedure
	( 
		hdc			:dword; 
		hdcTarget	:dword; 
		uiAction	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ColorMatchToTarget@12" );

	CombineRgn: procedure
	( 
		hrgnDest		:dword; 
		hrgnSrc1		:dword; 
		hrgnSrc2		:dword; 
		fnCombineMode	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CombineRgn@16" );

	CombineTransform: procedure
	( 
			lpxformResult	:dword; 
		var	lpxform1		:XFORM; 
		var	lpxform2		:XFORM
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CombineTransform@12" );

	CopyEnhMetaFile: procedure
	( 
		hemfSrc		:dword; 
		lpszFile	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyEnhMetaFileA@8" );

	CopyMetaFile: procedure
	( 
		hmfSrc		:dword; 
		lpszFile	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyMetaFileA@8" );

	CreateBitmap: procedure
	( 
			nWidth		:dword; 
			nHeight		:dword; 
			cPlanes		:dword; 
			cBitsPerPel	:dword; 
		var	lpvBits		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateBitmap@20" );

	CreateBitmapIndirect: procedure
	( 
		var	lpbm	:BITMAP
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateBitmapIndirect@4" );

	CreateBrushIndirect: procedure
	( 
		var	lplb	:LOGBRUSH
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateBrushIndirect@4" );

	CreateColorSpace: procedure
	( 
		var	lpLogColorSpace	:LOGCOLORSPACE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateColorSpaceA@4" );

	CreateCompatibleBitmap: procedure
	( 
		hdc		:dword; 
		nWidth	:dword; 
		nHeight	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateCompatibleBitmap@12" );

	CreateCompatibleDC: procedure
	( 
		hdc	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateCompatibleDC@4" );

	CreateDC: procedure
	( 
			lpszDriver	:string; 
			lpszDevice	:string; 
			lpszOutput	:string; 
		var	lpInitData	:DEVMODE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDCA@16" );

	CreateDIBPatternBrush: procedure
	( 
		hglbDIBPacked	:dword; 
		fuColorSpec		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDIBPatternBrush@8" );

	CreateDIBPatternBrushPt: procedure
	( 
		var	lpPackedDIB	:var; 
			iUsage		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDIBPatternBrushPt@8" );

	CreateDIBSection: procedure
	( 
			hdc			:dword; 
		var	pbmi		:BITMAPINFO; 
			iUsage		:dword; 
		var	ppvBits		:var; 
			hSection	:dword; 
			dwOffset	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDIBSection@24" );

	CreateDIBitmap: procedure
	( 
			hdc			:dword; 
		var	lpbmih		:BITMAPINFOHEADER; 
			fdwInit		:dword; 
		var	lpbInit		:var; 
		var	lpbmi		:BITMAPINFO; 
			fuUsage		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDIBitmap@24" );

	CreateDiscardableBitmap: procedure
	( 
		hdc		:dword; 
		nWidth	:dword; 
		nHeight	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDiscardableBitmap@12" );

	CreateEllipticRgn: procedure
	( 
		nLeftRect	:dword; 
		nTopRect	:dword; 
		nRightRect	:dword; 
		nBottomRect	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateEllipticRgn@16" );

	CreateEllipticRgnIndirect: procedure
	( 
		var	lprc	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateEllipticRgnIndirect@4" );

	CreateEnhMetaFile: procedure
	( 
			hdcRef			:dword; 
			lpFilename		:string; 
		var	lpRect			:RECT; 
			lpDescription	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateEnhMetaFileA@16" );

	CreateFont: procedure
	( 
		nHeight				:dword; 
		nWidth				:dword; 
		nEscapement			:dword; 
		nOrientation		:dword; 
		fnWeight			:dword; 
		fdwItalic			:dword; 
		fdwUnderline		:dword; 
		fdwStrikeOut		:dword; 
		fdwCharSet			:dword; 
		fdwOutputPrecision	:dword; 
		fdwClipPrecision	:dword; 
		fdwQuality			:dword; 
		fdwPitchAndFamily	:dword; 
		lpszFace			:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateFontA@56" );

	CreateFontIndirect: procedure
	( 
		var	lplf:LOGFONT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateFontIndirectA@4" );

	CreateFontIndirectEx: procedure
	( 
		var	penumlfex	:ENUMLOGFONTEXDV
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateFontIndirectExA@4" );

	CreateHalftonePalette: procedure
	( 
		hdc	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateHalftonePalette@4" );

	CreateHatchBrush: procedure
	( 
		fnStyle		:dword; 
		clrref		:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateHatchBrush@8" );

	CreateIC: procedure
	( 
			lpszDriver	:string; 
			lpszDevice	:string; 
			lpszOutput	:string; 
		var	lpdvmInit	:DEVMODE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateICA@16" );

	CreateMetaFile: procedure
	( 
		lpszFile	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateMetaFileA@4" );

	CreatePalette: procedure
	( 
		var	lplgpl	:LOGPALETTE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePalette@4" );

	CreatePatternBrush: procedure
	( 
		hbmp	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePatternBrush@4" );

	CreatePen: procedure
	( 
		fnPenStyle	:dword; 
		nWidth		:dword; 
		crColor		:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePen@12" );

	CreatePenIndirect: procedure
	( 
		var	lplgpn	:LOGPEN
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePenIndirect@4" );

	CreatePolyPolygonRgn: procedure
	( 
		var	lppt			:POINT; 
		var	lpPolyCounts	:dword; 
			nCount			:dword; 
			fnPolyFillMode	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePolyPolygonRgn@16" );

	CreatePolygonRgn: procedure
	( 
		var	lppt			:POINT; 
			cPoints			:dword; 
			fnPolyFillMode	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePolygonRgn@12" );

	CreateRectRgn: procedure
	( 
		nLeftRect	:dword; 
		nTopRect	:dword; 
		nRightRect	:dword; 
		nBottomRect	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateRectRgn@16" );

	CreateRectRgnIndirect: procedure
	( 
		VAR	lprc	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateRectRgnIndirect@4" );

	CreateRoundRectRgn: procedure
	( 
		nLeftRect		:dword; 
		nTopRect		:dword; 
		nRightRect		:dword; 
		nBottomRect		:dword; 
		nWidthEllipse	:dword; 
		nHeightEllipse	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateRoundRectRgn@24" );

	CreateScalableFontResource: procedure
	( 
		fdwHidden		:dword; 
		lpszFontRes		:string; 
		lpszFontFile	:string; 
		lpszCurrentPath	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateScalableFontResourceA@16" );

	CreateSolidBrush: procedure
	( 
		crColor		:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateSolidBrush@4" );

	DPtoLP: procedure
	( 
			hdc			:dword; 
		var	lpPoints	:POINT; 
			nCount		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DPtoLP@12" );

	DeleteColorSpace: procedure
	( 
		hColorSpace	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteColorSpace@4" );

	DeleteDC: procedure
	( 
		hdc	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteDC@4" );

	DeleteEnhMetaFile: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteEnhMetaFile@4" );

	DeleteMetaFile: procedure
	( 
		hemf	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteMetaFile@4" );

	DeleteObject: procedure
	( 
		hObject	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteObject@4" );

	DescribePixelFormat: procedure
	( 
			hdc				:dword; 
			iPixelFormat	:dword; 
			nBytes			:dword; 
		var	ppfd			:PIXELFORMATDESCRIPTOR
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DescribePixelFormat@16" );

	DeviceCapabilitiesEx: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeviceCapabilitiesExA@24" );

	DrawEscape: procedure
	( 
		hdc			:dword; 
		nEscape		:dword; 
		cbInput		:dword; 
		lpszInData	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawEscape@16" );

	Ellipse: procedure
	( 
		hdc			:dword; 
		nLeftRect	:dword; 
		nTopRect	:dword; 
		nRightRect	:dword; 
		nBottomRect	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Ellipse@20" );

	EnableEUDC: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnableEUDC@4" );

	EndDoc: procedure
	( 
		hdc	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndDoc@4" );

	EndPage: procedure
	( 
		hdc	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndPage@4" );

	EndPath: procedure
	( 
		hdc	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndPath@4" );

	EnumEnhMetaFile: procedure
	( 
			hdc				:dword; 
			hemf			:dword; 
			lpEnhMetaFunc	:dword; 
		var	lpData			:dword; 
		var	lpRect			:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumEnhMetaFile@20" );

	EnumFontFamilies: procedure
	( 
			hdc					:dword; 
			lpszFamily			:string; 
			lpEnumFontFamProc	:FONTENUMPROC; 
		var	lParam				:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumFontFamiliesA@16" );

	EnumFontFamiliesEx: procedure
	( 
			hdc					:dword; 
		var	lpLogfont			:LOGFONT; 
			lpEnumFontFamExProc	:FONTENUMPROC; 
		var	lParam				:var; 
			dwFlags				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumFontFamiliesExA@20" );

	EnumFonts: procedure
	( 
			hdc			:dword; 
			lpFaceName	:string; 
			lpFontFunc	:FONTENUMPROC; 
		var	lParam		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumFontsA@16" );

	EnumICMProfiles: procedure
	( 
			hdc						:dword; 
			lpEnumICMProfilesFunc	:ICMENUMPROC; 
		var	lParam					:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumICMProfilesA@12" );

	EnumMetaFile: procedure
	( 
			hdc			:dword; 
			hmf			:dword; 
			lpMetaFunc	:MFENUMPROC; 
		var	lParam		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumMetaFile@16" );

	EnumObjects: procedure
	( 
			hdc				:dword; 
			nObjectType		:dword; 
			lpObjectFunc	:GOBJENUMPROC; 
		var	lParam			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumObjects@16" );

	EqualRgn: procedure
	( 
		hSrcRgn1	:dword; 
		hSrcRgn2	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EqualRgn@8" );

	Escape: procedure
	( 
			hdc				:dword; 
			nEscape			:dword; 
			cbInput			:dword; 
			lpvInData		:string; 
		var	lpvOutData		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Escape@20" );

	ExcludeClipRect: procedure
	( 
		hdc			:dword; 
		nLeftRect	:dword; 
		nTopRect	:dword; 
		nRightRect	:dword; 
		nBottomRect	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExcludeClipRect@20" );

	ExtCreatePen: procedure
	( 
			dwPenStyle		:dword; 
			dwWidth			:dword; 
		var	lplb			:LOGBRUSH; 
			dwStyleCount	:dword; 
		var	lpStyle			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtCreatePen@20" );

	ExtCreateRegion: procedure
	( 
		var	lpXform		:XFORM; 
			nCount		:dword; 
		var	lpRgnData	:RGNDATA
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtCreateRegion@12" );

	ExtEscape: procedure
	( 
		hdc			:dword; 
		nEscape		:dword; 
		cbInput		:dword; 
		lpszInData	:string; 
		cbOutput	:dword; 
		lpszOutData	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtEscape@24" );

	ExtFloodFill: procedure
	( 
		hdc			:dword; 
		nXStart		:dword; 
		nYStart		:dword; 
		crColor		:dword; 
		fuFillType	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtFloodFill@20" );

	ExtSelectClipRgn: procedure
	( 
		hdc		:dword; 
		hrgn	:dword; 
		fnMode	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtSelectClipRgn@12" );

	ExtTextOut: procedure
	( 
			hdc			:dword; 
			x			:dword; 
			y			:dword; 
			fuOptions	:dword; 
		var	lprc		:RECT; 
			lpString	:string; 
			cbCount		:dword; 
		var	lpDx		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExtTextOutA@32" );

	FillPath: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FillPath@4" );

	FillRgn: procedure
	( 
		hdc				:dword; 
		hrgn			:dword; 
		hbr				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FillRgn@12" );

	FlattenPath: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FlattenPath@4" );

	FloodFill: procedure
	( 
		hdc				:dword; 
		nXStart			:dword; 
		nYStart			:dword; 
		crFill			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FloodFill@16" );

	FrameRgn: procedure
	( 
		hdc				:dword; 
		hrgn			:dword; 
		hbr				:dword; 
		nWidth			:dword; 
		nHeight			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FrameRgn@20" );

	GdiComment: procedure
	( 
				hdc		:dword; 
				cbSize	:dword; 
		var		lpData	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiComment@12" );

	GdiFlush: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiFlush@0" );

	GdiGetBatchLimit: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiGetBatchLimit@0" );

	GdiGetDC: procedure
	( 
		hdc		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiGetDC@4" );

	GdiGetDevmodeForPage: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiGetDevmodeForPage@16" );

	GdiGetPageCount: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiGetPageCount@4" );

	GdiGetPageHandle: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiGetPageHandle@12" );

	GdiGetSpoolFileHandle: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiGetSpoolFileHandle@12" );

	GdiPlayDCScript: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiPlayDCScript@24" );

	GdiPlayJournal: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiPlayJournal@20" );

	GdiPlayScript: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword; 
		p6:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiPlayScript@28" );

	GdiResetDCEMF: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiResetDCEMF@8" );

	GdiSetBatchLimit: procedure
	( 
		dwLimit		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GdiSetBatchLimit@4" );

	GetArcDirection: procedure
	( 
		hdc			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetArcDirection@4" );

	GetAspectRatioFilterEx: procedure
	( 
			hdc				:dword; 
		var	lpAspectRatio	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetAspectRatioFilterEx@8" );

	GetBitmapBits: procedure
	( 
			hbmp			:dword; 
			cbBuffer		:dword; 
		var	lpvBits			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBitmapBits@12" );

	GetBitmapDimensionEx: procedure
	( 
			hBitmap			:dword; 
		var	lpDimension		:SIZE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBitmapDimensionEx@8" );

	GetBkColor: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBkColor@4" );

	GetBkMode: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBkMode@4" );

	GetBoundsRect: procedure
	( 
			hdc			:dword; 
		var	lprcBounds	:RECT; 
			flags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBoundsRect@12" );

	GetBrushOrgEx: procedure
	( 
			hdc			:dword; 
		var	lppt		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetBrushOrgEx@8" );

	GetCharABCWidths: procedure
	( 
			hdc			:dword; 
			uFirstChar	:dword; 
			uLastChar	:dword; 
		var	lpabc		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharABCWidthsA@16" );

	GetCharABCWidthsFloat: procedure
	( 
			hdc			:dword; 
			iFirstChar	:dword; 
			iLastChar	:dword; 
		var	lpABCF		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharABCWidthsFloatA@16" );

	GetCharABCWidthsI: procedure
	( 
			hdc			:dword; 
			giFirst		:dword; 
			cgi			:dword; 
		var	pgi			:var; 
		var	lpabc		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharABCWidthsI@20" );

	GetCharWidth32: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharWidth32A@16" );

	GetCharWidth: procedure
	( 
			hdc			:dword; 
			iFirstChar	:dword; 
			iLastChar	:dword; 
		var	lpBuffer	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharWidthA@16" );

	GetCharWidthFloat: procedure
	( 
			hdc			:dword; 
			iFirstChar	:dword; 
			iLastChar	:dword; 
		var	pxBuffer	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharWidthFloatA@16" );

	GetCharWidthI: procedure
	( 
			hdc			:dword; 
			giFirst		:dword; 
			cgi			:dword; 
		var	pgi			:var; 
		var	lpBuffer	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharWidthI@20" );

	GetCharacterPlacement: procedure
	( 
			hdc			:dword; 
			lpString	:string; 
			nCount		:dword; 
			nMaxExtent	:dword; 
		var	lpResults	:var; 
			flags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCharacterPlacementA@24" );

	GetClipBox: procedure
	( 
			hdc			:dword; 
		var	lprc		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipBox@8" );

	GetClipRgn: procedure
	( 
		hdc				:dword; 
		hrgn			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipRgn@8" );

	GetColorAdjustment: procedure
	( 
			hdc			:dword; 
		var	lpca		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetColorAdjustment@8" );

	GetColorSpace: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetColorSpace@4" );

	GetCurrentObject: procedure
	( 
			hdc			:dword; 
			uObjectType	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentObject@8" );

	GetCurrentPositionEx: procedure
	( 
			hdc			:dword; 
		var	lpPoint		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCurrentPositionEx@8" );

	GetDCBrushColor: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDCBrushColor@4" );

	GetDCOrgEx: procedure
	( 
			hdc			:dword; 
		var	lpPoint		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDCOrgEx@8" );

	GetDCPenColor: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDCPenColor@4" );

	GetDIBColorTable: procedure
	( 
			hdc			:dword; 
			uStartIndex	:dword; 
			cEntries	:dword; 
		var	pColors		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDIBColorTable@16" );

	GetDIBits: procedure
	( 
			hdc			:dword; 
			hbmp		:dword; 
			uStartScan	:dword; 
			cScanLines	:dword; 
		var	lpvBits		:var; 
		var	lpbi		:BITMAPINFO; 
			uUsage		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDIBits@28" );

	GetDeviceCaps: procedure
	( 
		hdc				:dword; 
		nIndex			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDeviceCaps@8" );

	GetDeviceGammaRamp: procedure
	( 
			hdc			:dword; 
		var	lpRamp		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDeviceGammaRamp@8" );

	GetEnhMetaFile: procedure
	( 
		lpszMetaFile	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnhMetaFileA@4" );

	GetEnhMetaFileBits: procedure
	( 
			hemf		:dword; 
			cbBuffer	:dword; 
		var	lpbBuffer	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnhMetaFileBits@12" );

	GetEnhMetaFileDescription: procedure
	( 
		hemf			:dword; 
		cchBuffer		:dword; 
		lpszDescription	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnhMetaFileDescriptionA@12" );

	GetEnhMetaFileHeader: procedure
	( 
			hemf		:dword; 
			cbBuffer	:dword; 
		var	lpemh		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnhMetaFileHeader@12" );

	GetEnhMetaFilePaletteEntries: procedure
	( 
			hemf		:dword; 
			cEntries	:dword; 
		var	lppe		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnhMetaFilePaletteEntries@12" );

	GetEnhMetaFilePixelFormat: procedure
	( 
			hemf		:dword; 
			cbBuffer	:dword; 
		var	ppfd		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetEnhMetaFilePixelFormat@12" );

	GetFontAssocStatus: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFontAssocStatus@4" );

	GetFontData: procedure
	( 
			hdc			:dword; 
			dwTable		:dword; 
			dwOffset	:dword; 
		var	lpvBuffer	:var; 
			cbData		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFontData@20" );

	GetFontLanguageInfo: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFontLanguageInfo@4" );

	GetFontUnicodeRanges: procedure
	( 
			hdc			:dword; 
		var	lpgs		:GLYPHSET
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFontUnicodeRanges@8" );

	GetGlyphIndices: procedure
	( 
			hdc			:dword; 
			lpstr		:string; 
			c			:dword; 
		var	pgi			:var; 
			fl			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetGlyphIndicesA@20" );

	GetGlyphOutline: procedure
	( 
			hdc			:dword; 
			uChar		:char; 
			uFormat		:dword; 
		var	lpgm		:var; 
			dbBuffer	:dword; 
		var	lpvBuffer	:var; 
		var	lpmat2		:MAT2
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetGlyphOutline@28" );

	GetGlyphOutlineA: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword; 
		p6:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetGlyphOutlineA@28" );

	GetGraphicsMode: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetGraphicsMode@4" );

	GetICMProfile: procedure
	( 
			hdc			:dword; 
		var	lpcbName	:dword; 
			lpszFilename:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetICMProfileA@12" );

	GetKerningPairs: procedure
	( 
			hdc			:dword; 
			nNumPairs	:dword; 
		var	lpkrnpair	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKerningPairs@12" );

	GetKerningPairsA: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKerningPairsA@12" );

	GetLogColorSpace: procedure
	( 
			hColorSpace	:dword; 
		var	lpBuffer	:var; 
			nSize:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLogColorSpaceA@12" );

	GetMapMode: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMapMode@4" );

	GetMetaFile: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMetaFileA@4" );

	GetMetaFileBitsEx: procedure
	( 
			hmf			:dword; 
			nSize		:dword; 
		var	lpvData		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMetaFileBitsEx@12" );

	GetMetaRgn: procedure
	( 
		hdc				:dword; 
		hrgn			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMetaRgn@8" );

	GetMiterLimit: procedure
	( 
			hdc			:dword; 
		var	peLimit		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMiterLimit@8" );

	GetNearestColor: procedure
	( 
		hdc				:dword; 
		crColor			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNearestColor@8" );

	GetNearestPaletteIndex: procedure
	( 
		hpal			:dword; 
		crColor			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNearestPaletteIndex@8" );

	GetObject: procedure
	( 
			hgdiobj			:dword; 
			cbBuffer		:dword; 
		var	lpvObject		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetObjectA@12" );

	GetObjectType: procedure
	( 
		h					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetObjectType@4" );

	GetOutlineTextMetrics: procedure
	( 
			hdc				:dword; 
			cbData			:dword; 
		var	lpOTM			:OUTLINETEXTMETRIC
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetOutlineTextMetricsA@12" );

	GetPaletteEntries: procedure
	( 
			hpal			:dword; 
			iStartIndex		:dword; 
			nEntries		:dword; 
		var	lppe			:PALETTEENTRY
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPaletteEntries@16" );

	GetPath: procedure
	( 
			hdc				:dword; 
		var	lpPoints		:POINT; 
		var	lpTypes			:var; 
			nSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPath@16" );

	GetPixel: procedure
	( 
		hdc					:dword; 
		nXPos				:dword; 
		nYPos				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPixel@12" );

	GetPixelFormat: procedure
	( 
		var	pFormat			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPixelFormat@4" );

	GetPolyFillMode: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPolyFillMode@4" );

	GetROP2: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetROP2@4" );

	GetRandomRgn: procedure
	( 
		hdc					:dword; 
		hrgn				:dword; 
		iNum				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetRandomRgn@12" );

	GetRasterizerCaps: procedure
	( 
		var	lprs			:RASTERIZER_STATUS; 
			cb				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetRasterizerCaps@8" );

	GetRegionData: procedure
	( 
			hRgn			:dword; 
			dwCount			:dword; 
		var	lpRgnData		:RGNDATA
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetRegionData@12" );

	GetRelAbs: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetRelAbs@8" );

	GetRgnBox: procedure
	( 
			hrgn			:dword; 
		var	lprc			:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetRgnBox@8" );

	GetStockObject: procedure
	( 
		fnObject			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetStockObject@4" );

	GetStretchBltMode: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetStretchBltMode@4" );

	GetSystemPaletteEntries: procedure
	( 
			hdc				:dword; 
			iStartIndex		:dword; 
			nEntries		:dword; 
		var	lppe			:PALETTEENTRY
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemPaletteEntries@16" );

	GetSystemPaletteUse: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemPaletteUse@4" );

	GetTextAlign: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextAlign@4" );

	GetTextCharacterExtra: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextCharacterExtra@4" );

	GetTextCharset: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextCharset@4" );

	GetTextCharsetInfo: procedure
	( 
			hdc				:dword; 
		var	lpSig			:FONTSIGNATURE; 
			dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextCharsetInfo@12" );

	GetTextColor: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextColor@4" );

	GetTextExtentExPoint: procedure
	( 
			hdc				:dword; 
			lpszStr			:string; 
			cchString		:dword; 
			nMaxExtent		:dword; 
		var	lpnFit			:dword; 
		var	alpDx			:var; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextExtentExPointA@28" );

	GetTextExtentExPointI: procedure
	( 
			hdc				:dword; 
		var	pgiIn			:var; 
			cgi				:dword; 
			nMaxExtent		:dword; 
		var	lpnFit			:dword; 
		var	alpDx			:var; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextExtentExPointI@28" );

	GetTextExtentPoint32: procedure
	( 
			hdc				:dword; 
			lpString		:string; 
			cbString		:dword; 
		var	lpSize			:SIZE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextExtentPoint32A@16" );

	GetTextExtentPoint: procedure
	( 
			hdc				:dword; 
			lpString		:string; 
			cpString		:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextExtentPointA@16" );

	GetTextExtentPointI: procedure
	( 
			hdc				:dword; 
		var	pgiIn			:word; 
			cgi				:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextExtentPointI@16" );

	GetTextFace: procedure
	( 
		hdc					:dword; 
		nCount				:dword; 
		lpFaceName			:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextFaceA@12" );

	GetTextMetrics: procedure
	( 
			hdc				:dword; 
		var	lptm			:TEXTMETRIC
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTextMetricsA@8" );

	GetViewportExtEx: procedure
	( 
			hdc				:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetViewportExtEx@8" );

	GetViewportOrgEx: procedure
	( 
			hdc				:dword; 
		var	lpPoint			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetViewportOrgEx@8" );

	GetWinMetaFileBits: procedure
	( 
			hemf			:dword; 
			cbBuffer		:dword; 
		var	lpbBuffer		:var; 
			fnMapMode		:dword; 
			hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWinMetaFileBits@20" );

	GetWindowExtEx: procedure
	( 
			hdc				:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowExtEx@8" );

	GetWindowOrgEx: procedure
	( 
			hdc				:dword; 
		var	lpPoint			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowOrgEx@8" );

	GetWorldTransform: procedure
	( 
			hdc				:dword; 
		var	lpXform			:XFORM
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWorldTransform@8" );

	IntersectClipRect: procedure
	( 
		hdc					:dword; 
		nLeftRect			:dword; 
		nTopRect			:dword; 
		nRightRect			:dword; 
		nBottomRect			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IntersectClipRect@20" );

	InvertRgn: procedure
	( 
		hdc					:dword; 
		hrgn				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InvertRgn@8" );

	LPtoDP: procedure
	( 
			hdc				:dword; 
		var	lpPoints		:POINT; 
			nCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LPtoDP@12" );

	LineDD: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LineDDA@24" );

	LineTo: procedure
	( 
		hdc				:dword; 
		nXEnd			:dword; 
		nYEnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LineTo@12" );

	MaskBlt: procedure
	( 
		hdcDest			:dword; 
		nXDest			:dword; 
		nYDest			:dword; 
		nWidth			:dword; 
		hHeight			:dword; 
		hdcSrc			:dword; 
		nXSrc			:dword; 
		nYSrc			:dword; 
		hbmMask			:dword; 
		xMask			:dword; 
		yMask			:dword; 
		dwRop			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MaskBlt@48" );

	ModifyWorldTransform: procedure
	( 
			hdc			:dword; 
		var	lpXform		:XFORM; 
			iMode		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ModifyWorldTransform@12" );

	MoveToEx: procedure
	( 
			hdc			:dword; 
			X			:dword; 
			Y			:dword; 
		var	lpPoint		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MoveToEx@16" );

	OffsetClipRgn: procedure
	( 
		hdc				:dword; 
		nXOffset		:dword; 
		nYOffset		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OffsetClipRgn@12" );

	OffsetRgn: procedure
	( 
		hrgn			:dword; 
		nXOffset		:dword; 
		nYOffset		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OffsetRgn@12" );

	OffsetViewportOrgEx: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OffsetViewportOrgEx@16" );

	OffsetWindowOrgEx: procedure
	( 
			hdc				:dword; 
			nXOffset		:dword; 
			nYOffset		:dword; 
		var	lpPoint			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OffsetWindowOrgEx@16" );

	PaintRgn: procedure
	( 
		hdc					:dword; 
		hrgn				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PaintRgn@8" );

	PatBlt: procedure
	( 
		hdc					:dword; 
		nXLeft				:dword; 
		nYLeft				:dword; 
		nWidth				:dword; 
		nHeight				:dword; 
		dwRop				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PatBlt@24" );

	PathToRegion: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PathToRegion@4" );

	Pie: procedure
	( 
		hdc					:dword; 
		nLeftRect			:dword; 
		nTopRect			:dword; 
		nRightRect			:dword; 
		nBottomRect			:dword; 
		nXRadial1			:dword; 
		nYRadial1			:dword; 
		nXRadial2			:dword; 
		nYRadial2			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Pie@36" );

	PlayEnhMetaFile: procedure
	( 
			hdc				:dword; 
			hemf			:dword; 
		var	lpRect			:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PlayEnhMetaFile@12" );

	PlayEnhMetaFileRecord: procedure
	( 
			hdc				:dword; 
		var	lpHandletable	:HANDLETABLE; 
		var	lpEnhMetaRecord	:ENHMETARECORD; 
			nHandles		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PlayEnhMetaFileRecord@16" );

	PlayMetaFile: procedure
	( 
		hdc					:dword; 
		hmf					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PlayMetaFile@8" );

	PlayMetaFileRecord: procedure
	( 
			hdc				:dword; 
		var	lpHandletable	:HANDLETABLE; 
		var	lpMetaRecord	:METARECORD; 
			nHandles		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PlayMetaFileRecord@16" );

	PlgBlt: procedure
	( 
			hdcDest			:dword; 
		var	lpPoint			:POINT; 
			hdcSrc			:dword; 
			nXSrc			:dword; 
			nYSrc			:dword; 
			nWidth			:dword; 
			nHeight			:dword; 
			hbmMask			:dword; 
			xMask			:dword;
			yMask			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PlgBlt@40" );

	PolyBezier: procedure
	( 
			hdc				:dword; 
		var	lppt			:POINT; 
			cPoints			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyBezier@12" );

	PolyBezierTo: procedure
	( 
			hdc				:dword; 
		var	lppt			:POINT; 
			cCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyBezierTo@12" );

	PolyDraw: procedure
	( 
			hdc				:dword; 
		var	lppt			:POINT; 
		var	lpbTypes		:var; 
			cCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyDraw@16" );

	PolyPatBlt: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyPatBlt@20" );

	PolyPolygon: procedure
	( 
			hdc				:dword; 
		var	lpPoints		:POINT; 
		var	lpPolyCounts	:var; 
			nCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyPolygon@16" );

	PolyPolyline: procedure
	( 
			hdc				:dword; 
		var	lppt			:POINT; 
		var	lpdwPolyPoints	:var; 
			cCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyPolyline@16" );

	PolyTextOut: procedure
	( 
			hdc				:dword; 
		var	pptxt			:POLYTEXT; 
			cStrings		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolyTextOutA@12" );

	Polygon: procedure
	( 
			hdc				:dword; 
		var	lpPoints		:POINT; 
			nCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Polygon@12" );

	Polyline: procedure
	( 
			hdc				:dword; 
		var	lppt			:POINT; 
			cPoints			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Polyline@12" );

	PolylineTo: procedure
	( 
			hdc				:dword; 
		var	lppt			:POINT; 
			cCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PolylineTo@12" );

	PtInRegion: procedure
	( 
		hrgn				:dword; 
		X					:dword; 
		Y					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PtInRegion@12" );

	PtVisible: procedure
	( 
		hdc					:dword; 
		X					:dword; 
		Y					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PtVisible@12" );

	RealizePalette: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RealizePalette@4" );

	RectInRegion: procedure
	( 
			hrgn			:dword; 
		var	lprc			:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RectInRegion@8" );

	RectVisible: procedure
	( 
			hdc				:dword; 
		var	lprc			:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RectVisible@8" );

	Rectangle: procedure
	( 
			hdc				:dword; 
			nLeftRect		:dword; 
			nTopRect		:dword; 
			nRightRect		:dword; 
			nBottomRect		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__Rectangle@20" );

	RemoveFontMemResourceEx: procedure
	( 
		fh					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RemoveFontMemResourceEx@4" );

	RemoveFontResource: procedure
	( 
		lpFileName			:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RemoveFontResourceA@4" );

	RemoveFontResourceEx: procedure
	( 
			lpFileName		:string; 
			fl				:dword; 
		var	pdf				:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RemoveFontResourceExA@12" );

	ResetDC: procedure
	( 
			hdc				:dword; 
		var	lpInitData		:DEVMODE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ResetDCA@8" );

	ResizePalette: procedure
	( 
		hpal				:dword; 
		nEntries			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ResizePalette@8" );

	RestoreDC: procedure
	( 
		hdc					:dword; 
		nSavedDC			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RestoreDC@8" );

	RoundRect: procedure
	( 
		hdc					:dword; 
		nLeftRect			:dword; 
		nTopRect			:dword; 
		nRightRect			:dword; 
		nBottomRect			:dword; 
		nWidth				:dword; 
		nHeight				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RoundRect@28" );

	SaveDC: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SaveDC@4" );

	ScaleViewportExtEx: procedure
	( 
			hdc				:dword; 
			Xnum			:dword; 
			Xdenom			:dword; 
			Ynum			:dword; 
			Ydenom			:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScaleViewportExtEx@24" );

	ScaleWindowExtEx: procedure
	( 
			hdc				:dword; 
			Xnum			:dword; 
			Xdenom			:dword; 
			Ynum			:dword; 
			Ydenom			:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScaleWindowExtEx@24" );

	SelectBrushLocal: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SelectBrushLocal@8" );

	SelectClipPath: procedure
	( 
		hdc					:dword; 
		iMode				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SelectClipPath@8" );

	SelectClipRgn: procedure
	( 
		hdc					:dword; 
		hrgn				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SelectClipRgn@8" );

	SelectFontLocal: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SelectFontLocal@8" );

	SelectObject: procedure
	( 
		hdc					:dword; 
		hgdiobj				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SelectObject@8" );

	SelectPalette: procedure
	( 
		hdc					:dword; 
		hpal				:dword; 
		bForceBackground	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SelectPalette@12" );

	_SetAbortProc: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetAbortProc@8" );

	SetArcDirection: procedure
	( 
		hdc					:dword; 
		ArcDirection		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetArcDirection@8" );

	SetBitmapBits: procedure
	( 
			hbmp			:dword; 
			cBytes			:dword; 
		var	lpBits			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetBitmapBits@12" );

	SetBitmapDimensionEx: procedure
	( 
			hBitmap			:dword; 
			nWidth			:dword; 
			nHeight			:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetBitmapDimensionEx@16" );

	SetBkColor: procedure
	( 
		hdc					:dword; 
		crColor				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetBkColor@8" );

	SetBkMode: procedure
	( 
		hdc					:dword; 
		iBkMode				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetBkMode@8" );

	SetBoundsRect: procedure
	( 
			hdc				:dword; 
		var	lprcBounds		:RECT; 
			flags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetBoundsRect@12" );

	SetBrushOrgEx: procedure
	( 
			hdc				:dword; 
			nXOrg			:dword; 
			nYOrg			:dword; 
		var	lppt			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetBrushOrgEx@16" );

	SetColorAdjustment: procedure
	( 
			hdc				:dword; 
		var	lpca			:COLORADJUSTMENT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetColorAdjustment@8" );

	SetColorSpace: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetColorSpace@8" );

	SetDCBrushColor: procedure
	( 
		hdc					:dword; 
		crColor				:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDCBrushColor@8" );

	SetDCPenColor: procedure
	( 
			hdc				:dword; 
			crColor			:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDCPenColor@8" );

	SetDIBColorTable: procedure
	( 
			hdc				:dword; 
		uStartIndex			:dword; 
		cEntries			:dword; 
		pColors				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDIBColorTable@16" );

	SetDIBits: procedure
	( 
			hdc				:dword; 
			hbmp			:dword; 
			uStartScan		:dword; 
			cScanLines		:dword; 
		var	lpvBits			:var; 
		var	lpbmi			:BITMAPINFO; 
			fuColorUse		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDIBits@28" );

	SetDIBitsToDevice: procedure
	( 
			hdc			:dword; 
			XDest		:dword; 
			YDest		:dword; 
			dwWidth		:dword; 
			dwHeight	:dword; 
			XSrc		:dword; 
			YSrc		:dword; 
			uStartScan	:dword; 
			cScanLines	:dword; 
		var	lpvBits		:var; 
		var	lpbmi		:BITMAPINFO; 
			fuColorUse	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDIBitsToDevice@48" );

	SetDeviceGammaRamp: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDeviceGammaRamp@8" );

	SetEnhMetaFileBits: procedure
	( 
			cbBuffer		:dword; 
		var	lpData			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetEnhMetaFileBits@8" );

	SetFontEnumeration: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFontEnumeration@4" );

	SetGraphicsMode: procedure
	( 
		hdc					:dword; 
		iMode				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetGraphicsMode@8" );

	SetICMMode: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetICMMode@8" );

	SetICMProfile: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetICMProfileA@8" );

	SetMagicColors: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMagicColors@12" );

	SetMapMode: procedure
	( 
		hdc					:dword; 
		fnMapMode			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMapMode@8" );

	SetMapperFlags: procedure
	( 
		hdc					:dword; 
		dwFlag				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMapperFlags@8" );

	SetMetaFileBitsEx: procedure
	( 
			nSize			:dword; 
		var	lpData			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMetaFileBitsEx@8" );

	SetMetaRgn: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMetaRgn@4" );

	SetMiterLimit: procedure
	( 
			hdc				:dword; 
			eNewLimit		:real32; 
		var	peLoldLimit		:real32
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMiterLimit@12" );

	SetPaletteEntries: procedure
	( 
			hpal			:dword; 
			iStart			:dword; 
			cEntries		:dword; 
		var	lppe			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPaletteEntries@16" );

	SetPixel: procedure
	( 
		hdc					:dword; 
		X					:dword; 
		Y					:dword; 
		crColor				:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPixel@16" );

	SetPixelFormat: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPixelFormat@12" );

	SetPixelV: procedure
	( 
		hdc					:dword; 
		X					:dword; 
		Y					:dword; 
		crColor				:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPixelV@16" );

	SetPolyFillMode: procedure
	( 
		hdc					:dword; 
		iPolyFillMode		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPolyFillMode@8" );

	SetROP2: procedure
	( 
		hdc					:dword; 
		fnDrawMode			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetROP2@8" );

	SetRectRgn: procedure
	( 
		hrgn				:dword; 
		nLeftRect			:dword; 
		nTopRect			:dword; 
		nRightRect			:dword; 
		nBottomRect			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetRectRgn@20" );

	SetRelAbs: procedure
	( 
		p0:dword; 
		p1:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetRelAbs@8" );

	SetStretchBltMode: procedure
	( 
		hdc					:dword; 
		iStretchMode		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetStretchBltMode@8" );

	SetSystemPaletteUse: procedure
	( 
		hdc					:dword; 
		uUsage				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetSystemPaletteUse@8" );

	SetTextAlign: procedure
	( 
		hdc					:dword; 
		fMode				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTextAlign@8" );

	SetTextCharacterExtra: procedure
	( 
		hdc					:dword; 
		nCharExtra			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTextCharacterExtra@8" );

	SetTextColor: procedure
	( 
		hdc					:dword; 
		crColor				:COLORREF
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTextColor@8" );

	SetTextJustification: procedure
	( 
		hdc					:dword; 
		nBreakExtra			:dword; 
		nBreakCount			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTextJustification@12" );

	SetViewportExtEx: procedure
	( 
			hdc				:dword; 
			nXExtent		:dword; 
			nYExtent		:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetViewportExtEx@16" );

	SetViewportOrgEx: procedure
	( 
			hdc				:dword; 
			X				:dword; 
			Y				:dword; 
		var	lpPoint			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetViewportOrgEx@16" );

	SetWinMetaFileBits: procedure
	( 
			cbBuffer		:dword; 
		var	lpbBuffer		:var; 
			hdcRef			:dword; 
		var	lpmfp			:METAFILEPICT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWinMetaFileBits@16" );

	SetWindowExtEx: procedure
	( 
			hdc				:dword; 
			nXExtent		:dword; 
			nYExtent		:dword; 
		var	lpSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowExtEx@16" );

	SetWindowOrgEx: procedure
	( 
			hdc				:dword; 
			X				:dword; 
			Y				:dword; 
		var	lpPoint			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowOrgEx@16" );

	SetWorldTransform: procedure
	( 
			hdc				:dword; 
		var	lpXform			:XFORM
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWorldTransform@8" );

	StartDoc: procedure
	( 
			hdc				:dword; 
		var	lpdi			:DOCINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__StartDocA@8" );

	StartPage: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__StartPage@4" );

	StretchBlt: procedure
	( 
		hdcDest				:dword; 
		nXOriginDest		:dword; 
		nYOriginDest		:dword; 
		nWidthDest			:dword; 
		nHeightDest			:dword; 
		hdcSrc				:dword; 
		nXOriginSrc			:dword; 
		nYOriginSrc			:dword; 
		nWidthSrc			:dword; 
		nHeightSrc			:dword; 
		dwRop				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__StretchBlt@44" );

	StretchDIBits: procedure
	( 
			hdc				:dword; 
			XDest			:dword; 
			YDest			:dword; 
			nDestWidth		:dword; 
			nDestHeight		:dword; 
			XSrc			:dword; 
			YSrc			:dword; 
			nSrcWidth		:dword; 
			nSrcHeight		:dword; 
		var	lpBits			:var; 
		var	lpBitsInfo		:BITMAPINFO; 
			iUsage			:dword; 
			dwRop			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__StretchDIBits@52" );

	StrokeAndFillPath: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__StrokeAndFillPath@4" );

	StrokePath: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__StrokePath@4" );

	SwapBuffers: procedure
	( 
		p0:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SwapBuffers@4" );

	TextOut: procedure
	( 
		hdc					:dword; 
		nXStart				:dword; 
		nYStart				:dword; 
		lpString			:string; 
		cbString			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TextOutA@20" );

	TranslateCharsetInfo: procedure
	( 
		var	lpSrc			:var; 
			lpCs			:CHARSETINFO; 
			dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TranslateCharsetInfo@12" );

	UnrealizeObject: procedure
	( 
		hgdiobj				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnrealizeObject@4" );

	UpdateColors: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UpdateColors@4" );

	UpdateICMRegKey: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UpdateICMRegKeyA@16" );

	WidenPath: procedure
	( 
		hdc					:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WidenPath@4" );

	gdiPlaySpoolStream: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword; 
		p4:dword; 
		p5:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__gdiPlaySpoolStream@24" );
		


static

	ActivateKeyboardLayout: procedure
	( 
		hkl				:dword; 
		Flags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ActivateKeyboardLayout@8" );

	AdjustWindowRect: procedure
	( 
		var	lpRect		:RECT; 
			dwStyle		:dword; 
			bMenu		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AdjustWindowRect@12" );

	AdjustWindowRectEx: procedure
	( 
		var	lpRect		:RECT; 
			dwStyle		:dword; 
			bMenu		:boolean;
			dwExStyle	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AdjustWindowRectEx@16" );

	AnimateWindow: procedure
	( 
		hwnd			:dword; 
		dwTime			:dword; 
		dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AnimateWindow@12" );

	AnyPopup: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__AnyPopup@0" );

	AppendMenu: procedure
	( 
		hMenu			:dword; 
		uFlags			:dword; 
		uIDNewItem		:dword; 
		lpNewItem		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AppendMenuA@16" );

	ArrangeIconicWindows: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ArrangeIconicWindows@4" );

	AttachThreadInput: procedure
	( 
		idAttach		:dword; 
		idAttachTo		:dword; 
		fAttach			:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__AttachThreadInput@12" );

	BeginDeferWindowPos: procedure
	( 
		nNumWindows		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BeginDeferWindowPos@4" );

	BeginPaint: procedure
	( 
			hwnd		:dword; 
		var	lpPaint		:PAINTSTRUCT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BeginPaint@8" );

	BlockInput: procedure
	( 
		fBlockIt		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BlockInput@4" );

	BringWindowToTop: procedure
	( 
		hwnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BringWindowToTop@4" );

	BroadcastSystemMessage: procedure
	( 
			dwFlags			:dword; 
		var	lpdwRecipients	:dword; 
			uiMessage		:dword; 
			_wParam			:dword; 
			_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__BroadcastSystemMessage@20" );


	CallMsgFilter: procedure
	( 
		var	lpMsg			:MSG; 
			nCode			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CallMsgFilter@8" );

	CallMsgFilterA: procedure
	( 
		var	lpMsg			:MSG; 
			nCode			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CallMsgFilterA@8" );

	CallNextHookEx: procedure
	( 
		hhk				:dword; 
		nCode			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CallNextHookEx@16" );

	CallWindowProc: procedure
	( 
		lpPrevWndFunc	:WNDPROC; 
		hWnd			:dword; 
		Msg				:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CallWindowProcA@20" );

	CascadeWindows: procedure
	( 
			hwndParent	:dword; 
			wHow		:dword; 
		var	lpRect		:RECT; 
			cKids		:dword; 
		var	lpKids		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CascadeWindows@20" );

	ChangeClipboardChain: procedure
	( 
		hWndRemove		:dword; 
		hWndNewNext		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChangeClipboardChain@8" );

	ChangeDisplaySettings: procedure
	( 
		var	lpDevMode	:DEVMODE; 
			dwFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChangeDisplaySettingsA@8" );

	ChangeDisplaySettingsEx: procedure
	( 
			lpszDeviceName	:string; 
		var	lpDevMode		:DEVMODE; 
			hwnd			:dword; 
			dwflags			:dword; 
		var	_lParam			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChangeDisplaySettingsExA@20" );

	CharLower: procedure
	( 
		lpsz		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharLowerA@4" );

	CharLowerBuff: procedure
	( 
		lpsz		:string; 
		cchLength	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharLowerBuffA@8" );

	CharNext: procedure
	( 
		lpsz		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharNextA@4" );

	CharPrev: procedure
	( 
		lpszStart	:string; 
		lpszCurrent	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharPrevA@8" );

	CharToOem: procedure
	( 
		lpszSrc		:string; 
		lpszDest	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharToOemA@8" );

	CharToOemBuff: procedure
	( 
		lpszSrc			:string; 
		lpszDst			:string; 
		cchDstLength	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharToOemBuffA@12" );

	CharUpper: procedure
	( 
		lpsz			:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharUpperA@4" );

	CharUpperBuff: procedure
	( 
		lpsz			:string; 
		cchLength		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CharUpperBuffA@8" );

	CheckDlgButton: procedure
	( 
		hDlg			:dword; 
		nIDButton		:dword; 
		uCheck			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CheckDlgButton@12" );

	CheckMenuItem: procedure
	( 
		hmenu			:dword; 
		uIDCheckItem	:dword; 
		uCheck			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CheckMenuItem@12" );

	CheckMenuRadioItem: procedure
	( 
		hmenu			:dword; 
		idFirst			:dword; 
		idLast			:dword; 
		idCheck			:dword; 
		uFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CheckMenuRadioItem@20" );

	CheckRadioButton: procedure
	( 
		hDlg			:dword; 
		nIDFirstButton	:dword; 
		nIDLastButton	:dword; 
		nIDCheckButton	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CheckRadioButton@16" );

	ChildWindowFromPoint: procedure
	( 
		hWndParent		:dword; 
		_point			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChildWindowFromPoint@12" );

	ChildWindowFromPointEx: procedure
	( 
		hwndParent		:dword; 
		pt				:POINT; 
		uFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChildWindowFromPointEx@16" );

	ClientToScreen: procedure
	( 
			hWnd		:dword; 
		var	lpPoint		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ClientToScreen@8" );

	ClipCursor: procedure
	( 
		var	lpRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ClipCursor@4" );

	CloseClipboard: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseClipboard@0" );

	CloseDesktop: procedure
	( 
		hDesktop:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseDesktop@4" );

	CloseWindow: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseWindow@4" );

	CloseWindowStation: procedure
	( 
		hWinSta			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CloseWindowStation@4" );

	CopyAcceleratorTable: procedure
	( 
			hAccelSrc		:dword; 
		var	lpAccelDst		:ACCEL; 
			cAccelEntries	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyAcceleratorTableA@12" );

	CopyIcon: procedure
	( 
		hIcon			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyIcon@4" );

	CopyImage: procedure
	( 
		hImage		:dword; 
		uType		:dword; 
		cxDesired	:dword; 
		cyDesired	:dword; 
		fuFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyImage@20" );

	CopyRect: procedure
	( 
		var	lprcDst	:RECT; 
		var	lprcSrc	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CopyRect@8" );

	CountClipboardFormats: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__CountClipboardFormats@0" );

	CreateAcceleratorTable: procedure
	( 
		var	lpaccel		:ACCEL; 
			cEntries	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateAcceleratorTableA@8" );

	CreateCaret: procedure
	( 
		hWnd			:dword; 
		hBitmap			:dword; 
		nWidth			:dword; 
		nHeight			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateCaret@16" );

	CreateCursor: procedure
	( 
			hInst		:dword; 
			xHotSpot	:dword; 
			yHostSpot	:dword; 
			nWidth		:dword; 
			nHeight		:dword; 
		var	pvANDPlane	:var; 
		var	pvXORPlane	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateCursor@28" );

	CreateDesktop: procedure
	( 
			lpszDesktop		:string; 
			lpszDevice		:string; 
		var	pDevmode		:DEVMODE; 
			dwFlags			:dword; 
			dwDesiredAccess	:ACCESS_MASK; 
		var	lpsa			:SECURITY_ATTRIBUTES
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDesktopA@24" );

	CreateDialogIndirectParam: procedure
	( 
			hInstance		:dword; 
		var	lpTemplate		:DLGTEMPLATE; 
			hWndParent		:dword; 
			lpDialogFunc	:DLGPROC; 
			lParamInit		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDialogIndirectParamA@20" );

	CreateDialogParam: procedure
	( 
		hInstance			:dword; 
		lpTemplateName		:string; 
		hWndParent			:dword; 
		lpDialogFunc		:DLGPROC; 
		dwInitParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateDialogParamA@20" );

	CreateIcon: procedure
	( 
			hInstance		:dword; 
			nWidth			:dword; 
			nHeight			:dword; 
			cPlanes			:dword; 
			cBitsPixel		:dword; 
		var	lpbANDbits		:var; 
		var	lpbXORbits		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateIcon@28" );

	CreateIconFromResource: procedure
	( 
		var	presbits	:var; 
			dwResSize	:dword; 
			fIcon		:boolean; 
			dwVer		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateIconFromResource@16" );

	CreateIconFromResourceEx: procedure
	( 
		var	pbIconBits	:var; 
			cbIconBits	:dword; 
			fIcon		:boolean; 
			dwVersion	:dword; 
			cxDesired	:dword; 
			cyDesired	:dword; 
			uFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateIconFromResourceEx@28" );

	CreateIconIndirect: procedure
	( 
		var	piconinfo	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateIconIndirect@4" );

	CreateMDIWindow: procedure
	( 
		lpClassName		:string; 
		lpWindowName	:string; 
		dwStyle			:dword; 
		X				:dword; 
		Y				:dword; 
		nWidth			:dword; 
		nHeight			:dword; 
		hWndParent		:dword; 
		hInstance		:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateMDIWindowA@40" );

	CreateMenu: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateMenu@0" );

	CreatePopupMenu: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreatePopupMenu@0" );

	CreateWindowEx: procedure
	( 
			dwExStyle		:dword; 
			lpClassName		:string; 
			lpWindowName	:string; 
			dwStyle			:dword; 
			x				:dword; 
			y				:dword; 
			nWidth			:dword; 
			nHeight			:dword; 
			hWndParent		:dword; 
			hMenu			:dword; 
			hInstance		:dword; 
		var	lpParam			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateWindowExA@48" );


	CreateWindowStation: procedure
	( 
			lpwinsta		:string; 
			dwReserved		:dword; 
			dwDesiredAccess	:ACCESS_MASK; 
		var	lpsa			:SECURITY_ATTRIBUTES
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateWindowStationA@16" );

	CreateUpDownControl: procedure
	( 
		dwExStyle		:dword;
		x				:dword; 
		y				:dword; 
		_cx				:dword; 
		cy				:dword; 
		hWndParent		:dword; 
		nID				:dword; 
		hInstance		:dword;
		hBuddy			:dword;
		nUpper			:dword;
		uLower			:dword; 
		nPos			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__CreateUpDownControl@48" );



	DdeAbandonTransaction: procedure
	( 
		idInst			:dword; 
		hConv			:dword; 
		idTransactions	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeAbandonTransaction@12" );

	DdeAccessData: procedure
	( 
			hData		:dword; 
		var	pcbDataSize	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeAccessData@8" );

	DdeAddData: procedure
	( 
			hData		:dword; 
		var	pSrc		:var; 
			cb			:dword; 
			cbOff		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeAddData@16" );

	DdeClientTransaction: procedure
	( 
		var	pData		:var; 
			cbData		:dword; 
			hConv		:dword; 
			hszItem		:dword; 
			wFmt		:dword; 
			wType		:dword; 
			dwTimeOut	:dword; 
		var	pdwResult	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeClientTransaction@32" );

	DdeCmpStringHandles: procedure
	( 
		hsz1			:dword; 
		hsz2			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeCmpStringHandles@8" );

	DdeConnect: procedure
	( 
			idInst		:dword; 
			hszService	:dword; 
			hszTopic	:dword; 
		var	pCC			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeConnect@16" );

	DdeConnectList: procedure
	( 
			idInst		:dword; 
			hszService	:dword; 
			hszTopic	:dword; 
			hConvList	:dword; 
		var	pCC			:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeConnectList@20" );

	DdeCreateDataHandle: procedure
	( 
			idInst		:dword; 
		var	pSrc		:var; 
			cb			:dword; 
			cbOff		:dword; 
			hszItem		:dword; 
			wFmt		:dword; 
			afCmd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeCreateDataHandle@28" );

	DdeCreateStringHandle: procedure
	( 
			idInst		:dword; 
			psz			:string; 
			iCodePage	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeCreateStringHandleA@12" );

	DdeDisconnect: procedure
	( 
		hConv			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeDisconnect@4" );

	DdeDisconnectList: procedure
	( 
		hConvList		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeDisconnectList@4" );

	DdeEnableCallback: procedure
	( 
		idInst			:dword; 
		hConv			:dword; 
		wCmd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeEnableCallback@12" );

	DdeFreeDataHandle: procedure
	( 
		hData			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeFreeDataHandle@4" );

	DdeFreeStringHandle: procedure
	( 
		idInst			:dword; 
		hsz				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeFreeStringHandle@8" );

	DdeGetData: procedure
	( 
			hData		:dword; 
		var	pDst		:var; 
			cbMax		:dword; 
			cbOff		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeGetData@16" );

	DdeGetLastError: procedure
	( 
		idInst			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeGetLastError@4" );

	DdeImpersonateClient: procedure
	( 
		hConv		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeImpersonateClient@4" );

	DdeInitialize: procedure
	( 
		var	pidInst			:dword; 
			_pfnCallback	:PFNCALLBACK; 
			afCmd			:dword; 
			ulRes			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeInitializeA@16" );

	DdeKeepStringHandle: procedure
	( 
			idInst			:dword; 
			hsz				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeKeepStringHandle@8" );

	DdeNameService: procedure
	( 
		idInst			:dword; 
		hsz1			:dword; 
		hsz2			:dword; 
		afCmd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeNameService@16" );

	DdePostAdvise: procedure
	( 
		idInst			:dword; 
		hszTopic		:dword; 
		hszItem			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdePostAdvise@12" );


	DdeQueryConvInfo: procedure
	( 
			hConv			:dword; 
			idTransaction	:dword; 
		var	pConvInfo		:var
	);					
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeQueryConvInfo@12" );

	DdeQueryNextServer: procedure
	( 
			hConvList		:dword; 
			hConvPrev		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeQueryNextServer@8" );

	DdeQueryString: procedure
	( 
		idInst			:dword; 
		hsz				:dword; 
		psz				:string; 
		pcchMax3		:dword; 
		iCodePage		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeQueryStringA@20" );

	DdeReconnect: procedure
	( 
		hConv			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeReconnect@4" );

	DdeSetQualityOfService: procedure
	( 
			hwndClient		:dword; 
		var	pqosNew			:SECURITY_QUALITY_OF_SERVICE; 
		var	pqosPrev		:SECURITY_QUALITY_OF_SERVICE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeSetQualityOfService@12" );

	DdeSetUserHandle: procedure
	( 
		hConv			:dword; 
		id				:dword; 
		hUser			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeSetUserHandle@12" );

	DdeUnaccessData: procedure
	( 
		hData			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeUnaccessData@4" );

	DdeUninitialize: procedure
	( 
		idInst			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DdeUninitialize@4" );

	DefDlgProc: procedure
	( 
		hDlg			:dword; 
		_Msg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DefDlgProcA@16" );

	DefFrameProc: procedure
	( 
		hWnd			:dword; 
		hWndMDIClient	:dword; 
		uMsg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DefFrameProcA@20" );

	DefMDIChildProc: procedure
	( 
		hWnd			:dword; 
		uMsg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DefMDIChildProcA@16" );

	DefWindowProc: procedure
	( 
		hWnd		:dword; 
		_Msg		:dword; 
		_wParam		:dword; 
		_lParam		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DefWindowProcA@16" );

	DeferWindowPos: procedure
	( 
		hWinPosInfo		:dword; 
		hWnd			:dword; 
		hWndInsertAfter	:dword; 
		x				:dword; 
		y				:dword; 
		_cx				:dword; 
		_cy				:dword; 
		uFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeferWindowPos@32" );

	DeleteMenu: procedure
	( 
		hMenu			:dword; 
		uPosition		:dword; 
		uflags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DeleteMenu@12" );

	DestroyAcceleratorTable: procedure
	( 
		hAccel			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DestroyAcceleratorTable@4" );

	DestroyCaret: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__DestroyCaret@0" );

	DestroyCursor: procedure
	( 
		hCursor			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DestroyCursor@4" );

	DestroyIcon: procedure
	( 
		hIcon			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DestroyIcon@4" );

	DestroyMenu: procedure
	( 
		hMenu			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DestroyMenu@4" );

	DestroyWindow: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DestroyWindow@4" );

	DialogBoxIndirectParam: procedure
	( 
			hInstance		:dword; 
		var	hDialogTemplate	:DLGTEMPLATE; 
			hWndParent		:dword; 
			lpDialogProc	:DLGPROC; 
			dwInitParam		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DialogBoxIndirectParamA@20" );

	DialogBoxParam: procedure
	( 
		hInstance		:dword; 
		lpTemplateName	:string; 
		hWndParent		:dword; 
		lpDialogFunc	:DLGPROC; 
		dwInitParam		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DialogBoxParamA@20" );

	DispatchMessage: procedure
	( 
		var	lpmsg		:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DispatchMessageA@4" );

	DlgDirList: procedure
	( 
		hDlg			:dword; 
		lpPathSpec		:string; 
		nIDListBox		:dword; 
		nIDStackPath	:dword; 
		uFileType		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DlgDirListA@20" );

	DlgDirListComboBox: procedure
	( 
		hDlg			:dword; 
		lpPathSpec		:string; 
		nIDComboBox		:dword; 
		nIDStaticPath	:dword; 
		uFiletype		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DlgDirListComboBoxA@20" );

	DlgDirSelectComboBoxEx: procedure
	( 
		hDlg			:dword; 
		lpString		:string; 
		nCount			:dword; 
		nIDComboBox		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DlgDirSelectComboBoxExA@16" );

	DlgDirSelectEx: procedure
	( 
		hDlg			:dword; 
		lpString		:string; 
		nCount			:dword; 
		nIDListBox		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DlgDirSelectExA@16" );

	DragDetect: procedure
	( 
		hwnd		:dword; 
		pt			:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DragDetect@12" );

	DrawAnimatedRects: procedure
	( 
			hwnd		:dword; 
			idAni		:dword; 
		var	lprcFrom	:RECT; 
		var	lprcTo		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawAnimatedRects@16" );

	DrawCaption: procedure
	( 
			hwnd		:dword; 
			hdc			:dword; 
		var	lprc		:RECT; 
			uFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawCaption@16" );

	DrawEdge: procedure
	( 
			hdc			:dword; 
		var	qrc			:RECT; 
			edge		:dword; 
			grfFlags	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawEdge@16" );

	DrawFocusRect: procedure
	( 
			hDC			:dword; 
		var	lprc		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawFocusRect@8" );

	DrawFrameControl: procedure
	( 
			hdc		:dword; 
		var	lprc	:RECT; 
			uType	:dword; 
			uState	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawFrameControl@16" );

	DrawIcon: procedure
	( 
		hDC			:dword; 
		X			:dword; 
		Y			:dword; 
		hIcon		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawIcon@16" );

	DrawIconEx: procedure
	( 
		hdc					:dword; 
		xLeft				:dword; 
		yTop				:dword; 
		hIcon				:dword; 
		cxWidth				:dword; 
		cyWidth				:dword; 
		istepIfAniCur		:dword; 
		hbrFlickerFreeDraw	:dword; 
		diFlags				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawIconEx@36" );

	DrawMenuBar: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawMenuBar@4" );

	DrawState: procedure
	( 
		hdc				:dword; 
		hbr				:dword; 
		lpOutputFunc	:DRAWSTATEPROC; 
		lData			:dword; 
		wData			:dword; 
		x				:dword; 
		y				:dword; 
		_cx				:dword; 
		_cy				:dword; 
		fuFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawStateA@40" );

	DrawText: procedure
	( 
			hDC			:dword; 
			lpString	:string; 
			nCount		:dword; 
		var	lpRect		:RECT; 
			uFormat		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawTextA@20" );

	DrawTextEx: procedure
	( 
			hdc			:dword; 
			lpchText	:string; 
			cchText		:dword; 
		var	lprc		:RECT; 
			dwDTFormat	:dword; 
		var	lpDTParams	:DRAWTEXTPARAMS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawTextExA@24" );

	EmptyClipboard: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__EmptyClipboard@0" );

	EnableMenuItem: procedure
	( 
		hMenu			:dword; 
		uIDEnableItem	:dword; 
		uEnable			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnableMenuItem@12" );

	EnableScrollBar: procedure
	( 
		hWnd			:dword; 
		wSBflags		:dword; 
		wArrows			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnableScrollBar@12" );

	EnableWindow: procedure
	( 
		hWnd			:dword; 
		bEnable			:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnableWindow@8" );

	EndDeferWindowPos: procedure
	( 
		hWinPosInfo		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndDeferWindowPos@4" );

	EndDialog: procedure
	( 
		hDlg			:dword; 
		nResult			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndDialog@8" );

	EndMenu: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndMenu@0" );

	EndPaint: procedure
	( 
			hWnd		:dword; 
		var	lpPaint		:PAINTSTRUCT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EndPaint@8" );

	EnumChildWindows: procedure
	( 
		hWndParent		:dword; 
		lpEnumFunc		:WNDENUMPROC; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumChildWindows@12" );

	EnumClipboardFormats: procedure
	( 
		format			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumClipboardFormats@4" );

	EnumDesktopWindows: procedure
	( 
		hDesktop		:dword; 
		lpfn			:WNDENUMPROC; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDesktopWindows@12" );

	EnumDesktops: procedure
	( 
		hwinsta			:dword; 
		lpEnumFunc		:DESKTOPENUMPROC; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDesktopsA@12" );

	EnumDisplayMonitors: procedure
	( 
			hdc			:dword; 
		var	lprcClip	:RECT; 
			lpfnEnum	:MONITORENUMPROC; 
			dwData		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDisplayMonitors@16" );

	EnumDisplaySettings: procedure
	( 
			lpszDeviceName	:string; 
			uModeNum		:dword; 
		var	lpDevMode		:DEVMODE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDisplaySettingsA@12" );

	EnumDisplaySettingsEx: procedure
	( 
			lpszDeviceName	:string; 
			uModeNum		:dword; 
		var	lpDevMode		:DEVMODE;
			dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumDisplaySettingsExA@16" );

	EnumProps: procedure
	( 
		hWnd			:dword; 
		lpEnumFunc		:PROPENUMPROC
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumPropsA@8" );

	EnumPropsEx: procedure
	( 
		hWnd			:dword; 
		lpEnumFunc		:PROPENUMPROC;
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumPropsExA@12" );

	EnumThreadWindows: procedure
	( 
		dwThreadId		:dword; 
		lpfn			:WNDENUMPROC; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumThreadWindows@12" );

	EnumWindowStations: procedure
	( 
		lpEnumFunc		:WINSTAENUMPROC; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumWindowStationsA@8" );

	EnumWindows: procedure
	( 
		lpEnumFunc		:WINENUMPROC; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EnumWindows@8" );

	EqualRect: procedure
	( 
		var	lprc1		:RECT; 
		var	lprc2		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__EqualRect@8" );

	ExcludeUpdateRgn: procedure
	( 
		hdc			:dword; 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExcludeUpdateRgn@8" );

	ExitWindowsEx: procedure
	( 
		uFlags		:dword; 
		dwReserved	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ExitWindowsEx@8" );

	FillRect: procedure
	( 
			hDC			:dword; 
		var	lprc		:RECT; 
			hbr			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FillRect@12" );

	FindWindow: procedure
	( 
		lpClassName		:string; 
		lpWindowName	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindWindowA@8" );

	FindWindowEx: procedure
	( 
		hwndParent		:dword; 
		hwndChildAfter	:dword; 
		lpszClass		:string; 
		lpszWindow		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindWindowExA@16" );

	FlashWindow: procedure
	( 
		hWnd			:dword; 
		bInvert			:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FlashWindow@8" );

	FrameRect: procedure
	( 
			hDC			:dword; 
		var	lprc		:RECT; 
			hbr			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FrameRect@12" );

	FreeDDElParam: procedure
	( 
		_msg			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FreeDDElParam@8" );

	GetActiveWindow: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetActiveWindow@0" );

	GetAltTabInfoW: procedure
	( 
			hwnd		:dword; 
			iItem		:dword; 
		var	pati		:ALTTABLINFO; 
		var	pszItemText	:var; 
			cchItemText	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetAltTabInfo@20" );

	GetAltTabInfo: procedure
	( 
			hwnd		:dword; 
			iItem		:dword; 
		var	pati		:ALTTABLINFO; 
		var	pszItemText	:var; 
			cchItemText	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetAltTabInfoA@20" );

	GetAncestor: procedure
	( 
		hwnd			:dword; 
		gaFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetAncestor@8" );

	GetAsyncKeyState: procedure
	( 
		vKey			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetAsyncKeyState@4" );

	GetCapture: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCapture@0" );

	GetCaretBlinkTime: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCaretBlinkTime@0" );

	GetCaretPos: procedure
	( 
		var	lpPoint		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCaretPos@4" );

	GetClassInfo: procedure
	( 
			hInstance	:dword; 
			lpClassName	:string; 
		var	lpWndClass	:WNDCLASS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClassInfoA@12" );

	GetClassInfoEx: procedure
	( 
			hinst		:dword; 
			lpszClass	:string; 
		var	lpwcx		:WNDCLASSEX
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClassInfoExA@12" );

	GetClassLong: procedure
	( 
		hWnd			:dword; 
		nIndex			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClassLongA@8" );

	GetClassName: procedure
	( 
		hWnd			:dword; 
		lpClassName		:string; 
		nMaxCount		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClassNameA@12" );

	GetClassWord: procedure
	( 
		hWnd			:dword; 
		nIndex			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClassWord@8" );

	GetClientRect: procedure
	( 
			hWnd		:dword; 
		var	lpRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClientRect@8" );

	GetClipCursor: procedure
	( 
		var	lpRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipCursor@4" );

	GetClipboardData: procedure
	( 
		uFormat			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipboardData@4" );

	GetClipboardFormatName: procedure
	( 
		format			:dword; 
		lpszFormatName	:string; 
		cchMaxCount		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipboardFormatNameA@12" );

	GetClipboardOwner: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipboardOwner@0" );

	GetClipboardSequenceNumber: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipboardSequenceNumber@0" );

	GetClipboardViewer: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetClipboardViewer@0" );

	GetComboBoxInfo: procedure
	( 
			hwndCombo	:dword; 
		var	pcbi		:COMBOBOXINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetComboBoxInfo@8" );

	GetCursor: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCursor@0" );

	GetCursorInfo: procedure
	( 
		var	pci			:CURSORINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCursorInfo@4" );

	GetCursorPos: procedure
	( 
		var	lpPoint		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetCursorPos@4" );

	GetDC: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDC@4" );

	GetDCEx: procedure
	( 
		hWnd			:dword; 
		hrgnClip		:dword; 
		flags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDCEx@12" );

	GetDesktopWindow: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDesktopWindow@0" );

	GetDialogBaseUnits: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDialogBaseUnits@0" );

	GetDlgCtrlID: procedure
	( 
		hwndCtl			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDlgCtrlID@4" );

	GetDlgItem: procedure
	( 
		hDlg			:dword; 
		nIDDlgItem		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDlgItem@8" );

	GetDlgItemInt: procedure
	( 
			hDlg			:dword; 
			nIDDlgItem		:dword; 
		var	lpTranslated	:boolean; 
			bSigned			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDlgItemInt@16" );

		
	#macro GetDlgItemText( _parms_[] );
	
		#if( @elements( _parms_ ) = 3 )
		
			w_GetDlgItemText
			(
				@text( _parms_[0] ),	// hDlg		
				@text( _parms_[1] ), // nIDDlgItem
				@text( _parms_[2] )  // lpString	
			)
			
		#elseif( @elements( _parms_ ) = 4 )
		
			w.GetDlgItemTextA
			(
				@text( _parms_[0] ),	// hDlg		
				@text( _parms_[1] ), // nIDDlgItem
				@text( _parms_[2] ), // lpString	
				@text( _parms_[3] )  // nMaxCount	
			)
			
		#else
		
			#error( "Illegal # of parameters in GetDlgItemText call " )
			
		#endif
		
	#endmacro

	procedure w_GetDlgItemText 
	( 
		hDlg			:dword; 
		nIDDlgItem		:dword; 
		lpString		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "w_w_GetDlgItemText" );

static
	GetDlgItemTextA: procedure
	( 
			hDlg			:dword; 
			nIDDlgItem		:dword; 
		var	lpString		:var; 
			nMaxCount		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDlgItemTextA@16" );

	GetDoubleClickTime: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetDoubleClickTime@0" );

	GetFocus: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFocus@0" );

	GetForegroundWindow: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetForegroundWindow@0" );

	GetGUIThreadInfo: procedure
	( 
			idThread	:dword; 
		var	lpgui		:GUITHREADINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetGUIThreadInfo@8" );

	GetGuiResources: procedure
	( 
		hProcess		:dword; 
		uiFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetGuiResources@8" );

	GetIconInfo: procedure
	( 
			hIcon		:dword; 
		var	piconinfo	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetIconInfo@8" );

	GetInputDesktop: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetInputDesktop@0" );

	GetInputState: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetInputState@0" );

	GetKBCodePage: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKBCodePage@0" );

	GetKeyNameText: procedure
	( 
		_lParam			:dword; 
		lpString		:string; 
		nSize			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyNameTextA@12" );

	GetKeyState: procedure
	( 
		nVirtKey		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyState@4" );

	GetKeyboardLayout: procedure
	( 
		idThread		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyboardLayout@4" );

	GetKeyboardLayoutList: procedure
	( 
			nBuff		:dword; 
		var	lpList		:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyboardLayoutList@8" );

	GetKeyboardLayoutName: procedure
	( 
		pwszKLID		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyboardLayoutNameA@4" );

	GetKeyboardState: procedure
	( 
		var	lpKeyState	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyboardState@4" );

	GetKeyboardType: procedure
	( 
		nTypeFlag		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetKeyboardType@4" );

	GetLastActivePopup: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLastActivePopup@4" );

	GetLastInputInfo: procedure
	( 
		var	plii	:LASTINPUTINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetLastInputInfo@4" );

	GetListBoxInfo: procedure
	( 
		hwnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetListBoxInfo@4" );

	GetMenu: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenu@4" );

	GetMenuBarInfo: procedure
	( 
			hwnd		:dword; 
			idObject	:dword; 
			idItem		:dword; 
		var	pmbi		:MENUBARINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuBarInfo@16" );

	GetMenuCheckMarkDimensions: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuCheckMarkDimensions@0" );

	GetMenuContextHelpId: procedure
	( 
		hMenu			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuContextHelpId@4" );

	GetMenuDefaultItem: procedure
	( 
		hMenu			:dword; 
		fByPos			:boolean; 
		gmdiFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuDefaultItem@12" );

	GetMenuInfo: procedure
	( 
			hmenu		:dword; 
		var	lpcmi		:MENUINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuInfo@8" );

	GetMenuItemCount: procedure
	( 
		hMenu			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuItemCount@4" );

	GetMenuItemID: procedure
	( 
		hMenu			:dword; 
		nPos			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuItemID@8" );

	GetMenuItemInfo: procedure
	( 
			hMenu		:dword; 
			uItem		:dword; 
			fByPosition	:boolean; 
		var	lpmii		:MENUITEMINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuItemInfoA@16" );

	GetMenuItemRect: procedure
	( 
			hWnd		:dword; 
			hMenu		:dword; 
			uItem		:dword; 
		var	lprcItem	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuItemRect@16" );

	GetMenuState: procedure
	( 
		hMenu		:dword; 
		uId			:dword; 
		uFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuState@12" );

	#macro GetMenuString( _parms_[] );
	
		#if( @elements( _parms_ ) = 4 )
		
			w_GetMenuString
			(
				_parms_[0],	 // hMenu	
				_parms_[1],  // uIDItem	
				_parms_[2],  // lpString
				_parms_[3]	 //	uFlag	
			)
			
		#elseif( @elements( _parms_ ) = 5 )
		
			w.GetMenuStringA
			(
				_parms_[0],	// hDlg		
				_parms_[1], // nIDDlgItem
				_parms_[2], // lpString	
				_parms_[3], // nMaxCount
				_parms_[4]  // uFlag	
			)
			
		#else
		
			#error( "Illegal # of parameters in GetMenuString call " )
			
		#endif
		
	#endmacro

	procedure w_GetMenuString 
	( 
		hMenu		:dword; 
		uIDItem		:dword; 
		lpString	:string;
		uFlag		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "w_w_GetMenuString" );

static
	GetMenuStringA: procedure
	( 
			hMenu		:dword; 
			uIDItem		:dword; 
		var	lpString	:var; 
			nMaxCount	:dword; 
			uFlag		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMenuStringA@20" );

	GetMessage: procedure
	( 
		var	lpMsg			:MSG; 
			hWnd			:dword; 
			wMsgFilterMin	:dword; 
			wMsgFilterMax	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMessageA@16" );

	GetMessageExtraInfo: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMessageExtraInfo@0" );

	GetMessagePos: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMessagePos@0" );

	GetMessageTime: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMessageTime@0" );

	GetMonitorInfo: procedure
	( 
			hMonitor	:dword; 
		var	lpmi		:MONITORINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetMonitorInfoA@8" );

	GetNextDlgGroupItem: procedure
	( 
		hDlg			:dword; 
		hCtl			:dword; 
		bPrevious		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNextDlgGroupItem@12" );

	GetNextDlgTabItem: procedure
	( 
		hDlg			:dword; 
		hCtl			:dword; 
		bPrevious		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetNextDlgTabItem@12" );

	GetOpenClipboardWindow: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetOpenClipboardWindow@0" );

	GetParent: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetParent@4" );

	GetPriorityClipboardFormat: procedure
	( 
		var	paFormatPriorityList	:var; 
			cFormats				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPriorityClipboardFormat@8" );

	GetProcessWindowStation: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetProcessWindowStation@0" );

	GetProp: procedure
	( 
		hWnd			:dword; 
		lpString		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetPropA@8" );

	GetQueueStatus: procedure
	( 
		flags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetQueueStatus@4" );

	GetScrollBarInfo: procedure
	( 
			hwnd		:dword; 
			idObject	:dword; 
		var	psbi		:SCROLLBARINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetScrollBarInfo@12" );

	GetScrollInfo: procedure
	( 
			hwnd		:dword; 
			fnBar		:dword; 
		var	lpsi		:SCROLLINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetScrollInfo@12" );

	GetScrollPos: procedure
	( 
		hWnd			:dword; 
		nBar			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetScrollPos@8" );

	GetScrollRange: procedure
	( 
			hWnd		:dword; 
			nBar		:dword; 
		var	lpMinPos	:dword; 
		var	lpMaxPos	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetScrollRange@16" );

	GetShellWindow: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetShellWindow@0" );

	GetSubMenu: procedure
	( 
		hMenu			:dword; 
		nPos			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSubMenu@8" );

	GetSysColor: procedure
	( 
		nIndex			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSysColor@4" );

	GetSysColorBrush: procedure
	( 
		nIndex			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSysColorBrush@4" );

	GetSystemMenu: procedure
	( 
		hWnd			:dword; 
		bRevert			:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemMenu@8" );

	GetSystemMetrics: procedure
	( 
		nIndex			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSystemMetrics@4" );

	GetTabbedTextExtent: procedure
	( 
			hDC					:dword; 
			lpString			:string; 
			nCount				:dword; 
			nTabPositions		:dword; 
		var	lpnTabStopPositions	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTabbedTextExtentA@20" );

	GetThreadDesktop: procedure
	( 
		dwThreadID			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetThreadDesktop@4" );

	GetTitleBarInfo: procedure
	( 
			hwnd			:dword; 
		var	pti				:TITLEBARINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTitleBarInfo@8" );

	GetTopWindow: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetTopWindow@4" );


	GetUpdateRect: procedure
	( 
			hWnd		:dword; 
		var	lpRect		:RECT; 
			bErase		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetUpdateRect@12" );

	GetUpdateRgn: procedure
	( 
		hWnd			:dword; 
		hRgn			:dword; 
		bErase			:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetUpdateRgn@12" );

	GetUserObjectInformation: procedure
	( 
			hObj			:dword; 
			nIndex			:dword; 
		var	pvInfo			:var; 
			nLength			:dword; 
		var	lpnLengthNeeded	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetUserObjectInformationA@20" );

	GetWindow: procedure
	( 
		hWnd		:dword; 
		uCmd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindow@8" );

	GetWindowContextHelpId: procedure
	( 
		hwnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowContextHelpId@4" );

	GetWindowDC: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowDC@4" );

	GetWindowInfo: procedure
	( 
			hWnd	:dword; 
		var	pwi		:WINDOWINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowInfo@8" );

	GetWindowLong: procedure
	( 
		hWnd		:dword; 
		nIndex		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowLongA@8" );

	GetWindowModuleFileNameW: procedure
	( 
		hwnd			:dword; 
		lpszFileName	:wstring; 
		cchFileNameMax	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowModuleFileName@12" );

	GetWindowModuleFileName: procedure
	( 
		hwnd			:dword; 
		lpszFileName	:string; 
		cchFileNameMax	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowModuleFileNameA@12" );

	GetWindowPlacement: procedure
	( 
			hWnd		:dword; 
		var	lpwndpl		:WINDOWPLACEMENT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowPlacement@8" );

	GetWindowRect: procedure
	( 
			hWnd		:dword; 
		var	lpRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowRect@8" );

	GetWindowRgn: procedure
	( 
		hWnd		:dword; 
		hRgn		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowRgn@8" );


	#macro GetWindowText( _parms_[] );
	
		#if( @elements( _parms_ ) = 2 )
		
			w.w_GetWindowText
			(
				@text( _parms_[0] ),
				@text( _parms_[1] ) 
			)
			
		#elseif( @elements( _parms_ ) = 3 )
		
			w.GetWindowTextA
			(
				@text( _parms_[0] ),
				@text( _parms_[1] ),
				@text( _parms_[2] ) 
			)
			
		#else
		
			#error( "Illegal # of parameters in GetWindowText call " )
			
		#endif
		
	#endmacro

	procedure w_GetWindowText 
	( 
		hWnd			:dword; 
		lpString		:string 
	);
		@stdcall;
		@returns( "eax" );
		external( "w_w_GetWindowText" );

static
	GetWindowTextA: procedure
	( 
			hWnd		:dword; 
		var	lpString	:var; 
			nMaxCount	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowTextA@12" );

	GetWindowTextLength: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowTextLengthA@4" );

	GetWindowThreadProcessId: procedure
	( 
			hwnd			:dword; 
		var	lpdwProcessID	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetWindowThreadProcessId@8" );

	GrayString: procedure
	( 
		hDC				:dword; 
		hBrush			:dword; 
		lpOutputFunc	:OUTPUTPROC; 
		_lpData			:dword; 
		nCount			:dword; 
		X				:dword; 
		Y				:dword; 
		nWidth			:dword; 
		nHeight			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GrayStringA@36" );

	HideCaret: procedure
	( 
		hwnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HideCaret@4" );

	HiliteMenuItem: procedure
	( 
		hwnd			:dword; 
		hmenu			:dword; 
		uItemHilite		:dword; 
		uHilite			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__HiliteMenuItem@16" );

	ImpersonateDdeClientWindow: procedure
	( 
		hWndClient	:dword; 
		hWndServer	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ImpersonateDdeClientWindow@8" );

	InSendMessage: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__InSendMessage@0" );

	InSendMessageEx: procedure
	( 
		var	lpReserved	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InSendMessageEx@4" );

	InflateRect: procedure
	( 
		var	lprc	:RECT; 
			_dx		:dword; 
			_dy		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InflateRect@12" );

	InsertMenu: procedure
	( 
			hMenu		:dword; 
			uPosition	:dword; 
			uFlags		:dword; 
			uIDNewItem	:dword; 
			lpNewItem	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InsertMenuA@20" );

	InsertMenuItem: procedure
	( 
			hMenu			:dword; 
			uItem			:dword; 
			fByPosition		:boolean; 
		var	lpmii			:MENUITEMINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InsertMenuItemA@16" );

	IntersectRect: procedure
	( 
		var	lprcDst		:RECT; 
		var	lprcSrc1	:RECT; 
		var	lprcSrc2	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IntersectRect@12" );

	InvalidateRect: procedure
	( 
			hWnd		:dword; 
		var	lpRect		:RECT; 
			bErase		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InvalidateRect@12" );

	InvalidateRgn: procedure
	( 
		hWnd		:dword; 
		hRgn		:dword; 
		bErase		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InvalidateRgn@12" );

	InvertRect: procedure
	( 
			hDC		:dword; 
		var	lprc	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__InvertRect@8" );

	IsCharAlpha: procedure
	( 
		_ch			:char
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsCharAlphaA@4" );

	IsCharAlphaNumeric: procedure
	( 
		_ch			:char
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsCharAlphaNumericA@4" );

	IsCharLower: procedure
	( 
		_ch			:char
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsCharLowerA@4" );

	IsCharUpper: procedure
	( 
		_ch			:char
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsCharUpperA@4" );

	IsChild: procedure
	( 
		hWndParent		:dword; 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsChild@8" );

	IsClipboardFormatAvailable: procedure
	( 
		format			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsClipboardFormatAvailable@4" );

	IsDialogMessageW: procedure
	( 
			hDlg		:dword; 
		var	lpMsg		:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsDialogMessage@8" );

	IsDialogMessage: procedure
	( 
			hDlg		:dword; 
		var	lpMsg		:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsDialogMessageA@8" );

	IsDlgButtonChecked: procedure
	( 
		hDlg			:dword; 
		nIDButton		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsDlgButtonChecked@8" );

	IsIconic: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsIconic@4" );

	IsMenu: procedure
	( 
		hMenu			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsMenu@4" );

	IsRectEmpty: procedure
	( 
		var	lprc	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsRectEmpty@4" );

	IsWindow: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsWindow@4" );

	IsWindowEnabled: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsWindowEnabled@4" );

	IsWindowUnicode: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsWindowUnicode@4" );

	IsWindowVisible: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsWindowVisible@4" );

	IsZoomed: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__IsZoomed@4" );

	KillTimer: procedure
	( 
		hWnd		:dword; 
		uIDEvent	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__KillTimer@8" );

	LoadAccelerators: procedure
	( 
		hInstance	:dword; 
		lpTableName	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadAcceleratorsA@8" );

	LoadBitmap: procedure
	( 
		hInstance		:dword; 
		lpBitmapName	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadBitmapA@8" );

	LoadCursor: procedure
	( 
		hInstance		:dword; 
		lpCursorName	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadCursorA@8" );

	LoadCursorFromFile: procedure
	( 
		lpFileName		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadCursorFromFileA@4" );

	LoadIcon: procedure
	( 
		hInstance		:dword; 
		lpIconName		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadIconA@8" );

	LoadImage: procedure
	( 
		hinst			:dword; 
		lpszName		:string; 
		uType			:dword; 
		cxDesired		:dword; 
		cyDesired		:dword; 
		fuLoad			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadImageA@24" );

	LoadKeyboardLayout: procedure
	( 
		pwszKLID		:string; 
		Flags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadKeyboardLayoutA@8" );

	LoadMenu: procedure
	( 
		hInstance		:dword; 
		lpMenuName		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadMenuA@8" );

	LoadMenuIndirect: procedure
	( 
		var	lpMenuTemplate	:MENUTEMPLATE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadMenuIndirectA@4" );



	#macro LoadString( _parms_[] );
	
		#if( @elements( _parms_ ) = 3 )
		
			w_LoadString
			(
				_parms_[0],
				_parms_[1],
				_parms_[2] 
			)
			
		#elseif( @elements( _parms_ ) = 4 )
		
			w.LoadStringA
			(
				_parms_[0],
				_parms_[1],
				_parms_[2],
				_parms_[3] 
			)
			
		#else
		
			#error( "Illegal # of parameters in LoadString call " )
			
		#endif
		
	#endmacro

	procedure w_LoadString 
	( 
			hInstance	:dword; 
			uID			:dword; 
		var	lpBuffer	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "w_w_LoadString" );

static
	LoadStringA: procedure
	( 
			hInstance	:dword; 
			uID			:dword; 
		var	lpBuffer	:var; 
			nBuffermax	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadStringA@16" );

	LockWindowUpdate: procedure
	( 
		hWndLock		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LockWindowUpdate@4" );

	LockWorkStation: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__LockWorkStation@0" );

	LookupIconIdFromDirectory: procedure
	( 
		var	presbits	:var; 
			fIcon		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LookupIconIdFromDirectory@8" );

	LookupIconIdFromDirectoryEx: procedure
	( 
		var	presbits	:var; 
			fIcon		:boolean; 
			cxDesired	:dword; 
			cyDesired	:dword; 
			Flags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LookupIconIdFromDirectoryEx@20" );

	LBItemFromPt:procedure( hLB:dword; pt:POINT; bAutoScroll:boolean );
		@stdcall;
		@returns( "eax" );
		external( "__imp__LBItemFromPt@16" );
		 
	DrawInsert:procedure( hwndParent:dword; hLB:dword; nItem:dword );
		@stdcall;
		@returns( "eax" );
		external( "__imp__DrawInsert@12" );
		 
	MakeDragList:procedure( hLB:dword );
		@stdcall;
		@returns( "eax" );
		external( "__imp__MakeDragList@4" );
		 
	MapDialogRect: procedure
	( 
			hDlg		:dword; 
		var	lpRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapDialogRect@8" );

	MapVirtualKey: procedure
	( 
		uCode			:dword; 
		uMapType		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapVirtualKeyA@8" );

	MapVirtualKeyEx: procedure
	( 
		uCode			:dword; 
		uMapType		:dword; 
		dwhkl			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapVirtualKeyExA@12" );

	MapWindowPoints: procedure
	( 
			hWndFrom		:dword; 
			hWndTo			:dword; 
		var	lpPoints		:var; 
			cPoints			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MapWindowPoints@16" );

	MenuItemFromPoint: procedure
	( 
		hWnd			:dword; 
		hMenu			:dword; 
		ptScreen		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MenuItemFromPoint@16" );

	MessageBeep: procedure
	( 
		uType			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MessageBeep@4" );

	MessageBox: procedure
	( 
		hWnd			:dword; 
		lpText			:string; 
		lpCaption		:string; 
		uType			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MessageBoxA@16" );

	MessageBoxEx: procedure
	( 
		hWnd			:dword; 
		lpText			:string; 
		lpCaption		:string; 
		yType			:dword; 
		wLanguageID		:word
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MessageBoxExA@20" );

	MessageBoxIndirect: procedure
	( 
		var	lpMsgBoxParams	:MSGBOXPARAMS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MessageBoxIndirectA@4" );

	ModifyMenu: procedure
	( 
		hMnu			:dword; 
		uPosition		:dword; 
		uFlags			:dword; 
		uIDNewItem		:dword; 
		lpNewItem		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ModifyMenuA@20" );

	MonitorFromPoint: procedure
	( 
		pt				:POINT; 
		dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MonitorFromPoint@12" );

	MonitorFromRect: procedure
	( 
		var	lprc		:RECT; 
			dwflags		:dword	
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MonitorFromRect@8" );

	MonitorFromWindow: procedure
	( 
		hwnd			:dword; 
		dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MonitorFromWindow@8" );

	MoveWindow: procedure
	( 
		hWnd			:dword; 
		X				:dword; 
		Y				:dword; 
		nWidth			:dword; 
		nHeight			:dword; 
		bRepaint		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MoveWindow@24" );

	MsgWaitForMultipleObjects: procedure
	( 
			nCount			:dword; 
		var	pHandles		:var; 
			fWaitAll		:boolean; 
			dwMilliseconds	:dword; 
			dwWakeMask		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MsgWaitForMultipleObjects@20" );

	MsgWaitForMultipleObjectsEx: procedure
	( 
			nCount			:dword; 
		var	pHandles		:var; 
			fWaitAll		:boolean; 
			dwMilliseconds	:dword; 
			dwWakeMask		:dword;
			dwFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__MsgWaitForMultipleObjectsEx@20" );

	OemKeyScan: procedure
	( 
		wOemChar	:word
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OemKeyScan@4" );

	OemToChar: procedure
	( 
		lpszSrc		:string; 
		lpszDst		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OemToCharA@8" );




	#macro OemToCharBuff( _parms_[] );
	
		#if( @elements( _parms_ ) = 2 )
		
			w_OemToCharBuff
			(
				_parms_[0],
				_parms_[1] 
			)
			
		#elseif( @elements( _parms_ ) = 3 )
		
			w.OemToCharBuffA
			(
				_parms_[0],
				_parms_[1],
				_parms_[2] 
			)
			
		#else
		
			#error( "Illegal # of parameters in OemToCharBuff call " )
			
		#endif
		
	#endmacro

	procedure w_OemToCharBuff 
	( 
			lpszSrc			:string; 
			lpszDst			:string
	);
		@stdcall;
		@returns( "eax" );
		external( "w_w_OemToCharBuff" );

static
	OemToCharBuffA: procedure
	( 
			lpszSrc			:string; 
		var	lpszDst			:var; 
			cchDstLength	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OemToCharBuffA@12" );

	OffsetRect: procedure
	( 
		var	lprc		:RECT; 
			_dx			:dword; 
			_dy			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OffsetRect@12" );

	OpenClipboard: procedure
	( 
		hWndNewOwner	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenClipboard@4" );

	OpenIcon: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenIcon@4" );

	OpenInputDesktop: procedure
	( 
		dwFlags			:dword; 
		fInherit		:boolean; 
		dwDesiredAccess	:ACCESS_MASK
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenInputDesktop@12" );

	OpenWindowStation: procedure
	( 
		lpszWinSta		:string; 
		fInherit		:boolean; 
		dwDesiredAccess	:ACCESS_MASK
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__OpenWindowStationA@12" );

	PackDDElParam: procedure
	( 
		msg				:dword; 
		uiLo			:dword; 
		uiHi		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PackDDElParam@12" );

	PaintDesktop: procedure
	( 
		hdc				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PaintDesktop@4" );

	PeekMessage: procedure
	( 
		var	lpMsg		:MSG; 
		hWnd			:dword; 
		wMsgFilterMin	:dword; 
		wMsgFilterMax	:dword; 
		wRemoveMsg		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PeekMessageA@20" );

	PostMessage: procedure
	( 
		hWnd			:dword; 
		_Msg			:dword; 
		wParam			:dword; 
		lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PostMessageA@16" );

	PostQuitMessage: procedure
	( 
		nExitCode		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PostQuitMessage@4" );

	PostThreadMessage: procedure
	( 
		idThread		:dword; 
		_Msg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PostThreadMessageA@16" );

	PtInRect: procedure
	( 
		var	lprc		:RECT; 
			pt			:POINT 
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PtInRect@12" );

	RealChildWindowFromPoint: procedure
	( 
		hwndParent				:dword; 
		ptParentClientCoords	:POINT 
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RealChildWindowFromPoint@12" );

	RealGetWindowClassW: procedure
	( 
			hwnd		:dword; 
		var	pszType		:var; 
			cchType		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RealGetWindowClass@12" );

	RealGetWindowClass: procedure
	( 
			hwnd		:dword; 
		var	pszType		:var; 
			cchType		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RealGetWindowClassA@12" );

	RedrawWindow: procedure
	( 
			hWnd		:dword; 
		var	lprcUpdate	:RECT; 
			hrgnUpdate	:dword; 
			flags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RedrawWindow@16" );

	RegisterClass: procedure
	( 
		var	lpWndClass	:WNDCLASS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterClassA@4" );

	RegisterClassEx: procedure
	( 
		var	lpwcx		:WNDCLASSEX
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterClassExA@4" );

	RegisterClipboardFormat: procedure
	( 
		lpszFormat		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterClipboardFormatA@4" );

	RegisterDeviceNotification: procedure
	( 
			hRecipient			:dword; 
		var	NotificationFilter	:var; 
			Flags				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterDeviceNotificationA@12" );

	RegisterHotKey: procedure
	( 
		hWnd			:dword; 
		id				:dword; 
		fsModifiers		:dword; 
		vk				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterHotKey@16" );

	RegisterWindowMessage: procedure
	( 
		lpString		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RegisterWindowMessageA@4" );

	ReleaseCapture: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReleaseCapture@0" );

	ReleaseDC: procedure
	( 
		hWnd			:dword; 
		hDC				:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReleaseDC@8" );

	RemoveMenu: procedure
	( 
		hMenu			:dword; 
		uPosition		:dword; 
		uFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RemoveMenu@12" );

	RemoveProp: procedure
	( 
		hWnd			:dword; 
		lpString		:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__RemovePropA@8" );

	ReplyMessage: procedure
	( 
		lResult			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReplyMessage@4" );

	ReuseDDElParam: procedure
	( 
		_lParam			:dword; 
		msgIn			:dword; 
		msgOut			:dword; 
		uiLo			:dword; 
		uiHi			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReuseDDElParam@20" );

	ScreenToClient: procedure
	( 
			hWnd	:dword; 
		var	lpPoint	:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScreenToClient@8" );

	ScrollDC: procedure
	( 
			hDC			:dword; 
			_dx			:dword; 
			_dy			:dword; 
		var	lprcScroll	:RECT; 
		var	lprcClip	:RECT; 
			hrgnUpdate	:dword; 
		var	lprcUpdate	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScrollDC@28" );

	ScrollWindow: procedure
	( 
			hWnd		:dword; 
			XAmount		:dword; 
			YAmount		:dword; 
		var	lpRect		:RECT; 
		var	lpClipRect	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScrollWindow@20" );

	ScrollWindowEx: procedure
	( 
			hWnd		:dword; 
			_dx			:dword; 
			_dy			:dword; 
		var	prcScroll	:RECT; 
		var	prcClip		:RECT; 
			hrgnUpdate	:dword; 
		var	prcUpdate	:RECT; 
			Flags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ScrollWindowEx@32" );


	SendDlgItemMessage: procedure
	( 
		hDlg			:dword; 
		nIDLdgItem		:dword; 
		_Msg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SendDlgItemMessageA@20" );

	SendInput: procedure
	( 
			nInputs		:dword; 
		var	pInputs		:INPUT; 
			cbSize		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SendInput@12" );

	SendMessage: procedure
	( 
		hWnd			:dword; 
		_Msg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SendMessageA@16" );

	SendMessageCallback: procedure
	( 
		hWnd			:dword; 
		_Msg			:dword; 
		_wParam			:dword; 
		_lParam			:dword; 
		lpCallBack		:SENDASYNCPROC; 
		dwData			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SendMessageCallbackA@24" );

	SendMessageTimeout: procedure
	( 
			hWnd		:dword; 
			_Msg		:dword; 
			_wParam		:dword; 
			_lParam		:dword; 
			fuFlags		:dword; 
			uTimeout	:dword; 
		var	lpdwResult	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SendMessageTimeoutA@28" );

	SendNotifyMessage: procedure
	( 
		hWnd			:dword; 
		_Msg			:dword; 
		_wParam			:dword; 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SendNotifyMessageA@16" );

	SetActiveWindow: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetActiveWindow@4" );

	SetCapture: procedure
	( 
		hWnd			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCapture@4" );

	SetCaretBlinkTime: procedure
	( 
		uMSeconds		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCaretBlinkTime@4" );

	SetCaretPos: procedure
	( 
		X			:dword; 
		Y			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCaretPos@8" );

	SetClassLong: procedure
	( 
		hWnd			:dword; 
		nIndex			:dword; 
		dwNewLong		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetClassLongA@12" );

	SetClassWord: procedure
	( 
		hWnd			:dword; 
		nIndex			:dword; 
		wNewWord		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetClassWord@12" );

	SetClipboardData: procedure
	( 
		uFormat			:dword; 
		hMem			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetClipboardData@8" );

	SetClipboardViewer: procedure
	( 
		hWndNewViewer	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetClipboardViewer@4" );

	SetCursor: procedure
	( 
		hCursor		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCursor@4" );

	SetCursorPos: procedure
	( 
		X		:dword; 
		Y		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetCursorPos@8" );

	SetDlgItemInt: procedure
	( 
		hDlg		:dword; 
		nIDDlgItem	:dword; 
		uValue		:dword; 
		bSigned		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDlgItemInt@16" );

	SetDlgItemText: procedure
	( 
		hDlg		:dword; 
		nIDDlgItem	:dword; 
		lpString	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDlgItemTextA@12" );

	SetDoubleClickTime: procedure
	( 
		uInterval	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetDoubleClickTime@4" );

	SetFocus: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetFocus@4" );

	SetForegroundWindow: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetForegroundWindow@4" );


	SetKeyboardState: procedure
	( 
		var	lpKeyState	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetKeyboardState@4" );

	SetLastErrorEx: procedure
	( 
		dwErrCode		:dword; 
		dwType			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetLastErrorEx@8" );

	SetMenu: procedure
	( 
		hWnd		:dword; 
		hMenu		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMenu@8" );

	SetMenuContextHelpId: procedure
	( 
		hmenu			:dword; 
		dwContextHelpID	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMenuContextHelpId@8" );

	SetMenuDefaultItem: procedure
	( 
		hMenu		:dword; 
		uItem		:dword; 
		fByPos		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMenuDefaultItem@12" );

	SetMenuInfo: procedure
	( 
			hmenu	:dword; 
		var	lpcmi	:MENUINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMenuInfo@8" );

	SetMenuItemBitmaps: procedure
	( 
		hMenu				:dword; 
		uPosition			:dword; 
		uFlags				:dword; 
		hBitmapUnchecked	:dword; 
		hBitmapChecked		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMenuItemBitmaps@20" );

	SetMenuItemInfo: procedure
	( 
			hMenu			:dword; 
			uItem			:dword; 
			fByPosition		:dword; 
		var	lpmii			:MENUITEMINFO
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMenuItemInfoA@16" );

	SetMessageExtraInfo: procedure
	( 
		_lParam			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetMessageExtraInfo@4" );

	SetParent: procedure
	( 
		hWndChild		:dword; 
		hWndNewParent	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetParent@8" );

	SetProcessWindowStation: procedure
	( 
		hWinSta			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetProcessWindowStation@4" );

	SetProp: procedure
	( 
		hWnd			:dword; 
		lpString		:string; 
		hData			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetPropA@12" );

	SetRect: procedure
	( 
		var	lprc		:RECT; 
			xLeft		:dword; 
			yTop		:dword; 
			xRight		:dword; 
			yBottom		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetRect@20" );

	SetRectEmpty: procedure
	( 
		var	lprc	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetRectEmpty@4" );

	SetScrollInfo: procedure
	( 
			hwnd	:dword; 
			fnBar	:dword; 
		var	lpsi	:SCROLLINFO; 
			fRedraw	:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetScrollInfo@16" );

	SetScrollPos: procedure
	( 
		hWnd		:dword; 
		nBar		:dword; 
		nPos		:dword; 
		bRedraw		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetScrollPos@16" );

	SetScrollRange: procedure
	( 
		hWnd		:dword; 
		nBar		:dword; 
		nMinPos		:dword; 
		nMaxPos		:dword; 
		bRedraw		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetScrollRange@20" );

	SetSysColors: procedure
	( 
			cElements		:dword; 
		var	lpaElements		:var; 
		var	lpaRgbValues	:var
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetSysColors@12" );

	SetSystemCursor: procedure
	( 
		hcur		:dword; 
		id			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetSystemCursor@8" );

	SetThreadDesktop: procedure
	( 
		hDesktop		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetThreadDesktop@4" );

	SetTimer: procedure
	( 
		hWnd		:dword; 
		uIDEvent	:dword; 
		uElapse		:dword; 
		lpTimerFunc	:TIMERPROC
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetTimer@16" );

	SetUserObjectInformation: procedure
	( 
			hObj		:dword; 
			nIndex		:dword; 
		var	pvInfo		:var; 
			nLength		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetUserObjectInformationA@16" );

	SetWindowContextHelpId: procedure
	( 
		hwnd			:dword; 
		dwContextHelpID	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowContextHelpId@8" );

	SetWindowLong: procedure
	( 
		hWnd			:dword; 
		nIndex			:dword; 
		dwNewLong		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowLongA@12" );

	SetWindowPlacement: procedure
	( 
			hWnd		:dword; 
		var	lpwndpl		:WINDOWPLACEMENT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowPlacement@8" );

	SetWindowPos: procedure
	( 
		hWnd			:dword; 
		hWndInsertAfter	:dword; 
		X				:dword; 
		Y				:dword; 
		_cx				:dword; 
		_cy				:dword; 
		uFlags			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowPos@28" );

	SetWindowRgn: procedure
	( 
		hWnd		:dword; 
		hRgn		:dword; 
		bRedraw		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowRgn@12" );

	SetWindowText: procedure
	( 
		hWnd		:dword; 
		lpString	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowTextA@8" );

	SetWindowsHookEx: procedure
	( 
		idHook		:dword; 
		lpfn		:HOOKPROC; 
		hMod		:dword; 
		dwThreadID	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SetWindowsHookExA@16" );

	ShowCaret: procedure
	( 
		hWnd		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowCaret@4" );

	ShowCursor: procedure
	( 
		bShow		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowCursor@4" );

	ShowOwnedPopups: procedure
	( 
		hWnd		:dword; 
		fShow		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowOwnedPopups@8" );

	ShowScrollBar: procedure
	( 
		hWnd		:dword; 
		wBar		:dword; 
		bShow		:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowScrollBar@12" );

	ShowWindow: procedure
	( 
		hWnd		:dword; 
		nCmdShow	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowWindow@8" );

	ShowWindowAsync: procedure
	( 
		hWnd		:dword; 
		nCmdShow	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ShowWindowAsync@8" );

	SubtractRect: procedure
	( 
		var	lprcDst		:RECT; 
		var	lprcSrc1	:RECT; 
		var	lprcSrc2	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SubtractRect@12" );

	SwapMouseButton: procedure
	( 
		fSwap	:boolean
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SwapMouseButton@4" );

	SwitchDesktop: procedure
	( 
		hDesktop		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SwitchDesktop@4" );

	SystemParametersInfo: procedure
	( 
			uiAction	:dword; 
			uiParam		:dword; 
		var	pvParam		:var; 
			fWinIni		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__SystemParametersInfoA@16" );

	TabbedTextOut: procedure
	( 
			hDC					:dword; 
			X					:dword; 
			Y					:dword; 
			lpString			:string; 
			nCount				:dword; 
			nTabPositions		:dword; 
		var	lpnTabStopPositions	:dword; 
			nTabOrigin			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TabbedTextOutA@32" );

	TileWindows: procedure
	( 
			hwndParent	:dword; 
			wHow		:dword; 
		var	lpRect		:RECT; 
			cKids		:dword; 
		var	lpKids		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TileWindows@20" );

	ToAscii: procedure
	( 
			uVirtKey	:dword; 
			uScanCode	:dword; 
		var	kpKeyState	:var; 
		var	lpChar		:var; 
			uFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ToAscii@20" );

	ToAsciiEx: procedure
	( 
			uVirtKey	:dword; 
			uScanCode	:dword; 
		var	kpKeyState	:var; 
		var	lpChar		:var; 
			uFlags		:dword;
			dwhkl		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ToAsciiEx@24" );

	ToUnicode: procedure
	( 
			wVirtKey	:dword; 
			wScanCode	:dword; 
		var	lpKeyState	:var; 
		var	pwszBuff	:var; 
			cchBuff		:dword; 
			wFlags		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ToUnicode@24" );

	ToUnicodeEx: procedure
	( 
			wVirtKey	:dword; 
			wScanCode	:dword; 
		var	lpKeyState	:var; 
		var	pwszBuff	:var; 
			cchBuff		:dword; 
			wFlags		:dword;
			dwhkl		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ToUnicodeEx@28" );

	TrackMouseEvent: procedure
	( 
		var	lpEventTrack	:_TRACKMOUSEEVENT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TrackMouseEvent@4" );

	TrackPopupMenu: procedure
	( 
			hMenu		:dword; 
			uFlags		:dword; 
			x			:dword; 
			y			:dword; 
			nReserved	:dword; 
			hWnd		:dword; 
		var	prcRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TrackPopupMenu@28" );

	TrackPopupMenuEx: procedure
	( 
			hmenu		:dword; 
			fuFlags		:dword; 
			x			:dword; 
			y			:dword; 
			hwnd		:dword; 
		var	lptpm		:TPMPARAMS
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TrackPopupMenuEx@24" );

	TranslateAcceleratorW: procedure
	( 
			hWnd		:dword; 
			hAccTable	:dword; 
		var	lpMsg		:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TranslateAccelerator@12" );

	TranslateAccelerator: procedure
	( 
			hWnd		:dword; 
			hAccTable	:dword; 
		var	lpMsg		:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TranslateAcceleratorA@12" );

	TranslateMDISysAccel: procedure
	( 
			hWndClient	:dword; 
		var	lpMsg		:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TranslateMDISysAccel@8" );

	TranslateMessage: procedure
	( 
		var	lpMsg	:MSG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__TranslateMessage@4" );

	UnhookWindowsHookEx: procedure
	( 
		hhk			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnhookWindowsHookEx@4" );

	UnionRect: procedure
	( 
		var	lprcDst		:RECT; 
		var	lprcSrc1	:RECT; 
		var	lprcSrc2	:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnionRect@12" );

	UnloadKeyboardLayout: procedure
	( 
		hkl			:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnloadKeyboardLayout@4" );

	UnpackDDElParam: procedure
	( 
			msg		:dword; 
			_lParam	:dword; 
		var	puiLo	:dword; 
		var	puiHi	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnpackDDElParam@16" );

	UnregisterClass: procedure
	( 
		lpClassName	:string; 
		hInstance	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnregisterClassA@8" );

	UnregisterDeviceNotification: procedure
	( 
		Handle		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnregisterDeviceNotification@4" );

	UnregisterHotKey: procedure
	( 
		hWnd	:dword; 
		id		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UnregisterHotKey@8" );

	UpdateWindow: procedure
	( 
		hWnd	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__UpdateWindow@4" );

	ValidateRect: procedure
	( 
			hWnd		:dword; 
		var	lpRect		:RECT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ValidateRect@8" );

	ValidateRgn: procedure
	( 
		hWnd	:dword; 
		hRgn	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ValidateRgn@8" );

	VkKeyScan: procedure
	( 
		_ch		:char
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VkKeyScanA@4" );

	VkKeyScanEx: procedure
	( 
		_ch		:char; 
		dwhkl	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__VkKeyScanExA@8" );

	WaitForInputIdle: procedure
	( 
		hProcess		:dword; 
		dwMilliseconds	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitForInputIdle@8" );

	WaitMessage: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__WaitMessage@0" );

	WinHelp: procedure
	( 
		hWndMain	:dword; 
		lpszHelp	:string; 
		uCommand	:dword; 
		dwData		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WinHelpA@16" );

	WindowFromDC: procedure
	( 
		hDC		:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WindowFromDC@4" );

	WindowFromPoint: procedure
	( 
		_Point		:POINT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WindowFromPoint@8" );

	keybd_event: procedure
	( 
		bVK			:byte; 
		bScan		:byte; 
		dwFlags		:dword; 
		dwExtraInfo	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__keybd_event@16" );

	mouse_event: procedure
	( 
		dwFlags		:dword; 
		_dx			:dword; 
		_dy			:dword; 
		dwData		:dword; 
		dwExtraInfo	:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__mouse_event@20" );


static

	_ChooseColor: procedure
	( 
		var	lpcc	:CHOOSECOLOR
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChooseColorA@4" );

	_ChooseFont: procedure
	( 
		var	lpcf	:CHOOSEFONT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ChooseFontA@4" );

	CommDlgExtendedError: procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__CommDlgExtendedError@0" );

	_FindText: procedure
	( 
		var	lpfr	:FINDREPLACE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__FindTextA@4" );





	#macro GetFileTitle( _parms_[] );
	
		#if( @elements( _parms_ ) = 2 )
		
			w_GetFileTitle
			(
				_parms_[0],
				_parms_[1] 
			)
			
		#elseif( @elements( _parms_ ) = 3 )
		
			w.GetFileTitleA
			(
				_parms_[0],
				_parms_[1],
				_parms_[2] 
			)
			
		#else
		
			#error( "Illegal # of parameters in GetFileTitle call " )
			
		#endif
		
	#endmacro

	procedure w_GetFileTitle 
	( 
		lpszFile	:string; 
		lpszTitle	:string
	);
		@stdcall;
		@returns( "eax" );
		external( "w_w_GetFileTitle" );

static
	GetFileTitleA: procedure
	( 
			lpszFile	:string; 
		var	lpszTitle	:var; 
			cbBuf		:word
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetFileTitleA@12" );

	GetOpenFileName: procedure
	( 
		var	lpofn	:OPENFILENAME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetOpenFileNameA@4" );

	GetSaveFileName: procedure
	( 
		var	lpofn	:OPENFILENAME
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__GetSaveFileNameA@4" );

	LoadAlterBitmap: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__LoadAlterBitmap@12" );

	_PageSetupDlg: procedure
	( 
		var	lppsd	:PAGESETUPDLG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PageSetupDlgA@4" );

	_PrintDlg: procedure
	( 
		var	lppd	:PRINTDLG
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__PrintDlgA@4" );

	ReplaceText: procedure
	( 
		var	lpfr	:FINDREPLACE
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ReplaceTextA@4" );

	WantArrows: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__WantArrows@16" );

	dwLBSubclass: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__dwLBSubclass@16" );

	dwOKSubclass: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword; 
		p3:dword
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__dwOKSubclass@16" );





//////////////////////////////////////////////////////////////////////////////

static	
	ClearCommError:procedure
	(
			hFile		:dword;
		var	lpErrors	:dword;
		var	lpStat		:COMSTAT
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__ClearCommError@12" );

	CreatePropertySheetPage: procedure
	(
		var	lppsp:LPCPROPSHEETPAGE  
	);	
		@stdcall; 
		@returns( "eax" );	
		external( "__imp__CreatePropertySheetPageA@4" );
	

	CreateStatusWindow: procedure
	( 
		style		:dword; 
		lpszText	:string; 
		hwndParent	:dword; 
		wID			:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__CreateStatusWindowA@16" );

	CreateToolbarEx: procedure
	( 
			hwnd		:dword; 
			ws			:dword; 
			wID			:dword; 
			nBitmaps	:dword; 
			hBMInst		:dword; 
			wBMID		:dword; 
		var	lpButtons	:TBBUTTON; 
			iNumButtons	:dword; 
			dxButton	:dword; 
			dyButton	:dword; 
			dxBitmap	:dword; 
			dyBitmap	:dword; 
			uStructSize	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__CreateToolbarEx@52" );



	DestroyPropertySheetPage: procedure
	( 
		hPSPage	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__DestroyPropertySheetPage@4" );

	DrawStatusText: procedure
	( 
			hdc		:dword; 
		var	lprc	:RECT; 
			pszText	:string; 
			uFlags 	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__DrawStatusText@16" );

	FlatSB_EnableScrollBar: procedure
	( 
		hwnd		:dword; 
		wSBflags	:dword; 
		wArrows		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_EnableScrollBar@12" );

	FlatSB_GetScrollInfo: procedure
	( 
			hwnd	:dword; 
			fnBar	:dword; 
		var	lpsi	:SCROLLINFO
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_GetScrollInfo@12" );

	FlatSB_GetScrollPos: procedure
	( 
		hwnd	:dword; 
		code	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_GetScrollPos@8" );

	FlatSB_GetScrollProp: procedure
	( 
		hwnd	:dword; 
		index	:dword; 
		pValue	:dword
	);	
		@stdcall;	
		@returns( "eax" );
		external( "__imp__FlatSB_GetScrollProp@12" );

	FlatSB_GetScrollRange: procedure
	( 
		hwnd		:dword; 
		code		:dword; 
		lpMinPos	:dword; 
		lpMaxPos	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_GetScrollRange@16" );

	FlatSB_SetScrollInfo: procedure
	( 
			hwnd	:dword; 
			fnBar	:dword; 
		var	lpsi	:SCROLLINFO; 
			fRedraw	:boolean
	);	
		@stdcall;	
		@returns( "eax" );
		external( "__imp__FlatSB_SetScrollInfo@16" );

	FlatSB_SetScrollPos: procedure
	( 
		hwnd	:dword; 
		code	:dword; 
		nPos	:dword; 
		fRedraw	:boolean
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_SetScrollPos@16" );

	FlatSB_SetScrollProp: procedure
	( 
		hwnd		:dword; 
		index		:dword; 
		newValue	:dword; 
		fRedraw		:boolean
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_SetScrollProp@16" );

	FlatSB_SetScrollRange: procedure
	( 
		hwnd	:dword; 
		code	:dword; 
		nMinPos	:dword; 
		nMaxPos	:dword; 
		fRedraw	:boolean
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__FlatSB_SetScrollRange@20" );

	FlatSB_ShowScrollBar: procedure
	( 
		hwnd	:dword; 
		code	:dword; 
		fShow	:boolean
	);	
		@stdcall; 
		@returns( "eax" );	
		external( "__imp__FlatSB_ShowScrollBar@12" );

	ImageList_Add: procedure
	( 
		himl		:dword; 
		hbmImage	:dword; 
		hbmMask		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Add@12" );

	ImageList_AddIcon: procedure
	( 
		himl	:dword; 
		hicon	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_AddIcon@8" );

	ImageList_AddMasked: procedure
	( 
		himl		:dword; 
		hbmImage	:dword; 
		crMask		:COLORREF
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_AddMasked@12" );

	ImageList_BeginDrag: procedure
	( 
		himlTrack	:dword; 
		iTrack		:dword; 
		dxHotspot	:dword; 
		dyHotspot 	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_BeginDrag@16" );

	ImageList_Copy: procedure
	( 
		himlDst		:dword; 
		iDst		:dword; 
		himlSrc		:dword; 
		iSrc		:dword; 
		uFlags		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Copy@20" );

	ImageList_Create: procedure
	( 
		_cx			:dword; 
		cy			:dword; 
		flags		:dword; 
		cInitial	:dword; 
		cGrow		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Create@20" );

	ImageList_Destroy: procedure
	( 
		himl 		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Destroy@4" );

	ImageList_DragEnter: procedure
	( 
		hwndLock	:dword; 
		x			:dword; 
		y			:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_DragEnter@12" );

	ImageList_DragLeave: procedure
	( 
		hwndLock 	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_DragLeave@4" );

	ImageList_DragMove: procedure
	( 
		x	:dword; 
		y	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_DragMove@8" );

	ImageList_DragShowNolock: procedure
	( 
		fShow	:boolean
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_DragShowNolock@4" );

	ImageList_Draw: procedure
	( 
		himl	:dword; 
		i		:dword; 
		hdcDst	:dword; 
		x		:dword; 
		y		:dword; 
		fStyle	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Draw@24" );

	ImageList_DrawEx: procedure
	( 
		himl	:dword; 
		i		:dword; 
		hdcDst	:dword; 
		x		:dword; 
		y		:dword; 
		_dx		:dword; 
		dy		:dword; 
		rgbBk	:COLORREF; 
		rgbFg	:COLORREF; 
		fStyle	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_DrawEx@40" );

	ImageList_DrawIndirect: procedure
	( 
		p0:dword
	);	@stdcall;	@returns( "eax" );	external( "__imp__ImageList_DrawIndirect@4" );

	ImageList_Duplicate: procedure
	( 
		var	pimldp	:IMAGELISTDRAWPARAMS
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Duplicate@4" );

	ImageList_EndDrag: procedure;
		@stdcall;	
		@returns( "eax" );
		external( "__imp__ImageList_EndDrag@0" );

	ImageList_GetBkColor: procedure
	( 
		himl :dword
	); 
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetBkColor@4" );

	ImageList_GetDragImage: procedure
	( 
		var	ppt	:var; 
		var	pptHotspot :var
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetDragImage@8" );

	ImageList_GetIcon: procedure
	( 
		himl	:dword; 
		i		:dword; 
		flags 	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetIcon@12" );

	ImageList_GetIconSize: procedure
	( 
			himl	:dword; 
		var	x		:dword; 
		var	y		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetIconSize@12" );

	ImageList_GetImageCount: procedure
	( 
		himl	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetImageCount@4" );

	ImageList_GetImageInfo: procedure
	( 
			himl		:dword; 
			i			:dword; 
		var	pImageInfo	:IMAGEINFO 
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetImageInfo@12" );

	ImageList_GetImageRect: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_GetImageRect@12" );

	ImageList_LoadImage: procedure
	( 
		hi		:dword; 
		lpbmp	:string; 
		_cx		:dword; 
		cGrow	:dword; 
		crMask	:COLORREF; 
		uType	:dword; 
		uFlags	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_LoadImageA@28" );


	ImageList_Merge: procedure
	( 
		himl1	:dword; 
		i1		:dword; 
		himl2	:dword; 
		i2		:dword; 
		_dx		:dword; 
		dy		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Merge@24" );

	ImageList_Read: procedure
	( 
		var	pstm	:var 
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Read@4" );

	ImageList_Remove: procedure
	( 
		himl	:dword; 
		i		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Remove@8" );

	ImageList_Replace: procedure
	( 
		himl		:dword; 
		i			:dword; 
		hbmImage	:dword; 
		hbmMask		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Replace@16" );

	ImageList_ReplaceIcon: procedure
	( 
		himl	:dword; 
		i		:dword; 
		hicon	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_ReplaceIcon@12" );

	ImageList_SetBkColor: procedure
	( 
		himl	:dword; 
		clrBk	:COLORREF
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_SetBkColor@8" );

	ImageList_SetDragCursorImage: procedure
	( 
		himlDrag	:dword; 
		iDrag		:dword; 
		dxHotspot	:dword; 
		dyHotspot	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_SetDragCursorImage@16" );

	ImageList_SetFilter: procedure
	( 
		p0:dword; 
		p1:dword; 
		p2:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_SetFilter@12" );

	ImageList_SetIconSize: procedure
	( 
		himl	:dword; 
		_cx		:dword; 
		cy		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_SetIconSize@12" );

	ImageList_SetImageCount: procedure
	( 
		himl		:dword; 
		uNewCount	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_SetImageCount@8" );

	ImageList_SetOverlayImage: procedure
	( 
		himl		:dword; 
		iImage		:dword; 
		iOverlay	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_SetOverlayImage@12" );

	ImageList_Write: procedure
	( 
			himl	:dword; 
		var	pstm	:var 
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__ImageList_Write@8" );
		
	InitCommonControls: procedure;
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__InitCommonControls@0" );
		
	_InitCommonControlsEx: procedure
	( 
		var	lpInitCtrls	:INITCOMMONCONTROLSEX 
	);
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__InitCommonControlsEx@4" );

	InitializeFlatSB: procedure
	( 
		hwnd:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__InitializeFlatSB@4" );

	PropertySheet: procedure
	( 
		var	lppsph	:PROPSHEETHEADER 
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__PropertySheetA@4" );


	UninitializeFlatSB: procedure
	( 
		hwnd	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__UninitializeFlatSB@4" );



	// Socket functions:
	
	WSAStartup:procedure( vVersionRequested:word; var lpWSAData:WSADATA );
		@stdcall;
		@returns( "eax" );
		external( "__imp__WSAStartup@8" );
		
	WSACleanup:procedure;
		@stdcall;
		@returns( "eax" );
		external( "__imp__WSACleanup@0" );
		
	closesocket:procedure( skt:dword );
		@stdcall;
		@returns( "eax" );
		external( "__imp__closesocket@4" );
		
	socket: procedure
	( 
		af			:dword;
		_type		:dword;
		protocol	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__socket@12" );
		
	accept: procedure
	( 
			socket	:dword;
		var	addr	:sockaddr;
		var	addrlen	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__accept@12" );
		
	bind: procedure
	( 
			sockfd	:dword;
		var	addr	:sockaddr;
			addrlen	:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__bind@12" );
		
	connect: procedure
	( 
			sockfd		:dword;
		var	serv_addr	:sockaddr;
			addrlen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__connect@12" );
		
	listen: procedure
	( 
		sockfd		:dword;
		backlog		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__listen@8" );
		
	getsockname: procedure
	( 
			sockfd		:dword;
		var	_name		:sockaddr;
		var	namelen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__getsockname@12" );
		
	getpeername: procedure
	( 
			sockfd		:dword;
		var	_name		:sockaddr;
		var	namelen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__getpeername@12" );
		
	send: procedure
	( 
			sockfd		:dword;
		var	buf			:var;
			len			:dword;
			flags		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__send@16" );
		
	recv: procedure
	( 
			sockfd		:dword;
		var	buf			:var;
			len			:dword;
			flags		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__recv@16" );
		
	sendto: procedure
	( 
			sockfd		:dword;
		var	buf			:var;
			len			:dword;
			flags		:dword;
		var	_to			:sockaddr;
			tolen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__sendto@24" );
		
	recvfrom: procedure
	( 
			sockfd		:dword;
		var	buf			:var;
			len			:dword;
			flags		:dword;
		var	from		:sockaddr;
		var	fromlen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__recvfrom@24" );
		
	shutdown: procedure
	( 
		sockfd		:dword;
		how			:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__shutdown@8" );
		
	
	getsockopt: procedure
	( 
			sockfd		:dword;
			level		:dword;
			optname		:dword;
		var	optval		:var;
		var	optlen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__getsockopt@20" );
		
	
	setsockopt: procedure
	( 
			sockfd		:dword;
			level		:dword;
			optname		:dword;
		var	optval		:var;
			optlen		:dword
	);	
		@stdcall;	
		@returns( "eax" );	
		external( "__imp__setsockopt@20" );
		

	select: procedure
	(
			nfds		:dword;
		var	readfds		:var;
		var writefds	:var;
		var exceptfds	:var;
		var	timeout		:timeval
	);
		@stdcall;
		@returns( "eax" );
		external( "__imp__select@20" );
		

	gethostbyname: procedure( s:string );
		@stdcall;
		@returns( "eax" );
		external( "__imp__gethostbyname@4" );
		

	gethostbyaddr: procedure( var addr:var; len:dword; _type:dword );
		@stdcall;
		@returns( "eax" );
		external( "__imp__gethostbyaddr@12" );

	gethostname: procedure( _name:string; namelen:dword );
		@stdcall;
		@returns( "eax" );
		external( "__imp__gethostname@8" );		


end w;


#endif

