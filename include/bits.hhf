
#if( ! @defined( bits_hhf ))
?bits_hhf := true;
#includeOnce( "_hla.hhf" )

namespace bits; @fast;

readonly
	SpreadBitsOdd8	:word[256];	@global:_hla._ext( "BITS_SPREADBITSODD8" );
	SpreadBitsEven8	:word[256];	@global:_hla._ext( "BITS_SPREADBITSEVEN8" );
	reversedBits	:byte[256]; @global:_hla._ext( "BITS_REVERSEDBITS" );
	
proc
	cnt:
		procedure ( BitsToCnt:dword in eax ) 
		{@returns( "eax" )};  
		@global:_hla._ext( "BITS_CNT" );
		
	distribute:
		procedure ( source:dword; mask:dword; dest:dword ) 
		{@returns( "eax" )};
		@global:_hla._ext( "BITS_DISTRIBUTE" );
		
	coalesce:
		procedure( source:dword; mask:dword ) 
		{@returns( "eax" )}; 
		@global:_hla._ext( "BITS_COALESCE" );
	

	#macro extract( d );
	
		#if( @string:d = "eax" )
		
			#error( "Cannot pass EAX as a parameter to bits.extract" )
			
		#endif
	
		bsf( d, eax );
		if( @nz ) then
		
			btr( eax, d );
			
		else
		
			mov( -1, eax );
			cmp( eax, eax ); // Must set zflag.
			
		endif;
		
	#endmacro

	reverse32:
		procedure( BitsToReverse:dword in eax ) 
		{@returns( "eax" )}; 
		@global:_hla._ext( "BITS_REVERSE32" );

	reverse16:
		procedure( BitsToReverse:word in ax ) 
		{@returns( "ax" )}; 
		@global:_hla._ext( "BITS_REVERSE16" );

	reverse8:
		procedure( BitsToReverse:byte in al ) 
		{@returns( "al" )}; 
		@global:_hla._ext( "BITS_REVERSE8" );

  	merge8:
		procedure( even:byte; odd:byte ) 
  		{@returns( "ax" )};
		@global:_hla._ext( "BITS_MERGE8" );

  	merge16:
		procedure( even:word; odd:word ) 
  		{@returns( "eax" )};
		@global:_hla._ext( "BITS_MERGE16" );

  	merge32:
		procedure( even:dword; odd:dword ) 
  		{@returns( "edx:eax" )};
		@global:_hla._ext( "BITS_MERGE32" );

	nibbles8:
		procedure( theByte:byte in al ) 
		{@returns( "ax" )};
		@global:_hla._ext( "BITS_NIBBLES8" );

	nibbles16:
		procedure( theWord:word in ax ) 
		{@returns( "eax" )};
		@global:_hla._ext( "BITS_NIBBLES16" );

	nibbles32:
		procedure( theDWord:dword in eax ) 
		{@returns( "edx:eax" )};
		@global:_hla._ext( "BITS_NIBBLES32" );



end bits;

#endif

