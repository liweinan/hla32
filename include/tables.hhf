
#if( ! @defined( tables_hhf ))
?tables_hhf := true;

#includeOnce( "_hla.hhf" )

#if( !@defined( _deprecate_old_table_types_ ))

	const
		tableNode	:text := "tableNode_t";		// Deprecated type
		tablePtr	:text := "tablePtr_t";		// Deprecated type
		table		:text := "table_t";			// Deprecated type
		
#endif

type

	tableNodePtr_t	:pointer to tableNode_t;
	tableNode_t:
		record

			// Warning! Table algorithms
			// rely upon the fact that
			// link is the first field
			// at offset zero in this record.

			__link:	pointer to tableNode_t;	// Private field.
			
			// public field:
			
			Value:	dword;		// User-defined data.
			
			id:		string;		// Read-only access to this guy!

		endrecord;

	table_t	:class

				// Private fields that objects reserved for access
				// only by the class's functions:
				
				var
					__HashMask		:dword;
					__HashCnt		:uns32;
					__HashTable		:dword;

				proc
				
				// Public functions:
				
				create:
					procedure( HashSize:uns32 )	{@returns( "esi" )}; 
					@global:_hla._ext( "TABLE_CREATE" );

				destroy:
					method( FreeValue:procedure );
					@global:_hla._ext( "TABLE_DESTROY" );

				getNode:
					method( id:string ) {@returns( "eax" )}; 
					@global:_hla._ext( "TABLE_GETNODE" );

				lookup:
					method( id:string ) {@returns( "eax" )}; 
					@global:_hla._ext( "TABLE_LOOKUP" );

				item:
					iterator;
					@global:_hla._ext( "TABLE_ITEM" );

			endclass;
			
	tablePtr_t	:pointer to table_t;

#endif

