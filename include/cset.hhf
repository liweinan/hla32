#if( ! @defined( cset_hhf ))
?cset_hhf := true;

#includeOnce( "_hla.hhf" )

namespace cs; @fast;

proc
	isEmpty:
		procedure( src: cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_ISEMPTY" );

	member:
		procedure( c:char; theSet:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_MEMBER" );


	empty:
		procedure( var dest:cset );
		@global:_hla._ext( "CSET_EMPTY" ); 

	cpy:
		procedure( src:cset; var dest:cset );
		@global:_hla._ext( "CSET_CPY" );

	setunion:
		procedure( src:cset; var dest:cset );
		@global:_hla._ext( "CSET_SETUNION" );

	intersection:
		procedure( src:cset; var dest:cset );
		@global:_hla._ext( "CSET_INTERSECTION" );

	difference:
		procedure( src:cset; var dest:cset );
		@global:_hla._ext( "CSET_DIFFERENCE" );

	complement:
		procedure( src:cset; var dest:cset );
		@global:_hla._ext( "CSET_COMPLEMENT" );


	subset:
		procedure( src1:cset; src2:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_SUBSET" );

	superset:
		procedure( src1:cset; src2:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_SUPERSET" );

	psubset:
		procedure( src1:cset; src2:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_PSUBSET" );

	psuperset:
		procedure( src1:cset; src2:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_PSUPERSET" );

	eq:
		procedure( src1:cset; src2:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_EQ" );

	ne:
		procedure( src1:cset; src2:cset ) { @returns( "al" )}; 
		@global:_hla._ext( "CSET_NE" );

	charToCset:
		procedure( c:char; var dest:cset );
		@global:_hla._ext( "CSET_CHARTOCSET" );

	unionChar:
		procedure( c:char; var dest:cset );
		@global:_hla._ext( "CSET_UNIONCHAR" );

	removeChar:
		procedure( c:char; var dest:cset );
		@global:_hla._ext( "CSET_REMOVECHAR" );

	rangeChar:
		procedure( first:char; last:char; var dest:cset );
		@global:_hla._ext( "CSET_RANGECHAR" );


	strToCset:
		procedure( s:string; var dest:cset );
		@global:_hla._ext( "CSET_STRTOCSET" );

	strToCset2:
		procedure( s:string; offs:uns32; var dest:cset );
		@global:_hla._ext( "CSET_STRTOCSET2" );

	unionStr:
		procedure( s:string; var dest:cset );
		@global:_hla._ext( "CSET_UNIONSTR" );

	unionStr2:
		procedure( s:string; offs:uns32; var dest:cset );
		@global:_hla._ext( "CSET_UNIONSTR2" );

	removeStr:
		procedure( s:string; var dest:cset );
		@global:_hla._ext( "CSET_REMOVESTR" );

	removeStr2:
		procedure( s:string; offs:uns32; var dest:cset );
		@global:_hla._ext( "CSET_REMOVESTR2" );


	extract:
		procedure( var dest:cset ) { @returns( "@c" )}; 
		@global:_hla._ext( "CSET_EXTRACT" );



end cs;


#endif
