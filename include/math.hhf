
#if( ! @defined( math_hhf ))
?math_hhf := true;

#includeonce( "_hla.hhf" )

namespace math; @fast;

		
	// The following procedures all use ESP to access their
	// parameters.  Therefore, we've got to set an explicit
	// parmoffset value for each of these.
	//
	//	WARNING: These @parmoffset assignments must be kept
	//	in sync with the actual source code.  See the source
	//	code for details.
	
	proc
			  
		addq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_ADDQ" );
		
		

		addl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_ADDL" );


		subq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_SUBQ" );
		

		subl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_SUBL" );


		andq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_ANDQ" );


		andl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_ANDL" );


		orq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_ORQ" );


		orl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_ORL" );


		xorq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_XORQ" );


		xorl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_XORL" );


		shlq:
			procedure( count:dword; source:qword; var dest:qword );
			@global:_hla._ext( "MATH_SHLQ" );

		shrq:
			procedure( count:dword; source:qword; var dest:qword );
			@global:_hla._ext( "MATH_SHRQ" );

		shll:
			procedure( count:dword; source:lword; var dest:lword );
			@global:_hla._ext( "MATH_SHLL" );

		shrl:
			procedure( count:dword; source:lword; var dest:lword );
			@global:_hla._ext( "MATH_SHRL" );
			
			
			
		
		negq:
			procedure( source:qword; var dest:qword );
			@global:_hla._ext( "MATH_NEGQ" );

		negl:
			procedure( source:lword; var dest:lword );
			@global:_hla._ext( "MATH_NEGL" );
			
			
		
		notq:
			procedure( source:qword; var dest:qword );
			@global:_hla._ext( "MATH_NOTQ" );

		notl:
			procedure( source:lword; var dest:lword );
			@global:_hla._ext( "MATH_NOTL" );
		





		mulq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_MULQ" );

		mull:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_MULL" );
			
		imulq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_IMULQ" );

		imull:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_IMULL" );

		divq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_DIVQ" );
		
		divl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_DIVL" );

		modq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_MODQ" );
		
		modl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_MODL" );

		idivq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_IDIVQ" );
		
		idivl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_IDIVL" );

		imodq:
			procedure( left:qword; right:qword; var dest:qword );
			@global:_hla._ext( "MATH_IMODQ" );
		
		imodl:
			procedure( left:lword; right:lword; var dest:lword );
			@global:_hla._ext( "MATH_IMODL" );
		

		div64:
			procedure
			( 
			    	Dividend:   qword; 
			    	Divisor:    qword; 
			    var QuotAdrs:   qword; 
			    var RmndrAdrs:  qword 
			);
			@global:_hla._ext( "MATH_DIV64" );

		div128:
			procedure
			( 
			    	Dividend:   lword; 
			    	Divisor:    lword; 
			    var QuotAdrs:   lword; 
			    var RmndrAdrs:  lword 
			);
			@global:_hla._ext( "MATH_DIV128" );
			




		#macro sincos( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._sincos() );
				hla.signature( math.sincos32(real32) );
				hla.signature( math.sincos64(real64) );
				hla.signature( math.sincos80(real80) );
				
			hla.endoverload
			
		#endmacro


		_sincos:
			procedure {@returns( "st0" )};
			@global:_hla._ext( "MATH__SINCOS" );
			
		sincos32:
			procedure( r32:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SINCOS32" );

		sincos64:
			procedure( r64:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SINCOS64" );

		sincos80:
			procedure( r80:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SINCOS80" );

			

		#macro sin( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._sin() );
				hla.signature( math.sin32(real32) );
				hla.signature( math.sin64(real64) );
				hla.signature( math.sin80(real80) );
				
			hla.endoverload
			
		#endmacro


		_sin:
			procedure {@returns( "st0" )};
			@global:_hla._ext( "MATH__SIN" );
			
		sin32:
			procedure( r32:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SIN32" );

		sin64:
			procedure( r64:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SIN64" );

		sin80:
			procedure( r80:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SIN80" );

			

		#macro cos( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._cos() );
				hla.signature( math.cos32(real32) );
				hla.signature( math.cos64(real64) );
				hla.signature( math.cos80(real80) );
				
			hla.endoverload
			
		#endmacro


		_cos:
			procedure {@returns( "st0" )};
			@global:_hla._ext( "MATH__COS" );
			
		cos32:
			procedure( r32:real32 ) {@returns( "st0" )}; 
				@global:_hla._ext( "MATH_COS32" );

		cos64:
			procedure( r64:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_COS64" );

		cos80:
			procedure( r80:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_COS80" );

			

		#macro cot( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._cot() );
				hla.signature( math.cot32(real32) );
				hla.signature( math.cot64(real64) );
				hla.signature( math.cot80(real80) );
				
			hla.endoverload
			
		#endmacro


		_cot:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__COT" );

		cot32:
			procedure( r32:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_COT32" );

		cot64:
			procedure( r64:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_COT64" );

		cot80:
			procedure( r80:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_COT80" );










		#macro csc( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._csc() );
				hla.signature( math.csc32(real32) );
				hla.signature( math.csc64(real64) );
				hla.signature( math.csc80(real80) );
				
			hla.endoverload
			
		#endmacro

		_csc:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__CSC" );

		csc32:
			procedure( r: real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_CSC32" );

		csc64:
			procedure( r: real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_CSC64" );

		csc80:
			procedure( r: real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_CSC80" );






		#macro sec( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._sec() );
				hla.signature( math.sec32(real32) );
				hla.signature( math.sec64(real64) );
				hla.signature( math.sec80(real80) );
				
			hla.endoverload
			
		#endmacro

		_sec:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__SEC" );

		sec32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SEC32" );

		sec64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SEC64" );

		sec80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_SEC80" );






		#macro tan( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._tan() );
				hla.signature( math.tan32(real32) );
				hla.signature( math.tan64(real64) );
				hla.signature( math.tan80(real80) );
				
			hla.endoverload
			
		#endmacro

		_tan:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__TAN" );

		tan32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TAN32" );

		tan64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TAN64" );

		tan80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TAN80" );





		#macro atan( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._atan() );
				hla.signature( math.atan32(real32) );
				hla.signature( math.atan64(real64) );
				hla.signature( math.atan80(real80) );
				
			hla.endoverload
			
		#endmacro

		_atan:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__ATAN" );

		atan32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ATAN32" );

		atan64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ATAN64" );

		atan80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ATAN80" );


		


		#macro asin( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._asin() );
				hla.signature( math.asin32(real32) );
				hla.signature( math.asin64(real64) );
				hla.signature( math.asin80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_asin:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__ASIN" );

		asin32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ASIN32" );

		asin64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ASIN64" );

		asin80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ASIN80" );



		


		#macro acos( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._acos() );
				hla.signature( math.acos32(real32) );
				hla.signature( math.acos64(real64) );
				hla.signature( math.acos80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_acos:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__ACOS" );

		acos32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACOS32" );

		acos64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACOS64" );

		acos80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACOS80" );


		
		
		
		

		#macro acot( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._acot() );
				hla.signature( math.acot32(real32) );
				hla.signature( math.acot64(real64) );
				hla.signature( math.acot80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		
		_acot:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__ACOT" );

		acot32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACOT32" );

		acot64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACOT64" );

		acot80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACOT80" );




		


		#macro acsc( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._acsc() );
				hla.signature( math.acsc32(real32) );
				hla.signature( math.acsc64(real64) );
				hla.signature( math.acsc80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_acsc:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__ACSC" );

		acsc64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACSC64" );

		acsc32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACSC32" );

		acsc80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ACSC80" );




		


		#macro asec( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._asec() );
				hla.signature( math.asec32(real32) );
				hla.signature( math.asec64(real64) );
				hla.signature( math.asec80(real80) );
				
			hla.endoverload
			
		#endmacro
		
		_asec:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__ASEC" );

		asec32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ASEC32" );

		asec64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ASEC64" );

		asec80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_ASEC80" );




		


		#macro twoToX( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._twoToX() );
				hla.signature( math.twoToX32(real32) );
				hla.signature( math.twoToX64(real64) );
				hla.signature( math.twoToX80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_twoToX:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__TWOTOX" );

		twoToX32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TWOTOX32" );

		twoToX64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TWOTOX64" );

		twoToX80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TWOTOX80" );





		


		#macro tenToX( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._tenToX() );
				hla.signature( math.tenToX32(real32) );
				hla.signature( math.tenToX64(real64) );
				hla.signature( math.tenToX80(real80) );
				
			hla.endoverload
			
		#endmacro
	   
		
		_tenToX:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__TENTOX" );

		tenToX32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TENTOX32" );

		tenToX64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TENTOX64" );

		tenToX80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_TENTOX80" );





		


		#macro exp( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._exp() );
				hla.signature( math.exp32(real32) );
				hla.signature( math.exp64(real64) );
				hla.signature( math.exp80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_exp:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__EXP" );

		exp32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_EXP32" );

		exp64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_EXP64" );

		exp80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_EXP80" );






		


		#macro yToX( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._yToX() );
				hla.signature( math.yToX32(real32,real32) );
				hla.signature( math.yToX64(real64,real64) );
				hla.signature( math.yToX80(real80,real80) );
				
			hla.endoverload
			
		#endmacro

		
		_yToX:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__YTOX" );

		yToX32:
			procedure( y:real32; x:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_YTOX32" );

		yToX64:
			procedure( y:real64; x:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_YTOX64" );

		yToX80:
			procedure( y:real80; x:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_YTOX80" );







		


		#macro log( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._log() );
				hla.signature( math.log32(real32) );
				hla.signature( math.log64(real64) );
				hla.signature( math.log80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_log:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__LOG" );

		log32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_LOG32" );

		log64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_LOG64" );

		log80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_LOG80" );







		


		#macro ln( parms[] );
		
			hla.overload( parms );
			
				hla.signature( math._ln() );
				hla.signature( math.ln32(real32) );
				hla.signature( math.ln64(real64) );
				hla.signature( math.ln80(real80) );
				
			hla.endoverload
			
		#endmacro

		
		_ln:
			procedure {@returns( "st0" )}; 
			@global:_hla._ext( "MATH__LN" );

		ln32:
			procedure( r:real32 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_LN32" );

		ln64:
			procedure( r:real64 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_LN64" );

		ln80:
			procedure( r:real80 ) {@returns( "st0" )}; 
			@global:_hla._ext( "MATH_LN80" );



		
	// Unsigned division by a constant using reciprocal multiplication
	// Leaves quotient in EDX. Usually modifies EAX.
	
	val
		n:=0;
		a:=@global:false;
		t:=0;
		l:=0;
		j:=0;
		k:=0;
		s:=0;
		m:=0;
		r:=0;
		m_low:=0;
		m_high:=0;
		_li := 0;
		
	
	#macro udivc( divisor, dividend );

		#if( !@isConst( divisor ));
		
			#error( "Expected a constant as divisor operand" );
				
		#elseif( divisor = 0 );
		
			#error( "Attempt to divide by constant zero" );
			
		#elseif( divisor >= $8000_0000 );
		
			cmp( dividend, divisor );
			mov( 0, edx );
			sbb( -1, edx );
						
		#else
		
			// Reduce divisor until it becomes odd
			
			?math.n := 0;
			?math.t := divisor;
			#while( (math.t & 1) = 0 );
			
				?math.t := math.t >> 1;
				?math.n := math.n + 1;
				
			#endwhile
			
			// Check for a power of two (easy and cheap):
			
			#if( math.t = 1 );
			
				#if( math.n = 0 )	// Division by 1.
				
					#if( @lowercase(@string( dividend ), 0) <> "edx" );
					
						mov( dividend, edx );
						
					#endif
					
				#else
				
					#if( @lowercase(@string( dividend ), 0) <> "edx" );
					
						mov( dividend, edx );
						
					#endif
					shr( math.n, edx );
					
				#endif
				
			#else
			
				?math.l := 0;
				?math._li := math.t >> 1;
				#while( math._li <> 0 );
				
					?math._li := math._li >> 1;
					?math.l := math.l + 1;
					
				#endwhile
				?math.l := math.l + 1;

				?math.j := ($ffff_ffff mod math.t);
				?math.k := (1 << (32 + math.l)) div ( $ffff_ffff - math.j);
				?math.m_low := (1 << (32 + math.l)) div math.t;
				?math.m_high := ((1 << (32 + math.l)) + math.k) div math.t;
				#while( ((math.m_low >> 1) < (math.m_high >> 1)) & (math.l > 0));
				
					?math.m_low := math.m_low >> 1;
					?math.m_high := math.m_high >> 1;
					?math.l := math.l - 1;
					
				#endwhile
				
				#if( (math.m_high >> 32) = 0 );
				
					?math.m := math.m_high;
					?math.s := math.l;
					?math.a := @global:false;
					
				#else
				
					?math.s := 0;
					?math._li := math.t >> 1;
					#while( math._li <> 0 );
					
						?math._li := math._li >> 1;
						?math.s += 1;
						
					#endwhile
				
					?math.m_low := (( 1 << (32+math.s)) div math.t;
					?math.r := (1 << (32+math.s)) mod math.t;
					#if( math.r < ((math.t >> 1) + 1));
					
						?math.m := math.m_low;
						
					#else
					
						?math.m := math.m_low+1;
						
					#endif
					?math.a := @global:true; 
					
				#endif
				#while( (math.m & 1) = 0 );
				
					?math.m := math.m >> 1;
					?math.s := math.s - 1;
				
				#endwhile
				?math.s := math.s + math.n;
				#if( math.a );
				
					#if( @lowercase(@string( dividend ),0) <> "eax" );
					
						mov( math.m, eax );
						mul( dividend );
						add( math.m, eax );
						adc( 0, edx );
						#if( math.s <> 0 );
						
							shr( math.s, edx );
							
						#endif
						
					#else
						
						mov( eax, edx );
						mov( math.m, eax );
						mul( edx );
						add( math.m, eax );
						adc( 0, edx );
						#if( math.s <> 0 );
						
							shr( math.s, edx );
						
						#endif
						
					#endif
				
				#else
				
					#if( @lowercase(@string( dividend ),0) <> "eax" );
					
						mov( math.m, eax );
						mul( dividend );
						shr( math.s, edx );
						
					#else
						
						mov( eax, edx );
						mov( math.m, eax );
						mul( dividend );
						shr( math.s, edx );
						
					#endif
				
				#endif
			
			#endif
					
		#endif
		
	#endmacro


end math;


#endif

