#if( ! @defined( ipc_hhf ))
?ipc_hhf := true;

namespace linux; @fast;

const
	// ipc system mode bits
	
	ipc_creat		:= $200;	// create key if it doesn't exist
	ipc_excl		:= $400;	// Fail if key exists.
	ipc_nowait		:= $800;	// Return on error wait
	
	// ipc system command codes for msgctl, semctl, and shmctl.
	
	ipc_rmid		:= 0;
	ipc_set			:= 1;
	ipc_stat		:= 2;
	ipc_info		:= 3;
	
	ipc_private		:= 0;
	
	// IPC command codes:
	
	ipcop_semop		:= 1;
	ipcop_semget	:= 2;
	ipcop_semctl	:= 3;
	
	ipcop_msgsnd	:= 11;
	ipcop_msgrcv	:= 12;
	ipcop_msgget	:= 13;
	ipcop_msgctl	:= 14;
	
	ipcop_shmat		:= 21;
	ipcop_shmdt		:= 22;
	ipcop_shmget	:= 23;
	ipcop_shmctl	:= 24;
	
	// message flags
	
	msg_noerror		:= $1000;
	msg_except		:= $2000;
	
	msg_stat		:= 11;
	msg_info		:= 12;
	
	msgmax			:= 8192;
	msgmnb			:= 16384;
	
	
	
	// shared memory flags
	
	shm_locked		:= $400;
	shm_dest		:= $200;
	shm_r			:= $100;
	shm_w			:= $80;
	
	shm_rdonly		:= $1000;
	shm_rnd			:= $2000;
	shm_remap		:= $4000;
	
	shm_lock		:= 11;
	shm_unlock		:= 12;
	shm_stat		:= 13;
	shm_info		:= 14;
	
	shmlba			:= page_size;
	
	
	// Constants for mmap functions:
	
	
	
	mcl_current		:= 1;
	mcl_future		:= 2;
	
	mremap_maymove	:= 1;
	
	madv_normal		:= 0;
	madv_random		:= 1;
	madv_sequential	:= 2;
	madv_willneed	:= 3;
	madv_dontneed	:= 4;
	
	
type
	// ipc data structure used to pass permission to IPC operations.
	
	ipc_perm: record
		_key		:key_t;
		uid			:uid_t;
		gid			:gid_t;
		cuid		:uid_t;
		cgid		:gid_t;
		mode		:word;
		seq			:word;
	endrecord;
	


end linux;
#endif // ipc_hhf