#if( !@defined( ioport_hhf ))
?ioport_hhf := true;

namespace linux; @fast;

type
	resource: record
		theName	:pointer to char;
		start	:dword;
		_end	:dword;
		flags	:dword;
		parent	:dword;
		sibling	:dword;
		child	:dword;
	endrecord;
			
	resource_list: record
		next	:dword;	// pointer to resource_list
		res		:dword;	// pointer to resource
		dev		:dword; // pointer to pci_dev
	endrecord;
				
static
		ioport_resource	:resource; @external;
		iomem_resource	:resource; @external;
		

  // Only provide kernel-level programs access to the
  // following symbols.
  		
#if( @defined( __kernel__ ))
  
	procedure get_resource_list
	( 
		var res		:resource; 
		var buf		:var; 
			size	:dword 
	);
		@cdecl;
		@use eax;
		@returns( "eax" );
		@external;
		
	procedure request_resource
	( 
		var root:resource; 
			start:dword; 
			_end:dword 
	);
		@cdecl;
		@use eax;
		@returns( "eax" );
		@external;
		
	procedure release_resource( var new:resource );
		@cdecl;
		@use eax;
		@returns( "eax" );
		@external;
		
	procedure allocate_resource
	(
		var	root	:resource;
		var	new		:resource;
			size	:dword;
			min		:dword;
			max		:dword;
			_align	:dword;
			alignf	:procedure( var x:var; var r:resource; a:dword );
		var	alignf_data:var
	);
		@cdecl;
		@use eax;
		@returns( "eax" );
		@external;
		
	procedure __check_region
	( 
 		var res:resource; 
 			start	:dword; 
			len		:dword
	);
		@cdecl;
		@use eax;
		@returns( "eax" );
		@external;
		
		
	procedure __request_region
	( 
		var res		:resource; 
			start	:dword; 
			n		:dword; 
			theName	:string
	);
		@cdecl;
		@use eax;
		@returns( "eax" );
		@external;
		
		
		
		
	procedure __release_region
	( 
		var res		:resource; 
			start	:dword; 
			n		:dword 
	);
		@cdecl;
		@external;
		

#endif // #if( @defined( __kernel__ ))

end linux;
#endif //ioport_hhf