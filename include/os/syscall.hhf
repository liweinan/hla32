#if( !@defined( syscall_hhf ))
?syscall_hhf := true;

#includeonce( "os/dirent.hhf" )
#includeonce( "os/sysctl.hhf" )
#includeonce( "os/sched.hhf" )
#includeonce( "os/utsname.hhf" )
#includeonce( "os/kernel.hhf" )
#includeonce( "os/poll.hhf" )
#includeonce( "os/msg.hhf" )
#includeonce( "os/shm.hhf" )
#includeonce( "os/socket.hhf" )

namespace linux; @fast;

const

	// Constants for the nfsctl calls:
	
	nfsctl_svc			:= 0;
	nfsctl_addclient	:= 1;
	nfsctl_delclient	:= 2;
	nfsctl_export		:= 3;
	nfsctl_unexport		:= 4;
	nfsctl_ugidupdate	:= 5;
	nfsctl_getfh		:= 6;
	
  // Linux system call opcodes:
		
	sys_exit		:= 1;
	sys_fork		:= 2;
	sys_read		:= 3;
	sys_write		:= 4;
	sys_open		:= 5;
	sys_close		:= 6;
	sys_waitpid		:= 7;
	sys_creat		:= 8;
	sys_link		:= 9;
	sys_unlink		:= 10;
	sys_execve		:= 11;
	sys_chdir		:= 12;
	sys_time		:= 13;
	sys_mknod		:= 14;
	sys_chmod		:= 15;
	sys_lchown		:= 16;
	old_stat		:= 18;
	sys_lseek		:= 19;
	sys_getpid		:= 20;
	sys_mount		:= 21;
	sys_oldmount	:= 22;
	sys_setuid		:= 23;
	sys_getuid		:= 24;
	sys_stime		:= 25;
	sys_ptrace		:= 26;
	sys_alarm		:= 27;
	old_fstat		:= 28;
	sys_pause		:= 29;
	sys_utime		:= 30;
	sys_access		:= 33;
	sys_nice		:= 34;
	sys_sync		:= 36;
	sys_kill		:= 37;
	sys_rename		:= 38;
	sys_mkdir		:= 39;
	sys_rmdir		:= 40;
	sys_dup			:= 41;
	sys_pipe		:= 42;
	sys_times		:= 43;
	sys_brk			:= 45;
	sys_setgid		:= 46;
	sys_getgid		:= 47;
	sys_signal		:= 48;
	sys_geteuid		:= 49;
	sys_getegid		:= 50;
	sys_acct		:= 51;
	sys_umount		:= 52;
	sys_ioctl		:= 54;
	sys_fcntl		:= 55;
	sys_setpgid		:= 57;
	sys_olduname	:= 59;
	sys_umask		:= 60;
	sys_chroot		:= 61;
	sys_ustat		:= 62;
	sys_dup2		:= 63;
	sys_getppid		:= 64;
	sys_getpgrp		:= 65;
	sys_setsid		:= 66;
	sys_sigaction	:= 67;
	sys_sgetmask	:= 68;
	sys_ssetmask	:= 69;
	sys_setreuid	:= 70;
	sys_setregid	:= 71;
	sys_sigsuspend	:= 72;
	sys_sigpending	:= 73;
	sys_sethostname	:= 74;
	sys_setrlimit	:= 75;
	sys_getrlimit	:= 76;
	sys_getrusage	:= 77;
	sys_gettimeofday:= 78;
	sys_settimeofday:= 79;
	sys_getgroups	:= 80;
	sys_setgroups	:= 81;
	sys_old_select	:= 82;
	sys_symlink		:= 83;
	old_lstat		:= 84;
	sys_readlink	:= 85;
	sys_uselib		:= 86;
	sys_swapon		:= 87;
	sys_reboot		:= 88;
	old_readdir		:= 89;
	sys_mmap		:= 90;
	sys_munmap		:= 91;
	sys_truncate	:= 92;
	sys_ftruncate	:= 93;
	sys_fchmod		:= 94;
	sys_fchown		:= 95;
	sys_getpriority	:= 96;
	sys_setpriority	:= 97;
	sys_statfs		:= 98;
	sys_fstatfs		:= 100;
	sys_ioperm		:= 101;
	sys_socketcall	:= 102;
	sys_syslog		:= 103;
	sys_setitimer	:= 104;
	sys_getitimer	:= 105;
	sys_stat		:= 106;
	sys_lstat		:= 107;
	sys_fstat		:= 108;
	old_uname		:= 109;
	sys_iopl		:= 110;
	sys_vhangup		:= 111;
	sys_idle		:= 112;
	sys_vm86old		:= 113;
	sys_wait4		:= 114;
	sys_swapoff		:= 115;
	sys_sysinfo		:= 116;
	sys_ipc			:= 117;
	sys_fsync		:= 118;
	sys_sigreturn	:= 119;
	sys_clone		:= 120;
	sys_setdomainname := 121;
	sys_uname		:= 122;
	sys_modify_ldt	:= 123;
	sys_adjtimex	:= 124;
	sys_mprotect	:= 125;
	sys_sigprocmask	:= 126;
	sys_create_module := 127;
	sys_init_module	:= 128;
	sys_delete_module := 129;
	sys_get_kernel_syms := 130;
	sys_quotactl	:= 131;
	sys_getpgid		:= 132;
	sys_fchdir		:= 133;
	sys_bdflush		:= 134;
	sys_sysfs		:= 135;
	sys_personality	:= 136;
	sys_setfsuid	:= 138;
	sys_setfsgid	:= 139;
	sys_llseek		:= 140;
	sys_getdents	:= 141;
	sys_select		:= 142;
	sys_flock		:= 143;
	sys_msync		:= 144;
	sys_readv		:= 145;
	sys_writev		:= 146;
	sys_getsid		:= 147;
	sys_fdatasync	:= 148;
	sys_sysctl		:= 149;
	sys_mlock		:= 150;
	sys_munlock		:= 151;
	sys_mlockall	:= 152;
	sys_munlockall	:= 153;
	sys_sched_setparam := 154;
	sys_sched_getparam := 155;
	sys_sched_setscheduler := 156;
	sys_sched_getscheduler := 157;
	sys_sched_yield	:= 158;
	sys_sched_get_priority_max := 159;
	sys_sched_get_priority_min := 160;
	sys_sched_rr_get_interval := 161;
	sys_nanosleep	:= 162;
	sys_mremap		:= 163;
	sys_setresuid	:= 164;
	sys_getresuid	:= 165;
	sys_vm86		:= 166;
	sys_query_module:= 167;
	sys_poll		:= 168;
	sys_nfsservctl	:= 169;
	sys_setresgid	:= 170;
	sys_getresgid	:= 171;
	sys_prctl		:= 172;
	sys_rt_sigreturn:= 173;
	sys_rt_sigaction:= 174;
	sys_rt_sigprocmask := 175;
	sys_rt_sigpending  := 176;
	sys_rt_sigtimedwait:= 177;
	sys_rt_sigqueueinfo:= 178;
	sys_rt_sigsuspend  := 179;
	sys_pread		:= 180;
	sys_pwrite		:= 181;
	sys_chown		:= 182;
	sys_getcwd		:= 183;
	sys_capget		:= 184;
	sys_capset		:= 185;
	sys_sigaltstack	:= 186;
	sys_sendfile	:= 187;
	sys_vfork		:= 190;


	// Prototypes for various Linux calls.
	// Note that we don't allow kernel modules (those
	// that have defined "__kernel__" access to these symbols.
	
	procedure _exit( status:int32 ); 
		@external( "linux_status" );
		
	procedure fork; 	
		@returns( "eax" ); 
		@external( "linux_fork" );
		
	procedure read( fd:dword; var buf:var; count:size_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_read" );
		 
	procedure write( fd:dword; var buf:var; count:size_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_write" );
		
	procedure open( filename:string; flags:dword; mode:mode_t );
		@returns( "eax" );
		@external( "linux_open" );
		
	procedure close( fd:dword );
		@returns( "eax" );
		@external( "linux_close" );
		
	procedure waitpid( pid:pid_t; var stat_addr:dword; options:dword );
		@use eax;
		@returns( "eax" );
		@external( "linux_waitpid" );
		
	procedure creat( pathname:string; mode:mode_t );
		@returns( "eax" );
		@external( "linux_creat" );
		
	procedure link( oldname:string; newname:string );
		@returns( "eax" );
		@external( "linux_link" );
		
	procedure unlink( pathname:string );
		@returns( "eax" );
		@external( "linux_unlink" );
		
	procedure execve( filename:string; var argv:var; var envp:var );
		@use eax;
		@returns( "eax" );
		@external( "linux_execve" );
		
	procedure chdir( filename:string );
		@returns( "eax" );
		@external( "linux_chdir" );
		
	procedure time( var tloc:dword );
		@use eax;
		@returns( "eax" );
		@external( "linux_time" );
		
	procedure mknod( filename:string; mode:dword; dev:dev_t );
		@returns( "eax" );
		@external( "linux_mknod" );
		
	procedure chmod( filename:string; mode:mode_t );
		@returns( "eax" );
		@external( "linux_chmod" );
		
	procedure lchown( filename:string; user:uid_t; group:gid_t );
		@returns( "eax" );
		@external( "linux_lchown" );
		
	procedure _break;
		@returns( "eax" );
		@external( "linux_break" );
		
	procedure lseek( fd:dword; offset:off_t; origin:dword );
		@returns( "eax" );
		@external( "linux_lseek" );
				
	procedure getpid;
		@returns( "eax" );
		@external( "linux_getpid" );
		
	procedure mount
	( 
			dev_name	:string; 
			dir_name	:string; 
			theType		:string; 
			new_flags	:dword; 
		var data		:var 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_mount" );
		
				
	procedure setuid( uid:uid_t );
		@returns( "eax" );
		@external( "linux_setuid" );
		
	procedure getuid;
		@returns( "eax" );
		@external( "linux_getuid" );
		
	procedure stime( var tptr:int32 );
		@use eax;
		@returns( "eax" );
		@external( "linux_stime" );
				
	procedure ptrace( request:dword; pid:dword; addr:dword; data:dword );
		@returns( "eax" );
		@external( "linux_ptrace" );
		
	procedure alarm( seconds:uns32 );
		@returns( "eax" );
		@external( "linux_alarm" );
		
	procedure pause;
		@returns( "eax" );
		@external( "linux_pause" );
		
	procedure utime( filename:string; var times: utimbuf );
		@use eax;
		@returns( "eax" );
		@external( "linux_utime" );
		
	procedure access( pathname:string; mode:int32 );
		@returns( "eax" );
		@external( "linux_access" );
		
	procedure nice( increment: int32 );
		@returns( "eax" );
		@external( "linux_nice" );
		
	procedure sync;
		@returns( "eax" );
		@external( "linux_sync" );
		
	procedure kill( pid:pid_t; sig:int32 );
		@returns( "eax" );
		@external( "linux_kill" );
		
	procedure rename( oldpath:string; newpath:string );
		@returns( "eax" );
		@external( "linux_rename" );
		
	procedure mkdir( pathname:string; mode:int32 );
		@returns( "eax" );
		@external( "linux_mkdir" );
		
	procedure rmdir( pathname:string );
		@returns( "eax" );
		@external( "linux_rmdir" );
	
	procedure dupfd( oldfd:dword );
		@returns( "eax" );
		@external( "linux_dup" );
		
	procedure pipe( fd:dword );
		@returns( "eax" );
		@external( "linux_pipe" );
		
	procedure times( var buf:tms );
		@use eax;
		@returns( "eax" );
		@external( "linux_times" );
		
	procedure brk( end_data_segment:dword );
		@returns( "eax" );
		@external( "linux_brk" );
		
	procedure setgid( gid:gid_t );
		@returns( "eax" );
		@external( "linux_setgid" );
		
	procedure getgid;
		@returns( "eax" );
		@external( "linux_getgid" );
		
	procedure signal( signum:int32; sighandler:procedure( signum:int32) );
		@returns( "eax" );
		@external( "linux_signal" );
		
	procedure geteuid;
		@returns( "eax" );
		@external( "linux_geteuid" );
		
	procedure getegid;
		@returns( "eax" );
		@external( "linux_getegid" );
		
	procedure acct( filename: string );
		@returns( "eax" );
		@external( "linux_acct" );
		
	procedure umount
	( 
			specialfile		:string; 
			dir				:string; 
			filesystemtype	:string; 
			mountflags		:dword; 
		var data			:var
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_umount" );
		
	procedure ioctl2( d:int32;  request:int32 );
		@returns( "eax" );
		@external( "linux_ioctl2" );
		
	procedure ioctl3( d:int32;  request:int32; argp:string );
		@returns( "eax" );
		@external( "linux_ioctl3" );
		
	#macro ioctl( d, request, argp[] );
	
		#if( @elements( argp ) = 0 )
		
			linux.ioctl2( d, request )
			
		#else
		
			linux.ioctl3( d, request, @text( argp[0] ))
			
		#endif
		
	#endmacro
	
	procedure fcntl2( fd:dword; cmd:dword );
		@returns( "eax" );
		@external( "linux_fcntl2" );
		
	procedure fcntl3( fd:dword; cmd:dword; arg:dword );
		@returns( "eax" );
		@external( "linux_fcntl3" );
		
	#macro fcntl( fd, cmd, arg[] );
	
		#if( @elements( arg ) = 0 )
		
			fcntl2( fd, cmd )
			
		#else
		
			fcntl3( fd, cmd, @text( arg[0] ))
			
		#endif
		
	#endmacro
	
		
	procedure setpgid( pid:pid_t; pgid:pid_t );
		@returns( "eax" );
		@external( "linux_setpgid" );
		
	procedure umask( mask:mode_t );
		@returns( "eax" );
		@external( "linux_umask" );
		
	procedure chroot( path:string );
		@returns( "eax" );
		@external( "linux_chroot" );

	procedure dup2( oldfd:dword; newfd:dword );
		@returns( "eax" );
		@external( "linux_dup2" );
	
	procedure getppid;
		@returns( "eax" );
		@external( "linux_getppid" );
		
	procedure getpgrp;
		@returns( "eax" );
		@external( "linux_getpgrp" );
	
	procedure setsid;
		@returns( "eax" );
		@external( "linux_setsid" );
	
	procedure sigaction
	( 
			signum		:int32; 
		var	act			:sigaction_t; 
		var oldaction	:sigaction_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_" );
		
	procedure sgetmask;
		@returns( "eax" );
		@external( "linux_sgetmask" );
		
	procedure ssetmask( mask:dword );
		@returns( "eax" );
		@external( "linux_ssetmask" );
	
	procedure setreuid( ruid:uid_t; euid:uid_t );
		@returns( "eax" );
		@external( "linux_setreuid" );
		
	procedure setregid( rgid:gid_t; egid:gid_t );
		@returns( "eax" );
		@external( "linux_setregid" );
	
	procedure sigsuspend( var mask:sigset_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_sigsuspend" );
	
	procedure sigpending( var set:sigset_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_sigpending" );
	
	procedure sethostname( theName:string; len:size_t );
		@returns( "eax" );
		@external( "linux_sethostname" );
	
	procedure setrlimit( resource:dword; var rlim:rlimit );
		@use eax;
		@returns( "eax" );
		@external( "linux_setrlimit" );
	
	procedure getrlimit( resource:dword; var rlim:rlimit );
		@use eax;
		@returns( "eax" );
		@external( "linux_getrlimit" );
	
	procedure getrusage( who:dword; var usage:rusage_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_getrusage" );
	
	procedure gettimeofday( var tv:timeval; var tz:timezone );
		@use eax;
		@returns( "eax" );
		@external( "linux_gettimeofday" );
	
	procedure settimeofday( var tv:timeval; var tz:timezone );
		@use eax;
		@returns( "eax" );
		@external( "linux_settimeofday" );
	
	procedure getgroups( size:dword; var list:var );
		@use eax;
		@returns( "eax" );
		@external( "linux_getgroups" );
		
	procedure setgroups( size:size_t; var list:var );
		@use eax;
		@returns( "eax" );
		@external( "linux_setgroups" );
	
	procedure symlink( oldpath:string; newpath:string );
		@returns( "eax" );
		@external( "linux_symlink" );
	
	procedure readlink( path:string; var buf:var; bufsize:size_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_readlink" );
	
	procedure uselib( library:string );
		@returns( "eax" );
		@external( "linux_uselib" );
	
	procedure swapon( path:string; swapflags:dword );
		@returns( "eax" );
		@external( "linux_swapon" );
	
	procedure reboot( magic:dword; magic2:dword; flag:dword; var arg:var );
		@use eax;
		@returns( "eax" );
		@external( "linux_reboot" );
		
	procedure mmap
	( 
		start:dword; 
		length:size_t; 
		prot:int32; 
		flags:dword; 
		fd:dword; 
		offset:off_t
	);
		@stdcall;			// Must be stdcall (6 parameters)!
		@returns( "eax" );
		@external( "linux_mmap" );
		
	procedure munmap( start:dword; length:size_t );
		@returns( "eax" );
		@external( "linux_munmap" );
		
	procedure truncate( path:string; length:off_t );
		@returns( "eax" );
		@external( "linux_truncate" );
	
	procedure ftruncate( fd:dword; length:off_t );
		@returns( "eax" );
		@external( "linux_ftruncate" );
	
	procedure fchmod( fd:dword; mode:mode_t );
		@returns( "eax" );
		@external( "linux_fchmod" );
	
	procedure fchown( fd:dword; owner:uid_t; group:gid_t );
		@returns( "eax" );
		@external( "linux_fchown" );
		
	procedure getpriority( which:dword; who:dword );
		@returns( "eax" );
		@external( "linux_getpriority" );
	
	procedure setpriority( which:dword; who:dword );
		@returns( "eax" );
		@external( "linux_setpriority" );
		
	procedure ioperm( from:dword; num:dword; turn_on:int32 );
		@returns( "eax" );
		@external( "linux_ioperm" );
		
	procedure socketcall( callop:dword; var args:var );
		@use eax;
		@returns( "eax" );
		@external( "linux_socketcall" );
		
	procedure syslog( theType:dword; var bufp:var; len:dword );
		@use eax;
		@returns( "eax" );
		@external( "linux_syslog" );
		
	procedure setitimer
	( 
			which:dword;
		var	ivalue:itimerval; 
		var ovalue:itimerval 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_setitimer" );
	
	procedure getitimer( which:dword; var theValue:itimerval );
		@use eax;
		@returns( "eax" );
		@external( "linux_getitimer" );
	
	procedure stat( filename:string; var buf:stat_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_stat" );
	
	procedure fstat( fd:dword; var buf:stat_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_fstat" );
	
	procedure lstat( filename:string; var buf:stat_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_lstat" );
	
	procedure uname( var buf:utsname );
		@use eax;
		@returns( "eax" );
		@external( "linux_uname" );
	
	procedure iopl( level:dword );
		@returns( "eax" );
		@external( "linux_iopl" );
	
	procedure vhangup;
		@returns( "eax" );
		@external( "linux_vhangup" );
		
	procedure idle;
		@returns( "eax" );
		@external( "linux_idle" );
	
	procedure wait4
	( 
			pid		:pid_t; 
			status	:dword; 
			options	:dword; 
		var rusage	:rusage_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_wait4" );
		
	procedure swapoff( path:string );
		@returns( "eax" );
		@external( "linux_swapoff" );
	
	procedure sysinfo( var info:sysinfo_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_sysinfo" );
	
	procedure ipc
	( 
			theCall	:dword;
			first	:dword;
			second	:dword;
			third	:dword;
		var	ptr		:var;
			fifth	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_ipc" );
	
	
	procedure fsync( fd:dword );
		@returns( "eax" );
		@external( "linux_fsync" );
	
	procedure sigreturn( unused:dword );
		@returns( "eax" );
		@external( "linux_sigreturn" );
		
	type clonefn_t:procedure(var p:var );
	procedure clone
	( 
			fn			:clonefn_t; 
		var	child_stack	:var; 
			flags		:dword; 
			arg			:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_clone" );
	
	procedure sysclone
	( 
		var	child_stack	:var; 
			flags		:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_sysclone" );
	
	procedure setdomainname( domainName:string; len:size_t );
		@returns( "eax" );
		@external( "linux_setdomainname" );
		
	procedure modify_ldt( func:dword; var ptr:var; bytecount:dword );
		@use eax;
		@returns( "eax" );
		@external( "linux_modify_ldt" );
	
	procedure adjtimex( var buf:timex );
		@use eax;
		@returns( "eax" );
		@external( "linux_adjtimex" );
	
	procedure mprotect( var addr:var; len:size_t; prot:dword );
		@use eax;
		@returns( "eax" );
		@external( "linux_mprotect" );
		
	procedure sigprocmask
	(
			how		:dword;
		var	set		:sigset_t;
		var	oldset	:sigset_t  
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_sigprocmask" );
	
	procedure quotactl( cmd:dword; special:string; id:dword; addr:caddr_t );
		@returns( "eax" );
		@external( "linux_quotactl" );
	
	procedure getpgid( pid:pid_t );
		@returns( "eax" );
		@external( "linux_getpgid" );
	
	procedure fchdir( fd:dword );
		@returns( "eax" );
		@external( "linux_fchdir" );
	
	procedure bdflush( func:dword; address:dword );
		@returns( "eax" );
		@external( "linux_bdflush" );
	
	procedure sysfs1( option:dword );
		@returns( "eax" );
		@external( "linux_sysfs1" );
	
	procedure sysfs2( option:dword; fsname:string );
		@returns( "eax" );
		@external( "linux_sysfs2" );
	
	procedure sysfs3( option:dword; fs_index:dword; var buf:var );
		@use eax;
		@returns( "eax" );
		@external( "linux_sysfs3" );
	
	#macro sysfs( option, args[] );
	
		#if( @elements( args ) = 0 )
		
			linux.sysfs1( option )
			
		#elseif( @elements( args ) = 1 )
		
			linux.sysfs2( option, @text( args[0] ) )
			
		#else
		
			linux.sysfs3
			( 
				option, 
				@text( args[0] ), 
				@text( args[1] )
			)
			
		#endif
		
	#endmacro

	procedure personality( persona:dword );
		@returns( "eax" );
		@external( "linux_personality" );
	
	procedure setfsuid( fsuid:uid_t );
		@returns( "eax" );
		@external( "linux_setfsuid" );
	
	procedure setfsgid( fsgid:gid_t );
		@returns( "eax" );
		@external( "linux_setfsgid" );
	
	procedure llseek
	( 
			fd:dword; 
			offset_high:dword; 
			offset_low:dword; 
		var	theResult:loff_t; 
			whence:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_llseek" );
	
	procedure getdents( fd:dword; var dirp:dirent; count:int32 );
		@use eax;
		@returns( "eax" );
		@external( "linux_getdents" );
	
	
	procedure flock( fd:dword; operation:int32 );
		@returns( "eax" );
		@external( "linux_flock" );
		
	procedure msync( start:dword; length:size_t; flags:dword );
		@returns( "eax" );
		@external( "linux_msync" );
	
	procedure readv( fd:dword; var vector:var; count:int32 );
		@use eax;
		@returns( "eax" );
		@external( "linux_readv" );
	
	procedure writev( fd:dword; var vector:var; count:int32 );
		@use eax;
		@returns( "eax" );
		@external( "linux_writev" );
	
	procedure getsid( pid:pid_t );
		@returns( "eax" );
		@external( "linux_getsid" );
		
	procedure fdatasync( fd:dword );
		@returns( "eax" );
		@external( "linux_fdatasync" );
		
	procedure sysctl( var args:__sysctl_args );
		@use eax;
		@returns( "eax" );
		@external( "linux_sysctl" );
	
	procedure mlock( addr:dword; len:size_t );
		@returns( "eax" );
		@external( "linux_mlock" );
	
	procedure munlock( addr:dword; len:size_t );
		@returns( "eax" );
		@external( "linux_munlock" );
	
	procedure mlockall( flags:dword );
		@returns( "eax" );
		@external( "linux_mlockall" );
	
	procedure munlockall;
		@returns( "eax" );
		@external( "linux_munlockall" );
	
	procedure sched_setparam( pid:pid_t; var p:sched_param_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_sched_setparam" );
		
	procedure sched_getparam( pid:pid_t; var p:sched_param_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_sched_getparam" );
	
	procedure sched_setscheduler( pid:pid_t; policy:dword; var p:sched_param_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_sched_setscheduler" );
	
	
	procedure sched_getscheduler( pid:pid_t );
		@returns( "eax" );
		@external( "linux_sched_getscheduler" );
	
	
	procedure sched_yield;
		@returns( "eax" );
		@external( "linux_yield" );
	
	procedure sched_get_priority_max( policy:dword );
		@returns( "eax" );
		@external( "linux_sched_get_priority_max" );
	
	
	procedure sched_get_priority_min( policy:dword );
		@returns( "eax" );
		@external( "linux_sched_get_priority_min" );
	
	
	procedure sched_rr_get_interval( pid:pid_t; var tp:timespec );
		@use eax;
		@returns( "eax" );
		@external( "linux_sched_rr_get_interval" );
	
	procedure nanosleep( var req:timespec; var rem:timespec );
		@use eax;
		@returns( "eax" );
		@external( "linux_nanosleep" );
		
	procedure mremap
	( 
		old_address	:dword; 
		old_size	:size_t;
		new_size	:size_t;
		flags		:dword
	);
		@returns( "eax" );
		@external( "linux_mremap" );
		
	procedure setresuid( ruid:uid_t; euid:uid_t; suid:uid_t );
		@returns( "eax" );
		@external( "linux_setresuid" );
	
	procedure setresgid( rgid:gid_t; egid:gid_t; sgid:gid_t );
		@returns( "eax" );
		@external( "linux_setresgid" );
	
	procedure getresuid
	(
		var	ruid	:uid_t;
		var	euid	:uid_t;
		var	suid	:uid_t
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_getresuid" );
	
	
	procedure getresgid
	(
		var	rgid	:gid_t;
		var	egid	:gid_t;
		var	sgid	:gid_t
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_getresgid" );
	
	
	procedure query_module
	( 
			theName	:string; 
			which	:dword; 
		var	buf		:var;
			bufsize	:size_t;
		var	retval	:size_t
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_query_module" );
	
	procedure vm86( fn:dword; var vm86pss:vm86plus_struct );
		@use eax;
		@returns( "eax" );
		@external( "linux_vm86" );

	procedure poll( var ufds:pollfd; nfds:dword; timeout:dword );
		@use eax;
		@returns( "eax" );
		@external( "linux_poll" );
		
	
	procedure prctl
	(
		option	:dword;
		arg2	:dword;
		arg3	:dword;
		arg4	:dword;
		arg5	:dword
	);
		@returns( "eax" );
		@external( "linux_prctl" );
	
	
	procedure pread
	(
			fd		:dword;
		var	buf		:var;
			count	:size_t;
			offset	:off_t
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_pread" );
	
		
	procedure pwrite
	( 
			fd		:dword;
		var	buf		:var;
			count	:size_t;
			offset	:off_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_pwrite" );
	
	
	procedure chown( path:string; owner:uid_t; group:gid_t );
		@returns( "eax" );
		@external( "linux_chown" );
	
	
	procedure getcwd( var buf:var; maxlen:size_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_getcwd" );
	
	procedure sigaltstack
	( 
		var sss:stack_t; 
		var oss:stack_t  
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_sigaltstack" );
	
	procedure sendfile
	( 
			out_fd	:dword; 
			in_fd	:dword; 
		var offset	:off_t; 
			count	:size_t  
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_sendfile" );
	
	
	procedure vfork;
		@returns( "eax" );
		@external( "linux_vfork" );
	
	
	procedure semop
	( 
			semid	:dword; 
		var sops	:sembuf; 
			nsops	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_semop" );
	
	
	procedure semctl
	(
		semid:dword; 
		semnum:int32; 
		cmd:dword; 
		arg:semun 
	);
		@returns( "eax" );
		@external( "linux_semctl" );
	
	procedure semget( key:key_t; nsyms:int32; semflg:dword );
		@returns( "eax" );
		@external( "linux_semget" );
		
		
	procedure msgrcv
	(
			msgid	:dword; 
		var	msgp	:msgbuf; 
			msgsz	:size_t; 
			msgtyp	:dword;
			msgflg	:dword
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_msgrcv" );
		
		
	procedure msgsnd
	(
			msgid	:dword; 
		var	msgp	:msgbuf; 
			msgsz	:size_t; 
			msgflag	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_msgsnd" );


	procedure msgctl
	(
			msqid	:dword; 
			cmd		:dword;
		var	buf		:msqid_ds
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_msgctl" );


	procedure msgget
	(
			key		:key_t; 
			msgflg	:dword
	);
		@returns( "eax" );
		@external( "linux_msgget" );


	procedure shmat
	(
			shmid	:dword;
			shmaddr	:dword; 
			shmflg	:dword
	);
		@returns( "eax" );
		@external( "linux_shmat" );

	procedure shmctl
	(
			shmid	:dword;
			cmd		:dword;
		var	buf		:shmid_ds
	);
		@returns( "eax" );
		@external( "linux_shmctl" );

	
	procedure shmdt
	(
			shmaddr	:dword
	);
		@returns( "eax" );
		@external( "linux_shmdt" );

	procedure shmget
	(
			key		:key_t;
			size	:dword;
			shmflg	:dword
	);
		@returns( "eax" );
		@external( "linux_shmget" );
		
	procedure accept
	( 
			s		:dword; 
		var	addr	:sockaddr; 
			addrlen	:socklen_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_accept" );
		
	procedure bind
	( 
			sockfd	:dword; 
		var	addr	:sockaddr; 
			addrlen	:socklen_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_bind" );
		
	procedure connect
	( 
			sockfd		:dword; 
		var	serv_addr	:sockaddr; 
			addrlen		:socklen_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_connect" );
		
		
		
	procedure getpeername
	( 
			s		:dword; 
		var	_name	:sockaddr; 
			namelen	:socklen_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_getpeername" );
		
		
	procedure getsockname
	( 
			s		:dword; 
		var	_name	:sockaddr; 
			namelen	:socklen_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_getsockname" );
		
	procedure getsockopt
	( 
			s		:dword; 
			level	:dword;
			optname	:dword;
		var	optval	:var;
			optlen	:socklen_t 
	);
		@stdcall;
		@use eax;
		@returns( "eax" );
		@external( "linux_getsockopt" );
		
	procedure setsockopt
	( 
			s		:dword; 
			level	:dword;
			optname	:dword;
		var	optval	:var;
			optlen	:socklen_t 
	);
		@use eax;
		@stdcall;
		@returns( "eax" );
		@external( "linux_setsockopt" );

		
	procedure listen
	( 
			s		:dword; 
			backlog	:dword
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_listen" );
		
		
	procedure recv
	( 
			s		:dword; 
		var	buf		:var;
			len		:size_t;
			flags	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_recv" );

		
		
		
		
	procedure recvmsg
	( 
			s		:dword; 
		var	msg		:msghdr;
			flags	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_recvmsg" );

		
		
		
	procedure recvfrom
	( 
			s		:dword; 
		var	buf		:var;
			len		:size_t;
			flags	:dword;
		var	from	:sockaddr;
		var	fromlen	:socklen_t 
	);
		@use eax;
		@stdcall;
		@returns( "eax" );
		@external( "linux_recvfrom" );

		

		
		
	procedure send
	( 
			s		:dword; 
		var	buf		:var;
			len		:size_t;
			flags	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_send" );

		
		
		
		
	procedure sendmsg
	( 
			s		:dword; 
		var	msg		:msghdr;
			flags	:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_sendmsg" );

		
		
		
	procedure sendto
	( 
			s		:dword; 
		var	buf		:var;
			len		:size_t;
			flags	:dword;
		var	_to		:sockaddr;
		var	tolen	:socklen_t 
	);
		@use eax;
		@stdcall;
		@returns( "eax" );
		@external( "linux_sendto" );

		
		
	procedure shutdown
	( 
		s		:dword; 
		how		:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_shutdown" );
		
		
	procedure socket
	( 
		domain	:dword;
		_type	:dword; 
		protocol:dword 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_socket" );

		
		
  type pairfd_t : dword[2];
	
	procedure socketpair
	( 
		d		:dword;
		_type	:dword; 
		protocol:dword;
	var	sv		:pairfd_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_socketpair" );
		
		
		

	procedure select
	( 
			n			:int32; 
		var readfds		:fd_set; 
		var writefds	:fd_set;
		var	exceptfds	:fd_set;
		var	timeout		:timespec;
		var	sigmask		:sigset_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_select" );
		
	procedure statfs( path:string; var buf:statfs_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_statfs" );
		
	procedure fstatfs( fd:dword; var buf:statfs_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_fstatfs" );
		
	procedure ustat( dev:dev_t; var ubuf:ustat_t );
		@use eax;
		@returns( "eax" );
		@external( "linux_ustat" );
		

	procedure create_module( theName:string; size:size_t );
		@returns( "eax" );
		@external( "linux_create_module" );
	
	
	procedure init_module
	( 
			theName:string; 
		var	image:module_t 
	);
		@use eax;
		@returns( "eax" );
		@external( "linux_init_module" );
	
	procedure delete_module( theName:string );
		@returns( "eax" );
		@external( "linux_delete_module" );
		
	procedure get_kernel_syms( var table:kernel_sym );
		@use eax;
		@returns( "eax" );
		@external( "linux_get_kernel_syms" );



end linux;
#endif //syscall_hhf