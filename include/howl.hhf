// Multiple definitions of howl.hhf are okay. In that situation, we need
// to reset some compile-time variables:

#includeOnce( "_hla.hhf" )
#includeOnce( "w.hhf" )
#includeOnce( "stdio.hhf" )

namespace _howl;

    val
        saveErrorPrefix :string     := "";
        widgetCode      :string     := "";
		initTabsCode	:string		:= "";
        numWidgets      :uns32      := 0;
        appEBX          :string     := "";
        appECX          :string     := "";
        curNumTabs      :uns32      := 0;
        wFormName       :string     := "";
        formName_t      :string     := "";
        mainMenuName    :string     := "" + @global:nl;
        hasMainMenu     :boolean    := @global:false;
        inMainMenu      :boolean    := @global:false;
        hasEndMainMenu  :boolean    := @global:false;
        subMenuStack    :string[8]  := ["","","","","","","",""];
        subMenuSP       :uns32      := 0;
                
        radioSetCnt     := 0;
        inRadioSet      := @global:false;
        
        containerStk    :string[8]  := ["","","","","","","",""];
        containerSP     :uns32      := 0;
        curNumTabs		:uns32		:= 0;

end _howl;

namespace howl;

    val
        // The xxxWidget macros check the type string passed to them against
        // the following list of type names and reports an error if it does not
        // match any of these names (the names are filled in by the make_rtti
        // macro):
        
        widget_type_list    :string := "";

end howl;


// The following should only be processed once:


#if( !@defined( howl_hhf ))
val
    howl_hhf := true;


namespace howl;

    val
        
        // Set printCompile to true to dump the code emitted for the
        // wForm object's constructor to the standard output during compilation.
        
        printCompile        := @global:false;
        
        
        // The various wForm keyword macros use the following values
        // to determine the type of objects they manipulate:
        
        wBitmap             := "wBitmap";
        wCheckBox           := "wCheckBox";
        wCheckable          := "wCheckable";
        wCheckBox3          := "wCheckBox3";
        wCheckBox3LT        := "wCheckBox3LT";
        wComboBox           := "wComboBox";
        wDragListBox        := "wDragListBox";
        wEditBox            := "wEditBox";
        wEllipse            := "wEllipse";
        wIcon               := "wIcon";
        wGroupBox           := "wGroupBox";
        wLabel              := "wLabel";
        wListBox            := "wListBox";
        wMenu               := "wMenu";
        wMenuItem           := "wMenuItem";
        wPasswdBox          := "wPasswdBox";
        wPie                := "wPie";
        wPolygon            := "wPolygon";
        wProgressBar        := "wProgressBar";
        wPushButton         := "wPushButton";
        wRadioButton        := "wRadioButton";
        wRadioButtonLT      := "wRadioButtonLT";
        wRadioSet           := "wRadioSet";
        wRadioSetButton     := "wRadioSetButton";
        wRadioSetButtonLT   := "wRadioSetButtonLT";
        wRectangle          := "wRectangle";
        wRoundRect          := "wRoundRect";
        wScrollBar          := "wScrollBar";
        wScrollWindow       := "wScrollWindow";
        wTextEdit           := "wTextEdit";
        wTimer              := "wTimer";
        wTrackBar           := "wTrackBar";
        wUpDown             := "wUpDown";
        wUpDownEditBox      := "wUpDownEditBox";
        wWindow             := "window";
        
        
        

                
    static
        bkgColor_g          :dword;                 external;
        bkgBrush_g          :dword;                 external;
        transparent_g       :dword;                 external;
        
        howlInstance        :dword;                 external;
        wc_howl             :@global:w.WNDCLASSEX;  external;
        msg_howl            :@global:w.MSG;         external;
        
        threadedMsg_g       :dword; @global:_hla._ext( "howl_threadedMsg_g" );
        threadedMsgAsync_g  :dword; @global:_hla._ext( "howl_threadedMsgAsync_g" );
        objectID_object_t   :dword; @global:_hla._ext( "objectID_object_t" ); 
        

    readonly
        Window_t_ClassName      :string;    
            @global:_hla._ext( "howl_Window_t_ClassName" );
            
        threadedMsg_t_ClassName :string;
            @global:_hla._ext( "howl_threadedMsg_t_ClassName" );
            
        threadedMsgAsync_t_ClassName    :string;
            @global:_hla._ext( "howl_threadedMsgAsync_t_ClassName" );
        
    
        
    // Macro to generate the run-time type information (RTTI) that HOWL uses:

    #macro make_rtti( typelist[] ):i;


        const
            #for( i := 0 to @elements( typelist ) - 1 )
            
                @text( typelist[i] + "_b"  ) := i;
                @text( typelist[i] + "_ps" ) := (1<<i);
                ?@global:howl.widget_type_list := 
                    @global:howl.widget_type_list + typelist[i] + " ";
                
            #endfor
            
    #endmacro
    
    procedure mainThreadExecute
    ( 
        wndHandle       :dword; 
        codeToExecute   :thunk 
    );  external;
    
    procedure mainThreadAsyncExecute
    ( 
        wndHandle       :dword; 
        codeToExecute   :thunk 
    );  external;
        
        
        
end howl;                  
    

// The window procedure for HOWL:

procedure howl_WndProc
( 
    hwnd    :dword; 
    uMsg    :uns32; 
    wParam  :dword;
    lParam  :dword  
);  @stdcall; external;




// HowlMainApp-
//                                        
//  This is the main application for the HOWL framework.

procedure HowlMainApp;  external;
    
// appStart is called whenever the application begins execution.
// This user-written code is responsible for setting up the initial
// (main app) window and kicking things off.
    
procedure appStart;                                  external;


// appTerminate is called whenever the application is quitting.
    
procedure appTerminate;                              external;


// appException is called if there is a general application exception.

procedure appException
( 
	theException	:dword in eax;
	raiseAdrs		:dword in ebx;
	filename		:string in ecx;
	userCode		:dword in edx;
	lineNum			:uns32 in edi 
); external;
    


howl.make_rtti
(
    wabsEditBox,        
    wBitmap,
    wButton,            
    wCheckable,     
    wCheckBox,          
    wCheckBox3,     
    wCheckBox3LT,       
    wCheckBoxLT,
    wClickable,     
    wComboBox,
    wContainer,
    wDragListBox,       
    wEditBox,
    wEllipse,
    wFilledFrame,           
    wFont,
    wGroupBox,
    wIcon,
    wLabel,
    wListBox,           
    wMenu,
    wMenuItem,
    wTabPage,
    wPasswdBox,
    wPie,
    wPolygon,
    wProgressBar,       
    wPushButton,        
    wRadioButton,       
    wRadioButtonLT, 
    wRadioSet,          
    wRadioSetButton,    
    wRadioSetButtonLT,
    wRectangle,
    wRoundRect,
    wScrollBar,
    wScrollWindow,
    wSurface,   
    wTabs,
    wTextEdit,
    wTimer,
    wTrackBar,
    wUpDown,
    wUpDownEditBox,
    wView,
    wVisual,
    wForm,
    
    window          
);

    // The following constants are assigned to the wVisual_t wType field
    // so we can quickly and easily determine the type of an object, including
    // any compatible parent types:
    
    wBase_c             := 0;
    
    wFont_c             := wFont_ps;
    wTimer_c            := wTimer_ps;
    
    wMenuItem_c         := wMenuItem_ps;
    wMenu_c             := wMenu_ps | wMenuItem_ps;
    
    wVisual_c           := wVisual_ps;
    wContainer_c        := wVisual_ps | wContainer_ps;
    wLabel_c            := wVisual_ps | wLabel_ps;
    wProgressBar_c      := wVisual_ps | wProgressBar_ps;
    wScrollBar_c        := wVisual_ps | wScrollBar_ps;
    wTrackBar_c         := wVisual_ps | wTrackBar_ps;
    
    wClickable_c        := wVisual_ps | wClickable_ps;

    wSurface_c          := wVisual_ps | wClickable_ps | wSurface_ps;
    wView_c             := wVisual_ps | wClickable_ps | wSurface_ps | wView_ps;
    wIcon_c             := wVisual_ps | wClickable_ps | wSurface_ps | wIcon_ps;
    wBitmap_c           := wVisual_ps | wClickable_ps | wSurface_ps | wBitmap_ps;
    
    wFilledFrame_c      := wVisual_ps | wClickable_ps | wSurface_ps | wFilledFrame_ps;
    wEllipse_c          := wVisual_ps | wClickable_ps | wSurface_ps | wFilledFrame_ps  | wEllipse_ps;   
    wPie_c              := wVisual_ps | wClickable_ps | wSurface_ps | wFilledFrame_ps  | wPie_ps;   
    wPolygon_c          := wVisual_ps | wClickable_ps | wSurface_ps | wFilledFrame_ps  | wPolygon_ps;   
    wRectangle_c        := wVisual_ps | wClickable_ps | wSurface_ps | wFilledFrame_ps  | wRectangle_ps;   
    wRoundRect_c        := wVisual_ps | wClickable_ps | wSurface_ps | wFilledFrame_ps  | wRoundRect_ps;   
    
    wTabs_c             := wTabs_ps | wContainer_ps | wVisual_ps;

    wGroupBox_c         := wGroupBox_ps | wContainer_ps | wVisual_ps;

    wListBox_c          := wVisual_ps | wClickable_ps | wListBox_ps;                
    wDragListBox_c      := wVisual_ps | wClickable_ps | wListBox_ps | wDragListBox_ps;
    wComboBox_c         := wVisual_ps | wClickable_ps | wListBox_ps | wComboBox_ps;                 
     
    wUpDown_c           := wVisual_ps | wClickable_ps | wUpDown_ps;
     
    wButton_c           := wVisual_ps | wClickable_ps | wButton_ps;
    wPushButton_c       := wVisual_ps | wClickable_ps | wButton_ps | wPushButton_ps;
    wCheckable_c        := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps;
    wCheckBox_c         := wVisual_ps | wClickable_ps | wButton_ps | wCheckBox_ps;
    wCheckBoxLT_c       := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wCheckBoxLT_ps;
    wCheckBox3_c        := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wCheckBox3_ps;
    wCheckBox3LT_c      := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wCheckBox3LT_ps;
    wRadioButton_c      := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wRadioButton_ps;
    wRadioButtonLT_c    := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wRadioButtonLT_ps;

    wRadioSet_c         := wVisual_ps | wClickable_ps | wButton_ps | wContainer_ps | wRadioSet_ps;
    wRadioSetButton_c   := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wRadioSetButton_ps;
    wRadioSetButtonLT_c := wVisual_ps | wClickable_ps | wButton_ps | wCheckable_ps | wRadioSetButtonLT_ps;
    
    wabsEditBox_c       := wVisual_ps | wabsEditBox_ps;
    wEditBox_c          := wVisual_ps | wabsEditBox_ps | wEditBox_ps;
    wPasswdBox_c        := wVisual_ps | wabsEditBox_ps | wPasswdBox_ps;
    wTextEdit_c         := wVisual_ps | wabsEditBox_ps | wTextEdit_ps;
    wUpDownEditBox_c    := wVisual_ps | wabsEditBox_ps | wUpDownEditBox_ps;

    window_c            := wVisual_ps | wContainer_ps | window_ps;
    wForm_c             := wVisual_ps | wContainer_ps | window_ps | wForm_ps;
    wTabPage_c          := wVisual_ps | wContainer_ps | window_ps | wTabPage_ps;
    wScrollWindow_c     := wVisual_ps | wContainer_ps | window_ps | wScrollWindow_ps;
    
        
        
        
        
        
        
        
        
type

    wTypes_t:   qword;
    widgetProc  :procedure( thisPtr:dword; wParam:dword; lParam:dword );
    paintProc_t :procedure( thisPtr:dword; hdc:dword; hwnd:dword );


    wabsEditBox_p       :pointer to wabsEditBox_t;
    wBase_p             :pointer to wBase_t;
    wButton_p           :pointer to wButton_t;
    wCheckBox_p         :pointer to wCheckBox_t;
    wCheckBox3_p        :pointer to wCheckBox3_t;
    wCheckBox3LT_p      :pointer to wCheckBox3LT_t;
    wCheckBoxLT_p       :pointer to wCheckBoxLT_t;
    wComboBox_p         :pointer to wComboBox_t;
    wContainer_p        :pointer to wContainer_t;
    wDragListBox_p      :pointer to wDragListBox_t;
    wEditBox_p          :pointer to wEditBox_t;
    wEllipse_p          :pointer to wEllipse_t;
    wFont_p             :pointer to wFont_t;
    wForm_p             :pointer to wForm_t;
    wIcon_p             :pointer to wIcon_t;
    wBitmap_p           :pointer to wBitmap_t;
    wGroupBox_p         :pointer to wGroupBox_t;
    wLabel_p            :pointer to wLabel_t;
    wListBox_p          :pointer to wListBox_t;
    wMenuItem_p         :pointer to wMenuItem_t;
    wMenu_p             :pointer to wMenu_t;
    wPasswdBox_p        :pointer to wPasswdBox_t;
    wPie_p              :pointer to wPie_t;
    wPolygon_p          :pointer to wPolygon_t;
    wProgressBar_p      :pointer to wProgressBar_t;
    wPushButton_p       :pointer to wPushButton_t;
    wRadioButton_p      :pointer to wRadioButton_t;
    wRadioButtonLT_p    :pointer to wRadioButtonLT_t;
    wRadioSet_p         :pointer to wRadioSet_t;
    wRadioSetButton_p   :pointer to wRadioSetButton_t;
    wRadioSetButtonLT_p :pointer to wRadioSetButtonLT_t;
    wRectangle_p        :pointer to wRectangle_t;
    wRoundRect_p        :pointer to wRoundRect_t;
    wScrollBar_p        :pointer to wScrollBar_t;
    wScrollWindow_p     :pointer to wScrollWindow_t;
    wTabs_p             :pointer to wTabs_t;    
    wTextEdit_p         :pointer to wTextEdit_t;
    wTrackBar_p         :pointer to wTrackBar_t;
    wView_p             :pointer to wView_t;
    wVisual_p           :pointer to wVisual_t;
    wUpDown_p           :pointer to wUpDown_t;
    wUpDownEditBox_p    :pointer to wUpDownEditBox_t;
    wTabPage_p          :pointer to wTabPage_t;          
    wTimer_p            :pointer to wTimer_t;          
    window_p            :pointer to window_t;   


////////////////////////////////////////////////////////////////////////////
//
// Class types

type

    // Base class for all HOWL objects.
    // Handles allocation/deallocation (create/destroy), RTTI, and certain
    // common methods and fields (that aren't necessarily used by all objects,
    // but this is a convenient place to put them).


    wBase_t:
        class
            
            var
				userData	:dword;
                handle      :dword;
                _name       :string;
                wType       :lword;
                
                wBase_private:
                    record
                    
                        visible         :boolean;
                        enabled         :boolean;
                        onHeap          :boolean;
                        align( 4 );
                        
                        objectID        :dword;
                        nextWidget      :wBase_p;
                        
                        // Pointer the wForm object that this
                        // object belongs to.
                        
                        parentForm      :wForm_p;
                        
                        // Handle of the Windows parent window associated
                        // with this control.  Note that parentForm.handle
                        // may not be the same as parentHandle because this
                        // object could belong to some other window that
                        // is a child window of the main form. (Okay, parentForm
                        // was probably a bad name to use).
                        
                        parentHandle    :dword;
                    
                        
                    endrecord;
                
        
            static
                objectID_g      :dword;     @global:_hla._ext( "objectID_object_t" );
        
            // Constructors/Destructors:
            
            procedure create_wBase
            (
                wbName  :string 
            );  external;
                    
            method destroy;                                 external;
            method show;                                    external;
            method hide;                                    external;    
            method enable;                                  external;    
            method disable;                                 external;    

            // Accessor/mutator functions:
            
            method get_handle;      @returns( "eax" );      external;
            method get_objectID;    @returns( "eax" );      external;
            method get_visible;     @returns( "al" );       external;   
            method get_enabled;     @returns( "al" );       external;   
            method get_onHeap;      @returns( "al" );       external;   
            method get_parentHandle;    @returns( "eax" );  external;
            method get_parentForm;      @returns( "eax" );  external;
            
            method set_onHeap( onHeap:boolean );            external;                        
            method set_parentHandle( parentHandle:dword );  external;
            method set_parentForm( parentForm:wForm_p );    external;
            
            
            // Default message processor:
            
            method processMessage
            (
                hwnd    :dword;
                uMsg    :dword;
                wParam  :dword;
                lParam  :dword
            );  external;
            
        endclass;
            
    
    // Menu entry on the main form:
    
    wMenuItem_t:
        class inherits( wBase_t );
                
            var
                align( 4 );
                wMenuItem_private:
                    record
                        
                                
                        nextMenu        :wMenuItem_p;
                        itemType        :dword;
                        itemString      :string;
                        itemHandler     :widgetProc;
                                    
                    endrecord;
            
            
            // Constructors/Destructors:
            
            procedure create_wMenuItem
            (
                wmiName         :string;
                parentHandle    :dword;
                itemType        :dword;
                itemString      :string;
                itemHandler     :widgetProc 
            );  external;
                    
            
            override method enable;                             external;
            override method disable;                            external;
            
            method checked( state:boolean );                    external;
            
            // Accessor functions:
            
            method get_itemType;        @returns( "eax" );      external;
            method get_itemString;      @returns( "eax" );      external;
            method get_itemHandler;     @returns( "eax" );      external;
                
            
            method set_itemType( itemType:dword );              external;
            method set_itemString( itemString:string );         external;
            method set_itemHandler( itemHandler:widgetProc );   external;

        endclass;
        
         
        
        
    // Menu or submenu on the main form:
        
    wMenu_t:
        class inherits( wMenuItem_t );
            
            // Constructors/Destructors:
            
            procedure create_wMenu
            (
                wmName          :string;
                wmText          :string;
                parentHandle    :dword 
            );  external;
                                
            

            override method destroy;                    external;
            
        endclass;
        
    
    // Font object.
    
    wFont_t:
        class inherits( wBase_t );
        
            var
                align( 4 );
                wFont_private:
                    record
                    
                        family          :byte;
                        bold            :boolean;
                        italic          :boolean;
                        underline       :boolean;
                        strikeout       :boolean;
                        monospaced      :boolean;
                        align( 4 );
                        
                        faceName        :string;
                        size            :uns32;
                        
                    endrecord;
                
            procedure create_wFont
            (
                wfName          :string;
                parentHandle    :dword;
                faceName        :string;
                family          :byte;
                size            :uns32;
                bold            :boolean;
                italic          :boolean;
                underline       :boolean;
                strikeout       :boolean;
                monospaced      :boolean
            );  external;
                
            procedure create_wFont2
            (
                wfName          :string;
                parentHandle    :dword;
                faceName        :string;
                family          :byte;
                size            :uns32;
                angle           :int32;
                rotate          :int32;
                weight          :uns32;
                italic          :boolean;
                underline       :boolean;
                strikeout       :boolean;
                monospaced      :boolean
            );  external;
                
            override method destroy;                    external;
            
            // Accessor functions:
            
            method get_facename;    @returns( "eax" );  external;
            method get_size;        @returns( "eax" );  external;
            method get_family;      @returns( "al" );   external;
            method get_bold;        @returns( "al" );   external;
            method get_italic;      @returns( "al" );   external;
            method get_underline;   @returns( "al" );   external;
            method get_strikeout;   @returns( "al" );   external;
            method get_monospaced;  @returns( "al" );   external;
            
                
        endclass;


    // wVisual objects are those that represent items that can appear on
    // the main form. They have a bounding box (x, y, width, height), a
    // handle to a parent window, and a pointer to a paint procedure.
    // This is an abstract class; real objects are of some class derived
    // from wVisual_t.
    
    wVisual_t:
        class inherits( wBase_t );
                
            var
                align( 4 );
                wVisual_private:
                    record
                    
                        x           :dword;
                        y           :dword;
                        width       :dword;
                        height      :dword;
                        bkgColor    :dword;
                        bkgBrush    :dword;
                        style       :dword;
                        exStyle     :dword;
                        
                    endrecord;
                
            
            
            // Constructors/Destructors:
            
            procedure create_wVisual
            (
                wvName          :string; 
                parentHandle    :dword;                                     
                x               :dword; 
                y               :dword;
                width           :dword;
                height          :dword 
            );  external;
                    
            // Accessor functions:
            
            method get_x;               @returns( "eax" );  external;
            method get_y;               @returns( "eax" );  external;
            method get_width;           @returns( "eax" );  external;
            method get_height;          @returns( "eax" );  external;   
            method get_bkgColor;        @returns( "eax" );  external;
            method get_style;           @returns( "eax" );  external;
            method get_exStyle;         @returns( "eax" );  external;   
                
            
            method set_x( x:dword );                        external;
            method set_y( y:dword );                        external;
            method set_width( width:dword );                external;
            method set_height( height:dword );              external;   
            method set_bkgColor
            ( 
                bkgColor:dword 
            );  external;

            method move( x:dword; y:dword );                external;
            method resize( width:dword; height:dword );     external;
            
            method setFocus;                                external;   

            override method show;                           external;
            override method hide;                           external;    
            override method enable;                         external;    
            override method disable;                        external;
            override method destroy;                        external;
			        
            method onClose;                                 external;
            method onCreate;                                external;
        
        endclass;
        
    
    // wClickable_t is an abstract base class for objects that
    // can be clicked upon.
        
    wClickable_t:
        class inherits( wVisual_t );
            var
                align( 4 );
                wClickable_private:
                    record
                    
                        onClick     :widgetProc;
                        onDblClick  :widgetProc;
						onLPress	:widgetProc;
						onMPress	:widgetProc;
						onRPress	:widgetProc;
						onRelease	:widgetProc;
						onLRelease	:widgetProc;
						onMRelease	:widgetProc;
						onRRelease	:widgetProc;
                        
                    endrecord;
                
            procedure create_wClickable
            (
                wcName      :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
            
            override method processMessage;                  external;
			
            method get_onClick;     @returns( "eax" );       external;
            method get_onDblClick;  @returns( "eax" );       external;
            method get_onRelease;   @returns( "eax" );		 external;
            method get_onLRelease;  @returns( "eax" );		 external;
            method get_onMRelease;  @returns( "eax" );		 external;
            method get_onRRelease;  @returns( "eax" );		 external;
            method get_onLPress;    @returns( "eax" );       external;
            method get_onMPress;    @returns( "eax" );       external;
            method get_onRPress;    @returns( "eax" );       external;
            
            method set_onClick( onClick  :widgetProc );      external;
            method set_onDblClick( onDblClick :widgetProc ); external;
            method set_onLPress( onLPress :widgetProc );     external;
            method set_onMPress( onMPress :widgetProc );     external;
            method set_onRPress( onRPress :widgetProc );     external;
            method set_onRelease( onRelease :widgetProc );   external;
            method set_onLRelease( onLRelease :widgetProc ); external;
            method set_onMRelease( onMRelease :widgetProc ); external;
            method set_onRRelease( onRRelease :widgetProc ); external;
            
			method click;                                    external;
			        
        endclass;
    
        
    // wSurface_t is a concrete implementation of wClickable_t.
    // It provides an object with a window that, at the very least,
    // provides a handle to Windows so a Windows message procedure
    // can identify the object. It can also provide a small rectangular
    // surface on which to draw objects on the main form.
    //
    // Basically, wSurface_t is a window_t object that is not a
    // container.
    
    wSurface_t:
        class inherits( wClickable_t );
        
            var
                align( 4 );
                wSurface_private:
                    record
                        
                        // onPaint event pointer:
                             
                        onPaint     :widgetProc;
                        
                    endrecord;
                
            procedure create_wSurface
            (
                wsName      :string;
                exStyle     :dword;
                style       :dword; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                bkgColor    :dword;
                visible     :boolean 
            );  external;
                    
            override method destroy;                        external;
            override method processMessage;                 external;
            override method onClose;                        external;
            override method onCreate;                       external;
        
            method get_onPaint;     @returns( "eax" );      external;
            method set_onPaint( onPaint:widgetProc );       external;

        endclass;
    
    
    // wView_t is a concrete implementation of wSurface_t.
    // This is equivalent to a window_t object that is not a container.
        
    wView_t:
        class inherits( wSurface_t );
        
            procedure create_wView
            (
                wsName      :string;
                exStyle     :dword;
                style       :dword; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                bkgColor    :dword;
                visible     :boolean 
            );  external;
            
        
        endclass;
     
    // wFilledFrame_t objects are the graphic objects (rectangles,
    // ellipses, round rectangles, polygons, etc.)   
    
    wFilledFrame_t:
        class inherits( wSurface_t );   
            var
                align( 4 );
                wFilledFrame_private:
                    record
                    
                        lineColor   :dword;
                        fillColor   :dword;
                        
                        _linePen    :dword;
                        _lineBrush  :dword;
                        _fillBrush  :dword;
                        
                    endrecord;
                
        
            procedure create_wFilledFrame
            (
                wrName      :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                lineColor   :dword;
                fillColor   :dword;
                bkgColor    :dword 
            );  external;
                
            method get_fillColor;   @returns( "eax" );      external;
            method get_lineColor;   @returns( "eax" );      external;
            
            method set_fillColor( fillColor:dword );        external;
            method set_lineColor( lineColor:dword );        external;
            
            override method destroy;                        external;
            //override method processMessage;                 external;
        
        endclass;
        
        
        
        
    // Ellipse widgets
    
    wEllipse_t:
        class inherits( wFilledFrame_t );
        
            procedure create_wEllipse
            (
                wrName      :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                lineColor   :dword;
                fillColor   :dword;
                bkgColor    :dword 
            );  external;
            
            override method processMessage;                 external;
            
        endclass;   
        
        
    // Pie widgets
    
    wPie_t:
        class inherits( wFilledFrame_t );
        
            var
                align( 8 );
                wPie_private:
                    record
                    
                        startAngle  :real64;
                        endAngle    :real64;
                        
                    endrecord;
        
            procedure create_wPie
            (
                wrName      :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                startAngle  :real64;
                endAngle    :real64;
                lineColor   :dword;
                fillColor   :dword;
                bkgColor    :dword 
            );  external;
            

            override method processMessage;                 external;
            
            method get_startAngle;  @returns( "st0" );      external;
            method get_endAngle;    @returns( "st0" );      external;
            
            method set_startAngle( startAngle:real64 );     external;
            method set_endAngle( endAngle:real64 );         external;
            
        endclass;   
        
        
    // Polygon widgets
    
    ptArray :pointer to w.POINT;
    
    wPolygon_t:
        class inherits( wFilledFrame_t );
        
            var
                align( 4 );
                wPolygon_private:
                    record
                    
                        points          :ptArray;
                        scaledPoints    :ptArray;
                        nPoints         :uns32;
                        origW           :dword;
                        origH           :dword;
                        
                    endrecord;
        
            procedure create_wPolygon
            (
                wrName      :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                lineColor   :dword;
                fillColor   :dword;
                bkgColor    :dword 
            );  external;
            

            override method destroy;                        external;
            override method processMessage;                 external;
            
            override method set_width;                      external;
            override method set_height;                     external;
            override method resize;                         external;
            
            method set_points
            ( 
                nPoints :dword; 
                points  :ptArray 
            );  external;
            
            method get_points;      @returns( "eax" );      external;
            method get_nPoints;     @returns( "eax" );      external;
 
            
        endclass;   
        
        
    // Rectangle widgets
    
    wRectangle_t:
        class inherits( wFilledFrame_t );
        
            procedure create_wRectangle
            (
                wrName      :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                lineColor   :dword;
                fillColor   :dword 
            );  external;
            

            override method processMessage;                 external;
            
        endclass;   
        
        
        
    // Round Rectangle widgets
    
    wRoundRect_t:
        class inherits( wFilledFrame_t );
        
            var
                align( 4 );
                wRoundRect_private:
                    record
                                 
                        cornerWidth     :dword;
                        cornerHeight    :dword;
                        
                    endrecord;
                
            procedure create_wRoundRect
            (
                wrName          :string;
                parent          :dword;
                x               :dword; 
                y               :dword;
                width           :dword;
                height          :dword;
                cornerWidth     :dword;
                cornerHeight    :dword;
                lineColor       :dword;
                fillColor       :dword;
                bkgColor        :dword 
            );  external;
            
            method get_cornerWidth;     @returns( "eax" );  external;
            method get_cornerHeight;    @returns( "eax" );  external;
            
            method set_cornerWidth( cornerWidth:dword );    external;
            method set_cornerHeight( cornerHeight:dword );  external;

            override method processMessage;                 external;
            
        endclass;   
        
        
        
    // Icon widgets
    
    wIcon_t:
        class inherits( wSurface_t );
        
            var
                align( 4 );
                wIcon_private:
                    record
                    
                        iconName    :string;
                        iconHandle  :dword;
                        
                    endrecord;
                
            procedure create_wIcon
            (
                wiName      :string;
                iconName    :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                bkgColor    :dword 
            );  external;
            
            method get_iconName;    @returns( "eax" );      external;
            method load_icon( iconName:string );            external;
            override method destroy;                        external;
            override method processMessage;                 external;
            
        endclass;   
        
        
        
    // Image widgets
    
    wBitmap_t:
        class inherits( wSurface_t );
        
            var
                align( 4 );
                wBitmap_private:
                    record
                    
                        stretch         :boolean;
                        align( 4 );
                        
                        imageName       :string;
                        imageHandle     :dword;
                        sourceX         :dword;
                        sourceY         :dword;
                        sourceW         :dword;
                        sourceH         :dword;
                        destW           :dword;
                        destH           :dword;
                        
                    endrecord;
                    
                
            procedure create_wBitmap
            (
                wiName      :string;
                imageName   :string;
                parent      :dword;
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                bkgColor    :dword 
            );  external;
            
            method get_imageName;       @returns( "eax" );      external;
            method get_sourceX;         @returns( "eax" );      external;
            method get_sourceY;         @returns( "eax" );      external;
            method get_sourceW;         @returns( "eax" );      external;
            method get_sourceH;         @returns( "eax" );      external;
            method get_destW;           @returns( "eax" );      external;
            method get_destH;           @returns( "eax" );      external;
            method get_stretch;         @returns( "al" );       external;
            
            method load_bitmap( imageName:string );             external;
            override method destroy;                            external;
            override method processMessage;                     external;
            
            method normalBitmap;        @returns( "eax" );      external;
            method stretchBitmap
            ( 
                sourceX         :dword;
                sourceY         :dword;
                sourceW         :dword;
                sourceH         :dword;
                destW           :dword;
                destH           :dword
            );  external;
            
            
        endclass;   
    
    
        
        
    // wContainer_t objects are objects that can contain other objects.
    // It would have been nice to derive this class from wBase_t rather
    // than wVisual_t (logically, a container needn't be a visual object),
    // however, doing so would require all visual objects to be containers,
    // which isn't necessary. Fortunately, if the need arises to create
    // a non-visual container object, the fact that there are some extra
    // fields inherited from wVisual_t is no big deal as they can be
    // safely ignored (the wVisual_t constructor doesn't create an actual
    // Windows' window, so the only overhead here is a few bytes of storage).
    //
    // Note that wSurface_t <- wView_t and wSurface_t <- wFilledFrame_t
    // paths in the object are visual objects that avoid having the
    // container fields present, at the expense of replicated fields and
    // methods in the class hierarchy (not a great design, but saves space
    // in the individual objects).
        
    wContainer_t:
        class inherits( wVisual_t );
        
            var
                align( 4 );
                wContainer_private:
                    record
                    
                        numWidgets  :uns32;
                        widgetList  :wVisual_p;
                        lastWidget  :wVisual_p;
                        
                    endrecord;
            
            procedure create_wContainer
            (
                wcName  :string; 
                parent  :dword;                                     
                x       :dword; 
                y       :dword;
                width   :dword;
                height  :dword 
            );  external;
                                
            override method destroy;                        external;
            override method show;                           external;
            override method hide;                           external;    
            override method enable;                         external;    
            override method disable;                        external;
            
            method get_numWidgets;  @returns( "eax" );      external;
            method insertWidget( theWidget:wBase_p );       external; 
            method findWidget( objectID:dword );            external;
            iterator widgetOnForm( nestingLevel:uns32 );    external; 
            iterator widgetsJustOnForm;                     external;
            
        endclass;
        
    
        
        
    ////////////////////////////  W I D G E T S  \\\\\\\\\\\\\\\\\\\\\\\\\\
    //
    // UpDown control widget
    
    wUpDown_t:
        class inherits( wClickable_t );
            var
                wUpDown_private:
                    record
                    
                        lowerRange  :dword;
                        upperRange  :dword;
                        
                    endrecord;
        
            procedure create_wUpDown
            (
                wudName     :string;
                parent      :dword;
                style       :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                lowerRange  :dword;
                upperRange  :dword;
                initialPosn :dword;
                onClick     :widgetProc 
            );  external;
            
            method get_lowerRange;  @returns( "eax" );          external;
            method get_upperRange;  @returns( "eax" );          external;
            method get_position;    @returns( "eax" );          external;
            
            method set_lowerRange( lowerRange:word );           external;
            method set_upperRange( upperRange:word );           external;
            method set_position(   position  :word );           external;
            
            override method processMessage;                     external;
            
        endclass;
         
         
    // List Box widgets
    
    wListBox_t:
        class inherits ( wClickable_t );
        
            var
                align( 4 );
                wListBox_private:
                    record
                    
                        textColor   :dword;
                        
                    endrecord;
            
            procedure create_wListBox
            (
                wlbName     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                sort        :boolean;
                onClick     :widgetProc 
            );  external;
            
            method add_string( s:string );                      external;
            method insert_string( index:dword; s:string );      external;
            method delete_string( index:dword );                external;
            method reset;                                       external;
            
            method find_prefix
            ( 
                s           :string;
                startIndex  :dword 
            );  @returns( "eax" );                              external;
            
            method find_string
            ( 
                s           :string;
                startIndex  :dword 
            );  @returns( "eax" );                              external;
            
            method get_count;               @returns( "eax" );  external;
            method get_curSel;              @returns( "eax" );  external;
            method get_itemData( i:dword ); @returns( "eax" );  external;
            method a_get_text( i:dword );   @returns( "eax" );  external;
            method get_text( i:dword; s:string );               external;
            
            method set_curSel(index:dword); @returns( "eax" );  external;
            method set_itemData
            (
                index   :dword;
                data    :dword
            );  external;
            
            method load_dir
            ( 
                pathname    :string; 
                attributes  :dword 
            );  external;
            
            method get_textColor;   @returns( "eax" );          external;
            method set_textColor( textColor:dword );            external;
            
            override method processMessage;                     external;
            
        endclass;
         
         
    // Combo Box widgets
    
    wComboBox_t:
        class inherits ( wListBox_t );
        
            var
                align( 4 );
                wComboBox_private:
                    record
                    
                        onEditChange    :widgetProc;
                        onCancel        :widgetProc;
                        onSelEndOk      :widgetProc;
                        
                    endrecord;
                
            procedure create_wComboBox
            (
                wcbName     :string;
                caption     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                sort        :boolean;
                onSelChange :widgetProc 
            );  external;
            
            method get_onEditChange;    @returns( "eax" );      external;
            method get_onCancel;        @returns( "eax" );      external;
            method get_SelEndOk;        @returns( "eax" );      external;
            
            method set_onEditChange( onEditChange:widgetProc ); external;
            method set_onCancel( onCancel:widgetProc );         external;
            method set_SelEndOk( onSelEndOk:widgetProc );       external;
            
            method a_get_editBoxText;   @returns( "eax" );      external;
            method get_editBoxText( theText:string );           external;
            
            method set_editBoxText( theText:string );           external;
            
            
            override method load_dir;                           external;
            override method processMessage;                     external;
            override method add_string;                         external;
            override method insert_string;                      external;
            override method delete_string;                      external;
            override method reset;                              external;
            override method find_prefix;                        external;
            override method find_string;                        external;
            override method get_count;                          external;
            override method get_curSel;                         external;
            override method get_itemData;                       external;
            override method a_get_text;                         external;
            override method get_text;                           external;
            override method set_curSel;                         external;
            override method set_itemData;                       external;
            
        endclass;
         
         
    // List Box widgets
    
    wDragListBox_t:
        class inherits ( wListBox_t );
        
            var
                align( 4 );
                wDragListBox_private:
                    record
                    
                        // The following is a private field.
                        // External code should not access it.
                        
                        startDragIndex :dword;
                        
                    endrecord;
        
            procedure create_wDragListBox
            (
                wlbName     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
            
            override method processMessage;                     external;
            
        endclass;
        
        
        
    
    // Button widgets
    
        
    wButton_t:
        class inherits( wClickable_t );
        
            var
                align( 4 );
                wButton_private:
                    record
                    
                        onPaint     :widgetProc;
                        onHilite    :widgetProc;
                        onUnHilite  :widgetProc;
                        onDisable   :widgetProc;
                        onSetFocus  :widgetProc;
                        onKillFocus :widgetProc;
                        
                    endrecord;
                
                
            procedure create_wButton
            (
                wbName      :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
                    
            method get_onPaint;     @returns( "eax" );          external;
            method get_onHilite;    @returns( "eax" );          external;
            method get_onUnHilite;  @returns( "eax" );          external;
            method get_onDisable;   @returns( "eax" );          external;
            method get_onSetFocus;  @returns( "eax" );          external;
            method get_onKillFocus; @returns( "eax" );          external;

            method set_onPaint      ( onPaint    :widgetProc ); external;
            method set_onHilite     ( onHilite   :widgetProc ); external;
            method set_onUnHilite   ( onUnHilite :widgetProc ); external;
            method set_onDisable    ( onDisable  :widgetProc ); external;
            method set_onSetFocus   ( onSetFocus :widgetProc ); external;
            method set_onKillFocus  ( onKillFocus:widgetProc ); external;
            
            method get_text( txt:string );                      external;
            method a_get_text;                                  external;
            method set_text( txt:string );                      external;
                        
            override method processMessage;                     external;           
            
            
        endclass;
            
    wPushButton_t:
        class inherits( wButton_t );
        
            procedure create_wPushButton
            (
                wpbName     :string;
                caption     :string; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
        
        endclass;
        
        
    wCheckable_t:
        class inherits( wButton_t );
                
            procedure create_wCheckable                   
            (
                wchkName    :string;
                caption     :string;
                style       :dword;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
                
            method set_check( state:dword );                external;           
            method get_check; @returns( "eax" );            external;
                    
        endclass;
            
            
    wCheckBox_t:
        class inherits( wCheckable_t );
        
            procedure create_wCheckBox                  
            (
                wcbName     :string;
                caption     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
                    
        endclass;
            
            
    wCheckBoxLT_t:
        class inherits( wCheckable_t );
        
            procedure create_wCheckBoxLT
            (
                wcbltName   :string;
                caption     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
        
        endclass;
            
            
    wCheckBox3_t:
        class inherits( wCheckable_t );
        
            procedure create_wCheckBox3
            (
                wcb3Name    :string;
                caption     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
        
        endclass;
            
            
    wCheckBox3LT_t:
        class inherits( wCheckable_t );
        
            procedure create_wCheckBox3LT
            (
                wcb3ltName  :string;
                caption     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
        
        endclass;
            
            
    wRadioButton_t:
        class inherits( wCheckable_t );
        
            procedure create_wRadioButton
            (
                wrbName     :string;
                caption     :string;
                style       :dword;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
        
        endclass;
            
            
    wRadioButtonLT_t:
        class inherits( wCheckable_t );
        
            procedure create_wRadioButtonLT
            (
                wrbltName   :string;
                caption     :string;
                style       :dword;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
        
        endclass;
        
            
            
    wRadioSet_t:
        class inherits( wContainer_t );
        
            var
                align( 4 );
                wRadioSet_private:
                    record
                    
                        // Windows handle for the group box window
                        
                        groupBoxHndl    :dword;
                        
                        
                    endrecord;
                
        
            procedure create_wRadioSet
            (
                wrsName     :string;
                caption     :string; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                bkgColor    :dword 
            );  external;
            
            override method processMessage;                     external;
            override method destroy;                            external;
            override method set_width;                          external;
            override method set_height;                         external;
            override method resize;                             external;
                    
                    
        endclass;
            
            
    wRadioSetButton_t:
        class inherits( wCheckable_t );
        
            procedure create_wRadioSetButton
            (
                wrbName     :string;
                caption     :string;
                style       :dword;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
                    
                    
        endclass;
            

    wRadioSetButtonLT_t:
        class inherits( wCheckable_t );
        
            procedure create_wRadioSetButtonLT
            (
                wrbltName   :string;
                caption     :string;
                style       :dword;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                onClick     :widgetProc 
            );  external;
                    
                    
        endclass;
            

    // Groupbox/panel widget:
    
    wGroupBox_t:
        class inherits( wContainer_t );
        
        
            procedure create_wGroupBox
            (
                wgbName     :string;
                caption     :string; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword 
            );  external;
                    
                    
        endclass;
        
    
    
    // Progress Bar Widgets
    
    wProgressBar_t:
        class inherits( wVisual_t );
        
            var
                align( 4 );
                wProgressBar_private:
                    record
                    
                        position    :word;
                        align( 4 );
                        
                        lowRange    :word;
                        hiRange     :word;
                        
                    endrecord;
                
            procedure create_wProgressBar
            (
                wpbName     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword 
            );  external;
            
            method get_position; @returns( "eax" );         external;
            method set_position( position:word );           external;
            
            method get_lowRange; @returns( "eax" );         external;
            method get_hiRange;  @returns( "eax" );         external;
            method set_range( low:word; high:word );        external;
            
            
        endclass;       
            

    
    // Scroll Bar Widgets
    
    wScrollBar_t:
        class inherits( wVisual_t );
        
            var
                align( 4 );
                wScrollBar_private:
                    record
                    
                        onChange        :widgetProc;
                        onThumbPosn     :widgetProc;
                        onThumbTrack    :widgetProc;
                        onLineLeft      :widgetProc;
                        onLineRight     :widgetProc;
                        onLineDown      :widgetProc;
                        onLineUp        :widgetProc;
                        onEndScroll     :widgetProc;
                        onPageDown      :widgetProc;
                        onPageUp        :widgetProc;
                        onPageLeft      :widgetProc;
                        onPageRight     :widgetProc;
                        onTop           :widgetProc;
                        onBottom        :widgetProc;
                        
                        lineInc         :uns32;
                        pageInc         :uns32;
                        curPosn         :dword;
                        info            :w.SCROLLINFO;
                        textColor       :dword;
                        
                    endrecord;
                
            procedure create_wScrollBar
            (
                wtbName     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                style       :dword;
                onChange    :widgetProc 
            );  external;
            
            override method enable;                             external;
            override method disable;                            external;
            override method show;                               external;
            override method hide;                               external;
            
            method get_position; @returns( "eax" );             external;
            method set_position( position:dword );              external;
            
            method get_lowRange; @returns( "eax" );             external;
            method get_hiRange;  @returns( "eax" );             external;
            method set_range( low:dword; high:dword );          external;
            
            method get_onChange;        @returns( "eax" );      external;
            method get_onThumbPosn;     @returns( "eax" );      external;
            method get_onThumbTrack;    @returns( "eax" );      external;
            method get_onLineDown;      @returns( "eax" );      external;
            method get_onLineUp;        @returns( "eax" );      external;
            method get_onLineLeft;      @returns( "eax" );      external;
            method get_onLineRight;     @returns( "eax" );      external;
            method get_onEndScroll;     @returns( "eax" );      external;
            method get_onPageDown;      @returns( "eax" );      external;
            method get_onPageUp;        @returns( "eax" );      external;
            method get_onPageLeft;      @returns( "eax" );      external;
            method get_onPageRight;     @returns( "eax" );      external;
            method get_onTop;           @returns( "eax" );      external;
            method get_onBottom;        @returns( "eax" );      external;
            method get_lineInc;         @returns( "eax" );      external;
            method get_pageInc;         @returns( "eax" );      external;
            
            method set_onChange( onChange:widgetProc );         external;
            method set_onThumbPosn( onThumbPosn:widgetProc );   external;
            method set_onThumbTrack( onThumbTrack:widgetProc ); external;
            method set_onLineDown( onLineDown:widgetProc );     external;
            method set_onLineUp( onLineUp:widgetProc );         external;
            method set_onLineLeft( onLineLeft:widgetProc );     external;
            method set_onLineRight( onLineRight:widgetProc );   external;
            method set_onEndScroll( onEndScroll:widgetProc );   external;
            method set_onPageDown( onPageDown:widgetProc );     external;
            method set_onPageUp( onPageUp:widgetProc );         external;
            method set_onPageLeft( onPageLeft:widgetProc );     external;
            method set_onPageRight( onPageRight:widgetProc );   external;
            method set_onTop( onTop:widgetProc );               external;
            method set_onBottom( onBottom:widgetProc );         external;
            
            method set_lineInc( lineInc:dword );                external;
            method set_pageInc( pageInc:dword );                external;
            
            method get_textColor;   @returns( "eax" );          external;
            
            method set_textColor( textColor:dword );            external;
            
            override method processMessage;                     external;
            
            
            
        endclass;       
            

        
    
    
    // Track Bar Widgets
    
    wTrackBar_t:
        class inherits( wVisual_t );
        
            var
                align( 4 );
                wTrackBar_private:
                    record
                    
                        onChange        :widgetProc;
                        onThumbPosn     :widgetProc;
                        onThumbTrack    :widgetProc;
                        onBottom        :widgetProc;
                        onLineDown      :widgetProc;
                        onLineUp        :widgetProc;
                        onTop           :widgetProc;
                        onEndtrack      :widgetProc;
                        onPageDown      :widgetProc;
                        onPageUp        :widgetProc;
                        
                    endrecord;
                
            procedure create_wTrackBar
            (
                wtbName     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                style       :dword;
                onChange    :widgetProc 
            );  external;
            
            method get_position; @returns( "eax" );             external;
            method set_position( position:dword );              external;
            
            method get_lowRange; @returns( "eax" );             external;
            method get_hiRange;  @returns( "eax" );             external;
            method set_range( low:dword; high:dword );          external;
            
            method get_onChange;        @returns( "eax" );      external;
            method get_onThumbPosn;     @returns( "eax" );      external;
            method get_onThumbTrack;    @returns( "eax" );      external;
            method get_onBottom;        @returns( "eax" );      external;
            method get_onLineDown;      @returns( "eax" );      external;
            method get_onLineUp;        @returns( "eax" );      external;
            method get_onTop;           @returns( "eax" );      external;
            method get_onEndtrack;      @returns( "eax" );      external;
            method get_onPageDown;      @returns( "eax" );      external;
            method get_onPageUp;        @returns( "eax" );      external;
            
            method set_onChange( onChange:widgetProc );         external;
            method set_onThumbPosn( onThumbPosn:widgetProc );   external;
            method set_onThumbTrack( onThumbTrack:widgetProc ); external;
            method set_onBottom( onBottom:widgetProc );         external;
            method set_onLineDown( onLineDown:widgetProc );     external;
            method set_onLineUp( onLineUp:widgetProc );         external;
            method set_onTop( onTop:widgetProc );               external;
            method set_onEndtrack( onEndtrack:widgetProc );     external;
            method set_onPageDown( onPageDown:widgetProc );     external;
            method set_onPageUp( onPageUp:widgetProc );         external;
            
            override method processMessage;                     external;
            
            
            
        endclass;       
            



    // Editor and text editor widgets       
            
    wabsEditBox_t:
        class inherits( wVisual_t );
        
            var
                align( 4 );
                wabsEditBox_private:
                    record
                    
                        onChange    :widgetProc;
                        onErrSpace  :widgetProc;
                        onHScroll   :widgetProc;
                        onVScroll   :widgetProc;
                        onMaxText   :widgetProc;
                        onUpdate    :widgetProc;
                        onSetFocus  :widgetProc;
                        onKillFocus :widgetProc;
                        textColor   :dword;
                        
                    endrecord;
                
            procedure create_wabsEditBox
            (
                webName     :string;
                initialTxt  :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                style       :dword;
                onChange    :widgetProc 
            );  external;
                    
                    
            method get_onChange;    @returns( "eax" );      external;
            method get_onErrSpace;  @returns( "eax" );      external;
            method get_onHScroll;   @returns( "eax" );      external;
            method get_onMaxText;   @returns( "eax" );      external;
            method get_onUpdate;    @returns( "eax" );      external;
            method get_onSetFocus;  @returns( "eax" );      external;
            method get_onKillFocus; @returns( "eax" );      external;

            method set_onChange     ( onChange   :widgetProc ); external;
            method set_onErrSpace   ( onErrSpace :widgetProc ); external;
            method set_onHScroll    ( onHScroll  :widgetProc ); external;
            method set_onMaxText    ( onMaxText  :widgetProc ); external;
            method set_onUpdate     ( onUpdate   :widgetProc ); external;
            method set_onSetFocus   ( onSetFocus :widgetProc ); external;
            method set_onKillFocus  ( onKillFocus:widgetProc ); external;
            
            method get_textColor;   @returns( "eax" );      external;
            
            method set_textColor( textColor:dword );        external;
            
            method undo;                                    external;
            method cut;                                     external;
            method copy;                                    external;
            method paste;                                   external;
            method clear;                                   external;
            
            method get_canUndo;     @returns( "eax" );      external;
            method emptyUndoBuffer;                         external;
            
            method get_modified;    @returns( "eax" );      external;
            method set_modified( modified:boolean );        external;
            
            method get_text( txt:string );                  external;
            method a_get_text; @returns( "eax" );           external;
            method set_text( txt:string );                  external;
            method get_length;  @returns( "eax" );          external;
            
            method get_selectedText( txt:string );          external;
            method a_get_selectedText;  @returns( "eax" );  external;
            
            method get_selection
            ( 
                var startPosn   :dword; 
                var endPosn     :dword
            );  external;           
            
            method set_selection
            ( 
                startPosn   :dword; 
                endPosn     :dword
            );  external;           
                        
            method replace_selection
            ( 
                replacement :string; 
                canUndo     :boolean
            );  external;           
                        
                
            override method processMessage;                 external;
                    
        endclass;
        
        
        
    wEditBox_t:
        class inherits( wabsEditBox_t );
        
            procedure create_wEditBox
            (
                webName     :string;
                initialTxt  :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                style       :dword;
                onChange    :widgetProc 
            );  external;
                    
                    
        endclass;
        
        
        
    wPasswdBox_t:
        class inherits( wabsEditBox_t );
        
            procedure create_wPasswdBox
            (
                wpwbName    :string;
                initialTxt  :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                style       :dword;
                onChange    :widgetProc 
            );  external;
                    
                    
            method get_passwordChar; @returns( "eax" ); external;
            method set_passwordChar( pwc:char );        external;
                
        endclass;
        
        
        
    wTextEdit_t:
        class inherits( wabsEditBox_t );
        
            procedure create_wTextEdit
            (
                wteName     :string;
                initialTxt  :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                style       :dword;
                onChange    :widgetProc 
            );  external;
                    
                    
            method getLineCount; @returns( "eax" );             external;
            
            method getLineIndex( charIndex:dword ); 
                        @returns( "eax" );                      external;
            
            method getCharIndex( lineIndex:dword ); 
                        @returns( "eax" );                      external;
            
            method getLine( lineIndex:dword; txt:string );      external;
            
            method a_getLine( lineIndex:dword );
                        @returns( "eax" );                      external;
                        
            method scroll( horz:int32; vert:int32 );            external;
            method scrollCaret;                                 external;
            method setTabStops( tabstops:dword );               external;
                                    
        endclass;
            
           
           
    // UpDownEditBox control widget
    
    wUpDownEditBox_t:
        class inherits( wabsEditBox_t );
            var
                wUpDownEditBox_private:
                    record
                    
                        lowerRange      :dword;
                        upperRange      :dword;
                        upDownHandle    :dword;
                        upDownStyle     :dword;
                        onUpDown        :widgetProc;
                        
                    endrecord;
        
            procedure create_wUpDownEditBox
            (
                wudName     :string;
                initialTxt  :string;
                parent      :dword;
                style       :dword;
                upDownStyle :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                lowerRange  :dword;
                upperRange  :dword;
                initialPosn :dword;
                onChange    :widgetProc;
                onUpDown    :widgetProc 
            );  external;
            
            method get_lowerRange;  @returns( "eax" );          external;
            method get_upperRange;  @returns( "eax" );          external;
            method get_position;    @returns( "eax" );          external;
            
            method set_lowerRange( lowerRange:word );           external;
            method set_upperRange( upperRange:word );           external;
            method set_position(   position  :word );           external;
            
            override method show;                               external;
            override method hide;                               external;
            override method enable;                             external;
            override method disable;                            external;
            
            override method processMessage;                     external;
            
        endclass;
            
        
    // Passive widgets:
    
    
    wLabel_t:
        class inherits( wVisual_t );
            var
                align( 4 );
                wLabel_private:
                    record
                    
                        caption     :string;
                        font        :wFont_p;
                        alignment   :dword;
                        foreColor   :dword;
                        
                    endrecord;
                
            procedure create_wLabel
            (
                wlName      :string;
                caption     :string;
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                alignment   :dword;
                foreColor   :dword;
                bkgColor    :dword 
            );  external;
        
        
            override method destroy;                            external;
            override method processMessage;                     external;
            
            method get_font;        @returns( "eax" );          external;
            method get_caption;     @returns( "eax" );          external;
            method a_get_caption;   @returns( "eax" );          external;
            method get_foreColor;   @returns( "eax" );          external;
            method get_alignment;   @returns( "eax" );          external;
            
            method set_font( font:wFont_p );                    external;
            method set_caption( caption:string );               external;
            method set_foreColor( foreColor:dword );            external;
            method set_alignment( alignment:dword );            external;
            
        endclass;
        
            
    
    // Window, form, tabs, and tabPage widgets:     
        
    
    window_t:
        class inherits( wContainer_t );
        
            var
                align( 4 );
                window_private:
                    record
                    
                        caption     :string;
                        
                        // onPaint event pointer:
                             
                        onPaint     :widgetProc;
                        
                    endrecord;
            
                
            procedure create_window
            (
                wwName      :string;
                caption     :string;
                exStyle     :dword;
                style       :dword; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                bkgColor    :dword;
                visible     :boolean 
            );  external;
                    
            override method destroy;                        external;
            override method processMessage;                 external;
            override method onClose;                        external;
            override method onCreate;                       external;
        
            method get_caption;     @returns( "eax" );      external;
            method a_get_caption;   @returns( "eax" );      external;
            
            method get_onPaint;     @returns( "eax" );      external;
            method set_onPaint( onPaint:widgetProc );       external;
            
            procedure window_t_processMessage 
            (
                hwnd    :dword;
                uMsg    :dword;
                wParam  :dword;
                lParam  :dword
            );  @global:_hla._ext( "window_t_processMessage" );
            
        endclass;
        
    
        
    
    // Window, form, tabs, and tabPage widgets:     
        
    
    wScrollWindow_t:
        class inherits( window_t );
        
            var
                align( 4 );
                scrollSurface   :window_p;
                
                wScrollWindow_private:
                    record
                    
                        hasVScroll  :boolean;
                        hasHScroll  :boolean;
                        align(4);
                        
                        // Scrollbar fields:
                        
                        hLineInc    :dword;
                        hPageInc    :dword;
                        vLineInc    :dword;
                        vPageInc    :dword;
                        
                        
                        
                    endrecord;
            
                
            procedure create_scrollWindow
            (
                wwName          :string;
                caption         :string;
                exStyle         :dword;
                style           :dword; 
                parent          :dword;                                     
                x               :dword; 
                y               :dword;
                width           :dword;
                height          :dword;
                scrollWidth     :dword;
                scrollHeight    :dword;
                bkgColor        :dword;
                hScroll         :boolean;
                vScroll         :boolean;
                visible         :boolean 
            );  external;
                    
            override method destroy;                        external;
            override method insertWidget;                   external;
            override method processMessage;                 external;
        
            method get_hLineInc;     @returns( "eax" );     external;
            method get_hPageInc;     @returns( "eax" );     external;
            method set_hLineInc( hLineInc:dword );          external;
            method set_hPageInc( hPageInc:dword );          external;
            
            method get_vLineInc;     @returns( "eax" );     external;
            method get_vPageInc;     @returns( "eax" );     external;
            method set_vLineInc( vLineInc:dword );          external;
            method set_vPageInc( vPageInc:dword );          external;
            
        endclass;
        
    
        
    
    wForm_t:
        class inherits( window_t );
            var
                align( 4 );
                wForm_private:
                    record
                    
                        menuList    :wMenuItem_p;
                        
                    endrecord;
                
            procedure create_wForm
            (
                wwName      :string;
                caption     :string;
                exStyle     :dword;
                style       :dword; 
                parent      :dword;                                     
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword;
                fillColor   :dword;
                visible     :boolean 
            );  external;
                    
            method appendMenuItem( mi:wMenuItem_p );    external;
            

            override method insertWidget;               external; 
            override method processMessage;             external;

        endclass;
        
        
        
    wTabPage_t:
        class inherits( window_t );
        
            var
                align( 4 );
                wTabPage_private:
                    record
                    
                        pageHandler :widgetProc;
                        
                    endrecord;
                
            procedure create_wTabPage
            (
                wpName              :string;
                parentWindowHandle  :dword;
                handler             :widgetProc;
                x                   :dword;
                y                   :dword;
                width               :dword;
                height              :dword;
                fillColor           :dword                                  
            );  external;
            
            procedure create_wTabPage2
            (
                wpName              :string;
                exStyle             :dword;
                style               :dword;
                parentWindowHandle  :dword;
                handler             :widgetProc;
                x                   :dword;
                y                   :dword;
                width               :dword;
                height              :dword;
                fillColor           :dword                                  
            );  external;
            
            override method processMessage;                 external;
                    
        endclass;
        
    
    wTabPage_array  :pointer to wTabPage_p;
    
    wTabs_t:
        class inherits( wContainer_t );
        
            var
                align( 4 );
                wTabs_private:
                    record
                    
                        curSelection    :dword;
                        numTabs         :uns32;
                        pages           :wTabPage_array;
                        numElements     :dword;
                        
                    endrecord;
                        
            procedure create_wTabs
            (
                wtName      :string;
                parent      :window_p;                                  
                x           :dword; 
                y           :dword;
                width       :dword;
                height      :dword 
            );  external;
                    
            
            method get_numTabs;                 @returns( "eax" );  external;
            method curTab;                      @returns( "eax" );  external;
            method setTab( tab:uns32 );                             external;
            method get_page( tabIndex:dword );  @returns( "eax" );  external;
            method deleteTab( tabIndex:dword ); @returns( "eax" );  external;
            method insertTab
            (
                index   :dword; 
                tabText :string; 
                page    :wTabPage_p 
            );  external;
			            
            override method destroy;                                external;
            override method processMessage;                         external;               
                
        endclass;
        
        
        
        
    ////////////////////////////////////////////////////////////////////////////
    //
    //
    // wTimer widget
    //
    //  Note: wTimer objects aren't actually visual objects, but we need a
    // processMessage procedure and we need to be able to put this on
    // widget lists, so it has to inherit wVisual_t.
    
    wTimer_t:
        class inherits( wVisual_t );
        
            const
                oneShot     := 0;
                periodic    := 1;
                
            static
                messageCode     :dword := 0;
        
            var
                align( 4 );
                wTimer_private:
                    record
                    
                        // Timeout value in milliseconds:
                        
                        period          :dword;
                        
                        // oneShot or periodic
                        
                        timing          :dword;
                        
                        // Widget proc to call on time out:
                                    
                        onTimeOut       :widgetProc;
                        
                        // 1 = run, 0 = wait
                        
                        trigger     :dword;         
                        
                        // Win32 thread handle for timer
                        
                        threadHandle    :dword; 
                        
                    endrecord;
    
                
            procedure create_wTimer
            (
                timerName       :string;
                parentHandle    :dword;
                periodInMsec    :dword;
                timing          :dword;
                onTimeOut       :widgetProc
            );  external;
            
            override method destroy;                                external;
            override method processMessage;                         external;
            
            method  start;                                          external;
            method  stop;                                           external;

            method  get_onTimeOut;  @returns( "eax" );              external;
            method  set_onTimeOut( onTimeOut:widgetProc );          external;
            method  get_period;     @returns( "eax" );              external;
            method  set_period( period:dword );                     external;
            method  get_timing;     @returns( "eax" );              external;
            method  set_timing( timing:dword );                     external;
            
            // Apps must never call this, it is put here for
            // convenience (to be able to use "this"):
            
            procedure _timerThread( wTimerObj:wTimer_p );           external;
            
                
        endclass;
        






  


/////////////////////////////////////////////////////////////////////////////////
//
// RGB macro - Combines three constants to form an RGB constant.

#macro RGB( _red_, _green_, _blue_ );

    ( _red_ | ( _green_ << 8 ) | ( _blue_ << 16 ))

#endmacro
        
        
        





///////////////////////////////////////////////////////////////////////////////
//
// Utility macros used by the wForm..endwForm macro.
//
//  These macros were created in order to make error reporting a whole
// lot better for HOWL. Originally, HOWL just emitted these strings
// directly (rather than emitting macro calls that emit these strings).
// The problem with the original solution is that if there was a syntax
// error in the wForm..endwForm sequence, it was next to impossible to
// figure out the source of the error. But putting the string generation
// in these macros, the user gets a line number reference into one of
// these macros which makes it a whole lot easier to figure out what
// went wrong.

namespace _howl;

        

    #macro expandStrArray( _strArray_ ):_lclStrArray_, _strIndex_;
    
        ?_lclStrArray_ := "";
        #if( @elements( _strArray_ ) > 0 )
        
            ?_lclStrArray_ := _strArray_[0];
            #for( _strIndex_ := 1 to @elements( _strArray_ ) - 1 )
                ?_lclStrArray_ := _lclStrArray_ + "," + _strArray_[_strIndex_];
                
            #endfor
    
        #endif
        _lclStrArray_
                
    #endmacro;
    
    
    
    #macro create_wBitmap
    ( 
        _errorMsg_, 
        _wn_, 
        _bmn_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _bc_
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wBitmap + "_t" ).create_wBitmap
        (
           _wn_, 
           _bmn_, 
           curParentHandle,
           _x_ ,
           _y_ ,
           _w_ ,
           _h_ , 
           _bc_
        );
        (type wBitmap_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." +_wn_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
        
    #endmacro

    #macro create_wCheckable
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_,
        _style_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wCheckable + "_t" ).create_wCheckable
        (
           _widgetName_, 
            _caption_,
            _style_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wCheckable_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro

    #macro create_wCheckBox
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wCheckBox + "_t" ).create_wCheckBox
        (
           _widgetName_, 
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wCheckBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro



    #macro create_wCheckBox3
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wCheckBox3 + "_t" ).create_wCheckBox3
        (
           _widgetName_, 
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wCheckBox3_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro


    #macro create_wCheckBoxLT
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
         
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        wCheckBoxLT_t.create_wCheckBoxLT
        (
           _widgetName_, 
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wCheckBoxLT_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro


    #macro create_wCheckBox3LT
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wCheckBox3LT + "_t" ).create_wCheckBox3LT
        (
           _widgetName_, 
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wCheckBox3LT_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro


    #macro create_wComboBox
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_, 
        _oc_,
        _strings_[] 
    ):_i_;
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wComboBox + "_t" ).create_wComboBox
        (
            _widgetName_, 
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wComboBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        #if( @elements( _strings_ ) > 0 )
        
            mov
            ( 
                @text( @string(_howl.appEBX) + "." + _widgetName_ ), 
                esi 
            );
            #for( _i_ := 0 to @elements( _strings_ ) - 1)
            
                (type wComboBox_t [esi]).add_string
                ( 
                   @text( _strings_[_i_] ) 
                );
                
            #endfor 
        
        #endif
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wDragListBox
    ( 
        _errorMsg_, 
        _widgetName_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _oc_, 
        _strings_[] 
    ):_i_;
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wDragListBox + "_t" ).create_wDragListBox
        (
            _widgetName_, 
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wDragListBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        #if( @elements( _strings_ ) > 0 )
        
            mov
            ( 
                @text( @string(_howl.appEBX) + "." + _widgetName_ ), 
                esi 
            );
            #for( _i_ := 0 to @elements( _strings_ ) - 1)
            
                (type wDragListBox_t [esi]).add_string
                ( 
                   @text( _strings_[_i_] ) 
                );
                
            #endfor 
        
        #endif
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wEditBox
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wEditBox + "_t" ).create_wEditBox
        (
            _widgetName_,
            _caption_, 
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wEditBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wEllipse
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _lc_, 
        _fc_, 
        _bc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wEllipse + "_t" ).create_wEllipse
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _lc_,
            _fc_,
            _bc_
        );
        (type wEllipse_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wIcon
    ( 
        _errorMsg_, 
        _widgetName_,
        _in_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _bc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wIcon + "_t" ).create_wIcon
        (
            _widgetName_,
            _in_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _bc_
        );
        (type wIcon_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wGroupBox
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_,
        _x_, 
        _y_, 
        _w_, 
        _h_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wGroupBox + "_t" ).create_wGroupBox
        (
            _widgetName_,
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_
        );
        (type wGroupBox_t [esi]).show();
        mov( main, ebx );
        mov( esi, ecx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        push( curParentHandle );
        push( curContainer );
        mov( ecx, curContainer );
        mov( (type wGroupBox_t [ecx]).handle, eax );
        mov( eax, curParentHandle );

        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro



    #macro create_wLabel
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_,
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _a_, 
        _f_, 
        _b_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wLabel + "_t" ).create_wLabel
        (
            _widgetName_,
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_, 
            _a_, 
            _f_, 
            _b_
        );
        (type wLabel_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wListBox
    ( 
        _errorMsg_, 
        _widgetName_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _oc_, 
        _strings_[] 
    ):_i_;
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wListBox + "_t" ).create_wListBox
        (
            _widgetName_, 
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wListBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        #if( @elements( _strings_ ) > 0 )
        
            mov
            ( 
                @text( @string(_howl.appEBX) + "." + _widgetName_ ), 
                esi 
            );
            #for( _i_ := 0 to @elements( _strings_ ) - 1)
            
                (type wListBox_t [esi]).add_string
                ( 
                   @text( _strings_[_i_] ) 
                );
                
            #endfor 
        
        #endif
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wPasswdBox
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wPasswdBox + "_t" ).create_wPasswdBox
        (
            _widgetName_,
            _caption_, 
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wPasswdBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wPie
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _e_,
        _lc_, 
        _fc_, 
        _bc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wPie + "_t" ).create_wPie
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _e_,
            _lc_,
            _fc_,
            _bc_
        );
        (type wPie_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wPolygon
    ( 
        _errorMsg_, 
        _widgetName_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _lc_,
        _fc_,
        _bc_,
        _points_[] 
    ):_i_;
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wPolygon + "_t" ).create_wPolygon
        (
            _widgetName_, 
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _lc_,
            _fc_,
            _bc_
        );
        (type wListBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        #if( @elements( _points_ ) mod 2 <> 0 )
        
            #error( "Must specify an even number of coordinate (x,y) values" )
            
        #elseif( @elements( _points_ ) >= 2 )
        
            ?_i_ := 0;
            readonly
              @text( _widgetName_ + "_points" ):
                w.POINT[ @elements( _points_ ) div 2 ] :=
                [

                
                    #while( _i_ < @elements( _points_ ) - 2)
                    
                        w.POINT:
                            [ 
                                @text(_points_[_i_]),
                                @text(_points_[_i_+1])
                            ],
                            
                        ?_i_ := _i_ + 2;
                        
                    #endwhile
                    w.POINT:[@text(_points_[_i_]), @text(_points_[_i_+1])]
                ];
                endreadonly;
                lea( eax, @text( _widgetName_ + "_points" ) );
                (type wPolygon_t [esi]).set_points
                ( 
                    @elements( _points_ ) div 2, 
                    eax 
                ); 
                    
        #endif
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wProgressBar
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wProgressBar + "_t" ).create_wProgressBar
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_
        );
        (type wProgressBar_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wPushButton
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wPushButton + "_t" ).create_wPushButton
        (
           _widgetName_, 
            _caption_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wPushButton_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro


    #macro create_wRadioButton
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _style_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wRadioButton + "_t" ).create_wRadioButton
        (
           _widgetName_, 
            _caption_,
            _style_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wRadioButton_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro


    #macro create_wRadioButtonLT
    ( 
        _errorMsg_, 
        _widgetName_, 
        _caption_, 
        _style_, 
        _x_, 
        _y_, 
        _w_, 
        _h_, 
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wRadioButtonLT + "_t" ).create_wRadioButtonLT
        (
           _widgetName_, 
            _caption_,
            _style_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _oc_
        );
        (type wRadioButtonLT_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    
    #endmacro


    #macro create_wRectangle
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _lc_, 
        _fc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wRectangle + "_t" ).create_wRectangle
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _lc_,
            _fc_
        );
        (type wRectangle_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wRoundRect
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _cw_,
        _ch_,
        _lc_, 
        _fc_,
        _bc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
         @text( howl.wRoundRect + "_t" ).create_wRoundRect
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _cw_,
            _ch_,
            _lc_,
            _fc_,
            _bc_
        );
        (type wRoundRect_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wScrollBar
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wScrollBar + "_t" ).create_wScrollBar
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wScrollBar_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wTabPage
    ( 
        _widgetName_,
        _tabString_,
        _bc_, 
        _tabHandler_,
        curNumTabs 
    );
    
        w.GetClientRect( wFormHandle, rcClient );
        mov( rcClient.top, eax );
        if( eax > 25 ) then
            sub( 25, eax );
        endif;
        wTabPage_t.create_wTabPage
        (
            _widgetName_,
            wFormHandle,
            _tabHandler_,
            0,
            25,
            rcClient.right,
            eax,
            _bc_
        );

        mov( esi, curContainer );
        mov( esi, @text( _howl.wFormName + "." + _widgetName_) );
        mov( (type wTabPage_t [esi]).handle, eax );
        mov( eax, curParentHandle );
        tabs.insertWidget( curContainer );
        tabs.insertTab
        ( 
            _howl.curNumTabs,
            _tabString_,
            curContainer
        ); 
    
    
    #endmacro


    #macro create_wTextEdit
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_, 
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wTextEdit + "_t" ).create_wTextEdit
        (
            _widgetName_,
            _caption_, 
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wTextEdit_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro




    #macro create_wTimer
    ( 
        _errorMsg_, 
        _widgetName_,
        _period_,
        _timing_,
        _oto_ 
    );
        
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wTimer + "_t" ).create_wTimer
        (
            _widgetName_,
            curParentHandle,
            _period_,
            _timing_,
            _oto_
        );
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wTrackBar
    ( 
        _errorMsg_, 
        _widgetName_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _s_,
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wTrackBar + "_t" ).create_wTrackBar
        (
            _widgetName_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _s_,
            _oc_
        );
        (type wTrackBar_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wUpDown
    ( 
        _errorMsg_, 
        _widgetName_,
        _alignment_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _lowerRange_,
        _upperRange_,
        _initialPosition_,
        _oc_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wUpDown + "_t" ).create_wUpDown
        (
            _widgetName_,
            curParentHandle,
            _alignment_,
            _x_,
            _y_,
            _w_,
            _h_,
            _lowerRange_,
            _upperRange_,
            _initialPosition_,
            _oc_ 
        );
        (type wUpDown_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wUpDownEditBox
    ( 
        _errorMsg_,
        _widgetName_,
        _initialTxt_, 
        _style_,
        _alignment_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _lowerRange_,
        _upperRange_,
        _initialPosition_,
        _oc_,
        _oud_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wUpDownEditBox + "_t" ).create_wUpDownEditBox
        (
            _widgetName_,
            _initialTxt_,
            curParentHandle,
            _style_,
            _alignment_,
            _x_,
            _y_,
            _w_,
            _h_,
            _lowerRange_,
            _upperRange_,
            _initialPosition_,
            _oc_,
            _oud_ 
        );
        (type wUpDownEditBox_t [esi]).show();
        mov( main, ebx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro


    #macro create_wWindow
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_,
        _exStyle_,
        _style_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _bkgColor_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wWindow + "_t" ).create_window
        (
            _widgetName_,
            _caption_,
            _exStyle_,
            _style_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _bkgColor_,
            true
        );
        mov( main, ebx );
        mov( esi, ecx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        push( curParentHandle );
        push( curContainer );
        mov( ecx, curContainer );
        mov( (type wBase_t [ecx]).handle, eax );
        mov( eax, curParentHandle );

        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro



    #macro create_wScrollWindow
    ( 
        _errorMsg_, 
        _widgetName_,
        _caption_,
        _exStyle_,
        _style_,
        _x_, 
        _y_, 
        _w_, 
        _h_,
        _sw_,
        _sh_,
        _bkgColor_,
        _hScroll_,
        _vScroll_ 
    );
    
        ?_howl.saveErrorPrefix := @errorPrefix;
        ?@errorPrefix := _errorMsg_;
        @text( howl.wScrollWindow + "_t" ).create_scrollWindow
        (
            _widgetName_,
            _caption_,
            _exStyle_,
            _style_,
            curParentHandle,
            _x_,
            _y_,
            _w_,
            _h_,
            _sw_,
            _sh_,
            _bkgColor_,
            _hScroll_,
            _vScroll_,
            true
        );
        mov( main, ebx );
        mov( esi, ecx );
        mov( esi,  @text( @string(_howl.appEBX)  + "." + _widgetName_ ) );
        curContainer.insertWidget( esi );
        push( curParentHandle );
        push( curContainer );
        mov( ecx, curContainer );
        mov( (type wScrollWindow_t [ecx]).scrollSurface, eax );
        mov( (type wBase_t [eax]).handle, eax );
        mov( eax, curParentHandle );

        ?@errorPrefix := _howl.saveErrorPrefix;
    
    #endmacro





    
end _howl;




///////////////////////////////////////////////////////////////////////////////
//
// _wRadioSet-
//
// This is a private macro used to implement the wRadioSet #keyword inside the
// wForm macro.


#macro _wRadioSet
( 
    _rsButtonName_, 
    _rsCaption_,
    _rsX_,
    _rsY_,
    _rsW_,
    _rsH_,
    _rsBkgColor_
);
    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _rsButtonName_ : @text( howl.wRadioSet + "_p" );
    
    ?_howl.radioSetCnt    :uns32  := 0;

    #if( _howl.inRadioSet )
        
        #error( "Illegal nested radioSet declaration" )
        endwRadioSet;
        
    #endif
    ?_howl.inRadioSet := true;
    
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "// Code to create a radioset group box widget:" nl +
        nl +
        howl.wRadioSet + "_t" + ".create_wRadioSet" +
        "(" +
            """" + @string( _buttonName_ ) + """, " + 
            @string( _rsCaption_ ) + ", " +
            "curParentHandle," +
            @string( _rsX_ ) + "," +
            @string( _rsY_ ) + "," +
            @string( _rsW_ ) + "," +
            @string( _rsH_ ) + "," +
            @string( _rsBkgColor_ ) +
        "); " nl +
        "mov(esi,ebx);" nl +
        "mov( main, ecx );" nl +
        "mov( esi, " + _howl.appECX + "." + @string( _buttonName_ ) + ");" nl +
        "curContainer.insertWidget( esi );" nl +
        "push( curParentHandle );" nl +
        "push( curContainer );" nl +
        "mov( ebx, esi );" nl +
        "mov( esi, curContainer );" nl +
        "mov( (type wRadioSet_t [esi]).wRadioSet_private.groupBoxHndl, eax );" nl +
        "mov( eax, curParentHandle );" nl +
        nl;         
        
            
        
    
#keyword wRadioSetButton
( 
    _buttonName_, 
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_
);
    var _buttonName_        : @text( howl.wRadioSetButton + "_p" );
    ?_howl.radioSetCnt      := _howl.radioSetCnt + 1;
    ?_howl.numWidgets       := _howl.numWidgets + 1;
    
    

    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "// Code to create a radioset button widget:" nl +
        nl +
        howl.wRadioSetButton + "_t.create_wRadioSetButton" +
        "(" + 
            """" + @string( _buttonName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            #if( _howl.radioSetCnt = 1 )
            
                "w.WS_GROUP | w.WS_TABSTOP," +
                
            #else
            
                "w.WS_TABSTOP," +
                
            #endif
            "curParentHandle," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," +
            #if( @lowercase( @string( _onClick_ ), 0 ) = "null" )
            
                "NULL" +
                
            #else
            
                "&" + @string( _onClick_ ) +
                
            #endif
        "); " nl +
        "mov( main, ebx );" nl +
        "mov( esi, " + _howl.appEBX + "." + @string( _buttonName_ ) + ");" nl +
        "curContainer.insertWidget( esi );" nl +
        nl;
        
            
        
    
#keyword wRadioSetButtonLT
( 
    _buttonName_, 
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_
);
    var _buttonName_        : @text( howl.wRadioSetButtonLT + "_p" );
    ?_howl.radioSetCnt      := _howl.radioSetCnt + 1;
    ?_howl.numWidgets       := _howl.numWidgets + 1;
    
    

    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "// Code to create a radioset button LT widget:" nl +
        nl +
        howl.wRadioSetButtonLT + "_t.create_wRadioSetButtonLT" +
        "(" + 
            """" + @string( _buttonName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            #if( _howl.radioSetCnt = 1 )
            
                "w.WS_GROUP | w.WS_TABSTOP," +
                
            #else
            
                "w.WS_TABSTOP," +
                
            #endif
            "curParentHandle," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," +
            #if( @lowercase( @string( _onClick_ ), 0 ) = "null" )
            
                "NULL" +
                
            #else
            
                "&" + @string( _onClick_ ) +
                
            #endif
        "); " nl +
        "mov( main, ebx );" nl +
        "mov( esi, " + _howl.appEBX + "." + @string( _buttonName_ ) + ");" nl +
        "curContainer.insertWidget( esi );" nl +
        nl;
        
    

#terminator endwRadioSet;

    #if( !_howl.inRadioSet )
        
        #error( "Unexpected endwRadioSet clause" )
        
    #endif
    ?_howl.numWidgets := _howl.numWidgets + 1;
    ?_howl.inRadioSet := false;
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "// Code to end a radioset widget:" nl +
        nl +
        "curContainer.show();" nl +
        "pop( curContainer );" nl +
        "pop( curParentHandle );" nl +
        nl;

        
#endmacro           



///////////////////////////////////////////////////////////////////////////////
//
// wForm:
//
//  This macro creates a new window_t child object type.
//
// Syntax:
//
//  wForm( newWindowTypeName {,optional_wForm_Derived_type} );
//
//      <<class declarations (e.g., methods, overrides, and vars)
//
//  endwForm;
//
// This macro automatically generates:
//
//  1)  A class type named  newWindowTypeName_t.
//  2)  A pointer to the class named newWindowTypeName_p.
//  3)  A create procedure named newWindowTypeName_t.create_newWindowTypeName.
//      This procedure has the same parameters as window_t.create_window.
//
//  4)  The VMT for the new class.
//
// This macro must be invoked in a declaration section and it does not
// preserve the current declaration section (type, const, var, static, etc).



        
        


#macro wForm( _formname_, _optionalType_[] ):
    _formType_,
    _menuItems_,
    _mainMenuItems_;


?_howl.wFormName        :string     := @string( _formname_ );
?_howl.formName_t       :string     := @string( _formname_ ) + "_t";
?_howl.curNumTabs       :uns32      := 0;
?_howl.widgetCode       :string     := "" nl;
?_howl.inRadioSet       :boolean    := false;
?_howl.radioSetCnt      :uns32      := 0;
?_howl.numWidgets       :uns32      := 0;
?_howl.appEBX           :string     := "(type " + _howl.formName_t + " [ebx])";
?_howl.appECX           :string     := "(type " + _howl.formName_t + " [ecx])";

?_howl.mainMenuName     :string     := "" nl;
?_howl.hasMainMenu      :boolean    := false;
?_howl.inMainMenu       :boolean    := false;
?_howl.hasEndMainMenu   :boolean    := false;
?_howl.subMenuStack     :string[8]  := ["","","","","","","",""];
?_howl.subMenuSP        :uns32      := 0;


#if( @elements( _optionalType_ ) = 0 ) 

    ?_formType_ :text := "wForm_t";
    
#elseif( @elements( _optionalType_ ) = 1 )

    ?_formType_ :text := _optionalType_[0];
    
#else
    
    ?_formType_ :text := "wForm_t";
    #error( "wForm statement expects one or two operands" )

#endif

type
    @text( _howl.wFormName + "_p" ) :pointer to @text( _howl.formName_t ); 
    @text( _howl.formName_t ):
        class inherits( _formType_ );
                
                    
            procedure @text( "create_" + _howl.wFormName )
            (
                caption :string;
                exStyle :dword;
                style   :dword; 
                parent  :dword;                                     
                x       :dword; 
                y       :dword;
                width   :dword;
                height  :dword;
                bkgClr  :dword; // Background color (HBRUSH)
                visible :boolean 
            );  external;
            
            override method onCreate;   external;
            override method onClose;    external;
    
    
    
            


#keyword wBitmap
( 
    _widgetName_,
    _bmName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _bkgColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
      
    var _widgetName_ : @text( howl.wBitmap + "_p" );
    #if( _howl.inRadioSet )
        
        #error                     
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wBitmap" + nl +
        "(" + nl +
            """Error in wBitmap, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _bmName_ )  + "," + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _bkgColor_ )  + 
        "); " nl +
        nl;


            

    
        
 

#keyword wCheckBox
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wCheckBox + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wCheckBox" + nl +
        "(" + nl +
            """Error in wCheckBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wCheckBox statement" )
                
            #endif
        "); " nl +
        nl;




#keyword wCheckable
( 
    _widgetName_,
    _caption_,
    _style_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wCheckable + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wCheckable" + nl +
        "(" + nl +
            """Error in wCheckable, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _style_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wCheckable statement" )
                
            #endif
        "); " nl +
        nl;



#keyword wCheckBox3
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wCheckBox3 + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wCheckBox3" + nl +
        "(" + nl +
            """Error in wCheckBox3, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wCheckBox3 statement" )
                
            #endif
        "); " nl +
        nl;
    



#keyword wCheckBoxLT
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : wCheckBoxLT_p;
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wCheckBoxLT" + nl +
        "(" + nl +
            """Error in wCheckBoxLT, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wCheckBoxLT statement" )
                
            #endif
        "); " nl +
        nl;
    



#keyword wCheckBox3LT
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wCheckBox3LT + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wCheckBox3LT" + nl +
        "(" + nl +
            """Error in wCheckBox3LT, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wCheckBox3LT statement" )
                
            #endif
        "); " nl +
        nl;
        
    
        
    
    
#keyword wComboBox
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _sort_,
    _onClickTxt_,
    _strings_[]
):_onClick_, _i_;

    ?_onClick_ :string := @string( _onClickTxt_ );
    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wComboBox + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif

    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wComboBox" + nl +
        "(" + nl +
            """Error in wComboBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _sort_ ) + "," + 
            #if( @lowercase( _onClick_, 0 ) == "null" )
            
                "NULL" +
                
            #else
            
                "&" + _onClick_ + 
                
            #endif
            #if( @elements( _strings_ ) > 0 )
            
                "," + nl +
                _howl.expandStrArray( _strings_ )  +
                
            #endif
        nl + "); " nl +
        nl;
    
        
        
        
#keyword wDragListBox
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClickTxt_,
    _strings_[]
):_onClick_, _i_;

    ?_onClick_ :string := @string( _onClickTxt_ );
    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wDragListBox + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wDragListBox" + nl +
        "(" + nl +
            """Error in wDragListBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @lowercase( _onClick_, 0 ) == "null" )
            
                "NULL" +
                
            #else
            
                "&" + _onClick_ + 
                
            #endif
            #if( @elements( _strings_ ) > 0 )
            
                "," + nl +
                _howl.expandStrArray( _strings_ )  +
                
            #endif
        nl + "); " nl +
        nl;
    
        
    
    
    
#keyword wEditBox
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _s_,
    _onChange_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wEditBox + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wEditBox" + nl +
        "(" + nl +
            """Error in wEditBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _s_ ) + "," +
            #if( @elements( _onChange_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onChange_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onChange_ ) = 1 )
            
                "&" + _onChange_[0] + 
                
            #else
            
                #error( "Too many parameters in wEditBox statement" )
                
            #endif
        nl 
        "); " nl +
        nl;

            
        
        
        
        
#keyword wEllipse
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _lineColor_,
    _fillColor_,
    _bkgColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wEllipse + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wEllipse" + nl +
        "(" + nl +
            """Error in wEllipse, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _lineColor_ ) + "," +
            @string( _fillColor_ ) + "," +
            @string( _bkgColor_ ) + nl + 
        "); " nl +
        nl;

        
        
#keyword wIcon
( 
    _widgetName_,
    _iconName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _bkgColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wIcon + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wIcon" + nl +
        "(" + nl +
            """Error in wIcon, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _iconName_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _bkgColor_ ) + nl +
        "); " nl +
        nl;
    
        
        
        
        
        
        
#keyword wGroupBox
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wGroupBox + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    #if( _howl.containerSP >= @elements( _howl.containerStk ))
    
        #error( "Too many nested container objects" )
        
    #endif
    ?_howl.containerStk[ _howl.containerSP ] := "endwGroupBox";
    ?_howl.containerSP := _howl.containerSP + 1;
    
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wGroupBox" + nl +
        "(" + nl +
            """Error in wGroupBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + 
            nl
        "); " nl +
        nl;


#keyword endwGroupBox;

    #if( _howl.containerSP = 0 ) 
    
        #error( "endwGroupBox w/o corresponding wGroupBox statement" )
        
    #elseif( _howl.containerStk[ _howl.containerSP - 1 ] <> "endwGroupBox" )
    
        #error
        ( 
            "Expected " + _howl.containerStk[ _howl.containerSP ] +
            ", encountered endwGroupBox"
        )
        
    #else
    
        ?_howl.containerSP := _howl.containerSP - 1;
    
    #endif
    
        
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "curContainer.show();" nl +
        "pop( curContainer );" nl +
        "pop( curParentHandle );" nl;
    



#keyword wLabel
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _align_,
    _fore_,
    _bkg_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;

    var _widgetName_ : @text( howl.wLabel + "_p" );
    

    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wLabel" + nl +
        "(" + nl +
            """Error in wLabel, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _align_ ) + "," + 
            @string( _fore_ ) + "," + 
            @string( _bkg_ ) + nl +
        "); " nl +
        nl;
        
    
    
#keyword wListBox
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _sort_,
    _onClickTxt_,
    _strings_[]
):_onClick_, _i_;

    ?_onClick_ :string := @string( _onClickTxt_ );
    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wListBox + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wListBox" + nl +
        "(" + nl +
            """Error in wListBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _sort_ ) + "," + 
            #if( @lowercase( _onClick_, 0 ) == "null" )
            
                "NULL" +
                
            #else
            
                "&" + _onClick_ + 
                
            #endif
            #if( @elements( _strings_ ) > 0 )
            
                "," + nl +
                _howl.expandStrArray( _strings_ )  +
                
            #endif
        nl + "); " nl +
        nl;

        
    
    
    
#keyword wMainMenu;

    #if( _howl.numWidgets > 0 )
    
        #error
        ( 
            "wMainMenu entries must appear before all other widgets" 
        )
        
    #endif
    #if( _howl.hasMainMenu )
    
        #error
        (
            "Only one wMainMenu widget is allowed per form"
        )
        
    #endif  
    ?_howl.inMainMenu       :boolean    := true;
    ?_howl.mainMenuName     :string     := _howl.wFormName + "_menu";
    ?_mainMenuItems_        :string[1]  := [""];
    ?_menuItems_            :text := @string( _mainMenuItems_ );

    
    var
        @text( _howl.mainMenuName ) :dword;



#keyword wMenuItem
( 
    _menuItemName_, 
    _menuItemChecked_,
    _menuString_,
    _menuHandler_ 
);

    var _menuItemName_ : @text( howl.wMenuItem + "_p" );
    
    #if( !_howl.inMainMenu )
    
        #error
        ( 
            "wMenuItem entries must appear in a wMainMenu..endwMainMenu sequence" 
        )
        
    #endif  
    #if( !@isConst( _menuItemChecked_ ))
    
        #error
        ( 
            "wMenuItem expected a boolean constant in second argument" 
        )
        
    #elseif( @typename(_menuItemChecked_ ) <> "boolean" )
    
        #error
        ( 
            "wMenuItem expected a boolean constant in second argument" 
        )
        
    #endif 
    
    ?_menuItems_ :string[@elements( _menuItems_ ) + 1] :=
                        [ _menuItems_, @string( _menuItemName_ )]; 
    
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "// Code to create a wMenuItem object:" nl +
        nl +
        "mov(main,ebx);" nl +
        howl.wMenuItem + "_t" + ".create_wMenuItem"
        "(" +
            """" + @string( _menuItemName_ ) + """, " +
            "ebx," +
            #if( _menuItemChecked_ ) 
                "w.MF_CHECKED, " +
            #else
                "w.MF_STRING, " +
            #endif
            @string( _menuString_ ) + ", " +
            "&" + @string( _menuHandler_ ) +
        "); " nl +
        "mov( esi, " + _howl.appEBX + "." + @string( _menuItemName_ ) + ");" nl +
        "mov(ebx,esi);" nl +
        "this.insertWidget( this." + @string( _menuItemName_ ) + ");" nl +
        "this.appendMenuItem( this." + @string( _menuItemName_ ) + ");" nl +
        nl nl;
        
    
            
        
#keyword wMenuSeparator;

    #if( _howl.numWidgets > 0 )
    
        #error
        ( 
            "menuItem_separator entries must appear before all other widgets" 
        )
        
    #endif  
    ?_menuItems_ :string[@elements( _menuItems_ ) + 1] :=
                        [ _menuItems_, "_wMenuSeparatorWidget_" ]; 
    
    #if( !@defined( _wMenuSeparator_isDeclared_ ))
    
        ?_wMenuSeparator_isDeclared_ := true;
    

        var 
            _wMenuSeparatorWidget_ : @text( howl.wMenuItem + "_p" );
    
        ?_howl.widgetCode := _howl.widgetCode +
            nl+
            "// Code to create a wMenuSeparator object:" nl +
            nl +
            "mov(main,ebx);" nl +
            howl.wMenuItem + "_t" + ".create_wMenuItem"
            "(" +
                """_wMenuSeparatorWidget_"", " +
                "ebx," +
                "w.MF_SEPARATOR, " +
                "NULL,"
                "NULL" +
            "); " nl +
            "mov( esi, " + _howl.appEBX + "._wMenuSeparatorWidget_" + ");" nl +
            "main.insertWidget"
            "(" + 
                _howl.appEBX + "._wMenuSeparatorWidget_" + 
            ");" +
            nl nl;
            
    #else
    
        ?_howl.widgetCode := _howl.widgetCode +
            nl+
            "main.insertWidget"
            "(" + 
                _howl.appEBX + "._wMenuSeparatorWidget_" + 
            ");" +
            nl nl;
    
    #endif
    
    
    
    
    
#keyword wSubMenu( _menuName_, _menuText_ ):_newSubMenuItems_;

    ?_menuItems_ :string[@elements( _menuItems_ ) + 1] :=
                        [ _menuItems_, @string( _menuName_ )]; 
    
    ?_howl.subMenuStack[_howl.subMenuSP] := @toString:_menuItems_;
    ?_howl.subMenuSP := _howl.subMenuSP + 1;
    ?_menuItems_ : text := @string( _newSubMenuItems_ );
    
    #if( _howl.subMenuSP > 8 ) 
    
        #error( "Too many nested submenus" )
        ?_howl.subMenuSP := _howl.subMenuSP - 1;
        
    #endif
    ?_newSubMenuItems_ :string[2] := [ @string( _menuName_ ), _menuText_ ];
    
    var
        _menuName_  :@text( howl.wMenu + "_p" );
        
    #if( !_howl.inMainMenu )
    
        #error
        ( 
            "wSubMenu entries must appear in a wMainMenu..endwMainMenu sequence" 
        )
        
    #endif  
    
    
    
    
    
    
#keyword endwSubMenu:_menuName_, _menuText_;

    #if( _howl.subMenuSP = 0 )
    
        #error( "endSubMenu encountered without corresponding wSubMenu" )
        
    #else
    
        ?_menuName_     := _menuItems_[0];
        ?_menuText_     := _menuItems_[1];
        ?_howl.widgetCode  := _howl.widgetCode +
            nl+
            "// Code to create a wSubMenu object:" nl +
            nl +
            "mov(main,ebx);" nl +
            howl.wMenu + "_t" + ".create_wMenu"
            "(" +
                """" + _menuName_ + """," +
                """" + _menuText_ + """," +
                "ebx" +
            "); " nl +
            "mov( esi, " + _howl.appEBX + "." + _menuName_ + ");" nl +
            "mov(ebx,esi);" nl +
            "this.insertWidget( this." + _menuName_ + ");" nl +
            "this.appendMenuItem( this." + _menuName_ + ");" nl +
            #for( _i_ := 2 to @elements( _menuItems_ )-1 )
            
                nl +
                "// Submenu item: " + _menuItems_[_i_] + nl +
                "mov( this." + _menuName_ + ", eax );" nl +
                "mov( (type wMenuItem_t [eax]).handle, eax );" nl +
                "mov( this." + _menuItems_[_i_] + ",ecx );" nl +
                "mov( eax, (type wMenuItem_t [ecx]).wBase_private.parentHandle );" nl +
                "mov( this." + _menuName_ + ", eax );" nl +
                "if( (type wMenuItem_t [ecx]).wMenuItem_private.itemType <> w.MF_POPUP ) then" nl +

                    "w.AppendMenu"
                    "("
                        "(type wMenu_t [eax]).handle," +
                        "(type wMenuItem_t [ecx]).wMenuItem_private.itemType," +
                        "(type wMenuItem_t [ecx]).wBase_private.objectID," +
                        "(type wMenuItem_t [ecx]).wMenuItem_private.itemString" +
                    ");" nl +
                    
                "else" nl +
                
                    "w.AppendMenu"
                    "("
                        "(type wMenu_t [eax]).handle," +
                        "w.MF_POPUP," +
                        "(type wMenu_t [ecx]).handle," +
                        "(type wMenuItem_t [ecx]).wMenuItem_private.itemString" +
                    ");" nl +
                    
                "endif;" nl +               
                    
            #endfor
            nl nl;
            
        // Pop the submenu's stuff off the stack:
        
        ?_howl.subMenuSP := _howl.subMenuSP - 1;
        ?@toString:_menuItems_ := "";
        ?_menuItems_ :text := _howl.subMenuStack[_howl.subMenuSP];
        
            
    #endif
        
            


#keyword endwMainMenu;

    #if( _howl.hasEndMainMenu )
    
        #error
        (
            "Multiple 'endwMainMenu' clauses are not allowed"
        )
        
    #endif
    #if( @elements(_menuItems_) <= 1 )
    
        #error( "wMainMenu requires at least one menu entry" )
        
    #endif 
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "// Code to create a wMainMenu object:" nl +
        nl +
        "mov( ebx, esi );" nl +
        "wMenu_t.create_wMenu"
        "(" +
            """" + _howl.mainMenuName + """, ""main"",ebx" +
        "); " nl +
        "mov( esi, " + _howl.appEBX + "." + _howl.mainMenuName + ");" nl +
        "mov(ebx,esi);" nl +
        "main.insertWidget( this." + _howl.mainMenuName + ");" nl +
        nl +
        #for( _i_ := 1 to @elements( _menuItems_ )-1  )
        
            "// Main menu item: " + _menuItems_[_i_] + nl +
            nl +
            "mov( this." + _howl.mainMenuName + ", eax );" nl +
            "mov( (type wMenuItem_t [eax]).handle, eax );" nl +
            "mov( this." + _menuItems_[_i_] + ",ecx );" nl +
            "mov( eax, (type wMenuItem_t [ecx]).wBase_private.parentHandle );" nl +
            "mov( this." + _howl.mainMenuName + ", eax );" nl +
            "if( (type wMenuItem_t [ecx]).wMenuItem_private.itemType <> w.MF_POPUP ) then" nl +
            
                "w.AppendMenu"
                "("
                    "(type wMenu_t [eax]).handle," +
                    "(type wMenuItem_t [ecx]).wMenuItem_private.itemType," +
                    "(type wMenuItem_t [ecx]).wBase_private.objectID," +
                    "(type wMenuItem_t [ecx]).wMenuItem_private.itemString" +
                ");" nl +
                
            "else" nl +
            
                "w.AppendMenu"
                "("
                    "(type wMenu_t [eax]).handle," +
                    "w.MF_POPUP," +
                    "(type wMenu_t [ecx]).handle," +
                    "(type wMenuItem_t [ecx]).wMenuItem_private.itemString" +
                ");" nl +
                
            "endif;" nl +
            nl +                
                
        #endfor
        "mov( this." + _howl.mainMenuName + ", ecx );" nl +
        "w.SetMenu( this.handle, (type wMenu_t [ecx]).handle );" nl + 
        "w.DrawMenuBar( this.handle );" nl
        nl nl;
        
        
        

        
        
        
        
        
        
        
#keyword wPasswdBox
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _s_,
    _onChange_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wPasswdBox + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wPasswdBox" + nl +
        "(" + nl +
            """Error in wPasswdBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _s_ ) + "," +
            #if( @elements( _onChange_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onChange_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onChange_ ) = 1 )
            
                "&" + _onChange_[0] + 
                
            #else
            
                #error( "Too many parameters in wPasswdBox statement" )
                
            #endif
            nl +
        "); " nl +
        nl;


        
        
        
#keyword wPie
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _startAngle_,
    _endAngle_,
    _lineColor_,
    _fillColor_,
    _bkgColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wPie + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wPie" + nl +
        "(" + nl +
            """Error in wPie, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _startAngle_ ) + "," +
            @string( _endAngle_ ) + "," +
            @string( _lineColor_ ) + "," +
            @string( _fillColor_ ) + "," +
            @string( _bkgColor_ ) + nl +
        "); " nl +
        nl;
    
            
        
        
        
        
#keyword wPolygon
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _lineColor_,
    _fillColor_,
    _bkgColor_,
    _points_[]
):_i_;

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wPolygon + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wPolygon" + nl +
        "(" + nl +
            """Error in wPolygon, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _lineColor_ ) + "," + 
            @string( _fillColor_ ) + "," + 
            @string( _bkgColor_ ) + 
            #if( @elements( _points_ ) > 0 )
            
                "," + nl +
                _howl.expandStrArray( _points_ )  +
                
            #endif
        nl + "); " nl +
        nl;
    





#keyword wProgressBar
(
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_
);      
        
    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wProgressBar + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wProgressBar" + nl +
        "(" + nl +
            """Error in wProgressBar, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + nl +
        "); " nl +
        nl;        


#keyword wPushButton
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wPushButton + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wPushButton" + nl +
        "(" + nl +
            """Error in wPushButton, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wPushButton statement" )
                
            #endif
        "); " nl +
        nl;
    
        
        
        


#keyword wRadioButton
( 
    _widgetName_,
    _caption_,
    _style_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wRadioButton + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wRadioButton" + nl +
        "(" + nl +
            """Error in wRadioButton, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _style_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wRadioButton statement" )
                
            #endif
        "); " nl +
        nl;
    
        
        
        



#keyword wRadioButtonLT
( 
    _widgetName_,
    _caption_,
    _style_,
    _x_,
    _y_,
    _w_,
    _h_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wRadioButtonLT + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wRadioButtonLT" + nl +
        "(" + nl +
            """Error in wRadioButtonLT, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " + 
            @string( _caption_ ) + ", " +
            @string( _style_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wRadioButtonLT statement" )
                
            #endif
        "); " nl +
        nl;

        



#keyword wRadioSet
( 
    _buttonName_, 
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _bkgColor_
);

    _wRadioSet            
    ( 
        _buttonName_, 
        _caption_,
        _x_,
        _y_,
        _w_,
        _h_,
        _bkgColor_
    )
        

        


        
        
#keyword wRectangle
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _lineColor_,
    _fillColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wRectangle + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wRectangle" + nl +
        "(" + nl +
            """Error in wRectangle, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _lineColor_ ) + "," +
            @string( _fillColor_ ) + nl +
        "); " nl +
        nl;
    

            
        
        
        
        
#keyword wRoundRect
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _cw_,
    _ch_,
    _lineColor_,
    _fillColor_,
    _bkgColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wRoundRect + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wRoundRect" + nl +
        "(" + nl +
            """Error in wRoundRect, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _cw_ ) + "," + 
            @string( _ch_ ) + "," + 
            @string( _lineColor_ ) + "," +
            @string( _fillColor_ ) + "," +
            @string( _bkgColor_ ) + nl +
        "); " nl +
        nl;

            

    
        
 

        
        
        
        
#keyword wScrollBar
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _style_,
    _onChange_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ :  @text( howl.wScrollBar + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wScrollBar" + nl +
        "(" + nl +
            """Error in wScrollBar, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _style_ ) + "," +
            #if( @elements( _onChange_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onChange_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onChange_ ) = 1 )
            
                "&" + _onChange_[0] + 
                
            #else
            
                #error( "Too many parameters in wScrollBar statement" )
                
            #endif
            nl +
        "); " nl +
        nl;
    

    
        
    
        
            
            
#keyword wTab( _tabName_, _tabString_, _tabHandler_, _bkgClr_ ):
    _i_,
    _str_;

    var
        _tabName_   :wTabPage_p;
        
    #if( _howl.inRadioSet )
        
        #error( "Must terminate radioSet declaration before new wTab entry" )
        
    #endif
    #if( _howl.curNumTabs = 0 & _howl.numWidgets > 0 )
    
        #error
        ( 
            "No widget entries may appear before the first wTab item" 
        )
        
    #endif  
    
    #if( _howl.curNumTabs = 0 )
    
        // Upon encountering the 1st wTab statement, create the wTabs_t
        // object:
        
        var
            tabs    :wTabs_p;
        
        ?_howl.widgetCode := _howl.widgetCode +
            nl+
            "/////////////////////////////////////////////////////////////" nl +
            "// Code for 1st tab to generate the wTabs object:" nl +
            nl +
            "mov( main, ebx );" + nl +
            "w.GetClientRect( " + _howl.appEBX + ".handle, rcClient );" nl +
            "wTabs_t.create_wTabs" nl +
            "(" nl +
            "    ""main_wTabs_t_object""," nl +     // wtname
            "    " + _howl.appEBX + ".handle," nl +     // parent
            "    0," nl +                           // x
            "    0," nl +                           // y
            "    rcClient.right," nl +              // width
            "    25" nl +                           // height
            ");" nl +
            "mov( main, ebx );" nl +
            "mov( esi, " + _howl.appEBX + ".tabs );" nl +
            "mov( esi, tabs );" nl +
            "mov( ebx, esi );" nl +
            "this.insertWidget( this.tabs );" nl +
            nl;
    
    #endif
        
        
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wTabPage" + nl +
        "(" + nl +
            """" + @string( _tabName_ ) + """, " +
            @string( _tabString_ ) + "," +
            @string( _bkgClr_ ) + "," +
            #if( @lowercase( @string(_tabHandler_), 0 ) == "null" )
            
                "NULL," +
                
            #else
                                                          
                "&" + @string(_tabHandler_) + "," + 
                
            #endif
            string( _howl.curNumTabs ) + nl +
        "); " nl +
        nl;
		
	?_howl.initTabsCode := _howl.initTabsCode +
		"mov( " + _howl.wFormName + "." + @string( _tabName_ ) + ", ecx );" nl +
		"mov( ecx, [eax+" + string( _howl.curNumTabs*4 ) + "] );" nl +
		nl;
		 
    
        
    #if( _howl.curNumTabs = 0 )
        
        ?_howl.widgetCode := _howl.widgetCode +
            "w.ShowWindow( curParentHandle, w.SW_SHOW );" nl;

    #endif  
    ?_howl.curNumTabs := _howl.curNumTabs + 1;
    
        
 

        
        
        
        
#keyword wTextEdit
( 
    _widgetName_,
    _caption_,
    _x_,
    _y_,
    _w_,
    _h_,
    _s_,
    _onChange_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wTextEdit + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wTextEdit" + nl +
        "(" + nl +
            """Error in wTextEdit, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," + 
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _s_ ) + "," +
            #if( @elements( _onChange_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onChange_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onChange_ ) = 1 )
            
                "&" + _onChange_[0] + 
                
            #else
            
                #error( "Too many parameters in wTextEdit statement" )
                
            #endif
        "); " nl +
        nl;
    
    
        
 

        
        
        
        
#keyword wTimer
( 
    _widgetName_,
    _periodInMsec_,
    _timing_,
    _onTimeOut_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wTimer + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wTimer" + nl +
        "(" + nl +
            """Error in wTimer, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _periodInMsec_ ) + "," +
            @string( _timing_ ) + "," +
            #if( @elements( _onTimeOut_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onTimeOut_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onTimeOut_ ) = 1 )
            
                "&" + _onTimeOut_[0]  +
                
            #else
            
                #error( "Too many parameters in wTextEdit statement" )
                
            #endif
        "); " nl +
        nl;
       
    
        
 

        
        
        
        
#keyword wTrackBar
( 
    _widgetName_,
    _x_,
    _y_,
    _w_,
    _h_,
    _style_,
    _onChange_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wTrackBar + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wTrackBar" + nl +
        "(" + nl +
            """Error in wTrackBar, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _style_ ) + "," +
            #if( @elements( _onChange_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onChange_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onChange_ ) = 1 )
            
                "&" + _onChange_[0] +
                
            #else
            
                #error( "Too many parameters in wScrollBar statement" )
                
            #endif
        "); " nl +
        nl;
    

    

#keyword wUpDown
( 
    _widgetName_,
    _alignment_,
    _x_,
    _y_,
    _w_,
    _h_,
    _lowerRange_,
    _upperRange_,
    _initialPosition_,
    _onClick_[]
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wUpDown + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wUpDown" + nl +
        "(" + nl +
            """Error in wUpDown, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _alignment_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _lowerRange_ ) + "," +
            @string( _upperRange_ ) + "," +
            @string( _initialPosition_ ) + "," +
            #if( @elements( _onClick_ ) = 0 )
            
                "NULL" +
                 
            #elseif( @lowercase( _onClick_[0], 0 ) == "null" )
            
                "NULL" +
                
            #elseif( @elements( _onClick_ ) = 1 )
            
                "&" + _onClick_[0] + 
                
            #else
            
                #error( "Too many parameters in wUpDown statement" )
                
            #endif
            nl +
        "); " nl +
        nl;
            
    
    
    
#keyword wUpDownEditBox
( 
    _widgetName_,
    _initialTxt_,
    _style_,
    _alignment_,
    _x_,
    _y_,
    _w_,
    _h_,
    _lowerRange_,
    _upperRange_,
    _initialPosition_,
    _onChange_,
    _onUpDown_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wUpDownEditBox + "_p" );
    
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    ?_howl.widgetCode := _howl.widgetCode + 
        nl+
        "_howl.create_wUpDownEditBox" + nl +
        "(" + nl +
            """Error in wUpDownEditBox, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _initialTxt_ ) + "," +
            @string( _style_ ) + "," +
            @string( _alignment_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," + 
            @string( _lowerRange_ ) + "," +
            @string( _upperRange_ ) + "," +
            @string( _initialPosition_ ) + "," +
            #if( @lowercase( @string(_onChange_), 0 ) == "null" )
            
                "NULL," +
                
            #else
            
                "&" + @string( _onChange_ ) + "," +
                
            #endif
            #if( @lowercase( @string(_onUpDown_), 0 ) == "null" )
            
                "NULL" +
                
            #else
            
                "&" + @string( _onUpDown_ ) + 
                
            #endif
            
            nl +
        "); " nl +
        nl;
       
   
#keyword wWindow
( 
    _widgetName_,
    _caption_,
    _exStyle_,
    _style_,
    _x_,
    _y_,
    _w_,
    _h_,
    _bkgColor_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wWindow + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    #if( _howl.containerSP >= @elements( _howl.containerStk ))
    
        #error( "Too many nested container objects" )
        
    #endif
    ?_howl.containerStk[ _howl.containerSP ] := "endwWindow";
    ?_howl.containerSP := _howl.containerSP + 1;
    
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wWindow" + nl +
        "(" + nl +
            """Error in wWindow, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," +
            @string( _exStyle_ ) + "," +
            @string( _style_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," +
            @string( _bkgColor_ ) + 
            nl
        "); " nl +
        nl;

    
#keyword endwWindow;

    #if( _howl.containerSP = 0 ) 
    
        #error( "endwWindow w/o corresponding wWindow statement" )
        
    #elseif( _howl.containerStk[ _howl.containerSP - 1 ] <> "endwWindow" )
    
        #error
        ( 
            "Expected " + _howl.containerStk[ _howl.containerSP ] +
            ", encountered endwWindow"
        )
        
    #else
    
        ?_howl.containerSP := _howl.containerSP - 1;
    
    #endif
                       
        
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "curContainer.show();" nl +
        "pop( curContainer );" nl +
        "pop( curParentHandle );" nl;
    



    
            
    
   
#keyword wScrollWindow
( 
    _widgetName_,
    _caption_,
    _exStyle_,
    _style_,
    _x_,
    _y_,
    _w_,
    _h_,
    _sw_,
    _sh_,
    _bkgColor_,
    _hscroll_,
    _vscroll_
);

    ?_howl.numWidgets := _howl.numWidgets + 1;
    var _widgetName_ : @text( howl.wScrollWindow + "_p" );
    #if( _howl.inRadioSet )
        
        #error
        ( 
            "This declaration may not appear inside wRadioSet..endwRadioSet" 
        )
        
    #endif
    #if( _howl.containerSP >= @elements( _howl.containerStk ))
    
        #error( "Too many nested container objects" )
        
    #endif
    ?_howl.containerStk[ _howl.containerSP ] := "endwScrollWindow";
    ?_howl.containerSP := _howl.containerSP + 1;
    
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "_howl.create_wScrollWindow" + nl +
        "(" + nl +
            """Error in wScrollWindow, line:" + 
                    string( @linenumberstk(1) ) + 
                    ", file:" +
                    @fileNameStk(1) +
                    """, " +
            """" + @string( _widgetName_ ) + """, " +
            @string( _caption_ ) + "," +
            @string( _exStyle_ ) + "," +
            @string( _style_ ) + "," +
            @string( _x_ ) + "," +
            @string( _y_ ) + "," +
            @string( _w_ ) + "," +
            @string( _h_ ) + "," +
            @string( _sw_ ) + "," +
            @string( _sh_ ) + "," +
            @string( _bkgColor_ ) + "," +
            @string( _hscroll_ ) + "," +
            @string( _vscroll_ ) +
            nl
        "); " nl +
        nl;

    
#keyword endwScrollWindow;

    #if( _howl.containerSP = 0 ) 
    
        #error( "endwScrollWindow w/o corresponding wScrollWindow statement" )
        
    #elseif( _howl.containerStk[ _howl.containerSP - 1 ] <> "endwScrollWindow" )
    
        #error
        ( 
            "Expected " + _howl.containerStk[ _howl.containerSP ] +
            ", encountered endwScrollWindow"
        )
        
    #else
    
        ?_howl.containerSP := _howl.containerSP - 1;
    
    #endif
                       
        
    ?_howl.widgetCode := _howl.widgetCode +
        nl+
        "curContainer.show();" nl +
        "pop( curContainer );" nl +
        "pop( curParentHandle );" nl;
    



    
    
#terminator endwForm:_macroObject_;

            
        endclass;
    
    static
        @text( "p" + _howl.wFormName )  : @text( _howl.wFormName + "_p" ); external;
        @text( _howl.wFormName )        : @text( _howl.wFormName + "_t" ); external;
    
    
    #if( _howl.inRadioSet )
    
        #error( "Unterminated wRadioSet declaration" )
        
    #endif
    
    #if( _howl.containerSP > 0 ) 
    
        #error
        ( 
            "Expected " + _howl.containerStk[ _howl.containerSP - 1 ] +
            ", encountered endwForm"
        )
    
    #endif
    
	?_howl.initTabsCode :=
		"#if( " + string( _howl.curNumTabs ) + " > 0 )" nl +
		"mem.alloc( " + string( _howl.curNumTabs*4 ) + ");" nl +
		"mov( " + _howl.wFormName + ".tabs, ebx );" nl +
		"mov( eax, (type wTabs_t [ebx]).wTabs_private.pages );" nl + 
		_howl.initTabsCode + nl +
		"#endif" nl +
		nl;
		
	
    ?_howl.widgetCode := _howl.widgetCode + nl + _howl.initTabsCode + nl;
    
    
    ?_macroObject_ :string :=
    
        // Create a macro that can be used to implement the
        // constructor for this class object.

        "#macro " + _howl.wFormName + "_implementation( _dummy_[] );"
        +nl+

            // Creating a main application window is identical to
            // creating a wForm_t object except when have to initialize
            // the VMT pointer with the address of the mainAppWindow_t
            // VMT.
            
            "procedure " + _howl.formName_t + ".create_" + _howl.wFormName +
            nl+
            "(" + nl +
            "   caption :string;" + nl +
            "   exStyle :dword;" + nl +
            "   style   :dword;" + nl + 
            "   parent  :dword;" + nl +                                     
            "   x       :dword;" + nl + 
            "   y       :dword;" + nl +
            "   width   :dword;" + nl +
            "   height  :dword;" + nl +
            "   bkgClr  :dword;" + nl +
            "   visible :boolean" + nl + 
            ");" + nl +
            "var" nl +
            "    wFormHandle        :dword;" nl +
            "    curParentHandle    :dword;" nl +
            "    rcClient           :w.RECT;" nl +
            "    tcItem             :w.TC_ITEM;" nl +
            "    main               :" + _howl.wFormName + "_p;" nl +
            "    tabs               :wTabs_p;" nl +
            "    curContainer       :wContainer_p;" nl +
            nl +
            "begin create_" + _howl.wFormName + ";" +
            nl+
            "    push( eax );" nl +
            "    push( ebx );" nl +
            "    push( ecx );" nl +
            "    push( edx );" nl +
            "    if( esi = NULL ) then" nl +
            "        mem.alloc( @size( " + _howl.formName_t + " ));" nl +
            "        mov( eax, esi );" nl +
            "        mov( true, cl );" nl +
            "    else" nl +
            "        mov( this.wBase_private.onHeap, cl );" nl +
            "    endif;" nl +
            "    (type " + @string:_formType_ + " [esi]).create_wForm" + nl +
            "    (" + nl +
            "        """ + _howl.wFormName + """," + nl +
            "        caption," + nl +
            "        exStyle," + nl +
            "        style," + nl +  
            "        parent," + nl +        
            "        x," + nl +    
            "        y," + nl +    
            "        width," + nl +  
            "        height," + nl +
            "        bkgClr," + nl +
            "        visible" + nl +  
            "    );" + nl +
            "    mov( &" + _howl.formName_t + "._VMT_, this._pVMT_ );" nl +
            "    mov( cl, this.wBase_private.onHeap );" nl +
            "    mov( this.handle, eax );" nl +
            "    mov( eax, curParentHandle );" nl +
            "    mov( eax, wFormHandle );" nl +
            "    mov( esi, curContainer );" nl +
            "    mov( esi, main );" nl +
            nl+             
                _howl.widgetCode +
                
                
                nl+
            "    mov( main, esi );" nl +
            "    this.onCreate();" +
                nl+
            "    mov( main, esi );" nl +
            "    pop( edx );" nl +
            "    pop( ecx );" nl +
            "    pop( ebx );" nl +
            "    pop( eax );" nl nl +
                
            "end create_" + _howl.wFormName + ";" +
            nl+


            
        "static"
        +nl+
        "    vmt( " + _howl.formName_t + " );"
        +nl+
        "    " + _howl.wFormName + ": " + _howl.wFormName + "_t;"           
        +nl+
        "    p" + _howl.wFormName + ": " + _howl.wFormName + "_p := "
            "&" + _howl.wFormName + ";"         
        +nl+
        "#endmacro" +
        nl +
        nl;
        
    #if( @global:howl.printCompile )
        #print( _macroObject_ )
    #endif;
    @text( _macroObject_ )

#endmacro






#endif // howl_hhf

    
    
    
