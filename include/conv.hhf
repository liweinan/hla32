#if( ! @defined( conv_hhf ))
?conv_hhf := true;


#if( @thread )

	#includeOnce( "cstdlib.hhf" )
	
#endif
#includeOnce( "_hla.hhf" )

namespace conv;	@fast;

const
	allowDeprecatedNames := @global:false;
	

proc
	setUnderscores:
		procedure( OnOff: boolean );
		@global:_hla._ext( "CONV_SETUNDERSCORES" );

	getUnderscores:
		procedure;
		@global:_hla._ext( "CONV_GETUNDERSCORES" );

	setDelimiters:
		procedure( Delims: cset );
		@global:_hla._ext( "CONV_SETDELIMITERS" );

	getDelimiters:
		procedure( var Delims: cset );
		@global:_hla._ext( "CONV_GETDELIMITERS" );


	// The following are for internal use only!

	byteToHex:
		procedure( h:dword; var buffer:byte );
		@global:_hla._ext("CONV_BYTETOHEX" );

	_hexToBuf32:
		procedure
		( 
				d		:dword in eax;
				width	:dword in ecx; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__HEXTOBUF32" ); 

	_hexToBuf32Size:
		procedure
		( 
				d			:dword; 
				width		:int32; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__HEXTOBUF32SIZE" ); 

	_hexToBuf64:
		procedure
		( 
				q		:qword;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__HEXTOBUF64" ); 

	_hexToBuf64Size:
		procedure
		( 
				q			:qword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__HEXTOBUF64SIZE" ); 

	_hexToBuf80:
		procedure
		( 
				tb		:tbyte;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__HEXTOBUF80" ); 

	_hexToBuf80Size:
		procedure
		( 
				tb			:tbyte; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__HEXTOBUF80SIZE" ); 

	_hexToBuf128:
		procedure
		( 
				l		:lword;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__HEXTOBUF128" ); 

	_hexToBuf128Size:
		procedure
		( 
				l			:lword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__HEXTOBUF128SIZE" ); 


	_unsToBuf32:
		procedure
		( 
				d		:dword in eax;
				width	:dword in ecx; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__UNSTOBUF32" ); 

	_unsToBuf32Size:
		procedure
		( 
				d			:dword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__UNSTOBUF32SIZE" ); 


	_unsToBuf64:
		procedure
		( 
				q		:qword;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__UNSTOBUF64" ); 

	_unsToBuf64Size:
		procedure
		( 
				q			:qword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__UNSTOBUF64SIZE" ); 


	_unsToBuf128:
		procedure
		( 
				l		:lword;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__UNSTOBUF128" ); 

	_unsToBuf128Size:
		procedure
		( 
				l			:lword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__UNSTOBUF128SIZE" ); 





	_intToBuf32:
		procedure
		( 
				d		:dword in eax;
				width	:dword in ecx; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__INTTOBUF32" ); 

	_intToBuf32Size:
		procedure
		( 
				d			:dword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__INTTOBUF32SIZE" ); 


	_intToBuf64:
		procedure
		( 
				q		:qword;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__INTTOBUF64" ); 

	_intToBuf64Size:
		procedure
		( 
				q			:qword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__INTTOBUF64SIZE" ); 


	_intToBuf128:
		procedure
		( 
				l		:lword;
				width	:dword; 
			var buffer	:char in edi 
		);
		@global:_hla._ext( "CONV__INTTOBUF128" ); 

	_intToBuf128Size:
		procedure
		( 
				l			:lword; 
				width		:dword; 
				numWidth	:uns32; 
				fill		:char;
			var	buffer		:var; 
				maxBufSize	:dword 
		);
		@global:_hla._ext( "CONV__INTTOBUF128SIZE" ); 



	////////////////////////////////////////////////////




	bin8ToBuf:
		procedure( b:byte in al; var buffer:var in edi );
		@global:_hla._ext("CONV_BIN8TOBUF" );

	h8ToBuf:
		procedure( b:byte in al; var buffer:var in edi );
		@global:_hla._ext("CONV_H8TOBUF" );

	h16ToBuf:
		procedure( w:word in ax; var buffer:var in edi );
		@global:_hla._ext("CONV_H16TOBUF" );

	h32ToBuf:
		procedure( d:dword in eax; var buffer:var in edi );
		@global:_hla._ext("CONV_H32TOBUF" );

	h64ToBuf:
		procedure ( q:qword; var buffer:var in edi );
		@global:_hla._ext("CONV_H64TOBUF" );

	h80ToBuf:
		procedure ( tb:tbyte; var buffer:var in edi );
		@global:_hla._ext("CONV_H80TOBUF" );

	h128ToBuf:
		procedure ( l:lword; var buffer:var in edi );
		@global:_hla._ext("CONV_H128TOBUF" );


	bToBuf:
		procedure( b:byte in al; var buffer:var in edi );
		@global:_hla._ext("CONV_BTOBUF" );

	wToBuf:
		procedure( w:word in ax; var buffer:var in edi );
		@global:_hla._ext("CONV_WTOBUF" );

	dToBuf:
		procedure( d:dword in eax; var buffer:var in edi );
		@global:_hla._ext("CONV_DTOBUF" );

	qToBuf:
		procedure ( q:qword; var buffer:var in edi );
		@global:_hla._ext("CONV_QTOBUF" );

	tbToBuf:
		procedure ( tb:tbyte; var buffer:var in edi );
		@global:_hla._ext("CONV_TBTOBUF" );

	lToBuf:
		procedure ( l:lword; var buffer:var in edi );
		@global:_hla._ext("CONV_LTOBUF" );



	
	bToStr:
		procedure ( b:byte; buffer:string );
		@global:_hla._ext("CONV_BTOSTR" );

	wToStr:
		procedure ( w:word; buffer:string );
		@global:_hla._ext("CONV_WTOSTR" );

	dToStr:
		procedure ( d:dword; buffer:string );
		@global:_hla._ext("CONV_DTOSTR" );

	qToStr:
		procedure ( q:qword; buffer:string );
		@global:_hla._ext("CONV_QTOSTR" );

	tbToStr:
		procedure( tb:tbyte; buffer:string );
		@global:_hla._ext("CONV_TBTOSTR" );

	lToStr:
		procedure ( l:lword; buffer:string );
		@global:_hla._ext("CONV_LTOSTR" );
			

	a_bToStr:
		procedure ( b:byte );
		@global:_hla._ext("CONV_A_BTOSTR" );

	a_wToStr:
		procedure ( w:word );
		@global:_hla._ext("CONV_A_WTOSTR" );

	a_dToStr:
		procedure ( d:dword );
		@global:_hla._ext("CONV_A_DTOSTR" );

	a_qToStr:
		procedure ( q:qword );
		@global:_hla._ext("CONV_A_QTOSTR" );

	a_tbToStr:
		procedure( tb:tbyte );
		@global:_hla._ext("CONV_A_TBTOSTR" );

	a_lToStr:
		procedure ( l:lword );
		@global:_hla._ext("CONV_A_LTOSTR" );
				
	



	bin8ToStr:
		procedure ( b:byte; buffer:string );
		@global:_hla._ext("CONV_BIN8TOSTR" );

	h8ToStr:
		procedure ( b:byte; size:dword; fill:char; buffer:string );
		@global:_hla._ext("CONV_H8TOSTR" );

	h16ToStr:
		procedure ( w:word; size:dword; fill:char; buffer:string );
		@global:_hla._ext("CONV_H16TOSTR" );

	h32ToStr:
		procedure ( d:dword; size:dword; fill:char; buffer:string );
		@global:_hla._ext("CONV_H32TOSTR" );

	h64ToStr:
		procedure ( q:qword; size:dword; fill:char; buffer:string );
		@global:_hla._ext("CONV_H64TOSTR" );

	h80ToStr:
		procedure( tb:tbyte; size:dword; fill:char; buffer:string );
		@global:_hla._ext("CONV_H80TOSTR" );

	h128ToStr:
		procedure ( l:lword; width:int32; fill:char; buffer:string );
		@global:_hla._ext("CONV_H128TOSTR" );





	a_bin8ToStr:
		procedure ( b:byte );
		@global:_hla._ext("CONV_A_BIN8TOSTR" );

	a_h8ToStr:
		procedure ( b:byte; size:dword; fill:char );
		@global:_hla._ext("CONV_A_H8TOSTR" );

	a_h16ToStr:
		procedure ( w:word; size:dword; fill:char );
		@global:_hla._ext("CONV_A_H16TOSTR" );

	a_h32ToStr:
		procedure ( d:dword; size:dword; fill:char );
		@global:_hla._ext("CONV_A_H32TOSTR" );

	a_h64ToStr:
		procedure ( q:qword; size:dword; fill:char );
		@global:_hla._ext("CONV_A_H64TOSTR" );

	a_h80ToStr:
		procedure( tb:tbyte; size:dword; fill:char );
		@global:_hla._ext("CONV_A_H80TOSTR" );

	a_h128ToStr:
		procedure ( l:lword; width:int32; fill:char );
		@global:_hla._ext("CONV_A_H128TOSTR" );





	h8Size:
		procedure( bValue:byte in al ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_H8SIZE" );

	h16Size:
		procedure( wValue:word in ax ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_H16SIZE" );

	h32Size:
		procedure( dValue:dword in eax ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_H32SIZE" );

	h64Size:
		procedure( qVal:qword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_H64SIZE" );

	h80Size:
		procedure( tbVal:tbyte ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_H80SIZE" );

	h128Size:
		procedure( _lVal:lword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_H128SIZE" );
	
			
	
	bSize:
		procedure( bValue:byte in al ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_BSIZE" );

	wSize:
		procedure( wValue:word in ax ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_WSIZE" );

	dSize:
		procedure( dValue:dword in eax ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_DSIZE" );

	qSize:
		procedure( qValue:qword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_QSIZE" );

	tbSize:
		procedure( tbValue:tbyte ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_TBSIZE" );

	lSize:
		procedure( lValue:lword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_LSIZE" );
				
			
			
			

	i8Size:
		procedure( iValue:byte in al ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_I8SIZE" );

	i16Size:
		procedure( iValue:word in ax ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_I16SIZE" );

	i32Size:
		procedure( iValue:dword in eax ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_I32SIZE" );


	i64Size:
		procedure( q:qword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_I64SIZE" );

	i128Size:
		procedure( l:lword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_I128SIZE" );
			
			


	u8Size:
		procedure( uValue:byte in al ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_U8SIZE" );

	u16Size:
		procedure( uValue:word in ax ) {@use eax @returns( "eax" )};  
		@global:_hla._ext("CONV_U16SIZE" );

	u32Size:
		procedure( uValue:dword in eax ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_U32SIZE" );

	u64Size:
		procedure( q:qword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_U64SIZE" );

	u128Size:
		procedure( u128:lword ) {@returns( "eax" )};  
		@global:_hla._ext("CONV_U128SIZE" );
			
			


	i8ToBuf:
		procedure( i8 :byte in al; var buf:var in edi );
		@global:_hla._ext("CONV_I8TOBUF" );

	i16ToBuf:
		procedure( i16 :word in ax; var buf:var in edi );
		@global:_hla._ext("CONV_I16TOBUF" );

	i32ToBuf:
		procedure( i32 :dword in eax; var buf:var in edi );
		@global:_hla._ext( "CONV_I32TOBUF" );

	i64ToBuf:
		procedure( q:qword; var buf:var in edi );
		@global:_hla._ext( "CONV_I64TOBUF" );

	i128ToBuf:
		procedure( l:lword; var buf:var in edi );
		@global:_hla._ext( "CONV_I128TOBUF" );


	u8ToBuf:
		procedure( u8 :byte in al; var buf:var in edi );
		@global:_hla._ext( "CONV_U8TOBUF" );

	u16ToBuf:
		procedure( u16 :word in ax; var buf:var in edi );
		@global:_hla._ext( "CONV_U16TOBUF" );

	u32ToBuf:
		procedure( u32 :dword in eax; var buf:var in edi );
		@global:_hla._ext( "CONV_U32TOBUF" );

	u64ToBuf:
		procedure( q:qword; var buf:var in edi );
		@global:_hla._ext( "CONV_U64TOBUF" );

	u128ToBuf:
		procedure( l:lword; var buf:var in edi );
		@global:_hla._ext( "CONV_U128TOBUF" );




	i8ToStr:
		procedure
		( 
			b:		byte; 
			width:	int32;
			f:		char; 
			buf:	string 
		);
		@global:_hla._ext( "CONV_I8TOSTR" );


	i16ToStr:
		procedure
		( 
			w:		word; 
			width:	int32;
			f:		char; 
			buf:	string 
		);
		@global:_hla._ext( "CONV_I16TOSTR" );


	i32ToStr:
		procedure
		( 
			d:		dword; 
			width:	int32;
			f:		char; 
			buf:	string 
		);
		@global:_hla._ext( "CONV_I32TOSTR" );


	i64ToStr:
		procedure
		( 
			q:		qword; 
			width:	int32;
			fill:	char; 
			buffer:	string 
		);
		@global:_hla._ext( "CONV_I64TOSTR" );


	i128ToStr:
		procedure
		( 
			l:		lword; 
			width:	int32;
			fill:	char; 
			buffer:	string 
		);
		@global:_hla._ext( "CONV_I128TOSTR" );





	a_i8ToStr:
		procedure
		( 
			b:		byte; 
			width:	int32;
			f:		char 
		);
		@global:_hla._ext( "CONV_A_I8TOSTR" );


	a_i16ToStr:
		procedure
		( 
			w:		word; 
			width:	int32;
			f:		char 
		);
		@global:_hla._ext( "CONV_A_I16TOSTR" );


	a_i32ToStr:
		procedure
		( 
			d:		dword; 
			width:	int32;
			f:		char 
		);
		@global:_hla._ext( "CONV_A_I32TOSTR" );


	a_i64ToStr:
		procedure
		( 
			q:		qword; 
			width:	int32;
			fill:	char 
		);
		@global:_hla._ext( "CONV_A_I64TOSTR" );


	a_i128ToStr:
		procedure
		( 
			l:		lword; 
			width:	int32;
			fill:	char 
		);
		@global:_hla._ext( "CONV_A_I128TOSTR" );





	u8ToStr:
		procedure
		( 
			b:		byte; 
			width:	int32;
			f:		char; 
			buf:	string 
		);
		@global:_hla._ext( "CONV_U8TOSTR" );

	u16ToStr:
		procedure
		( 
			w:		word; 
			width:	int32;
			f:		char; 
			buf:	string 
		);
		@global:_hla._ext( "CONV_U16TOSTR" );


	u32ToStr:
		procedure
		( 
			d:		dword; 
			width:	int32;
			f:		char; 
			buf:	string 
		);
		@global:_hla._ext( "CONV_U32TOSTR" );


	u64ToStr:
		procedure
		( 
			q:		qword; 
			width:	int32;
			fill:	char; 
			buffer:	string 
		);
		@global:_hla._ext( "CONV_U64TOSTR" );


	u128ToStr:
		procedure
		( 
			l:		lword; 
			width:	int32;
			fill:	char; 
			buffer:	string 
		);
		@global:_hla._ext( "CONV_U128TOSTR" );





	a_u8ToStr:
		procedure
		( 
			b:		byte; 
			width:	int32;
			f:		char 
		);
		@global:_hla._ext( "CONV_A_U8TOSTR" );

	a_u16ToStr:
		procedure
		( 
			w:		word; 
			width:	int32;
			f:		char 
		);
		@global:_hla._ext( "CONV_A_U16TOSTR" );


	a_u32ToStr:
		procedure
		( 
			d:		dword; 
			width:	int32;
			f:		char 
		);
		@global:_hla._ext( "CONV_A_U32TOSTR" );


	a_u64ToStr:
		procedure
		( 
			q:		qword; 
			width:	int32;
			fill:	char 
		);
		@global:_hla._ext( "CONV_A_U64TOSTR" );


	a_u128ToStr:
		procedure
		( 
			l:		lword; 
			width:	int32;
			fill:	char 
		);
		@global:_hla._ext( "CONV_A_U128TOSTR" );







	r80ToStr:
		procedure
		(
			r80: 		real80;
			width:		uns32;
			decimalpts:	uns32;
			fill:		char;
			buffer:		string
		);
		@global:_hla._ext( "CONV_R80TOSTR" );


	r64ToStr:
		procedure
		(
			r64: 		real64;
			width:		uns32;
			decimalpts:	uns32;
			fill:		char;
			buffer:		string
		);
		@global:_hla._ext( "CONV_R64TOSTR" );


	r32ToStr:
		procedure
		(
			r32: 		real32;
			width:		uns32;
			decimalpts:	uns32;
			fill:		char;
			buffer:		string
		);
		@global:_hla._ext( "CONV_R32TOSTR" );
			
			



	a_r80ToStr:
		procedure
		(
			r80: 		real80;
			width:		uns32;
			decimalpts:	uns32;
			fill:		char
		);
		@global:_hla._ext( "CONV_A_R80TOSTR" );


	a_r64ToStr:
		procedure
		(
			r64: 		real64;
			width:		uns32;
			decimalpts:	uns32;
			fill:		char
		);
		@global:_hla._ext( "CONV_A_R64TOSTR" );


	a_r32ToStr:
		procedure
		(
			r32: 		real32;
			width:		uns32;
			decimalpts:	uns32;
			fill:		char
		);
		@global:_hla._ext( "CONV_A_R32TOSTR" );
			
			
			
			

	r80ToBuf:
		procedure
		(
				r80			:real80;	
				width		:uns32; 
				decimalpts	:uns32; 
				fill		:char; 
			var	buffer		:var in edi
		);
		@global:_hla._ext( "CONV_R80TOBUF" );


	r64ToBuf:
		procedure
		(
				r64			:real64;	
				width		:uns32; 
				decimalpts	:uns32; 
				fill		:char; 
			var	buffer		:var in edi
		);
		@global:_hla._ext( "CONV_R64TOBUF" );


	r32ToBuf:
		procedure
		(
				r32			:real32;	
				width		:uns32; 
				decimalpts	:uns32; 
				fill		:char; 
			var	buffer		:var in edi
		);
		@global:_hla._ext( "CONV_R32TOBUF" );





	e80ToStr:
		procedure
		(
			r80: 		real80;
			width:		uns32;
			buffer:		string
		);
		@global:_hla._ext( "CONV_E80TOSTR" );


	e64ToStr:
		procedure
		(
			r64: 		real64;
			width:		uns32;
			buffer:		string
		);
		@global:_hla._ext( "CONV_E64TOSTR" );


	e32ToStr:
		procedure
		(
			r32: 		real32;
			width:		uns32;
			buffer:		string
		);
		@global:_hla._ext( "CONV_E32TOSTR" );







	a_e80ToStr:
		procedure
		(
			r80: 		real80;
			width:		uns32
		);
		@global:_hla._ext( "CONV_A_E80TOSTR" );


	a_e64ToStr:
		procedure
		(
			r64: 		real64;
			width:		uns32
		);
		@global:_hla._ext( "CONV_A_E64TOSTR" );


	a_e32ToStr:
		procedure
		(
			r32: 		real32;
			width:		uns32
		);
		@global:_hla._ext( "CONV_A_E32TOSTR" );





	e32ToBuf:
		procedure
		(
				e32: 		real32;
				width:		uns32;
			var buffer:		var in edi
		);
		@global:_hla._ext( "CONV_E32TOBUF" );


	e64ToBuf:
		procedure
		(
				e64: 		real64;
				width:		uns32;
			var buffer:		var in edi
		);
		@global:_hla._ext( "CONV_E64TOBUF" );


	e80ToBuf:
		procedure
		(
				e80: 		real80;
				width:		uns32;
			var buffer:		var in edi
		);
		@global:_hla._ext( "CONV_E80TOBUF" );

	eToBuf:
		procedure
		(
				e80		:real80;
				width	:uns32;
			var	buffer	:var in edi;
				expDigs	:uns32
		);
		@global:_hla._ext( "CONV_ETOBUF" );




	atou8:
		procedure( var buffer:var in esi ) {@returns( "al" )};  
		@global:_hla._ext( "CONV_ATOU8" );

	atou16:
		procedure( var buffer:var in esi ) {@returns( "ax" )};  
		@global:_hla._ext( "CONV_ATOU16" );

	atou32:
		procedure( var buffer:var in esi ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_ATOU32" );

	atou64:
		procedure( var buffer:var in esi ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_ATOU64" );

	atou128:
		procedure( var buffer:var in esi; var l:lword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_ATOU128" );

	atoi8:
		procedure( var buffer:var in esi ) {@returns( "al" )};  
		@global:_hla._ext( "CONV_ATOI8" );

	atoi16:
		procedure( var buffer:var in esi ) {@returns( "ax" )};  
		@global:_hla._ext( "CONV_ATOI16" );

	atoi32:
		procedure( var buffer:var in esi ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_ATOI32" );

	atoi64:
		procedure( var buffer:var in esi );
		@global:_hla._ext( "CONV_ATOI64" );

	atoi128:
		procedure( var buffer:var in esi; var l:lword );
		@global:_hla._ext( "CONV_ATOI128" );


	atoh8:
		procedure( var buffer:var in esi ) {@returns( "al" )};  
		@global:_hla._ext( "CONV_ATOH8" );

	atoh16:
		procedure( var buffer:var in esi ) {@returns( "ax" )};  
		@global:_hla._ext( "CONV_ATOH16" );

	atoh32:
		procedure( var buffer:var in esi ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_ATOH32" );

	atoh64:
		procedure( var buffer:var in esi );
		@global:_hla._ext( "CONV_ATOH64" );

	atoh80:
		procedure( var buffer:var in esi; var tb:tbyte );
		@global:_hla._ext( "CONV_ATOH80" );

	atoh128:
		procedure( var buffer:var in esi; var l:lword );
		@global:_hla._ext( "CONV_ATOH128" );

	atof:
		procedure {@returns( "st0" )};  
		@global:_hla._ext( "CONV_ATOF" );




	strToi8:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOI8" );

	strToi16:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOI16" );

	strToi32:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOI32" );

	strToi64:
		procedure( s:string; index:dword );
		@global:_hla._ext( "CONV_STRTOI64" );

	strToi128:
		procedure( s:string; index:dword; var dest:int128 );
		@global:_hla._ext( "CONV_STRTOI128" );



	strTou8:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOU8" );

	strTou16:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOU16" );

	strTou32:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOU32" );

	strTou64:
		procedure( s:string; index:dword );
		@global:_hla._ext( "CONV_STRTOU64" );

	strTou128:
		procedure( s:string; index:dword; var dest:lword );
		@global:_hla._ext( "CONV_STRTOU128" );



	strToh8:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOH8" );

	strToh16:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOH16" );

	strToh32:
		procedure( s:string; index:dword ) {@returns( "eax" )};  
		@global:_hla._ext( "CONV_STRTOH32" );

	strToh64:
		procedure( s:string; index:dword; var dest:qword );
		@global:_hla._ext( "CONV_STRTOH64" );

	strToh80:
		procedure( s:string; index:dword; var dest:tbyte );
		@global:_hla._ext( "CONV_STRTOH80" );

	strToh128:
		procedure( s:string; index:dword; var dest:lword );
		@global:_hla._ext( "CONV_STRTOH128" );


	#if( allowDeprecatedNames )
	
		strTob:
			procedure( s:string; index:dword ) {@returns( "eax" )};  
			@global:_hla._ext( "CONV_STRTOH8" );

		strTow:
			procedure( s:string; index:dword ) {@returns( "eax" )};  
			@global:_hla._ext( "CONV_STRTOH16" );

		strTod:
			procedure( s:string; index:dword ) {@returns( "eax" )};  
			@global:_hla._ext( "CONV_STRTOH32" );

		strToq:
			procedure( s:string; index:dword; var dest:qword );
			@global:_hla._ext( "CONV_STRTOH64" );

		strTotb:
			procedure( s:string; index:dword; var dest:tbyte );
			@global:_hla._ext( "CONV_STRTOH80" );

		strTol:
			procedure( s:string; index:dword; var dest:lword );
			@global:_hla._ext( "CONV_STRTOH128" );
				
	#endif
	
	


	strToFlt:
		procedure( s:string; index:dword );
		@global:_hla._ext( "CONV_STRTOFLT" );



	#if( allowDeprecatedNames )
	
		cStrToStr:
			procedure( var buffer:var; dest:string );
			@global:_hla._ext( "STR_CPYZ" );

		a_cStrToStr:
			procedure( var buffer:var ) {@returns( "eax" )}; 
			@global:_hla._ext( "STR_A_CPYZ" );
				
	#endif


	roman:
		procedure( arabic:dword; rmn:string );
		@global:_hla._ext( "CONV_ROMAN" );

	a_roman:
		procedure( arabic:dword ) {@returns( "eax" )};
		@global:_hla._ext( "CONV_A_ROMAN" );

	utoEng:
		procedure( u:dword; dest:string );
		@global:_hla._ext( "CONV_UTOENG" );

	a_utoEng:
		procedure( u:dword );
		@global:_hla._ext( "CONV_A_UTOENG" );

	utoEngth:
		procedure( u:dword; dest:string );
		@global:_hla._ext( "CONV_UTOENGTH" );

	a_utoEngth:
		procedure( u:dword );
		@global:_hla._ext( "CONV_A_UTOENGTH" );




end conv;

#endif
