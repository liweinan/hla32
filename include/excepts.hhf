#if( ! @defined( except_hhf ))

/*
** Note: except_hhf is a special symbol known to the
** compiler.  If you change this, the compiler may not
** be able to emit code to automatically call PrintExceptionError.
**
**	Modifications:
**
**	10/02/2000, RLH:	Added "ExecutedAbstract" exception value.
**	02/21/2002, RLH:	Added modifications for Linux.
**	07/04/2002, RLH:	Merged Windows and Linux files together.
*/

?except_hhf := true;
?@exceptions := true;

#includeonce( "os.hhf" )
#includeOnce( "_hla.hhf" )
#if( @thread )

	#includeOnce( "cstdlib.hhf" )
	
#endif

const
	assert	:text := 
		"?ex.linenumber := @linenumber; "
		"?ex.filename := @filename; "
		"ex.assert";

val
	_ex_saveEnumSize_:dword := @enumSize;

namespace ex; @fast;

	val
		NDEBUG := @global:false;
		linenumber	:uns32;
		filename	:uns32;
			
	type
		ExceptionValues : dword;


	static
		AssertionStr:string; external;


	#macro assert( expr ): 
		skipAssertion,
		msg;

		#if( !ex.NDEBUG )

			readonly

				msg:string := 
						@string:expr 
					+	" " + string( ex.filename )
					+	" (" + string( ex.linenumber ) + ")";

			endreadonly;
			jt( expr ) skipAssertion;

				mov( msg, ex.AssertionStr );
				raise( ex.AssertionFailed );

			skipAssertion:

		#endif

	#endmacro


	
	type
	
		?@enumSize := 4;		
		exceptionCodes:
			enum
			{
/*  0 */		UnknownException,

				// String related exceptions:
	
/*  1 */		StringOverflow,	 
/*  2 */		StringIndexError,
/*  3 */		StringOverlap,
/*  4 */		StringMetaData,
/*  5 */		StringAlignment,
/*  6 */		StringUnderflow,
/*  7 */		IllegalStringOperation,
	
				// General exceptions:
	
/*  8 */		ValueOutOfRange,
/*  9 */		IllegalChar,
/* 10 */		AttemptToDerefNULL,
/* 11 */		TooManyCmdLnParms,
/* 12 */		AssertionFailed,
/* 13 */		ExecutedAbstract,
/* 14 */		BadObjPtr,
/* 15 */		InvalidAlignment,
/* 16 */		InvalidArgument,
/* 17 */		BufferOverflow,
/* 18 */		BufferUnderflow,
/* 19 */		IllegalSize,
	
				// Formatting and conversion errors:
	
/* 20 */		ConversionError,
/* 21 */		WidthTooBig,
/* 22 */		FractionTooBig,
	
				// File-related exceptions:
	
/* 23 */		BadFileHandle,
/* 24 */		FileNotFound,	
/* 25 */		FileOpenFailure,
/* 26 */		FileCloseError,	
/* 27 */		FileWriteError,	
/* 28 */		FileReadError,	
/* 29 */		FileSeekError,	
/* 30 */		DiskFullError,
/* 31 */		AccessDenied,	
/* 32 */		EndOfFile,

				// FileSys-related exceptions:
				
/* 33 */		CannotCreateDir,
/* 34 */		CannotRemoveDir,
/* 35 */		CannotRemoveFile,
/* 36 */		CDFailed,
/* 37 */		CannotRenameFile,
	
				// Memory management exceptions:
	
/* 38 */		MemoryAllocationFailure,
/* 39 */		MemoryFreeFailure,
/* 40 */		MemoryAllocationCorruption,
/* 41 */		AttemptToFreeNULL,
/* 42 */		BlockAlreadyFree,
/* 43 */		CannotFreeMemory,
/* 44 */		PointerNotInHeap,
	
				// Array exceptions:
	
/* 45 */		ArrayShapeViolation,
/* 46 */		ArrayBounds,
	
				// Time/date exceptions:
	
/* 47 */		InvalidDate,
/* 48 */		InvalidDateFormat,
/* 49 */		TimeOverflow,
/* 50 */		InvalidTime,
/* 51 */		InvalidTimeFormat,

				// Socket Errors:
				
/* 52 */		SocketError,

				// Thread Errors:
				
/* 53 */		ThreadError,
	
				// Hardware/OS related exceptions
	
/* 54 */		AccessViolation,
/* 55 */		InPageError,
/* 56 */		NoMemory,
/* 57 */		InvalidHandle,
/* 58 */		ControlC,
/* 59 */		StackOverflow,
/* 60 */		Breakpoint,			
/* 61 */		SingleStep,			
/* 62 */		PrivInstr,			
/* 63 */		IllegalInstr,		
/* 64 */		BoundInstr,			
/* 65 */		IntoInstr,			
/* 66 */		DivideError,			
/* 67 */		fDivByZero,			
/* 68 */		fInexactResult,		
/* 69 */		fInvalidOperation,
/* 70 */		fOverflow,			
/* 71 */		fUnderflow,			
/* 72 */		fStackCheck,			
/* 73 */		fDenormal,

				// Blob related exceptions
				
/* 74 */		BlobOverflow
				
			};
			
		?@enumSize := @global:_ex_saveEnumSize_;

	const
		MaxExceptionValue := @dword( fDenormal );	
	
	
	Type

		
			#if( @global:os.win32 )
			
				ExceptionRecord:
					record	// Windows exception record.
						
						ExceptionCode:			dword;
						ExceptionFlags:			dword;
						ExceptionRecord:		dword;
						ExceptionAddress:		dword;
						NumberParameters:		dword;
						ExceptionInformation:	dword[ 15 ];
						
					endrecord;
					
				// Context is Windows-only.
				
				Context:
					record
						dr:						dword[ 6 ];	//Debug registers.
						
						ControlWord:			dword;
						StatusWord:				dword;
						TagWord:				dword;
						ErrorOffset:			dword;
						ErrorSelector:			dword;
						DataOffset:				dword;
						DataSelector:			dword;
						RegisterArea:			tbyte[ 8 ];
						Cr0NpxState:			dword;
						
						SegGS:					dword;
						SegFS:					dword;
						SegES:					dword;
						SegDS:					dword;
						
						regEDI:					dword;
						regESI:					dword;
						regEBX:					dword;
						regEDX:					dword;
						regECX:					dword;
						regEAX:					dword;
						regEBP:					dword;
					
						regEIP:					dword;
						SegCS:					dword;
						EFlags:					dword;
						regESP:					dword;
						SegSS:					dword;
						
						ExtendedRegisters:		byte[ 512];
						
					endrecord;

				ExceptionList:
					record

						next:				dword;
						WinExHandler:		procedure;
						HLAExHandler:		procedure;
						ExceptionSPSave:	dword;
						MinusOneMarker:		dword;

					endrecord;
						
				
			#elseif( @global:os.linux )
				
				ExceptionRecord:
					record	// Linux exception record.

						next:				dword;
						Signature:			dword;
						curCoroutine:		dword;
						SavedContext:		dword;
						HLAExHandler:		procedure;
		
					endrecord;
			
			#endif
			



	proc
	
		exceptionMsg:
			procedure( exceptionCode:dword; msg:string );
			@global:_hla._ext( "EX_EXCEPTIONMSG" );
		
		printExceptionError:
			procedure
			(
				_exCode		:dword in eax;
				_raiseAdrs	:dword in ebx;
				_fileName	:string in ecx;
				_userCode	:dword in edx;
				_lineNum	:dword in edi
			);
			@global:_hla._ext( "EX_PRINTEXCEPTIONERROR" );
	
		// The following is for use by the HLA compiler and stdlib only.
		
		defaultExceptionHandler:
			procedure; 
			external( "DefaultExceptionHandler__hla_" );


end ex;

#endif
