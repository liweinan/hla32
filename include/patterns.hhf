
#if( ! @defined( patterns_hhf ))
?patterns_hhf := true;

#includeOnce( "hla.hhf" )
#includeOnce( "strings.hhf" )

namespace pat; @fast;

	// A special macro for HLA stdlib functions. Produces different
	// external names for non-threaded versus threaded functions.
	


	type

		FailRec:
			record
				ebpSave: dword;
				jmpAdrs: dword;
			endrecord;
			
			
	static
		align( 4 );
		
		WordDelims			:cset;		external( "PAT_WORDDELIMS" );
		FailTo				:FailRec;	external( "PAT_FAILTO" );
		CleanESP			:dword;		external( "PAT_CLEANESP" );
		StrStart			:dword;		external( "PAT_STRSTART" );
		onePatBase			:dword;		external( "PAT_ONEPATBASE" );
		zeroOrOnePatBase	:dword;		external( "PAT_ZEROORONEPATBASE" );
		zeroOrMorePatBase	:dword;		external( "PAT_ZEROORMOREPATBASE" );
		oneOrMorePatBase	:dword;		external( "PAT_ONEORMOREPATBASE" );


			

			
end pat;


namespace @global:_hla;

	type
		_actRec_:
			record
			
				startPosn	:dword;
				endStr		:dword;
				espSave		:dword;
				base		:dword;
				baseSave	:dword;
				FailToSave	:@global:pat.FailRec;
				
				hasMatch	:boolean;
				align(4);
				
			endrecord;
			
end @global:_hla;


namespace pat; @fast;

	// macro to make _actRec_ access easier to do:
	
	#macro ar(field);
		(
			type 
			@global:_hla._actRec_ 
			[ebp - @size(@global:_hla._actRec_)]
		).field
	#endmacro
		
	#macro arx(field);
		(
			type 
			@global:_hla._actRec_ 
			[ebx - @size(@global:_hla._actRec_)]
		).field
	#endmacro	
	

	// The following macro is a utility for
	// the pattern matching procedures.
	// It saves the current global "FailTo"
	// value in the "FailRec" variable specified
	// as the first parameter and sets up
	// FailTo to properly return control into
	// the current procedure at the "FailTarget"
	// address.  Then it jumps indirectly through
	// the procedure's return address to transfer
	// control to the next (code sequential)
	// pattern matching routine.

	#macro _success_( _s_FTSave_, _s_FailTarget_ );
			
		mov( pat.FailTo.ebpSave, _s_FTSave_.ebpSave );
		mov( pat.FailTo.jmpAdrs, _s_FTSave_.jmpAdrs );
		
		mov( ebp, pat.FailTo.ebpSave );
		mov( &_s_FailTarget_, pat.FailTo.jmpAdrs );

		pushd( [ebp+4] );
		mov( [ebp], ebp );
		ret();

	#endmacro


	// _fail_ is a utility macro used by the pattern
	// matching procedures to signal failure during
	// the pattern matching operation.  This transfers
	// control back to the previous routine that
	// supports backtracking.

	#macro _fail_( _f_FTAdrs_ );
		mov( _f_FTAdrs_.ebpSave, ebp );
		jmp( _f_FTAdrs_.jmpAdrs );		
	#endmacro



	

    ////////////////////////////////////////////////////////////////////////////

	#macro _onePat_:
		_op_failAdrs_,
		_op_successAdrs_,
		_op_successAdrs2_,
		_op_succeeded_;
		


		// Because of alternation, we may need more that one
		// failure address (since, for each alternation section,
		// the previous sections must fail to that alternate).
		// Hence, _op_failAdrs_ is a string that we can set to
		// various labels under control of this macro.

		?_op_failAdrs_ 	:= hla.genLabel;

		// Set up the activation record (sort of an in-line procedure):

		push( ebp );
		mov( esp, ebp );
		sub( @size(@global:_hla._actRec_ ), esp );
		mov( esp, pat.ar( espSave ));
		mov( @global:false, pat.ar( hasMatch ));	// Flags at least one match.
		
		// On the first invocation of this macro, we need to save and
		// set up the base EBP pointer:
		
		mov( pat.onePatBase, ebx );
		mov( ebx, pat.ar( baseSave ));
		mov( ebp, pat.ar( base )); 
		mov( ebp, pat.onePatBase );
		
		// Save the initial starting and ending positions of the string.
				  
		mov( esi, pat.ar( startPosn ));
		mov( edi, pat.ar( endStr ));

			
			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));
			
			mov( ebp, pat.FailTo.ebpSave );
			mov( &@text( _op_failAdrs_ ), pat.FailTo.jmpAdrs );
			
			mov( [ebp], ebp );	// Restore caller's ebp value
			mov( esi, ebx );	// Set starting position
		

	#keyword alternate:_try_alt_;

		jmp _op_successAdrs_;

		@text( _op_failAdrs_ ):
			?_op_failAdrs_ 	:= hla.genLabel;
			//?_op_successAdrs_ := hla.genLabel;
			
			// If we get here, then we've failed. However, if we did match
			// at least one copy of the pattern, we succeed. Check for that
			// case here.
					
			mov( pat.ar( espSave ), esp );
			mov( pat.ar( startPosn ), esi );
			mov( pat.ar( endStr ), edi );
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			cmp( pat.ar( hasMatch ), 0 );
			jne _op_succeeded_;
			
			
			// Okay, we really failed here. Try the alternate. Note that
			// we just use the current activation record on the stack.

			mov( esi, pat.ar( startPosn ));
			mov( edi, pat.ar( endStr ));

			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));
			
			mov( ebp, pat.FailTo.ebpSave );
			mov( &@text( _op_failAdrs_ ), pat.FailTo.jmpAdrs );
						
			mov( [ebp], ebp );	// Restore caller's ebp value
			mov( esi, ebx );

		
	#keyword fence( _p_Fence_accept_zero_parameters_[] );
	
		#error( "Fence is illegal within the 'onePat' macro" );

	#keyword if_failure;
		
		#error( "'if_failure' is illegal within 'onePat' macro" )


	#terminator endOnePat:
		_op_backtrack_, 
		_op_common_backtrack_;

		// Successful match here (falling through from match or alternate).  
		
		jmp _op_successAdrs_;
		
		
		// Slip in some code to handle failure.
		// If we get here, then we've completely failed.  Since this is
		// *one*OrMorePat we have to check to see if we've matched at
		// least one occurrence of the pattern (maintained in the flag
		// just below the activation record for this match.
		
		@text( _op_failAdrs_ ):
			mov( pat.ar( espSave ), esp );
			mov( pat.ar( startPosn ), esi );
			mov( pat.ar( endStr ), edi );
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			// Okay, check to see if we matched at least one
			// occurrence of the pattern inside the
			// pat.onePat..pat.endonePat sequence:
			
			cmp( pat.ar( hasMatch ), 0 );
			jne _op_succeeded_;
			
			// If we didn't match anybody, we're going to back track
			// into some matching function prior to the pat.onePat
			// statement. We need to restore the pat.onePatBase
			// from our local baseSave field before back-tracking
			// into that code.
			
			mov( pat.ar( baseSave ), ebx );
			mov( ebx, pat.onePatBase );
			jmp _op_common_backtrack_;
			
			// The following entry point gets called whenever
			// matching functions following the end of this
			// macro back-track back into this code.   
			
		_op_backtrack_:
			
			// When backtracking back into our code, we need to
			// restore pat.onePatBase from our base value
			// so that it points at our base address.
			
			mov( pat.ar( base ), ebx );
			mov( ebx, pat.onePatBase );
			
		_op_common_backtrack_:
		
			// Restore pat.FailTo from the local values:
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			mov( ebp, esp );				// Delete activation record.
			add( 4, esp );					// Skip ebp saved on stack
			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );
			
		
		
		// Successful match here.  As we're leaving the
		// pat.onePat..pat.endonePat sequence, we need to
		// restore pat.onePatBase value.
		
		_op_succeeded_:
			
			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));

			mov( ebp, pat.FailTo.ebpSave );
			mov( &_op_backtrack_, pat.FailTo.jmpAdrs );
			
			// Get the original starting position of the string.
			// We also need to set up the starting position
			// of the matched string in EBX.
			
			mov( pat.onePatBase, ebx );
			push( pat.arx( baseSave ));
			mov( pat.arx( startPosn ), ebx);
			pop( pat.onePatBase );

			// Restore EBP and be gone.
			
			mov( [ebp], ebp );

   		_op_successAdrs_:
			  
	#endmacro




    ////////////////////////////////////////////////////////////////////////////

	#macro _zeroOrOnePat_:
		_zoop_failAdrs_, 
		_zoop_successAdrs_;
		

		// On initial entry, set up the base activation record:
		
		push( ebp );
		mov( esp, ebp );
		sub( @size( @global:_hla._actRec_ ), esp );
		mov( esp, pat.ar( espSave ));
		
		// On the first invocation of this macro, we need to save and
		// set up the base EBP pointer:
		
		mov( pat.zeroOrOnePatBase, ebx );
		mov( ebx, pat.ar( baseSave ));
		mov( ebp, pat.ar( base )); 
		mov( ebp, pat.zeroOrOnePatBase );
		
		
		// Save the starting position of this portion of the
		// string match.
		
		mov( esi, pat.ar( startPosn ));
		mov( edi, pat.ar( endStr ));

		// Save the FailTo global object:
		
		mov( pat.FailTo.ebpSave, ebx );
		mov( ebx, pat.ar( FailToSave.ebpSave ));
		mov( pat.FailTo.jmpAdrs, ebx );
		mov( ebx, pat.ar( FailToSave.jmpAdrs ));
		

		mov( ebp, pat.FailTo.ebpSave );
		mov( &_zoop_failAdrs_, pat.FailTo.jmpAdrs );
		
		mov( [ebp], ebp );	// Restore caller's ebp value
		mov( esi, ebx );	// Set starting position
		

	#keyword alternate;

		#error( "Alternate is illegal within the 'zeroOrOnePat' macro" );
		
	#keyword fence( _p_Fence_accept_zero_parameters_[] );
	
		#error( "Fence is illegal within the 'zeroOrOnePat' macro" );

	#keyword if_failure;
		
		#error( "'if_failure' is illegal within 'zeroOrOnePat' macro" )


	#terminator endZeroOrOnePat:
		_zoop_backtrack_;

		// Successful match here (falling through from match or alternate).  
		
		jmp _zoop_successAdrs_;
		
		// If some pattern matching function after the pat.endzeroOrOnePat
		// statement fails and backtracks to this code, the following entry
		// point handles the backtracking.
		
		_zoop_backtrack_:
			mov( pat.ar( base ), ebx );		// Must restore pat.zeroOrOnePatBase
			mov( pat.arx( startPosn ), esi );
			mov( pat.arx( endStr ), edi );
			mov( ebx, pat.zeroOrOnePatBase );
		
			// Restore pat.FailTo from the local values:
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			mov( ebp, esp );				// Delete activation record.
			add( 4, esp );					// Skip ebp saved on stack
			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );
		
		
		
		// Slip in some code to handle failure.
		// If we get here, then we've completely failed.  But that's
		// okay 'cause this is *zero*OrMorePat.  Clean up the stack
		// and return success.
		
		_zoop_failAdrs_:
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );

			mov( ebp, pat.FailTo.ebpSave );
			mov( &_zoop_backtrack_, pat.FailTo.jmpAdrs );
			
			// Get the original starting position of the string.
			// We also need to set up the starting position
			// of the matched string in EBX.
			
			mov( pat.zeroOrOnePatBase, ebx );
			push( pat.arx( baseSave ));
			mov( pat.arx( startPosn ), ebx);
			pop( pat.zeroOrOnePatBase );

			// Restore EBP and be gone.
			
			mov( [ebp], ebp );
			
  		_zoop_successAdrs_:
	
	#endmacro


    ////////////////////////////////////////////////////////////////////////////

	#macro _zeroOrMorePat_:
		_zomp_failAdrs_, 
		_zomp_successAdrs_,
		_zomp_successAdrs2_;
		

		// On initial entry, set up the base activation record:
		
		push( ebp );
		mov( esp, ebp );
		sub( @size( @global:_hla._actRec_ ), esp );
		mov( esp, pat.ar( espSave ));
		
		// On the first invocation of this macro, we need to save and
		// set up the base EBP pointer:
		
		mov( pat.zeroOrMorePatBase, ebx );
		mov( ebx, pat.ar( baseSave ));
		mov( ebp, pat.ar( base )); 
		mov( ebp, pat.zeroOrMorePatBase );
		
		jmp _zomp_successAdrs2_;		

		// Loop back to this point until we get a failure.
		
		_zomp_successAdrs_:
			push( ebp );
			mov( esp, ebp );
			sub( @size( @global:_hla._actRec_ ), esp );
			mov( esp, pat.ar( espSave ));

			// On each iteration, we need to copy the original
			// pat.zeroOrMorePatBase value to baseSave so we
			// can restore it from *any* of the activation records
			// we create.
			
			mov( pat.zeroOrMorePatBase, ebx );
			mov( pat.arx( baseSave ), ebx );
			mov( ebx, pat.ar( baseSave ));
			
			// We also need to copy the pointer to our base
			// activation record to the base field so we
			// have quick access to it.
			
			mov( pat.zeroOrMorePatBase, ebx );
			mov( pat.arx( base ), ebx );
			mov( ebx, pat.ar( base ));

		_zomp_successAdrs2_:
		
			// Save the starting position of this portion of the
			// string match.
			
			mov( esi, pat.ar( startPosn ));
			mov( edi, pat.ar( endStr ));

			// Save the FailTo global object:
			
			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));
			

			mov( ebp, pat.FailTo.ebpSave );
			mov( &_zomp_failAdrs_, pat.FailTo.jmpAdrs );
			
			mov( [ebp], ebp );	// Restore caller's ebp value
			mov( esi, ebx );	// Set starting position
		

	#keyword alternate;

		#error( "Alternate is illegal within the 'zeroOrMorePat' macro" );
		
	#keyword fence( _p_Fence_accept_zero_parameters_[] );
	
		#error( "Fence is illegal within the 'zeroOrMorePat' macro" );

	#keyword if_failure;
		
		#error( "'if_failure' is illegal within 'zeroOrMorePat' macro" )


	#terminator endZeroOrMorePat:
		_zomp_backtrack_;

		// Successful match here (falling through from match or alternate).  
		
		jmp _zomp_successAdrs_;
		
		// If some pattern matching function after the pat.endZeroOrMorePat
		// statement fails and backtracks to this code, the following entry
		// point handles the backtracking.
		
		_zomp_backtrack_:
			mov( pat.ar( base ), ebx );		// Must restore pat.zeroOrMorePatBase
			mov( pat.arx( startPosn ), esi );
			mov( pat.arx( endStr ), edi );
			mov( ebx, pat.zeroOrMorePatBase );
		
			// Restore pat.FailTo from the local values:
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			mov( ebp, esp );				// Delete activation record.
			add( 4, esp );					// Skip ebp saved on stack
			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );
		
		
		
		// Slip in some code to handle failure.
		// If we get here, then we've completely failed.  But that's
		// okay 'cause this is *zero*OrMorePat.  Clean up the stack
		// and return success.
		
		_zomp_failAdrs_:
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );

			mov( ebp, pat.FailTo.ebpSave );
			mov( &_zomp_backtrack_, pat.FailTo.jmpAdrs );
			
			// Get the original starting position of the string.
			// We also need to set up the starting position
			// of the matched string in EBX.
			
			mov( pat.zeroOrMorePatBase, ebx );
			push( pat.arx( baseSave ));
			mov( pat.arx( startPosn ), ebx);
			pop( pat.zeroOrMorePatBase );

			// Restore EBP and be gone.
			
			mov( [ebp], ebp );
			


	#endmacro



    ////////////////////////////////////////////////////////////////////////////

	#macro _oneOrMorePat_:
		_oomp_failAdrs_,
		_oomp_successAdrs_,
		_oomp_successAdrs2_,
		_oomp_succeeded_;
		


		// Because of alternation, we may need more that one
		// failure address (since, for each alternation section,
		// the previous sections must fail to that alternate).
		// Hence, _oomp_failAdrs_ is a string that we can set to
		// various labels under control of this macro.

		?_oomp_failAdrs_ 	:= hla.genLabel;
		?_oomp_successAdrs_ := hla.genLabel;

		// Set up the activation record (sort of an in-line procedure):

		push( ebp );
		mov( esp, ebp );
		sub( @size( @global:_hla._actRec_ ), esp );
		mov( esp, pat.ar( espSave ));
		mov( @global:false, pat.ar( hasMatch ));	// Flags at least one match.
		
		// On the first invocation of this macro, we need to save and
		// set up the base EBP pointer:
		
		mov( pat.oneOrMorePatBase, ebx );
		mov( ebx, pat.ar( baseSave ));
		mov( ebp, pat.ar( base )); 
		mov( ebp, pat.oneOrMorePatBase );
		
		// Save the initial starting and ending positions of the string.
				  
		mov( esi, pat.ar( startPosn ));
		mov( edi, pat.ar( endStr ));

		jmp _oomp_successAdrs2_;		

		// Loop back to this point until we get a failure.
		
		@text( _oomp_successAdrs_ ):
		
			// Create a new activation record so we can backtrack
			// to this invocation of the following match code:
			
			push( ebp );
			mov( esp, ebp );
			sub( @size( @global:_hla._actRec_ ), esp );
			mov( esp, pat.ar( espSave ));
			mov( @global:true, pat.ar( hasMatch ) );
			
			// On each iteration, we need to copy the original
			// pat.onrOrMorePatBase value to baseSave so we
			// can restore it from *any* of the activation records
			// we create.
			
			mov( pat.oneOrMorePatBase, ebx );
			mov( pat.arx( baseSave ), ebx );
			mov( ebx, pat.ar( baseSave ));
			
			// We also need to copy the pointer to our base
			// activation record to the base field so we
			// have quick access to it.
			
			mov( pat.oneOrMorePatBase, ebx );
			mov( pat.arx( base ), ebx );
			mov( ebx, pat.ar( base ));

			// Save the starting position of this portion of the
			// string match.
			
			mov( esi, pat.ar( startPosn ));
			mov( edi, pat.ar( endStr ));

			
		_oomp_successAdrs2_:	
			
			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));
			
			mov( ebp, pat.FailTo.ebpSave );
			mov( &@text( _oomp_failAdrs_ ), pat.FailTo.jmpAdrs );
			
			mov( [ebp], ebp );	// Restore caller's ebp value
			mov( esi, ebx );	// Set starting position
		

	#keyword alternate:_try_alt_;

		jmp @text( _oomp_successAdrs_ );

		@text( _oomp_failAdrs_ ):
			?_oomp_failAdrs_ 	:= hla.genLabel;
			?_oomp_successAdrs_ := hla.genLabel;
			
			// If we get here, then we've failed. However, if we did match
			// at least one copy of the pattern, we succeed. Check for that
			// case here.
					
			mov( pat.ar( espSave ), esp );
			mov( pat.ar( startPosn ), esi );
			mov( pat.ar( endStr ), edi );
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			cmp( pat.ar( hasMatch ), 0 );
			jne _oomp_succeeded_;
			
			
			// Okay, we really failed here. Try the alternate. Note that
			// we just use the current activation record on the stack.

			jmp _try_alt_;		
			
			

		// Try the alternate.
		//
		// The followint label is where we loop back on each successful
		// match:
		
		@text( _oomp_successAdrs_ ):
		
			// Begin with a new activation record, in case backtracking
			// must occur.
			
			push( ebp );
			mov( esp, ebp );
			sub( @size( @global:_hla._actRec_ ), esp );
			mov( esp, pat.ar( espSave ));
			mov( @global:true, pat.ar( hasMatch ));	// Flags at least one match. 			
			
			// On each iteration, we need to copy the original
			// pat.onrOrMorePatBase value to baseSave so we
			// can restore it from *any* of the activation records
			// we create.
			
			mov( pat.oneOrMorePatBase, ebx );
			mov( pat.arx( baseSave ), ebx );
			mov( ebx, pat.ar( baseSave ));
			
			// We also need to copy the pointer to our base
			// activation record to the base field so we
			// have quick access to it.
			
			mov( pat.oneOrMorePatBase, ebx );
			mov( pat.arx( base ), ebx );
			mov( ebx, pat.ar( base ));

			
		_try_alt_:
			mov( esi, pat.ar( startPosn ));
			mov( edi, pat.ar( endStr ));

			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));
			
			mov( ebp, pat.FailTo.ebpSave );
			mov( &@text( _oomp_failAdrs_ ), pat.FailTo.jmpAdrs );
						
			mov( [ebp], ebp );	// Restore caller's ebp value
			mov( esi, ebx );

		
	#keyword fence( _p_Fence_accept_zero_parameters_[] );
	
		#error( "Fence is illegal within the 'oneOrMorePat' macro" );

	#keyword if_failure;
		
		#error( "'if_failure' is illegal within 'oneOrMorePat' macro" )


	#terminator endOneOrMorePat:
		_oomp_backtrack_, 
		_oomp_common_backtrack_;

		// Successful match here (falling through from match or alternate).  
		
		jmp @text( _oomp_successAdrs_ );
		
		
		// Slip in some code to handle failure.
		// If we get here, then we've completely failed.  Since this is
		// *one*OrMorePat we have to check to see if we've matched at
		// least one occurrence of the pattern (maintained in the flag
		// just below the activation record for this match.
		
		@text( _oomp_failAdrs_ ):
			mov( pat.ar( espSave ), esp );
			mov( pat.ar( startPosn ), esi );
			mov( pat.ar( endStr ), edi );
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			// Okay, check to see if we matched at least one
			// occurrence of the pattern inside the
			// pat.oneOrMorePat..pat.endOneOrMorePat sequence:
			
			cmp( pat.ar( hasMatch ), 0 );
			jne _oomp_succeeded_;
			
			// If we didn't match anybody, we're going to back track
			// into some matching function prior to the pat.oneOrMorePat
			// statement. We need to restore the pat.oneOrMorePatBase
			// from our local baseSave field before back-tracking
			// into that code.
			
			mov( pat.ar( baseSave ), ebx );
			mov( ebx, pat.oneOrMorePatBase );
			jmp _oomp_common_backtrack_;
			
			// The following entry point gets called whenever
			// matching functions following the end of this
			// macro back-track back into this code.   
			
		_oomp_backtrack_:
			
			// When backtracking back into our code, we need to
			// restore pat.oneOrMorePatBase from our base value
			// so that it points at our base address.
			
			mov( pat.ar( base ), ebx );
			mov( ebx, pat.oneOrMorePatBase );
			
		_oomp_common_backtrack_:
		
			// Restore pat.FailTo from the local values:
			
			mov( pat.ar( FailToSave.jmpAdrs ), ebx );
			mov( ebx, pat.FailTo.jmpAdrs );
			mov( pat.ar( FailToSave.ebpSave ), ebx );
			mov( ebx, pat.FailTo.ebpSave );
			
			mov( ebp, esp );				// Delete activation record.
			add( 4, esp );					// Skip ebp saved on stack
			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );
			
		
		
		// Successful match here.  As we're leaving the
		// pat.oneOrMorePat..pat.endOneOrMorePat sequence, we need to
		// restore pat.oneOrMorePatBase value.
		
		_oomp_succeeded_:
			
			mov( pat.FailTo.ebpSave, ebx );
			mov( ebx, pat.ar( FailToSave.ebpSave ));
			mov( pat.FailTo.jmpAdrs, ebx );
			mov( ebx, pat.ar( FailToSave.jmpAdrs ));

			mov( ebp, pat.FailTo.ebpSave );
			mov( &_oomp_backtrack_, pat.FailTo.jmpAdrs );
			
			// Get the original starting position of the string.
			// We also need to set up the starting position
			// of the matched string in EBX.
			
			mov( pat.oneOrMorePatBase, ebx );
			push( pat.arx( baseSave ));
			mov( pat.arx( startPosn ), ebx);
			pop( pat.oneOrMorePatBase );

			// Restore EBP and be gone.
			
			mov( [ebp], ebp );


	#endmacro



    ////////////////////////////////////////////////////////////////////////////

	#macro match( _m_matchparms_[] ):
		_m_failAdrs_, 
		_m_successAdrs_, 
		_m_only1Fail_,
		_m_parm0_,
		_m_parm1_;
		
		// The following local is used to enforce the
		// presence of exactly one failure section.

		?_m_only1Fail_ := false;


		// Because of alternation, we may need more that one
		// failure address (since, for each alternation section,
		// the previous sections must fail to that alternate).
		// Hence, _m_failAdrs_ is a string that we can set to
		// various labels under control of this macro.

		?_m_failAdrs_ := hla.genLabel;

		#if( @elements( _m_matchparms_ ) = 1 )

			// If there is only one parameter,
			// assume that it is a string.

			#if( @baseptype( @text( _m_matchparms_[0] ) ) <> hla.ptString )

				#error( "Expected a string parameter" );

			#endif

			#if( @IsConst( @text( _m_matchparms_[0] ) ))
				lea( esi, @text( _m_matchparms_[0] ) );
			#else
				mov( @text( _m_matchparms_[0] ), esi );
			#endif

			mov( (type str.strRec [esi]).length, edi );
			add( esi, edi );

		#elseif( @elements( _m_matchparms_ ) = 2 )

			?_m_parm0_ := @lowercase( _m_matchparms_[0], 0 );
			?_m_parm1_ := @lowercase( _m_matchparms_[1], 0 );

			#if( _m_parm0_ = "edi" & _m_parm1_ = "esi" )
			
				xchg( esi, edi );
				
			#elseif( _m_parm0_ <> "esi" )

				#if( _m_parm1_ = "esi" )
				
					mov( esi, edi );

				#elseif( _m_parm1_ <> "edi" )

					mov( @text( _m_matchparms_[1]), edi );

				#endif
				mov( @text( _m_matchparms_[0]), esi ); 

			#elseif( _m_parm1_ <> "edi" )

				// Note: at this point parm0 is ESI and
				// parm1 is not EDI.

				mov( @text( _m_matchparms_[1]), edi );

			#endif 


		#else

			#error( "match: Illegal number of parameters" );

		#endif

		push( pat.CleanESP );
		push( pat.FailTo.ebpSave );
		push( pat.FailTo.jmpAdrs );
		push( pat.StrStart );

		mov( esp, pat.CleanESP );
		mov( ebp, pat.FailTo.ebpSave );
		mov( &@text( _m_failAdrs_ ), pat.FailTo.jmpAdrs );
		mov( esi, pat.StrStart );


	#keyword onePat;
	
		pat._onePat_;

	#keyword zeroOrOnePat;
	
		pat._zeroOrOnePat_;

	#keyword zeroOrMorePat;
	
		pat._zeroOrMorePat_;

	#keyword oneOrMorePat;
	
		pat._oneOrMorePat_;

	#keyword EOS( _EOS_accept_zero_parameters_[] );

		#if( _m_only1Fail_ )

			#error( "EOS may not appear in the if_failure section" )

		#endif
		#if( @elements( _EOS_accept_zero_parameters_ ) <> 0 )

			#error( "EOS does not accept any parameters" )

		#endif
		
		if( esi <> edi ) then

			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );		

		endif;

	#keyword failif( _expr_ ):_dont_Fail_;

		#if( _m_only1Fail_ )

			#error( "'failif' may not appear in the if_failure section" )

		#endif
		
		jf( _expr_ ) _dont_Fail_;
		 
			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );		

		_dont_Fail_:

	#keyword position( _m_pos_n_ );

		#if( _m_only1Fail_ )

			#error( "'position' may not appear in the if_failure section" )

		#endif
		
		mov( pat.StrStart, esi );
		add( _m_pos_n_, esi );
		if( esi > edi ) then

			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );		

		endif;

	#keyword atPos( _m_AtPos_n_ );

		#if( _m_only1Fail_ )

			#error( "'AtPos' may not appear in the if_failure section" )

		#endif
		
		mov( pat.StrStart, eax );
		add( _m_AtPos_n_, eax );
		if( eax <> esi ) then

			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );		

		endif;

	#keyword skip( _m_skip_n_ );

		#if( _m_only1Fail_ )

			#error( "'skip' may not appear in the if_failure section" )

		#endif
		
		add( _m_skip_n_, esi );
		if( esi >= edi ) then

			mov( pat.FailTo.ebpSave, ebp );
			jmp( pat.FailTo.jmpAdrs );		

		endif;


	#keyword getPos( _m_getPos_dest_ );

		#if( _m_only1Fail_ )

			#error( "getPos may not appear in the if_failure section" )

		#endif
		
		mov( esi, eax );
		sub( pat.StrStart, eax );
		mov( eax, _m_getPos_dest_ );


	#keyword fail( _p_Fail_accept_zero_parameters_[] );

		#if( @elements( _p_Fail_accept_zero_parameters_ ) <> 0 )

			#error( "Fail does not accept any parameters" );

		#endif
		mov( pat.FailTo.ebpSave, ebp );
		jmp( pat.FailTo.jmpAdrs );
		
	#keyword fence( _p_Fence_accept_zero_parameters_[] );
	
		#if( _m_only1Fail_ )

			#error( "'fence' may not appear in the if_failure section" )

		#endif
		#if( @elements( _p_Fence_accept_zero_parameters_ ) <> 0 )

			#error( "Fence does not accept any parameters" );

		#endif
		
		mov( pat.CleanESP, esp );		
		mov( ebp, pat.FailTo.ebpSave );
		mov( &@text( _m_failAdrs_ ), pat.FailTo.jmpAdrs );

	#keyword alternate;

		jmp _m_successAdrs_;

		@text( _m_failAdrs_ ):
		?_m_failAdrs_ := hla.genLabel;

		mov( pat.CleanESP, esp );
		mov( pat.StrStart, esi );
		mov( &@text( _m_failAdrs_ ), pat.FailTo.jmpAdrs );


	#keyword if_failure;
		
		// The success code falls through to this point.
		// Skip over the failure code.

		jmp _m_successAdrs_;

		#if( _m_only1Fail_ )

			#error( "Extra 'if_failure' section encountered" )

		#endif
		?_m_only1Fail_ := true;
		@text( _m_failAdrs_ ):
		mov( pat.CleanESP, esp );
		pop( pat.StrStart );
		pop( pat.FailTo.jmpAdrs );
		pop( pat.FailTo.ebpSave );
		pop( pat.CleanESP );		

	#terminator endmatch:_em_endofmatch_;

		// "if_failure" has already cleaned up the stack.  Don't
		// do that twice.  Since "if_failure" falls through to this
		// point, just jump over the clean up code.

		jmp _em_endofmatch_;

		#if( !_m_only1Fail_ )

			#error( "Must have a 'if_failure' section" )

		#endif
		_m_successAdrs_:
		mov( pat.CleanESP, esp );
		mov( pat.StrStart, ebx );
		pop( pat.StrStart );
		pop( pat.FailTo.jmpAdrs );
		pop( pat.FailTo.ebpSave );
		pop( pat.CleanESP );		
		_em_endofmatch_:

		// The following forces a semicolon after
		// the endmatch invocation.

		static
			;
		endstatic


	#endmacro


    ////////////////////////////////////////////////////////////////////////////
	//
	// Accessor routines for the WordDelims and WhiteSpace character sets:

	proc
	
		getWordDelims:
			procedure( var cst:cset );
			@global:_hla._ext( "PAT_GETWORDDELIMS" );
			
		setWordDelims:
			procedure( cst:cset); @global:_hla._ext( "PAT_SETWORDDELIMS" );

		getWhiteSpace:
			procedure( var cst:cset );
			@global:_hla._ext( "PAT_GETWHITESPACE" );
			
		setWhiteSpace:
			procedure( cst:cset);
			@global:_hla._ext( "PAT_SETWHITESPACE" );


		// Pattern matching procedures:

		peekCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_PEEKCSET" );
			
		oneCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_ONECSET" );
			
		upToCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_UPTOCSET" );

		zeroOrOneCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_ZEROORONECSET" );
			
		l_ZeroOrOneCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_LZEROORONECSET" );
			

		zeroOrMoreCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_ZEROORMORECSET" );
			
		l_ZeroOrMoreCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_LZEROORMORECSET" );

		oneOrMoreCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_ONEORMORECSET" );
			
		l_OneOrMoreCset:
			procedure( cst:cset );
			@global:_hla._ext( "PAT_LONEORMORECSET" );

		exactlyNCset:
			procedure( cst:cset; n:uns32 );
			@global:_hla._ext( "PAT_EXACTLYNCSET" );

		firstNCset:
			procedure( cst:cset; n:uns32 );
			@global:_hla._ext( "PAT_FIRSTNCSET" );

		norLessCset:
			procedure( cst:cset; n:uns32 );
			@global:_hla._ext( "PAT_NORLESSCSET" );
			
		l_NorLessCset:
			procedure( cst:cset; n:uns32 );
			@global:_hla._ext( "PAT_LNORLESSCSET" );

		norMoreCset:
			procedure( cst:cset; n:uns32 );
			@global:_hla._ext( "PAT_NORMORECSET" );
			
		l_NorMoreCset:
			procedure( cst:cset; n:uns32 );
			@global:_hla._ext( "PAT_LNORMORECSET" );

		ntoMCset:
			procedure( cst:cset; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_NTOMCSET" );
			
		l_NtoMCset:
			procedure( cst:cset; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_LNTOMCSET" );

		exactlyNtoMCset:
			procedure( cst:cset; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_EXACTLYNTOMCSET" );
			
		l_ExactlyNtoMCset:
			procedure( cst:cset; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_LEXACTLYNTOMCSET" );



		// Character matching routines.

		peekChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_PEEKCHAR" );
			
		oneChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ONECHAR" );

		upToChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_UPTOCHAR" );

		zeroOrOneChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ZEROORONECHAR" );
			
		l_ZeroOrOneChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_LZEROORONECHAR" );

		zeroOrMoreChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ZEROORMORECHAR" );
			
		l_ZeroOrMoreChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_LZEROORMORECHAR" );

		oneOrMoreChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ONEORMORECHAR" );
			
		l_OneOrMoreChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_LONEORMORECHAR" );

		exactlyNChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_EXACTLYNCHAR" );
			
		firstNChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_FIRSTNCHAR" );

		norLessChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_NORLESSCHAR" );
			
		l_NorLessChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_LNORLESSCHAR" );

		norMoreChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_NORMORECHAR" );
			
		l_NorMoreChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_LNORMORECHAR" );

		ntoMChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_NTOMCHAR" );
			
		l_NtoMChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_LNTOMCHAR" );

		exactlyNtoMChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_EXACTLYNTOMCHAR" );

		l_ExactlyNtoMChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_LEXACTLYNTOMCHAR" );




		// Case insensitive Character matching routines.

		peekiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_PEEKICHAR" );
			
		oneiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ONEICHAR" );

		upToiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_UPTOICHAR" );

		zeroOrOneiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ZEROORONEICHAR" );
			
		l_ZeroOrOneiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_LZEROORONEICHAR" );

		zeroOrMoreiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ZEROORMOREICHAR" );
			
		l_ZeroOrMoreiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_LZEROORMOREICHAR" );

		oneOrMoreiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_ONEORMOREICHAR" );
			
		l_OneOrMoreiChar:
			procedure( c:char );
			@global:_hla._ext( "PAT_LONEORMOREICHAR" );

		exactlyNiChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_EXACTLYNICHAR" );

		firstNiChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_FIRSTNICHAR" );

		norLessiChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_NORLESSICHAR" );

		l_NorLessiChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_LNORLESSICHAR" );

		norMoreiChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_NORMOREICHAR" );
			
		l_NorMoreiChar:
			procedure( c:char; n:uns32 );
			@global:_hla._ext( "PAT_LNORMOREICHAR" );

		ntoMiChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_NTOMICHAR" );

		l_NtoMiChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_LNTOMICHAR" );

		exactlyNtoMiChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "PAT_EXACTLYNTOMICHAR" );

		l_ExactlyNtoMiChar:
			procedure( c:char; n:uns32; m:uns32 );
			@global:_hla._ext( "pat_lExactlyNtoMiChar" );

		
		// String matching procedures:

		matchStr:
			procedure( s:string );
			@global:_hla._ext( "PAT_MATCHSTR" );
			
		matchToStr:
			procedure( s:string );
			@global:_hla._ext( "PAT_MATCHTOSTR" );
			
		upToStr:
			procedure( s:string );
			@global:_hla._ext( "PAT_UPTOSTR" );
			
		matchiStr:
			procedure( s:string );
			@global:_hla._ext( "PAT_MATCHISTR" );
			
		matchToiStr:
			procedure( s:string );
			@global:_hla._ext( "PAT_MATCHTOISTR" );
			
		upToiStr:
			procedure( s:string );
			@global:_hla._ext( "PAT_UPTOISTR" );

		matchWord:
			procedure( s:string );
			@global:_hla._ext( "PAT_MATCHWORD" );
			
		matchiWord:
			procedure( s:string );
			@global:_hla._ext( "PAT_MATCHIWORD" );

		// String extraction procedures.

		extract:
			procedure( s:string );
			@global:_hla._ext( "PAT_EXRACT" );
			
		a_extract:
			procedure( var s:string );
			@global:_hla._ext( "PAT_AEXTRACT" );



		// Whitespace and end of string matching procedures:

		zeroOrMoreWS:
			procedure;
			@global:_hla._ext( "PAT_ZEROORMOREWS" );
			
		oneOrMoreWS:
			procedure;
			@global:_hla._ext( "PAT_ONEORMOREWS" );
			
		WSorEOS:
			procedure;
			@global:_hla._ext( "PAT_WSOREOS" );
			
		WSthenEOS:
			procedure;
			@global:_hla._ext( "PAT_WSTHENEOS" );
			
		peekWS:
			procedure;
			@global:_hla._ext( "PAT_PEEKWS" );
			
		peekWSorEOS:
			procedure;
			@global:_hla._ext( "PAT_PEEKWSOREOS" );


		// Match an arbitrary sequence of chars:

		arb:
			procedure;
			@global:_hla._ext( "PAT_ARB" );
			
		l_arb:
			procedure;
			@global:_hla._ext( "PAT_LARB" );


end pat;

#endif

