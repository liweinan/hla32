#if( ! @defined( fileio_hhf ))
?fileio_hhf := true;

#includeOnce( "os.hhf" )
#includeOnce( "hla.hhf" )
#includeOnce( "stdio.hhf" )


/*********************************************************************/
/*                                                                   */
/* 	                                                                 */
/* 	fileio namespace                                                 */
/* 	                                                                 */
/* 	                                                                 */
/*********************************************************************/

const
	_fileio_save_enumSize_ := @enumSize;
	
namespace fileio; @fast;

type
	?@enumSize := 4;
	
	accessMode	:enum
				{ 
					r,		// Open file for reading. 
					w, 		// Open file for writing.
					rw, 	// Open file for reading and writing.
					a 		// Open file for append (write)
				};
	
	seekPosns	:enum{ fromBOF, curPosn, fromEOF };
	
	?@enumSize := @global:_fileio_save_enumSize_;	


proc

	open:
		procedure( FileName: string; Access:accessMode ){@returns( "eax" )}; 
			@global:_hla._ext( "FILEIO_OPEN" );


	openNew:
		procedure( FileName: string ){@returns( "eax" )}; 
		@global:_hla._ext( "FILEIO_OPENNEW" );

	close:
		procedure( Handle:dword );
		@global:_hla._ext( "FILEIO_CLOSE" );

	flush:
		procedure( Handle:dword );
		@global:_hla._ext( "FILEIO_FLUSH" );


	eof:
		procedure( Handle:dword ) {@returns( "al" )}; 
		@global:_hla._ext( "FILEIO_EOF" );


	write:
		procedure( Handle:dword; var buffer:var; count:uns32 );
		@global:_hla._ext( "FILEIO_WRITE" );

	read:
		procedure( Handle:dword; var buffer:var; count:uns32 ){@returns( "eax" )}; 
		@global:_hla._ext( "FILEIO_READ" );

	rewind:
		procedure( Handle:dword );
		@global:_hla._ext( "FILEIO_REWIND" );

	append:
		procedure( Handle:dword );
		@global:_hla._ext( "FILEIO_APPEND" );

	position:
		procedure( Handle:dword ) {@returns( "edx:eax" )}; 
		@global:_hla._ext( "FILEIO_POSITION" );

	
	#macro seek( parms[] );
 
		hla.overload( parms )
		
			hla.signature( @global:fileio.seek2d(dword, dword) )
			hla.signature( @global:fileio.seek3d(dword, dword, seekPosns) )
			hla.signature( @global:fileio.seek3q(dword, qword, seekPosns) )
			hla.signature( @global:fileio.seek4(dword, dword, dword, seekPosns ) )
			
		hla.endoverload
		
	#endmacro
	
	#macro seek2d( h, d );
	
		@global:fileio.seek4( h, 0, d, @global:fileio.fromBOF )
		
	#endmacro
	
	#macro seek3d( h, d, f );
	
		@global:fileio.seek4( h, 0, d, f )
		
	#endmacro
	
	seek3q:
		procedure( Handle:dword; posn:qword; from:seekPosns ) 
			{@returns( "edx:eax" )}; 
		@global:_hla._ext( "FILEIO_SEEK4" );
		 
	seek4:
		procedure
		( 
			Handle	:dword; 
			HOposn	:dword; 
			LOposn	:dword; 
			from	:seekPosns 
		) {@returns( "edx:eax" )}; 
		@global:_hla._ext( "FILEIO_SEEK4" );
		
		
		
		

	truncate:
		procedure( Handle:dword ){@returns( "eax" )}; 
		@global:_hla._ext( "FILEIO_TRUNCATE" );


		



	/*
	** File output routines:
	*/

	putc:
		procedure( Handle:dword; c:char );
			@global:_hla._ext( "FILEIO_PUTC" );

	putcSize:
		procedure
		( 
			Handle:dword; 
			c:char; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "FILEIO_PUTCSIZE" );


	newln:
		procedure( Handle:dword );
		@global:_hla._ext( "FILEIO_NEWLN" );


	putbool:
		procedure( Handle:dword; b:boolean );
		@global:_hla._ext( "FILEIO_PUTBOOL" );

	putcset:
		procedure( Handle:dword; cs:cset   );
		@global:_hla._ext( "FILEIO_PUTCSET" );


	putz:
		procedure( Handle:dword; zs:zstring  );
		@global:_hla._ext( "FILEIO_PUTZ" );

	puts:
		procedure( Handle:dword; s:string  );
		@global:_hla._ext( "FILEIO_PUTS" );

	putsSize:
		procedure
		( 
			Handle:dword; 
			s:string; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "FILEIO_PUTSSIZE" );

	putzSize:
		procedure
		( 
			Handle	:dword; 
			zs		:zstring; 
			width	:int32; 
			fill	:char 
		);
		@global:_hla._ext( "FILEIO_PUTZSIZE" );


	putb:
		procedure( Handle:dword; h:byte );
		@global:_hla._ext( "FILEIO_PUTB" );

	putw:
		procedure( Handle:dword; w:word );
		@global:_hla._ext( "FILEIO_PUTW" );

	putd:
		procedure( Handle:dword; dw:dword );
		@global:_hla._ext( "FILEIO_PUTD" );

	putq:
		procedure( Handle:dword; qw:qword );
		@global:_hla._ext( "FILEIO_PUTQ" );

	puttb:
		procedure( Handle:dword; tb:tbyte );
		@global:_hla._ext( "FILEIO_PUTTB" );

	putl:
		procedure( Handle:dword; l:lword );
		@global:_hla._ext( "FILEIO_PUTL" );



	putbin8:
		procedure( Handle:dword; b:byte );
		@global:_hla._ext( "FILEIO_PUTBIN8" );


	puth8:
		procedure( Handle:dword; b:byte );
		@global:_hla._ext( "FILEIO_PUTH8" );

	puth16:
		procedure( Handle:dword; w:word );
		@global:_hla._ext( "FILEIO_PUTH16" );

	puth32:
		procedure( Handle:dword; d:dword );
		@global:_hla._ext( "FILEIO_PUTH32" );

	puth64:
		procedure( Handle:dword; q:qword );
		@global:_hla._ext( "FILEIO_PUTH64" );

	puth80:
		procedure( Handle:dword; tb:tbyte );
		@global:_hla._ext( "FILEIO_PUTH80" );

	puth128:
		procedure( Handle:dword; l:lword );
		@global:_hla._ext( "FILEIO_PUTH128" );



	putbSize:
		procedure( Handle:dword; b:byte; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH8SIZE" );

	putwSize:
		procedure( Handle:dword; w:word; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH16SIZE" );

	putdSize:
		procedure( Handle:dword; d:dword; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH32SIZE" );

	putqSize:
		procedure( Handle:dword; q:qword; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH64SIZE" );

	puttbSize:
		procedure( Handle:dword; tb:tbyte; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH80SIZE" );

	putlSize:
		procedure( Handle:dword; l:lword; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH128SIZE" );



	puth8Size:
		procedure( Handle:dword; b:byte; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH8SIZE" );

	puth16Size:
		procedure( Handle:dword; w:word; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH16SIZE" );

	puth32Size:
		procedure( Handle:dword; d:dword; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH32SIZE" );

	puth64Size:
		procedure( Handle:dword; q:qword; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH64SIZE" );

	puth80Size:
		procedure( Handle:dword; tb:tbyte; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH80SIZE" );

	puth128Size:
		procedure( Handle:dword; l:lword; width:dword; fill:char );
		@global:_hla._ext( "FILEIO_PUTH128SIZE" );




	puti8Size:
		procedure ( Handle:dword; b:byte;  width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTI8SIZE" );

	puti16Size:
		procedure( Handle:dword; w:word;  width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTI16SIZE" );

	puti32Size:
		procedure( Handle:dword; d:dword; width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTI32SIZE" );

	puti64Size:
		procedure( Handle:dword; q:qword; width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTI64SIZE" );

	puti128Size:
		procedure( Handle:dword; l:lword; width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTI128SIZE" );


	
	puti8:
		procedure ( Handle:dword; b:byte  );
		@global:_hla._ext( "FILEIO_PUTI8" );

	puti16:
		procedure( Handle:dword; w:word  );
		@global:_hla._ext( "FILEIO_PUTI16" );

	puti32:
		procedure( Handle:dword; d:dword );
		@global:_hla._ext( "FILEIO_PUTI32" );

	puti64:
		procedure( Handle:dword; q:qword );
		@global:_hla._ext( "FILEIO_PUTI64" );

	puti128:
		procedure( Handle:dword; l:lword );
		@global:_hla._ext( "FILEIO_PUTI128" );



	putu8Size:
		procedure( Handle:dword; b:byte; width:int32;   fill:char );
		@global:_hla._ext( "FILEIO_PUTU8SIZE" );
	
	putu16Size:
		procedure( Handle:dword; w:word; width:int32;  fill:char );
		@global:_hla._ext( "FILEIO_PUTU16SIZE" );

	putu32Size:
		procedure( Handle:dword; d:dword; width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTU32SIZE" );

	putu64Size:
		procedure( Handle:dword; q:qword; width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTU64SIZE" );

	putu128Size:
		procedure( Handle:dword; l:lword; width:int32; fill:char );
		@global:_hla._ext( "FILEIO_PUTU128SIZE" );

	
	
	
	putu8:
		procedure ( Handle:dword; b:byte  );
		@global:_hla._ext( "FILEIO_PUTU8" );

	putu16:
		procedure( Handle:dword; w:word  );
		@global:_hla._ext( "FILEIO_PUTU16" );

	putu32:
		procedure( Handle:dword; d:dword );
		@global:_hla._ext( "FILEIO_PUTU32" );

	putu64:
		procedure( Handle:dword; q:qword );
		@global:_hla._ext( "FILEIO_PUTU64" );

	putu128:
		procedure( Handle:dword; l:lword );
		@global:_hla._ext( "FILEIO_PUTU128" );



	pute80:
		procedure( Handle:dword; e80:real80; width:uns32 );
		@global:_hla._ext( "FILEIO_PUTE80" );

	pute64:
		procedure( Handle:dword; e64:real64; width:uns32 );
		@global:_hla._ext( "FILEIO_PUTE64" );

	pute32:
		procedure( Handle:dword; e32:real32; width:uns32 );
		@global:_hla._ext( "FILEIO_PUTE32" );


	putr80:
		procedure
		(
			Handle	:dword; 
			r		:real80; 
			width	:uns32; 
			decpts	:uns32; 
			pad:char 
		);
		@global:_hla._ext( "FILEIO_PUTR80" );


	putr64:
		procedure
		( 
			Handle	:dword; 
			r		:real64; 
			width	:uns32; 
			decpts	:uns32; 
			pad		:char 
		);
		@global:_hla._ext( "FILEIO_PUTR64" );


	putr32:
		procedure
		( 
			Handle	:dword; 
			r		:real32; 
			width	:uns32; 
			decpts	:uns32; 
			pad		:char 
		);
		@global:_hla._ext( "FILEIO_PUTR32" );	 
			





	readLn:
		procedure( Handle:dword );
		@global:_hla._ext( "FILEIO_READLN" );

	eoln:
		procedure( Handle:dword ) {@returns( "al" )}; 
		@global:_hla._ext( "FILEIO_EOLN" );


	getc:
		procedure( Handle:dword in eax ) {@returns( "AL" )}; 
		@global:_hla._ext( "FILEIO_GETC" );

	gets:
		procedure( Handle:dword; s:string );
		@global:_hla._ext( "FILEIO_GETS" );

	a_gets:
		procedure( Handle:dword in eax );
		@global:_hla._ext( "FILEIO_A_GETS" );


	geti8:
		procedure( Handle:dword in eax ) {@returns( "al" )}; 
		@global:_hla._ext( "FILEIO_GETI8" );

	geti16:
		procedure( Handle:dword in eax ) {@returns( "ax" )}; 
		@global:_hla._ext( "FILEIO_GETI16" );

	geti32:
		procedure( Handle:dword in eax ){@returns( "eax" )}; 
		@global:_hla._ext( "FILEIO_GETI32" );

	geti64:
		procedure( _Handle:dword in eax ) {@returns( "edx:eax" )}; 
		@global:_hla._ext( "FILEIO_GETI64" );

	geti128:
		procedure( Handle:dword; var dest:lword );
		@global:_hla._ext( "FILEIO_GETI128" );


	getu8:
		procedure( Handle:dword in eax ) {@returns( "al" )}; 
		@global:_hla._ext( "FILEIO_GETU8" );

	getu16:
		procedure( Handle:dword in eax ) {@returns( "ax" )}; 
		@global:_hla._ext( "FILEIO_GETU16" );

	getu32:
		procedure( _Handle:dword in eax ){@returns( "eax" )}; 
		@global:_hla._ext( "FILEIO_GETU32" );

	getu64:
		procedure( Handle:dword ) {@returns( "edx:eax" )}; 
		@global:_hla._ext( "FILEIO_GETU64" );

	getu128:
		procedure( Handle:dword; var dest:lword );
		@global:_hla._ext( "FILEIO_GETU128" );


	geth8:
		procedure( Handle:dword in eax ) {@returns( "al" )}; 
		@global:_hla._ext( "FILEIO_GETH8" );

	geth16:
		procedure( Handle:dword in eax ) {@returns( "ax" )}; 
		@global:_hla._ext( "FILEIO_GETH16" );

	geth32:
		procedure( Handle:dword in eax ){@returns( "eax" )}; 
		@global:_hla._ext( "FILEIO_GETH32" );

	geth64:
		procedure( Handle:dword in eax ) {@returns( "edx:eax" )}; 
		@global:_hla._ext( "FILEIO_GETH64" );

	geth128:
		procedure( Handle:dword; var dest:lword );
		@global:_hla._ext( "FILEIO_GETH128" );


	getf:
		procedure( Handle:dword ) {@returns( "st0" )}; 
		@global:_hla._ext( "FILEIO_GETF" );



	// The following macros provide the same interface to pute32, pute64,
	// and pute80 as the plain (without size/fill char) integer output
	// routines:
		
	
	#macro _pute80( _pute80_h_, _pute80_r_ );
	
		@global:fileio.pute80( _pute80_h_, _pute80_r_, 28 )
		
	#endmacro

	#macro _pute64( _pute64_h_, _pute64_r_ );
	
		@global:fileio.pute64( _pute64_h_, _pute64_r_, 22 )
		
	#endmacro

	#macro _pute32( _pute32_h_, _pute32_r_ );
	
		@global:fileio.pute32( _pute32_h_, _pute32_r_, 15 )
		
	#endmacro


	// The following macros provide the same interface (for the PUT macro)
	// as the integerSize functions:
	
	#macro pute80_( _pute80_h_, _pute80_r_, _pute80_w_, f );
	
		@global:fileio.pute80( _pute80_h_, _pute80_r_, _pute80_w_ )
		
	#endmacro


	#macro pute64_( _pute64_h_, _pute64_r_, _pute64_w_, _pute64_f_ );
	
		@global:fileio.pute64( _pute64_h_, _pute64_r_, _pute64_w_ )
		
	#endmacro


	#macro pute32_( _pute32_h_, _pute32_r_, _pute32_w_, _pute32_f_ );
	
		@global:fileio.pute32( _pute32_h_, _pute32_r_, _pute32_w_ )
		
	#endmacro






const
	validPutType :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:true,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:true,		// tUns8,		//3
			@global:true,		// tUns16,		//4
			@global:true,		// tUns32,		//5
			@global:true,		// tUns64,		//6
			@global:true,		// tUns128,		//7
			@global:true,		// tByte,		//8
			@global:true,		// tWord,		//9
			@global:true,		// tDWord,		//10
			@global:true,		// tQWord,		//11
			@global:true,		// tTByte,		//12
			@global:true,		// tLWord,		//13
			@global:true,		// tInt8,		//14
			@global:true,		// tInt16,		//15
			@global:true,		// tInt32,		//16
			@global:true,		// tInt64,		//17
			@global:true,		// tInt128,		//18
			@global:true,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:true,		// tString,		//25
			@global:true,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:true,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tRegEx		//32
			@global:true,		// tClass,		//33
			@global:false,		// tProcptr,	//34
			@global:false,		// tThunk,		//35
			@global:true,		// tPointer		//36
			@global:false,		// tLabel		//37
			@global:false,		// tProc		//38
			@global:false,		// tMethod		//39
			@global:false,		// tClassProc	//40
			@global:false,		// tClassIter	//41
			@global:false,		// tIterator	//42
			@global:false,		// tProgram		//43
			@global:false,		// tMacro		//44
			@global:false,		// tOverloads	//45
			@global:false,		// tText		//46
			@global:false,		// tRegExMac	//47
			@global:false,		// tNamespace	//48
			@global:false,		// tSegment		//49
			@global:false,		// tAnonRec		//50
			@global:false,		// tAnonUnion	//51
			@global:false,		// tVariant		//52
			@global:false		// tError		//53
		];

	validPutSizeType :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:true,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:true,		// tUns8,		//3
			@global:true,		// tUns16,		//4
			@global:true,		// tUns32,		//5
			@global:true,		// tUns64,		//6
			@global:true,		// tUns128,		//7
			@global:true,		// tByte,		//8
			@global:true,		// tWord,		//9
			@global:true,		// tDWord,		//10
			@global:true,		// tQWord,		//11
			@global:true,		// tTByte,		//12
			@global:true,		// tLWord,		//13
			@global:true,		// tInt8,		//14
			@global:true,		// tInt16,		//15
			@global:true,		// tInt32,		//16
			@global:true,		// tInt64,		//17
			@global:true,		// tInt128,		//18
			@global:true,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:true,		// tString,		//25
			@global:true,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:false,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tRegEx		//32
			@global:false,		// tClass,		//33
			@global:false,		// tProcptr,	//34
			@global:false,		// tThunk,		//35
			@global:true,		// tPointer		//36
			@global:false,		// tLabel		//37
			@global:false,		// tProc		//38
			@global:false,		// tMethod		//39
			@global:false,		// tClassProc	//40
			@global:false,		// tClassIter	//41
			@global:false,		// tIterator	//42
			@global:false,		// tProgram		//43
			@global:false,		// tMacro		//44
			@global:false,		// tOverloads	//45
			@global:false,		// tText		//46
			@global:false,		// tRegExMac	//47
			@global:false,		// tNamespace	//48
			@global:false,		// tSegment		//49
			@global:false,		// tAnonRec		//50
			@global:false,		// tAnonUnion	//51
			@global:false,		// tVariant		//52
			@global:false		// tError		//53
		];										  




	validPutSize2Type :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:false,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:false,		// tUns8,		//3
			@global:false,		// tUns16,		//4
			@global:false,		// tUns32,		//5
			@global:false,		// tUns64,		//6
			@global:false,		// tUns128,		//7
			@global:false,		// tByte,		//8
			@global:false,		// tWord,		//9
			@global:false,		// tDWord,		//10
			@global:false,		// tQWord,		//11
			@global:false,		// tTByte,		//12
			@global:false,		// tLWord,		//13
			@global:false,		// tInt8,		//14
			@global:false,		// tInt16,		//15
			@global:false,		// tInt32,		//16
			@global:false,		// tInt64,		//17
			@global:false,		// tInt128,		//18
			@global:false,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:false,		// tString,		//25
			@global:false,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:false,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tRegEx		//32
			@global:false,		// tClass,		//33
			@global:false,		// tProcptr,	//34
			@global:false,		// tThunk,		//35
			@global:false,		// tPointer		//36
			@global:false,		// tLabel		//37
			@global:false,		// tProc		//38
			@global:false,		// tMethod		//39
			@global:false,		// tClassProc	//40
			@global:false,		// tClassIter	//41
			@global:false,		// tIterator	//42
			@global:false,		// tProgram		//43
			@global:false,		// tMacro		//44
			@global:false,		// tOverloads	//45
			@global:false,		// tText		//46
			@global:false,		// tRegExMac	//47
			@global:false,		// tNamespace	//48
			@global:false,		// tSegment		//49
			@global:false,		// tAnonRec		//50
			@global:false,		// tAnonUnion	//51
			@global:false,		// tVariant		//52
			@global:false		// tError		//53
		];										  



	putFunc :string[ @global:hla.sizePTypes ] :=
		[
			"",				// Undefined
			"putbool",		// tBoolean 	//1
			"",				// enum			//2
			"putu8",		// tUns8,		//3
			"putu16",		// tUns16,		//4
			"putu32",		// tUns32,		//5
			"putu64",		// tUns64,		//6
			"putu128",		// tUns128,		//7
			"putb",			// tByte,		//8
			"putw",			// tWord,		//9
			"putd",			// tDWord,		//10
			"putq",			// tQWord,		//11
			"puttb",		// tLWord,		//12
			"putl",			// tLWord,		//13
			"puti8",		// tInt8,		//14
			"puti16",		// tInt16,		//15
			"puti32",		// tInt32,		//16
			"puti64",		// tInt64,		//17
			"puti128",		// tInt128,		//18
			"putc",			// tChar, 		//19
			"",				// tWChar,		//20
			"_pute32",		// tReal32,		//21
			"_pute64",		// tReal64, 	//22
			"_pute80",		// tReal80,		//23
			"",				// tReal128,	//24
			"puts",			// tString,		//25
			"putz",			// tZString,	//26
			"",				// tWString,	//27
			"putcset",		// tCset,		//28
			"",				// tArray,		//29
			"",				// tRecord,		//30
			"",				// tUnion,		//31
			"",				// tRegEx		//32
			"",				// tClass,		//33
			"",				// tProcptr,	//34
			"",				// tThunk,		//35
			"putd",			// tPointer		//36
			"",				// tLabel		//37
			"",				// tProc		//38
			"",				// tMethod		//39
			"",				// tClassProc	//40
			"",				// tClassIter	//41
			"",				// tIterator	//42
			"",				// tProgram		//43
			"",				// tMacro		//44
			"",				// tOverloads	//45
			"",				// tText		//46
			"",				// tRegExMac	//47
			"",				// tNamespace	//48
			"",				// tSegment		//49
			"",				// tAnonRec		//50
			"",				// tAnonUnion	//51
			"",				// tVariant		//52
			""				// tError		//53
		];


	putSizeFunc :string[ @global:hla.sizePTypes ] :=
		[
			"",					// Undefined
			"putboolSize",		// tBoolean 	//1
			"",					// enum			//2
			"putu8Size",		// tUns8,		//3
			"putu16Size",		// tUns16,		//4
			"putu32Size",		// tUns32,		//5
			"putu64Size",		// tUns64,		//6
			"putu128Size",		// tUns128,		//7
			"puth8Size",		// tByte,		//8
			"puth16Size",		// tWord,		//9
			"puth32Size",		// tDWord,		//10
			"puth64Size",		// tQWord,		//11
			"puth80Size",		// tLWord,		//12
			"puth128Size",		// tLWord,		//13
			"puti8Size",		// tInt8,		//14
			"puti16Size",		// tInt16,		//15
			"puti32Size",		// tInt32,		//16
			"puti64Size",		// tInt64,		//17
			"puti128Size",		// tInt128,		//18
			"putcSize",			// tChar, 		//19
			"",					// tWChar,		//20
			"pute32_",			// tReal32,		//21
			"pute64_",			// tReal64, 	//22
			"pute80_",			// tReal80,		//23
			"",					// tReal128,	//24
			"putsSize",			// tString,		//25
			"putzSize",			// tZString,	//26
			"",					// tWString,	//27
			"",					// tCset,		//28
			"",					// tArray,		//29
			"",					// tRecord,		//30
			"",					// tUnion,		//31
			"",					// tRegEx		//32
			"",					// tClass,		//33
			"",					// tProcptr,	//34
			"",					// tThunk,		//35
			"puth32Size",		// tPointer		//36
			"",					// tLabel		//37
			"",					// tProc		//38
			"",					// tMethod		//39
			"",					// tClassProc	//40
			"",					// tClassIter	//41
			"",					// tIterator	//42
			"",					// tProgram		//43
			"",					// tMacro		//44
			"",					// tOverloads	//45
			"",					// tText		//46
			"",					// tRegExMac	//47
			"",					// tNamespace	//48
			"",					// tSegment		//49
			"",					// tAnonRec		//50
			"",					// tAnonUnion	//51
			"",					// tVariant		//52
			""					// tError		//53
		];										  


	putSize2Func :string[ @global:hla.sizePTypes ] :=
		[
			"",					// Undefined
			"",					// tBoolean 	//1
			"",					// enum			//2
			"",					// tUns8,		//3
			"",					// tUns16,		//4
			"",					// tUns32,		//5
			"",					// tUns64,		//6
			"",					// tUns128,		//7
			"",					// tByte,		//8
			"",					// tWord,		//9
			"",					// tDWord,		//10
			"",					// tQWord,		//11
			"",					// tLWord,		//12
			"",					// tLWord,		//13
			"",					// tInt8,		//14
			"",					// tInt16,		//15
			"",					// tInt32,		//16
			"",					// tInt64,		//17
			"",					// tInt128,		//18
			"",					// tChar, 		//19
			"",					// tWChar,		//20
			"putr32",			// tReal32,		//21
			"putr64",			// tReal64, 	//22
			"putr80",			// tReal80,		//23
			"",					// tReal128,	//24
			"",					// tString,		//25
			"",					// tZString,	//26
			"",					// tWString,	//27
			"",					// tCset,		//28
			"",					// tArray,		//29
			"",					// tRecord,		//30
			"",					// tUnion,		//31
			"",					// tRegEx		//32
			"",					// tClass,		//33
			"",					// tProcptr,	//34
			"",					// tThunk,		//35
			"",					// tPointer		//36
			"",					// tLabel		//37
			"",					// tProc		//38
			"",					// tMethod		//39
			"",					// tClassProc	//40
			"",					// tClassIter	//41
			"",					// tIterator	//42
			"",					// tProgram		//43
			"",					// tMacro		//44
			"",					// tOverloads	//45
			"",					// tText		//46
			"",					// tRegExMac	//47
			"",					// tNamespace	//48
			"",					// tSegment		//49
			"",					// tAnonRec		//50
			"",					// tAnonUnion	//51
			"",					// tVariant		//52
			""					// tError		//53
		];										  



	val
		_v_ 		:string;
		_curparm_	:string;

	#macro put( _ileVar_, _parameters_[] ); 

		?@global:fileio._v_ := @string:_ileVar_;
		#for( @global:fileio._curparm_ in _parameters_ )

			@global:hla.put
			( 
				fileio, 
				@global:fileio._v_, 
				@eval(@global:fileio._curparm_) 
			)

		#endfor

	#endmacro





	/*
	** GET macro for file input.
	*/



	#macro get( _get_fileVar_, _parms_[] ): 
		_curparm_, _pType_, _arg_, _id_, _tempid_, _saveTrace_;

		?_saveTrace_ := @trace;
		?@trace := false;
		
		?_curparm_:uns32 := 0;
		
		// Save important registers that the "GET" macro uses.

		push( eax );

		// The following loop repeats once for each GET parameter
		// we process.

		#while( _curparm_ < @elements( _parms_ ))

			// If this parameter begins with an identifier,
			// there are some problems to deal with.
			// The symbol table functions (e.g., @ptype) don't
			// allow address expression components after the
			// symbol name.  Named constants, however, do allow
			// such entities.  The following code determines
			// (1) is this a symbol?  (2) if it is a symbol, is
			// it a constant?
			//
			//	For non-constant symbols, we need to strip any
			// trailing non-symbol characters from the string
			// (e.g., "[0]" ).

			?_arg_ := @trim( _parms_[ _curparm_ ], 0 );
			#if( char( _arg_ ) in stdio._idchars_ )

				// If this parameter begins with an id character,
				// then strip away any non-ID symbols from the
				// end of the string.  Then determine if we've
				// got a constant or some other class (e.g.,
				// variable or procedure).  If not a constant,
				// keep only the name.  If a constant, we need
				// to keep all trailing characters as well.

				?_id_ := stdio._GetID_( _arg_ );
				#if
				( 
						@class( @text( _id_ )) = hla.cConstant 
					|	@class( @text( _id_ )) = hla.cValue 
				)

					?_id_ := _arg_;

				#endif

			#else

				// If it's not an ID, we need to keep everything.

				?_id_ := _arg_;

			#endif



			// Determine the type of this parameter so we can
			// call the appropriate routine to input it.

			?_pType_ := @pType( @text( _id_ ));
			?_tempid_ := _id_;
			#while( _pType_ = hla.ptArray )

				?_tempid_ := @typename( @text( _tempid_ ));
				?_pType_ := @pType( @text( _tempid_ ));

			#endwhile

			// Based on the type, call the appropriate library
			// routine to print this value.

			#if( _pType_ = hla.ptBoolean )

				#error( "Boolean input is not supported" );

			#elseif( _pType_ = hla.ptUns8 ) 
				
				fileio.getu8( _get_fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptUns16 ) 
				
				fileio.getu16( _get_fileVar_ );
				#if( _arg_ = "ax" )

					mov( ax, [esp] );

				#else

					mov( ax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptUns32 ) 
				
				fileio.getu32( _get_fileVar_ );
				#if( _arg_ = "eax" )

					mov( eax, [esp] );

				#else

					mov( eax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptUns64 ) 
				
				push( edx );
				fileio.getu64( _get_fileVar_ );
				mov( eax, @text( "(type dword " + _arg_ + ")" ));
				mov( edx, @text( "(type dword " + _arg_ + "[4])" ));
				pop( edx );

			#elseif( _pType_ = hla.ptUns128 ) 
				
				fileio.getu128( _get_fileVar_, @text( _arg_ ) );

			#elseif( _pType_ = hla.ptByte ) 
				
				fileio.geth8( _get_fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptWord ) 
				
				fileio.geth16( _get_fileVar_ );
				#if( _arg_ = "ax" )

					mov( ax, [esp] );

				#else

					mov( ax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptDWord ) 
				
				fileio.geth32( _get_fileVar_ );
				#if( _arg_ = "eax" )

					mov( eax, [esp] );

				#else

					mov( eax, @text( _arg_ ));

				#endif


			#elseif( _pType_ = hla.ptQWord ) 
				
				push( edx );
				fileio.geth64( _get_fileVar_ );
				mov( eax, @text( "(type dword " + _arg_ + ")" ));
				mov( edx, @text( "(type dword " + _arg_ + "[4])" ));
				pop( edx );
				
			#elseif( _pType_ = hla.ptLWord ) 
				
				fileio.geth128( _get_fileVar_, @text( _arg_ ) );

			#elseif( _pType_ = hla.ptInt8 ) 
				
				fileio.geti8( _get_fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptInt16 ) 
				
				fileio.geti16( _get_fileVar_ );
				#if( _arg_ = "ax" )

					mov( ax, [esp] );

				#else

					mov( ax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptInt32 ) 
				
				fileio.geti32( _get_fileVar_ );
				#if( _arg_ = "eax" )

					mov( eax, [esp] );

				#else

					mov( eax, @text( _arg_ ));

				#endif


			#elseif( _pType_ = hla.ptInt64 ) 
				
				push( edx );
				fileio.geti64( _get_fileVar_ );
				mov( eax, @text( "(type dword " + _arg_ + ")" ));
				mov( edx, @text( "(type dword " + _arg_ + "[4])" ));
				pop( edx );

			#elseif( _pType_ = hla.ptInt128 ) 
				
				fileio.geti128( _get_fileVar_, @text( _arg_ ) );

			#elseif( _pType_ = hla.ptChar ) 
				
				fileio.getc( _get_fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptCset ) 

				#error( "Cset input is not supported" );

			#elseif
			( 
					_pType_ = hla.ptReal32 
				|	_pType_ = hla.ptReal64 
				|	_pType_ = hla.ptReal80 
			) 
				
				fileio.getf( _get_fileVar_ );
				fstp( @text( _arg_ ));

			#elseif( _pType_ = hla.ptString ) 

				#if( _arg_ = "eax" )

					fileio.gets(  _get_fileVar_, [esp] );

				#else

					fileio.gets(  _get_fileVar_, @text( _arg_ ));

				#endif

			#else

				#error
				( 
					"fileio.get: Unknown data type (" +
					_parms_[ _curparm_ ] +
					":" +
					@typename( @text( _id_ )) +
					")"
				);

			#endif
			?_curparm_ := _curparm_ + 1;

		#endwhile

		// Restore the registers pushed earlier for this call to
		// the GET macro.  Note that this statement does not end
		// with a semicolon.  This is to force the programmer to
		// put a semicolon after the fileio.get(--) invocation.

		pop( eax )

		?@trace := _saveTrace_;
		
	#endmacro



end fileio;

#endif




