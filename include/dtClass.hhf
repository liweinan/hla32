
#if( ! @defined( dtClass_hhf ))
?dtClass_hhf := true;

#includeOnce( "datetime.hhf" )
#includeOnce( "_hla.hhf" )
	

// Deprecated types:

#if( !@defined( _deprecate_old_datetime_types_ ))

	const
		dateClass			:text	:= "dateClass_t";	
		timeClass			:text	:= "timeClass_t";	
		virtualDateClass	:text	:= "virtualDateClass_t";
		virtualTimeClass	:text	:= "virtualTimeClass_t";

#endif

type
	timeClass_t: 
		class

			var
				theTime	:time.timerec;
				timeFmt	:time.OutputFormat;
				
			proc

				create:
					procedure;
					@global:_hla._ext( "TIMECLASS_CREATE" );
					
				curTime:
					procedure;
					@global:_hla._ext( "TIMECLASS_CURTIME" );
					
				utcTime:
					procedure;
					@global:_hla._ext( "TIMECLASS_UTCTIME" );
					
					
				addSecs:
					procedure( seconds:uns32 );
					@global:_hla._ext( "TIMECLASS_ADDSECS" );
					
				addMins:
					procedure( minutes:uns32 );
					@global:_hla._ext( "TIMECLASS_ADDMINS" );
					
				addHours:
					procedure( hours:uns32 );
					@global:_hla._ext( "TIMECLASS_ADDHOURS" );
					
					
				subSecs:
					procedure( seconds:uns32 );
					@global:_hla._ext( "TIMECLASS_SUBSECS" );
					
				subMins:
					procedure( minutes:uns32 );
					@global:_hla._ext( "TIMECLASS_SUBMINS" );
					
				subHours:
					procedure( hours:uns32 );
					@global:_hla._ext( "TIMECLASS_SUBHOURS" );
					
					
				fromSecs:
					procedure( seconds:uns32 );
					@global:_hla._ext( "TIMECLASS_FROMSECS" );
					
				toSecs:
					procedure {@returns( "eax" )};
					@global:_hla._ext( "TIMECLASS_TOSECS" );
				
					
				isValid:
					procedure {@returns( "al" )};
					@global:_hla._ext( "TIMECLASS_ISVALID" );
					
				validate:
					procedure;
					@global:_hla._ext( "TIMECLASS_VALIDATE" );
					
					
				difference:
					procedure( var time2:timeClass_t ) {@returns( "eax" )};
					@global:_hla._ext( "TIMECLASS_DIFFERENCE" );
					
				secsBetweenTimes:
					procedure( time2:time.timerec ) {@returns( "eax" )};
					@global:_hla._ext( "TIMECLASS_SECSBETWEENTIMES" );
					
					
				toString:
					procedure( dest:string );
					@global:_hla._ext( "TIMECLASS_TOSTRING" );
					
				a_toString:
					procedure;
					@global:_hla._ext( "TIMECLASS_A_TOSTRING" );

		endclass;


	virtualTimeClass_t: 
		class

			var
				theTime	:time.timerec;
				timeFmt	:time.OutputFormat;
			
			proc

				create:
					procedure;
					@global:_hla._ext( "VTIMECLASS_CREATE" );
					
				curTime:
					method;
					@global:_hla._ext( "VTIMECLASS_CURTIME" );
					
				utcTime:
					method;
					@global:_hla._ext( "VTIMECLASS_UTCTIME" );
					
					
				addSecs:
					method( seconds:uns32 );
					@global:_hla._ext( "VTIMECLASS_ADDSECS" );
					
				addMins:
					method( minutes:uns32 );
					@global:_hla._ext( "VTIMECLASS_ADDMINS" );
					
				addHours:
					method( hours:uns32 );
					@global:_hla._ext( "VTIMECLASS_ADDHOURS" );
					
					
				subSecs:
					method( seconds:uns32 );
					@global:_hla._ext( "VTIMECLASS_SUBSECS" );
					
				subMins:
					method( minutes:uns32 );
					@global:_hla._ext( "VTIMECLASS_SUBMINS" );
					
				subHours:
					method( hours:uns32 );
					@global:_hla._ext( "VTIMECLASS_SUBHOURS" );
					
					
				fromSecs:
					method( seconds:uns32 );
					@global:_hla._ext( "VTIMECLASS_FROMSECS" );
					
				toSecs:
					method {@returns( "eax" )};
					@global:_hla._ext( "VTIMECLASS_TOSECS" );
				
					
				isValid:
					method {@returns( "al" )};
					@global:_hla._ext( "VTIMECLASS_ISVALID" );
					
				validate:
					method;
					@global:_hla._ext( "VTIMECLASS_VALIDATE" );
					
					
				difference:
					method( var time2:virtualTimeClass_t ) 
						{@returns( "eax" )};
					@global:_hla._ext( "VTIMECLASS_DIFFERENCE" );
					
				secsBetweenTimes:
					method( time2:time.timerec )
						{@returns( "eax" )};
					@global:_hla._ext( "VTIMECLASS_SECSBETWEENTIMES" );
					
					
				toString:
					method( dest:string );
					@global:_hla._ext( "VTIMECLASS_TOSTRING" );
					
				a_toString:
					method;
					@global:_hla._ext( "VTIMECLASS_A_TOSTRING" );

		endclass;




		dateClass_t:
			class

				var
					theDate:	date.daterec;
					OutFmt:		date.OutputFormat;
					Separator:	char;

				proc
				
					create:
						procedure;
						@global:_hla._ext( "DATECLASS_CREATE" );
						
					today:
						procedure;
						@global:_hla._ext( "DATECLASS_TODAY");
						
					utc:
						procedure;
						@global:_hla._ext( "DATECLASS_UTC");
						
					isLeapYear:
						procedure {@returns( "al" )}; 	
						@global:_hla._ext( "DATECLASS_ISLEAPYEAR");
						
					isValid:
						procedure {@returns( "al" )}; 	
						@global:_hla._ext( "DATECLASS_ISVALID");
						
					validate:
						procedure {@returns( "al" )}; 	
						@global:_hla._ext( "DATECLASS_VALIDATE");
						
					a_toString:
						procedure {@returns( "eax" )}; 	
						@global:_hla._ext( "DATECLASS_A_TOSTRING");
						
					toString:
						procedure( dest:string );
						@global:_hla._ext( "DATECLASS_TOSTRING");
																		 
					setSeparator:
						procedure( c:char );
						@global:_hla._ext( "DATECLASS_SETSEPARATOR");
						
					setFormat:
						procedure( f:date.OutputFormat );
						@global:_hla._ext( "DATECLASS_SETFORMAT");
																		 
					addDays:
						procedure( days:uns32 );
						@global:_hla._ext( "DATECLASS_ADDDAYS");
						
					subDays:
						procedure( days:uns32 );
						@global:_hla._ext( "DATECLASS_SUBDAYS");
						
					addMonths:
						procedure( months:uns32 );
						@global:_hla._ext( "DATECLASS_ADDMONTHS");
						
					subMonths:
						procedure( days:uns32 );
						@global:_hla._ext( "DATECLASS_SUBMONTHS");
						
					addYears:
						procedure( years:uns32 );
						@global:_hla._ext( "DATECLASS_ADDYEARS");
																		 
					subYears:
						procedure( days:uns32 );
						@global:_hla._ext( "DATECLASS_SUBYEARS");
						
					fromJulian:
						procedure( Julian:uns32 );
						@global:_hla._ext( "DATECLASS_FROMJULIAN");
						
					toJulian:
						procedure {@returns( "eax" )};	
						@global:_hla._ext( "DATECLASS_TOJULIAN");
																		 
					dayOfWeek:
						procedure {@returns( "eax" )};	
						@global:_hla._ext( "DATECLASS_DAYOFWEEK");
						
					dayNumber:
						procedure {@returns( "eax" )};	
						@global:_hla._ext( "DATECLASS_DAYNUMBER");
						
					daysLeft:
						procedure {@returns( "eax" )};	
						@global:_hla._ext( "DATECLASS_DAYSLEFT");
						
					daysBetween:
						procedure
						( 													 
							otherDate:date.daterec 						 
						) {@returns( "eax" )};	
						@global:_hla._ext( "DATECLASS_DAYSBETWEEN");
						
					difference:
						procedure
						( 													 
							var otherDate:dateClass_t in eax 						 
						) {@returns( "eax" )};	
						@global:_hla._ext( "DATECLASS_DIFFERENCE");

			endclass;


	
		

		virtualDateClass_t:
			class

				var
					theDate:	date.daterec;
					OutFmt:		date.OutputFormat;
					Separator:	char;


				proc
					create:
						procedure;
						@global:_hla._ext( "VDATECLASS_CREATE" );
						
					today:
						method;
						@global:_hla._ext( "VDATECLASS_TODAY");
						
					utc:
						method;
						@global:_hla._ext( "VDATECLASS_UTC");
						
					isLeapYear:
						method {@returns( "al" )}; 	
						@global:_hla._ext( "VDATECLASS_ISLEAPYEAR");
						
					isValid:
						method {@returns( "al" )}; 	
						@global:_hla._ext( "VDATECLASS_ISVALID");
						
					validate:
						method { @returns( "al" ) }; 	
						@global:_hla._ext( "VDATECLASS_VALIDATE");
						
					a_toString:
						method {@returns( "eax" )}; 	
						@global:_hla._ext( "VDATECLASS_A_TOSTRING");
						
					toString:
						method( dest:string );
						@global:_hla._ext( "VDATECLASS_TOSTRING");
																		 
					setSeparator:
						method( c:char );
						@global:_hla._ext( "VDATECLASS_SETSEPARATOR");
						
					setFormat:
						method( f:date.OutputFormat );
						@global:_hla._ext( "VDATECLASS_SETFORMAT");
																		 
					addDays:
						method( days:uns32 );
						@global:_hla._ext( "VDATECLASS_ADDDAYS");
						
					subDays:
						method( days:uns32 );
						@global:_hla._ext( "VDATECLASS_SUBDAYS");
						
					addMonths:
						method( months:uns32 );
						@global:_hla._ext( "VDATECLASS_ADDMONTHS");
						
					subMonths:
						method( days:uns32 );
						@global:_hla._ext( "VDATECLASS_SUBMONTHS");
						
					addYears:
						method( years:uns32 );
						@global:_hla._ext( "VDATECLASS_ADDYEARS");
																		 
					subYears:
						method( days:uns32 );
						@global:_hla._ext( "VDATECLASS_SUBYEARS");
						
					fromJulian:
						method( Julian:uns32 );
						@global:_hla._ext( "VDATECLASS_FROMJULIAN");
						
					toJulian:
						method {@returns( "eax" )};	
						@global:_hla._ext( "VDATECLASS_TOJULIAN");
																		 
					dayOfWeek:
						method {@returns( "eax" )};	
						@global:_hla._ext( "VDATECLASS_DAYOFWEEK");
						
					dayNumber:
						method {@returns( "eax" )};	
						@global:_hla._ext( "VDATECLASS_DAYNUMBER");
						
					daysLeft:
						method {@returns( "eax" )};	
						@global:_hla._ext( "VDATECLASS_DAYSLEFT");
						
					daysBetween:
						method
					( 													 
						otherDate:date.daterec 						 
					) {@returns( "eax" )};	
						@global:_hla._ext( "VDATECLASS_DAYSBETWEEN");
						
					difference:
						method
					( 													 
						var otherDate:virtualDateClass_t in eax 						 
					) {@returns( "eax" )};	
						@global:_hla._ext( "VDATECLASS_DIFFERENCE");

			endclass;


	
		

#endif

