#if( ! @defined( zstring_hhf ))
?zstring_hhf := true;

#includeOnce( "_hla.hhf" )
#includeOnce( "stdio.hhf" )

namespace zstr; 

	proc
	
	// zlen- Returns the length of a zero-terminated string;

	len:
		procedure( zstr:zstring ) {@returns( "eax" )}; 
		@global:_hla._ext( "ZSTR_LEN" );


	// zcmp- Compares one zstring to another.
	
	zcmp:
		procedure( _zsrc1:zstring; _zsrc2:zstring ) {@returns( "eax" )}; 
		@global:_hla._ext( "ZSTR_CMP" );

	// zcpy- Copies one zstring to another.
	
	cpy:
		procedure( zsrc:zstring; zdest:zstring ) {@returns( "eax" )}; 
		@global:_hla._ext( "ZSTR_CPY" );

	cat:
		procedure( zsrc:zstring; zdest:zstring ) {@returns( "eax" )}; 
		@global:_hla._ext( "ZSTR_CAT" );


	cpyn:
		procedure( src:zstring; maxlen:dword; dest:zstring ) {@returns ("EAX")};
		@global:_hla._ext( "ZSTR_CPYN" );
		
	cpySize:
		procedure(  src:zstring; width:int32; fill:char; dest:zstring ) {@returns( "eax" )};
		@global:_hla._ext( "ZSTR_CPYSIZE" );


end zstr;


#endif
