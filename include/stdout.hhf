#if( ! @defined( stdout_hhf ))
?stdout_hhf := true;


#includeOnce( "hla.hhf" )

/************************************************************************/
/*                                                                      */
/* 	The stdout Namespace:                                               */
/*                                                                      */
/************************************************************************/


namespace stdout; @fast;


proc
	
	handle:
		procedure {@returns( "eax" )}; 
		@global:_hla._ext( "STDOUT_GETSTDOUTHANDLE" );

	write:
		procedure( var buffer:var; count:dword );
		@global:_hla._ext( "STDOUT_WRITE" );
	
	putbool:
		procedure( b:boolean );
		@global:_hla._ext( "STDOUT_PUTBOOL" );

	putcset:
		procedure( cst:cset   );
		@global:_hla._ext( "STDOUT_PUTCSET_" );

	putc:
		procedure( c:char );
		@global:_hla._ext( "STDOUT_PUTC" );

	putcSize:
		procedure( c:char; width:int32; fill:char );
		@global:_hla._ext( "STDOUT_PUTCSIZE" );

	newln:
		procedure; @global:_hla._ext( "STDOUT_NEWLN" );

	puts:
		procedure( s:string  );
		@global:_hla._ext( "STDOUT_PUTS" );

	putsSize:
		procedure
		( 
			s:string; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTSSIZE" );


	putz:
		procedure( zs:zstring  );
		@global:_hla._ext( "STDOUT_PUTZS" );

	putzSize:
		procedure
		( 
			zs:zstring; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTZSSIZE" );


	putb:
		procedure( h:byte    );
		@global:_hla._ext( "STDOUT_PUTB" );
		
	putw:
		procedure( w:word 	  );
		@global:_hla._ext( "STDOUT_PUTW" );
		
	putd:
		procedure( dw:dword );
		@global:_hla._ext( "STDOUT_PUTD" );
		
	putq:
		procedure( qw:qword );
		@global:_hla._ext( "STDOUT_PUTQ" );
		
	puttb:
		procedure( tb:tbyte );
		@global:_hla._ext( "STDOUT_PUTTB" );
		
	putl:
		procedure( l:lword );
		@global:_hla._ext( "STDOUT_PUTL" );

	putbSize:
		procedure
		( 
			b:byte; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTBSIZE" );

	putwSize:
		procedure
		( 
			w:word; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTWSIZE" );


	putdSize:
		procedure
		( 
			d:dword; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTDSIZE" );

	putqSize:
		procedure
		( 
			q:qword; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTQSIZE" );

	puttbSize:
		procedure
		( 
			tb:tbyte; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTTBSIZE" );

	putlSize:
		procedure
		( 
			l:lword; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTLSIZE" );


	putbin8:
		procedure( b:byte );
		@global:_hla._ext( "STDOUT_PUTBIN8" );


	puth8:
		procedure( b:byte );
		@global:_hla._ext( "STDOUT_PUTH8" );

	puth16:
		procedure( w:word );
		@global:_hla._ext( "STDOUT_PUTH16" );

	puth32:
		procedure( d:dword );
		@global:_hla._ext( "STDOUT_PUTH32" );

	puth64:
		procedure( q:qword );
		@global:_hla._ext( "STDOUT_PUTH64" );

	puth80:
		procedure( tb:tbyte );
			@global:_hla._ext( "STDOUT_PUTH80" );

	puth128:
		procedure( l:lword );
		@global:_hla._ext( "STDOUT_PUTH128" );

	puth8Size:
		procedure( b:byte; width:dword; fill:char );
		@global:_hla._ext( "STDOUT_PUTH8SIZE" );

	puth16Size:
		procedure( w:word; width:dword; fill:char );
		@global:_hla._ext( "STDOUT_PUTH16SIZE" );

	puth32Size:
		procedure( d:dword; width:dword; fill:char );
		@global:_hla._ext( "STDOUT_PUTH32SIZE" );

	puth64Size:
		procedure( q:qword; width:dword; fill:char );
		@global:_hla._ext( "STDOUT_PUTH64SIZE" );

	puth80Size:
		procedure( tb:tbyte; width:dword; fill:char );
		@global:_hla._ext( "STDOUT_PUTH80SIZE" );

	puth128Size:
		procedure( l:lword; width:dword; fill:char );
		@global:_hla._ext( "STDOUT_PUTH128SIZE" );




	puti8:
		procedure  ( b:byte  );
		@global:_hla._ext( "STDOUT_PUTI8" );
		
	puti16:
		procedure ( w:word  );
		@global:_hla._ext( "STDOUT_PUTI16" );
		
	puti32:
		procedure ( d:dword );
		@global:_hla._ext( "STDOUT_PUTI32" );
		
	puti64:
		procedure ( q:qword );
		@global:_hla._ext( "STDOUT_PUTI64" );
		
	puti128:
		procedure( l:lword );
		@global:_hla._ext( "STDOUT_PUTI128" );

	puti8Size:
		procedure 
		( 
			b:byte;  
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTI8SIZE" );

	puti16Size:
		procedure
		( 
			w:word;  
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTI16SIZE" );

	puti32Size:
		procedure
		( 
			d:dword; 
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTI32SIZE" );

	puti64Size:
		procedure
		( 
			q:qword; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTI64SIZE" );

	puti128Size:
		procedure
		( 
			l:lword; 
			width:int32; 
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTI128SIZE" );



	putu8:
		procedure ( b:byte  );
		@global:_hla._ext( "STDOUT_PUTU8" );
		
	putu16:
		procedure( w:word  );
		@global:_hla._ext( "STDOUT_PUTU16" );
		
	putu32:
		procedure( d:dword );
		@global:_hla._ext( "STDOUT_PUTU32" );
		
	putu64:
		procedure( q:qword );
		@global:_hla._ext( "STDOUT_PUTU64" );
		
	putu128:
		procedure( l:lword );
		@global:_hla._ext( "STDOUT_PUTU128" );


	putu8Size:
		procedure 
		( 
			b:byte;  
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTU8SIZE" );

	putu16Size:
		procedure
		( 
			w:word;  
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTU16SIZE" );

	putu32Size:
		procedure
		( 
			d:dword; 
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTU32SIZE" );

	putu64Size:
		procedure
		( 
			q:qword; 
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTU64SIZE" );

	putu128Size:
		procedure
		( 
			l:lword; 
			width:int32;	
			fill:char 
		);
		@global:_hla._ext( "STDOUT_PUTU128SIZE" );




	putr80:
		procedure
		( 
			r		:real80; 
			width	:uns32; 
			decpts	:uns32;
			fill	:char 
		);
		@global:_hla._ext( "STDOUT_PUTR80" );

	putr64:
		procedure
		( 
			r		:real64; 
			width	:uns32; 
			decpts	:uns32;
			fill	:char 
		);
		@global:_hla._ext( "STDOUT_PUTR64" );

	putr32:
		procedure
		( 
			r		:real32; 
			width	:uns32; 
			decpts	:uns32;
			fill	:char 
		);
		@global:_hla._ext( "STDOUT_PUTR32" );



	pute80:
		procedure( r:real80; width:uns32 );
		@global:_hla._ext( "STDOUT_PUTE80" );

	#macro _pute80( _r_ );
	
		@global:stdout.pute80( _r_, 28 )
		
	#endmacro

	#macro pute80_( _r_, _w_, _f_ );
	
		@global:stdout.pute80( _r_, _w_ )
		
	#endmacro


	pute64:
		procedure( r:real64; width:uns32 );
		@global:_hla._ext( "STDOUT_PUTE64" );

	#macro _pute64( _r_ );
	
		@global:stdout.pute64( _r_, 22 )
		
	#endmacro

	#macro pute64_( _r_, _w_, _f_ );
	
		@global:stdout.pute64( _r_, _w_ )
		
	#endmacro


	pute32:
		procedure( r:real32; width:uns32 );
		@global:_hla._ext( "STDOUT_PUTE32" );

	#macro _pute32( _r_ );
	
		@global:stdout.pute32( _r_, 15 )
		
	#endmacro

	#macro pute32_( _r_, _w_, _f_ );
	
		@global:stdout.pute32( _r_, _w_ )
		
	#endmacro



const
	validPutType :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:true,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:true,		// tUns8,		//3
			@global:true,		// tUns16,		//4
			@global:true,		// tUns32,		//5
			@global:true,		// tUns64,		//6
			@global:true,		// tUns128,		//7
			@global:true,		// tByte,		//8
			@global:true,		// tWord,		//9
			@global:true,		// tDWord,		//10
			@global:true,		// tQWord,		//11
			@global:true,		// tTByte,		//12
			@global:true,		// tLWord,		//13
			@global:true,		// tInt8,		//14
			@global:true,		// tInt16,		//15
			@global:true,		// tInt32,		//16
			@global:true,		// tInt64,		//17
			@global:true,		// tInt128,		//18
			@global:true,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:true,		// tString,		//25
			@global:true,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:true,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tRegex		//32
			@global:true,		// tClass,		//33
			@global:false,		// tProcptr,	//34
			@global:false,		// tThunk,		//35
			@global:true,		// tPointer		//36
			@global:false,		// tLabel		//37
			@global:false,		// tProc		//38
			@global:false,		// tMethod		//39
			@global:false,		// tClassProc	//40
			@global:false,		// tClassIter	//41
			@global:false,		// tIterator	//42
			@global:false,		// tProgram		//43
			@global:false,		// tMacro		//44
			@global:false,		// tOverloads	//45
			@global:false,		// tText		//46
			@global:false,		// tRegExMac	//47
			@global:false,		// tNamespace	//48
			@global:false,		// tSegment		//49
			@global:false,		// tAnonRec		//50
			@global:false,		// tAnonUnion	//51
			@global:false,		// tVariant		//52
			@global:false		// tError		//53
		];										  

	validPutSizeType :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:true,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:true,		// tUns8,		//3
			@global:true,		// tUns16,		//4
			@global:true,		// tUns32,		//5
			@global:true,		// tUns64,		//6
			@global:true,		// tUns128,		//7
			@global:true,		// tByte,		//8
			@global:true,		// tWord,		//9
			@global:true,		// tDWord,		//10
			@global:true,		// tQWord,		//11
			@global:true,		// tTByte,		//12
			@global:true,		// tLWord,		//13
			@global:true,		// tInt8,		//14
			@global:true,		// tInt16,		//15
			@global:true,		// tInt32,		//16
			@global:true,		// tInt64,		//17
			@global:true,		// tInt128,		//18
			@global:true,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:true,		// tString,		//25
			@global:true,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:false,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tRegEx		//32
			@global:false,		// tClass,		//33
			@global:false,		// tProcptr,	//34
			@global:false,		// tThunk,		//35
			@global:true,		// tPointer		//36
			@global:false,		// tLabel		//37
			@global:false,		// tProc		//38
			@global:false,		// tMethod		//39
			@global:false,		// tClassProc	//40
			@global:false,		// tClassIter	//41
			@global:false,		// tIterator	//42
			@global:false,		// tProgram		//43
			@global:false,		// tMacro		//44
			@global:false,		// tOverloads	//45
			@global:false,		// tText		//46
			@global:false,		// tRegExMac	//47
			@global:false,		// tNamespace	//48
			@global:false,		// tSegment		//49
			@global:false,		// tAnonRec		//50
			@global:false,		// tAnonUnion	//51
			@global:false,		// tVariant		//52
			@global:false		// tError		//53
		];										  




	validPutSize2Type :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:false,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:false,		// tUns8,		//3
			@global:false,		// tUns16,		//4
			@global:false,		// tUns32,		//5
			@global:false,		// tUns64,		//6
			@global:false,		// tUns128,		//7
			@global:false,		// tByte,		//8
			@global:false,		// tWord,		//9
			@global:false,		// tDWord,		//10
			@global:false,		// tQWord,		//11
			@global:false,		// tTByte,		//12
			@global:false,		// tLWord,		//13
			@global:false,		// tInt8,		//14
			@global:false,		// tInt16,		//15
			@global:false,		// tInt32,		//16
			@global:false,		// tInt64,		//17
			@global:false,		// tInt128,		//18
			@global:false,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:false,		// tString,		//25
			@global:false,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:false,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tRegEx		//32
			@global:false,		// tClass,		//33
			@global:false,		// tProcptr,	//34
			@global:false,		// tThunk,		//35
			@global:false,		// tPointer		//36
			@global:false,		// tLabel		//37
			@global:false,		// tProc		//38
			@global:false,		// tMethod		//39
			@global:false,		// tClassProc	//40
			@global:false,		// tClassIter	//41
			@global:false,		// tIterator	//42
			@global:false,		// tProgram		//43
			@global:false,		// tMacro		//44
			@global:false,		// tOverloads	//45
			@global:false,		// tText		//46
			@global:false,		// tRegExMac	//47
			@global:false,		// tNamespace	//48
			@global:false,		// tSegment		//49
			@global:false,		// tAnonRec		//50
			@global:false,		// tAnonUnion	//51
			@global:false,		// tVariant		//52
			@global:false		// tError		//53
		];										  



	putFunc :string[ @global:hla.sizePTypes ] :=
		[
			"",				// Undefined
			"putbool",		// tBoolean 	//1
			"",				// enum			//2
			"putu8",		// tUns8,		//3
			"putu16",		// tUns16,		//4
			"putu32",		// tUns32,		//5
			"putu64",		// tUns64,		//6
			"putu128",		// tUns128,		//7
			"putb",			// tByte,		//8
			"putw",			// tWord,		//9
			"putd",			// tDWord,		//10
			"putq",			// tQWord,		//11
			"puttb",		// tLWord,		//12
			"putl",			// tLWord,		//13
			"puti8",		// tInt8,		//14
			"puti16",		// tInt16,		//15
			"puti32",		// tInt32,		//16
			"puti64",		// tInt64,		//17
			"puti128",		// tInt128,		//18
			"putc",			// tChar, 		//19
			"",				// tWChar,		//20
			"_pute32",		// tReal32,		//21
			"_pute64",		// tReal64, 	//22
			"_pute80",		// tReal80,		//23
			"",				// tReal128,	//24
			"puts",			// tString,		//25
			"putz",			// tZString,	//26
			"",				// tWString,	//27
			"putcset",		// tCset,		//28
			"",				// tArray,		//29
			"",				// tRecord,		//30
			"",				// tUnion,		//31
			"",				// tRegEx		//32
			"",				// tClass,		//33
			"",				// tProcptr,	//34
			"",				// tThunk,		//35
			"putd",			// tPointer		//36
			"",				// tLabel		//37
			"",				// tProc		//38
			"",				// tMethod		//39
			"",				// tClassProc	//40
			"",				// tClassIter	//41
			"",				// tIterator	//42
			"",				// tProgram		//43
			"",				// tMacro		//44
			"",				// tOverloads	//45
			"",				// tText		//46
			"",				// tRegExMac	//47
			"",				// tNamespace	//48
			"",				// tSegment		//49
			"",				// tAnonRec		//50
			"",				// tAnonUnion	//51
			"",				// tVariant		//52
			""				// tError		//53
		];									  


	putSizeFunc :string[ @global:hla.sizePTypes ] :=
		[
			"",					// Undefined
			"putboolSize",		// tBoolean 	//1
			"",					// enum			//2
			"putu8Size",		// tUns8,		//3
			"putu16Size",		// tUns16,		//4
			"putu32Size",		// tUns32,		//5
			"putu64Size",		// tUns64,		//6
			"putu128Size",		// tUns128,		//7
			"puth8Size",		// tByte,		//8
			"puth16Size",		// tWord,		//9
			"puth32Size",		// tDWord,		//10
			"puth64Size",		// tQWord,		//11
			"puth80Size",		// tLWord,		//12
			"puth128Size",		// tLWord,		//13
			"puti8Size",		// tInt8,		//14
			"puti16Size",		// tInt16,		//15
			"puti32Size",		// tInt32,		//16
			"puti64Size",		// tInt64,		//17
			"puti128Size",		// tInt128,		//18
			"putcSize",			// tChar, 		//19
			"",					// tWChar,		//20
			"pute32_",			// tReal32,		//21
			"pute64_",			// tReal64, 	//22
			"pute80_",			// tReal80,		//23
			"",					// tReal128,	//24
			"putsSize",			// tString,		//25
			"putzSize",			// tZString,	//26
			"",					// tWString,	//27
			"",					// tCset,		//28
			"",					// tArray,		//29
			"",					// tRecord,		//30
			"",					// tUnion,		//31
			"",					// tRegEx		//32
			"",					// tClass,		//33
			"",					// tProcptr,	//34
			"",					// tThunk,		//35
			"puth32Size",		// tPointer		//36
			"",					// tLabel		//37
			"",					// tProc		//38
			"",					// tMethod		//39
			"",					// tClassProc	//40
			"",					// tClassIter	//41
			"",					// tIterator	//42
			"",					// tProgram		//43
			"",					// tMacro		//44
			"",					// tOverloads	//45
			"",					// tText		//46
			"",					// tRegExMac	//47
			"",					// tNamespace	//48
			"",					// tSegment		//49
			"",					// tAnonRec		//50
			"",					// tAnonUnion	//51
			"",					// tVariant		//52
			""					// tError		//53
		];										  


	putSize2Func :string[ @global:hla.sizePTypes ] :=
		[
			"",					// Undefined
			"",					// tBoolean 	//1
			"",					// enum			//2
			"",					// tUns8,		//3
			"",					// tUns16,		//4
			"",					// tUns32,		//5
			"",					// tUns64,		//6
			"",					// tUns128,		//7
			"",					// tByte,		//8
			"",					// tWord,		//9
			"",					// tDWord,		//10
			"",					// tQWord,		//11
			"",					// tLWord,		//12
			"",					// tLWord,		//13
			"",					// tInt8,		//14
			"",					// tInt16,		//15
			"",					// tInt32,		//16
			"",					// tInt64,		//17
			"",					// tInt128,		//18
			"",					// tChar, 		//19
			"",					// tWChar,		//20
			"putr32",			// tReal32,		//21
			"putr64",			// tReal64, 	//22
			"putr80",			// tReal80,		//23
			"",					// tReal128,	//24
			"",					// tString,		//25
			"",					// tZString,	//26
			"",					// tWString,	//27
			"",					// tCset,		//28
			"",					// tArray,		//29
			"",					// tRecord,		//30
			"",					// tUnion,		//31
			"",					// tRegEx		//32
			"",					// tClass,		//33
			"",					// tProcptr,	//34
			"",					// tThunk,		//35
			"",					// tPointer		//36
			"",					// tLabel		//37
			"",					// tProc		//38
			"",					// tMethod		//39
			"",					// tClassProc	//40
			"",					// tClassIter	//41
			"",					// tIterator	//42
			"",					// tProgram		//43
			"",					// tMacro		//44
			"",					// tOverloads	//45
			"",					// tText		//46
			"",					// tRegExMac	//47
			"",					// tNamespace	//48
			"",					// tSegment		//49
			"",					// tAnonRec		//50
			"",					// tAnonUnion	//51
			"",					// tVariant		//52
			""					// tError		//53
		];										  


	val
		stdoutParm:string;

	#macro put( _parameters_[] );

		#for( @global:stdout.stdoutParm in _parameters_ )

			@global:hla.put( stdout, "", @eval(@global:stdout.stdoutParm) )

		#endfor

	#endmacro



end stdout;


#endif