#if( !@defined( thread_hhf ))
?thread_hhf := true;

#includeOnce( "hla.hhf" )
#includeOnce( "os.hhf" )
#includeOnce( "cstdlib.hhf" )




namespace thread;

static
	
	// Thread local storage handle;
	
	threadContext	:dword;	@global:_hla._ext( "THREAD_THREADCONTEXT" );
	
type
	threadFunc_t	:procedure( parm:dword );
	
	
	proc
	
		// Thread Creation

		create:
			procedure
			( 
				threadFunc	:threadFunc_t; 
				parm		:dword;
				stackSize	:dword 
			) {@returns( "eax" )};
			@global:_hla._ext( "THREAD_CREATE" );
			
			
		// Thread Identification:
		
		getCurrentThreadHandle:
			procedure {@returns( "eax" )};
			@global:_hla._ext( "THREAD_GETCURRENTTHREADHANDLE" );
			
			
		// Thread Local Storage:
		
		createTLS:
			procedure( var context:dword );
			@global:_hla._ext( "THREAD_CREATETLS" );
		
		getTLS:
			procedure( context:dword );
			@global:_hla._ext( "THREAD_GETTLS" );
		
		setTLS:
			procedure( context:dword; valueToSet:dword );
			@global:_hla._ext( "THREAD_SETTLS" );
		
		
		// Events
			

		createEvent:
			procedure {@returns( "eax" )};
			@global:_hla._ext( "THREAD_CREATEEVENT" );
			
		deleteEvent:
			procedure( event:dword );
			@global:_hla._ext( "THREAD_DELETEEVENT" );
			
		setEvent:
			procedure( event:dword );
			@global:_hla._ext( "THREAD_SETEVENT" );
			
		waitForEvent:
			procedure( event:dword );
			@global:_hla._ext( "THREAD_WAITFOREVENT" );
			
		waitForEventTimeout:
			procedure( event:dword; milliseconds:dword );
			@global:_hla._ext( "THREAD_WAITFOREVENTTIMEOUT" );
			
			
		
		
		// Critical Sections
			

		createCriticalSection:
			procedure {@returns( "eax" )};
			@global:_hla._ext( "THREAD_CREATECRITICALSECTION" );
			
		deleteCriticalSection:
			procedure( csect:dword );
			@global:_hla._ext( "THREAD_DELETECRITICALSECTION" );
			
		enterCriticalSection:
			procedure( csect:dword );
			@global:_hla._ext( "THREAD_ENTERCRITICALSECTION" );
			
		leaveCriticalSection:
			procedure( csect:dword );
			@global:_hla._ext( "THREAD_LEAVECRITICALSECTION" );
			
			
		// Semaphores:
		
		createSemaphore:
			procedure( maxCnt:dword; semName:string ) {@returns( "eax" )};
			@global:_hla._ext( "THREAD_CREATESEMAPHORE" );
			
		deleteSemaphore:
			procedure( sema:dword );
			@global:_hla._ext( "THREAD_DELETESEMAPHORE" );
			
		waitSemaphore:
			procedure( sema:dword );
			@global:_hla._ext( "THREAD_WAITSEMAPHORE" );
			
		releaseSemaphore:
			procedure( sema:dword );
			@global:_hla._ext( "THREAD_RELEASESEMAPHORE" );
		
end thread;


#endif