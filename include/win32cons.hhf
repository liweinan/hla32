
#if( ! @defined( wincons_hhf ))
?console_hhf := true;

#includeOnce( "_hla.hhf" )

// Grab-bag of definitions to support various
// win32 calls the standard library makes:
// NOTE: You should not use this file, it is obsolete. Use the
//       w.hhf header file instead. This file exists to support
//		 standard library code written before the w.hhf header
//		 file was created.

namespace win; @fast;

	const
		
		MAX_PATH			:= 260;
		FILE_SHARE_READ		:= 1;
		FILE_SHARE_WRITE	:= 2;

		CREATE_NEW			:= 1;
		CREATE_ALWAYS		:= 2;
		OPEN_EXISTING		:= 3;
		OPEN_ALWAYS			:= 4;
		TRUNCATE_EXISTING	:= 5;

		ERROR_ALREADY_EXISTS:= 183;
		INVALID_HANDLE_VALUE:= -1;

		GENERIC_READ		:= $8000_0000;
		GENERIC_WRITE		:= $4000_0000;


		FILE_BEGIN			:= 0;
		FILE_CURRENT		:= 1;
		FILE_END			:= 2;

		FILE_ATTRIBUTE_READONLY 	:= $1;
		FILE_ATTRIBUTE_HIDDEN 		:= $2;
		FILE_ATTRIBUTE_SYSTEM 		:= $4;
		FILE_ATTRIBUTE_DIRECTORY 	:= $10;
		FILE_ATTRIBUTE_ARCHIVE 		:= $20;
		FILE_ATTRIBUTE_NORMAL 		:= $80;
		FILE_ATTRIBUTE_TEMPORARY 	:= $100;
		FILE_ATTRIBUTE_COMPRESSED	:= $800;

		FILE_FLAG_POSIX_SEMANTICS 	:= $100_0000;
		FILE_FLAG_BACKUP_SEMANTICS 	:= $200_0000;
		FILE_FLAG_DELETE_ON_CLOSE 	:= $400_0000;
		FILE_FLAG_SEQUENTIAL_SCAN 	:= $800_0000;
		FILE_FLAG_RANDOM_ACCESS 	:= $1000_0000;
		FILE_FLAG_NO_BUFFERING 		:= $2000_0000;
		FILE_FLAG_OVERLAPPED 		:= $4000_0000;
		FILE_FLAG_WRITE_THROUGH 	:= $8000_0000;

		FILE_MAP_EXECUTE			:= 8;
		FILE_MAP_READ				:= 4;
		FILE_MAP_WRITE				:= 2;
		FILE_MAP_COPY				:= 1;
		STD_INPUT_HANDLE			:= -10;
		STD_OUTPUT_HANDLE			:= -11;
		STD_ERROR_HANDLE			:= -12;


		DLL_PROCESS_DETACH			:= 0;
		DLL_PROCESS_ATTACH			:= 1;
		DLL_THREAD_ATTACH			:= 2;
		DLL_THREAD_DETACH			:= 3;

		PAGE_EXECUTE				:= $10;
		PAGE_EXECUTE_READ			:= $20;
		PAGE_EXECUTE_READWRITE		:= $40;
		PAGE_EXECUTE_WRITECOPY		:= $80;
		PAGE_GUARD					:= $100;
		PAGE_NOACCESS				:= 1;
		PAGE_NOCACHE				:= $200;
		PAGE_READONLY				:= 2;
		PAGE_READWRITE				:= 4;
		PAGE_WRITECOPY				:= 8;

		GMEM_FIXED					:= 0;
		GMEM_INVALID_HANDLE			:= $8000;






	type
		RECT:
			record
			  left:		dword;
			  top:		dword;
			  right:	dword;
			  bottom:	dword;
			endrecord;


		PAINTSTRUCT: 
			record
				  hdc:			dword;
				  fErase:		dword;
				  rcPaint:		RECT;
				  fRestore:		dword;
				  fIncUpdate:	dword;
				  rgbReserved:	byte[32];
			endrecord;

		FileTime:
			record
			
				LowDateTime: dword;
				HighDateTime:dword;
				
			endrecord;
			
			
		Win32FindData:
			record

			    FileAttributes:	dword; 
	    		CreationTime:	FileTime; 
	    		LastAccessTime:	FileTime; 
	    		LastWriteTime:	FileTime; 
				FileSizeHigh:	dword; 
				FileSizeLow:	dword; 
				Reserved0:		dword; 
				dwReserved1:	dword; 
				FileName:		char[ MAX_PATH ]; 
				AlternateFileName: char[ 14 ]; 
				
			endrecord;

		SystemTime:
			record

				Year:			word;
				Month:			word;
				DayOfWeek:		word;
				Day:			word;
				Hour:			word;
				Minute:			word;
				Second:			word;
				Milliseconds:	word;

			endrecord;

		WNDCLASSEX:
			record

				cbSize: 		uns32;
				style:			uns32;

				lpfnWndProc:
					procedure
					( 
						lParam:dword; 
						wParam:dword; 
						uMsg:uns32; 
						hWnd:dword 
					);

				cbClsExtra:		int32;
				cbWndExtra: 	int32;
				hInstance:		dword;
				hIcon:			dword;
				hCursor:		dword;
				hbrBackground:	dword;
				lpszMenuName:	string;	// These aren't really strings,
				lpszClassName:	string; // but that's okay, they're input
				hIconSm:		dword;	// only.

			endrecord;

		POINT:
			record

				x:int32;
				y:int32;

			endrecord;
 
		MSG:record

				hwnd:		dword;
				message:	uns32;
				wParam:		dword;
				lParam:		dword;
				time:		dword;
				pt:			POINT;

			endrecord;




	/**********************************************************************/
	/*                                                                    */
	/* 	Types, constants, and procedures related to the console functions */
	/*                                                                    */
	/**********************************************************************/

	const

		bgnd_Black					:= $00;
		bgnd_Blue					:= $10;
		bgnd_Green					:= $20;
		bgnd_Cyan					:= $30;
		bgnd_Red					:= $40;
		bgnd_Magenta				:= $50;
		bgnd_Brown					:= $60;
		bgnd_LightGray				:= $70;
		bgnd_DarkGray				:= $80;
		bgnd_LightBlue				:= $90;
		bgnd_LightGreen				:= $a0;
		bgnd_LightCyan				:= $b0;
		bgnd_LightRed				:= $c0;
		bgnd_LightMagenta			:= $d0;
		bgnd_Yellow					:= $e0;
		bgnd_White					:= $f0;


		fgnd_Black					:= $00;
		fgnd_Blue					:= $01;
		fgnd_Green					:= $02;
		fgnd_Cyan					:= $03;
		fgnd_Red					:= $04;
		fgnd_Magenta				:= $05;
		fgnd_Brown					:= $06;
		fgnd_LightGray				:= $07;
		fgnd_DarkGray				:= $08;
		fgnd_LightBlue				:= $09;
		fgnd_LightGreen				:= $0a;
		fgnd_LightCyan				:= $0b;
		fgnd_LightRed				:= $0c;
		fgnd_LightMagenta			:= $0d;
		fgnd_Yellow					:= $0e;
		fgnd_White					:= $0f;


		KEY_EVENT					:= 1;
		MOUSE_EVENT					:= 2;
		WINDOW_BUFFER_SIZE_EVENT	:= 4;


		ENABLE_PROCESSED_INPUT		:= $01;
		ENABLE_LINE_INPUT			:= $02;
		ENABLE_ECHO_INPUT			:= $04;
		ENABLE_WINDOW_INPUT			:= $08;
		ENABLE_MOUSE_INPUT			:= $10;

		ENABLE_PROCESSED_OUTPUT		:= $01;
		ENABLE_WRAP_AT_EOL_OUTPUT	:= $02;

		// Need to fix these:

		CTRL_C_EVENT				:= 0;
		CTRL_BREAK_EVENT			:= 1;
		CTRL_CLOSE_EVENT			:= 2;
		CTRL_LOGOFF_EVENT			:= 5;
		CTRL_SHUTDOWN_EVENT			:= 6;




	type
		COORD:
			record

				X:uns16;
				Y:uns16;

			endrecord;


		small_rect:
			record

				left:	uns16;
				top:	uns16;
				right:	uns16;
				bottom:	uns16;

			endrecord;

		pSmallRect:	pointer to small_rect;



		CONSOLE_SCREEN_BUFFER_INFO:
			record

				dwSize:				COORD;
				dwCursorPosition:	COORD;
				wAttributes:		word;
				srWindow:			small_rect;
				dwMaximumWindowSize:COORD;

			endrecord;


		KEY_EVENT_RECORD:
			record
				_padding_:			word;
				bKeyDown:			boolean[4];
				wRepeatCount:		word;
				wVirtualKeyCode:	word;
				wVirtualScanCode:	word;
				AsciiChar:			char[2];
				dwControlKeyState:	word;

			endrecord;

		MOUSE_EVENT_RECORD:
			record

				_padding_:			word;
				dwMousePosition:	COORD;
				dwButtonState:		dword;
				dwControlKeyState:	dword;
				dwEventFlags:		dword;

			endrecord;





		INPUT_RECORD:
			record

				EventType: word;
				Event: union

						KeyEvent: 				KEY_EVENT_RECORD;
						MouseEvent:				MOUSE_EVENT_RECORD;
						WindowBufferSizeEvent:	COORD;

					   endunion;
					   
			endrecord;

		CHAR_INFO:
			record

				AsciiChar:	char[2];
				Attributes:	word;

			endrecord;
				

 


	procedure GetConsoleScreenBufferInfo
	( 
		var csbi:CONSOLE_SCREEN_BUFFER_INFO;
			handle:dword 

	);	@global:_hla._ext( "_GetConsoleScreenBufferInfo@8" );

	procedure SetConsoleTextAttribute( Attributes:word; handle:dword );
		@global:_hla._ext( "_SetConsoleTextAttribute@8" );
 

	procedure SetConsoleCursorPosition( posn:COORD; handle:dword );
		@global:_hla._ext( "_SetConsoleCursorPosition@8" );

	procedure FillConsoleOutputCharacter
	( 
		var charsWritten:	dword; 
			coordinate:		COORD;
			size:			dword;
			CharToWrite:	char; 
			handle:			dword

	);	@global:_hla._ext( "_FillConsoleOutputCharacterA@20" );

	procedure FillConsoleOutputAttribute
	( 
		var charsWritten:	dword; 
			coordinate:		COORD;
			size:			dword;
			Attribute:		word; 
			handle:			dword

	);	@global:_hla._ext( "_FillConsoleOutputAttribute@20" );


	procedure SetConsoleTitle( s:string ); @global:_hla._ext( "_SetConsoleTitleA@4" );
	procedure GetConsoleTitle
	( 
		SizeBuf:dword;
		BufPtr:	dword
	
	); @global:_hla._ext( "_GetConsoleTitleA@8" );



	procedure PeekConsoleInput
	( 
		var numEventsFound:dword; 
			numEvents:dword;
		var	inputBuffer: INPUT_RECORD;
			handle:dword
	);	@global:_hla._ext( "_PeekConsoleInputA@16" );




	procedure ReadConsoleInput
	( 
		var numEventsFound:dword; 
			numEvents:dword;
		var	inputBuffer: INPUT_RECORD;
			handle:dword
	);	@global:_hla._ext( "_ReadConsoleInputA@16" );


	procedure WriteConsoleOutputCharacter
	(
		var	charsWritten:	dword;
			coordinates:	COORD;
			len:			dword;
			s:				string;
			handle:			dword
	);	@global:_hla._ext( "_WriteConsoleOutputCharacterA@20" );


	procedure FlushConsoleInputBuffer( handle:dword );
		@global:_hla._ext( "_FlushConsoleInputBuffer@4" );


	procedure GetConsoleMode( var theMode:dword; handle:dword );
		@global:_hla._ext( "_GetConsoleMode@8" );

	procedure SetConsoleMode( theMode:dword; handle:dword );
		@global:_hla._ext( "_SetConsoleMode@8" );


	procedure GetNumberOfConsoleMouseButtons( var Btns:dword );
		@global:_hla._ext( "_GetNumberOfConsoleMouseButtons@4" );

	procedure ReadConsoleOutputCharacter
	( 
		var charsRead:	dword;
			YCoord:		dword;
			cnt:		dword;
		var	dest:		char;
			handle:		dword
	);	@global:_hla._ext( "_ReadConsoleOutputCharacterA@20" );


	procedure ScrollConsoleScreenBuffer
	(
		var	ci:		CHAR_INFO;
			dest:	COORD;
			Clip:	pSmallRect;
		var	srcRect:small_rect;
			handle:	dword
	);	@global:_hla._ext( "_ScrollConsoleScreenBufferA@20" );

	procedure AllocConsole; @global:_hla._ext( "_AllocConsole@0" );
	procedure FreeConsole; @global:_hla._ext( "_FreeConsole@0" );

	procedure GetLargestConsoleWindowSize( handle:dword ); 
		returns( "eax" ); // Note: EAX:COORD, width in AX, ht in upper EAX.
		@global:_hla._ext( "_GetLargestConsoleWindowSize@4" );

	procedure GetNumberOfConsoleInputEvents
	( 
		var numEvents:	dword;
			handle:		dword
	);
		@global:_hla._ext( "_GetNumberOfConsoleInputEvents@8" );

	procedure SetConsoleCtrlHandler
	( 
		SetHandler:boolean;
		handler:procedure( ctrltype:dword )
	);
		@global:_hla._ext( "_SetConsoleCtrlHandler@8" );


	procedure SetConsoleWindowInfo
	( 
		var rectangle:	small_rect; 
			UseAbs:		boolean;
			handle:		dword
	);
		@global:_hla._ext( "_SetConsoleWindowInfo@12" );


	procedure SetConsoleScreenBufferSize
	(
		LenAndWidth:	COORD;
		handle:			dword
	);
		@global:_hla._ext( "_SetConsoleScreenBufferSize@8" );



	procedure GetLocalTime( var time:SystemTime );
		@global:_hla._ext( "_GetLocalTime@4" );



	/*
	** Win32 File I/O routines:
	*/

	static

		WriteFile:procedure
		(
				overlapped:		dword;
			var	bytesWritten:	dword;
				len:			dword;
			var buffer:			byte;
				Handle:			dword
		); 
			@global:_hla._ext( "__imp__WriteFile@20" );


		ReadFile:procedure
		(
				overlapped:	dword;
			var	bytesRead:	dword;
				len:		dword;
			var buffer:		byte;
				Handle:		dword
		); 
			@global:_hla._ext( "__imp__ReadFile@20" );



		CreateFile:procedure
		( 
			hTemplateFile:	 		dword;
			dwFlagsAndAttributes:	dword;
			dwCreationDistribution:	dword;
			lpSecurityAttributes:	dword;
			dwShareMode: 			dword;
			dwDesiredAccess:		dword;
			lpFileName:				string
		);
			@global:_hla._ext( "__imp__CreateFileA@28" );



		CloseHandle:procedure( handle:dword ); 
			@global:_hla._ext( "__imp__CloseHandle@4" );


		SetFilePointer:procedure
		( 
			HowToMove:		dword; 
			PtrToHighDist:	dword;
			Dist:			dword;
			Handle:			dword
		);
			@global:_hla._ext( "__imp__SetFilePointer@16" );

		SetEndOfFile:procedure( handle:dword );
			@global:_hla._ext( "__imp__SetEndOfFile@4" );
			


		GetLastError:procedure; @global:_hla._ext( "__imp__GetLastError@0" );


		CreateFileMapping:procedure
		(
			MappingName:	dword;
			MaxSizeLow: 	dword;
			MaxSizeHigh: 	dword;
			flProtect:		dword;
			fileMappingAttr:dword;
			hFile:			dword
		);
		@global:_hla._ext( "__imp__CreateFileMappingA@24" );

		MapViewOfFile:procedure
		(
			NumBytesToMap:	dword;
			offsetLow:		dword;
			offsetHigh:		dword;
			DesiredAccess:	dword;
			fHandle:		dword
		);
		@global:_hla._ext( "__imp__MapViewOfFile@20" );

		UnmapViewOfFile:procedure( h:dword ); 
			@global:_hla._ext( "__imp__UnmapViewOfFile@4" );


		
		
		// The ExitProcess API in the kernel32.lib library file:

		ExitProcess: procedure( uExitCode:uns32 ); 
					 @global:_hla._ext( "__imp__ExitProcess@4" );


		// GetModuleHandle- returns the handle of the process
		// whose name is passed as a parameter.

		GetModuleHandle: procedure( ModuleName: dword );
						 @global:_hla._ext( "__imp__GetModuleHandleA@4" );

		// PostQuitMessage- Used to quit a thread.

		PostQuitMessage: procedure( nExitCode:int32 );
						 @global:_hla._ext( "__imp__PostQuitMessage@4" );


		// RegisterClassEx- Used to register a window class.

		RegisterClassEx:procedure( var lpwcx:WNDCLASSEX );
						@global:_hla._ext( "__imp__RegisterClassExA@4" );

		// UpdateWindow- Updates the specified window:

		UpdateWindow:procedure( hWnd:dword );
						@global:_hla._ext( "__imp__UpdateWindow@4" );

		// TranslateMessage & DispatchMessage:

		TranslateMessage:procedure( var lpMsg:MSG );
						 @global:_hla._ext( "__imp__TranslateMessage@4" );

		DispatchMessage:procedure( var lpMsg:MSG );
						@global:_hla._ext( "__imp__DispatchMessageA@4" );



	const
	
		// MessageBox constants:

		MB_ABORTRETRYIGNORE		:dword := $2;
		MB_APPLMODAL 			:dword := $0;
		MB_COMPOSITE 			:dword := $2;
		MB_DEFAULT_DESKTOP_ONLY :dword := $20000;
		MB_DEFBUTTON1 			:dword := $0;
		MB_DEFBUTTON2 			:dword := $100;
		MB_DEFBUTTON3 			:dword := $200;
		MB_DEFBUTTON4 			:dword := $300;
		MB_DEFMASK 				:dword := $F00;
		MB_HELP 				:dword := $4000;
		MB_ICONASTERISK 		:dword := $40;
		MB_ICONEXCLAMATION 		:dword := $30;
		MB_ICONHAND 			:dword := $10;
		MB_ICONINFORMATION 		:dword := MB_ICONASTERISK;
		MB_ICONMASK 			:dword := $F0;
		MB_ICONQUESTION 		:dword := $20;
		MB_ICONSTOP 			:dword := MB_ICONHAND;
		MB_MISCMASK 			:dword := $C000;
		MB_MODEMASK 			:dword := $3000;
		MB_NOFOCUS 				:dword := $8000;
		
		MB_OK 					:dword := $0;
		MB_OKCANCEL 			:dword := $1;
		MB_PRECOMPOSED 			:dword := $1;
		MB_RETRYCANCEL 			:dword := $5;
		MB_RIGHT 				:dword := $80000;
		MB_RTLREADING 			:dword := $100000;
		MB_SETFOREGROUND 		:dword := $10000;
		MB_SYSTEMMODAL 			:dword := $1000;
		MB_TASKMODAL 			:dword := $2000;
		MB_TOPMOST 				:dword := $40000;
		MB_TYPEMASK 			:dword := $F;
		MB_USEGLYPHCHARS 		:dword := $4;
		MB_USERICON 			:dword := $80;
		MB_YESNO 				:dword := $4;
		MB_YESNOCANCEL 			:dword := $3;


		// Declare the external pointer to the actual
		// MessageBox function.

	static
		MessageBox_p:	
			procedure
			(
				uType:		uns32;
				caption:	string;
				title:		string;
				hWnd:		dword
			);	@global:_hla._ext( "__imp__MessageBoxA@16" );

	// Macro to invoke MessageBox that puts the parameters
	// in the proper order (STDCALL vs. Pascal calling
	// mechanism).

	#macro MessageBox( _hWnd_, _lpText_, _lpCaption_, _uType_ );

		win.MessageBox_p( _uType_, _lpCaption_, _lpText_, _hWnd_ )
		
	#endmacro;


	// ShowWindow constants:

	const

		SW_ERASE 			:= 4;
		SW_HIDE 			:= 0;
		SW_INVALIDATE 		:= 2;
		SW_MAX 				:= 10;
		SW_MAXIMIZE 		:= 3;
		SW_MINIMIZE 		:= 6;
		SW_NORMAL 			:= 1;
		SW_OTHERUNZOOM 		:= 4;
		SW_OTHERZOOM 		:= 2;
		SW_PARENTCLOSING 	:= 1;
		SW_PARENTOPENING 	:= 3;
		SW_RESTORE 			:= 9;
		SW_SCROLLCHILDREN 	:= 1;
		SW_SHOW 			:= 5;
		SW_SHOWDEFAULT 		:= 10;
		SW_SHOWMAXIMIZED 	:= 3;
		SW_SHOWMINIMIZED 	:= 2;
		SW_SHOWMINNOACTIVE 	:= 7;
		SW_SHOWNA 			:= 8;
		SW_SHOWNOACTIVATE 	:= 4;
		SW_SHOWNORMAL 		:= 1;


	// Window Message constants:

		WM_ACTIVATE 				:dword := $6;
		WM_ACTIVATEAPP 				:dword := $1C;
		WM_AFXFIRST 				:dword := $360;
		WM_AFXLAST 					:dword := $37F;
		WM_APP 						:dword := $8000;
		WM_ASKCBFORMATNAME 			:dword := $30C;
		WM_CANCELJOURNAL 			:dword := $4B;
		WM_CANCELMODE 				:dword := $1F;
		WM_CAPTURECHANGED 			:dword := $215;
		WM_CHANGECBCHAIN 			:dword := $30D;
		WM_CHAR 					:dword := $102;
		WM_CHARTOITEM 				:dword := $2F;
		WM_CHILDACTIVATE 			:dword := $22;
		WM_CLEAR 					:dword := $303;
		WM_CLOSE 					:dword := $10;
		WM_COMMAND 					:dword := $111;
		WM_COMMNOTIFY 				:dword := $44;
		WM_COMPACTING 				:dword := $41;
		WM_COMPAREITEM 				:dword := $39;
		WM_CONTEXTMENU 				:dword := $7B;
		WM_CONVERTREQUESTEX 		:dword := $108;
		WM_COPY 					:dword := $301;
		WM_COPYDATA 				:dword := $4A;
		WM_CREATE 					:dword := $1;
		WM_CTLCOLORBTN 				:dword := $135;
		WM_CTLCOLORDLG 				:dword := $136;
		WM_CTLCOLOREDIT 			:dword := $133;
		WM_CTLCOLORLISTBOX 			:dword := $134;
		WM_CTLCOLORMSGBOX 			:dword := $132;
		WM_CTLCOLORSCROLLBAR 		:dword := $137;
		WM_CTLCOLORSTATIC 			:dword := $138;
		WM_CUT 						:dword := $300;
		WM_DDE_FIRST 				:dword := $3E0;
		WM_DDE_ACK 					:dword := (WM_DDE_FIRST+4);
		WM_DDE_ADVISE 				:dword := (WM_DDE_FIRST+2);
		WM_DDE_DATA 				:dword := (WM_DDE_FIRST+5);
		WM_DDE_EXECUTE 				:dword := (WM_DDE_FIRST+8);
		WM_DDE_INITIATE 			:dword := (WM_DDE_FIRST);
		WM_DDE_LAST 				:dword := (WM_DDE_FIRST+8);
		WM_DDE_POKE 				:dword := (WM_DDE_FIRST+7);
		WM_DDE_REQUEST 				:dword := (WM_DDE_FIRST+6);
		WM_DDE_TERMINATE 			:dword := (WM_DDE_FIRST+1);
		WM_DDE_UNADVISE 			:dword := (WM_DDE_FIRST+3);
		WM_DEADCHAR 				:dword := $103;
		WM_DELETEITEM 				:dword := $2D;
		WM_DESTROY 					:dword := $2;
		WM_DESTROYCLIPBOARD 		:dword := $307;
		WM_DEVICECHANGE 			:dword := $219;
		WM_DEVMODECHANGE 			:dword := $1B;
		WM_DISPLAYCHANGE 			:dword := $7E;
		WM_DRAWCLIPBOARD 			:dword := $308;
		WM_DRAWITEM 				:dword := $2B;
		WM_DROPFILES 				:dword := $233;
		WM_ENABLE 					:dword := $A;
		WM_ENDSESSION 				:dword := $16;
		WM_ENTERIDLE 				:dword := $121;
		WM_ENTERMENULOOP 			:dword := $211;
		WM_ERASEBKGND 				:dword := $14;
		WM_EXITMENULOOP 			:dword := $212;
		WM_FONTCHANGE 				:dword := $1D;
		WM_GETDLGCODE 				:dword := $87;
		WM_GETFONT 					:dword := $31;
		WM_GETHOTKEY 				:dword := $33;
		WM_GETICON 					:dword := $7F;
		WM_GETMINMAXINFO 			:dword := $24;
		WM_GETTEXT 					:dword := $D;
		WM_GETTEXTLENGTH 			:dword := $E;
		WM_HANDHELDFIRST 			:dword := $358;
		WM_HANDHELDLAST 			:dword := $35F;
		WM_HELP 					:dword := $53;
		WM_HOTKEY 					:dword := $312;
		WM_HSCROLL 					:dword := $114;
		WM_HSCROLLCLIPBOARD 		:dword := $30E;
		WM_ICONERASEBKGND 			:dword := $27;
		WM_IME_CHAR 				:dword := $286;
		WM_IME_COMPOSITION 			:dword := $10F;
		WM_IME_COMPOSITIONFULL 		:dword := $284;
		WM_IME_CONTROL 				:dword := $283;
		WM_IME_ENDCOMPOSITION 		:dword := $10E;
		WM_IME_KEYDOWN 				:dword := $290;
		WM_IME_KEYLAST 				:dword := $10F;
		WM_IME_KEYUP 				:dword := $291;
		WM_IME_NOTIFY 				:dword := $282;
		WM_IME_SELECT 				:dword := $285;
		WM_IME_SETCONTEXT 			:dword := $281;
		WM_IME_STARTCOMPOSITION 	:dword := $10D;
		WM_INITDIALOG 				:dword := $110;
		WM_INITMENU 				:dword := $116;
		WM_INITMENUPOPUP 			:dword := $117;
		WM_INPUTLANGCHANGE 			:dword := $51;
		WM_INPUTLANGCHANGEREQUEST 	:dword := $50;
		WM_KEYDOWN 					:dword := $100;
		WM_KEYFIRST 				:dword := $100;
		WM_KEYLAST 					:dword := $108;
		WM_KEYUP 					:dword := $101;
		WM_KILLFOCUS 				:dword := $8;
		WM_LBUTTONDBLCLK 			:dword := $203;
		WM_LBUTTONDOWN 				:dword := $201;
		WM_LBUTTONUP 				:dword := $202;
		WM_MBUTTONDBLCLK 			:dword := $209;
		WM_MBUTTONDOWN 				:dword := $207;
		WM_MBUTTONUP 				:dword := $208;
		WM_MDIACTIVATE 				:dword := $222;
		WM_MDICASCADE 				:dword := $227;
		WM_MDICREATE 				:dword := $220;
		WM_MDIDESTROY 				:dword := $221;
		WM_MDIGETACTIVE 			:dword := $229;
		WM_MDIICONARRANGE 			:dword := $228;
		WM_MDIMAXIMIZE 				:dword := $225;
		WM_MDINEXT 					:dword := $224;
		WM_MDIREFRESHMENU 			:dword := $234;
		WM_MDIRESTORE 				:dword := $223;
		WM_MDISETMENU 				:dword := $230;
		WM_MDITILE 					:dword := $226;
		WM_MEASUREITEM 				:dword := $2C;
		WM_MENUCHAR 				:dword := $120;
		WM_MENUSELECT 				:dword := $11F;
		WM_MOUSEACTIVATE 			:dword := $21;
		WM_MOUSEFIRST 				:dword := $200;
		WM_MOUSELAST 				:dword := $209;
		WM_MOUSEMOVE 				:dword := $200;
		WM_MOVE 					:dword := $3;
		WM_MOVING 					:dword := $216;
		WM_NCACTIVATE 				:dword := $86;
		WM_NCCALCSIZE 				:dword := $83;
		WM_NCCREATE 				:dword := $81;
		WM_NCDESTROY 				:dword := $82;
		WM_NCHITTEST 				:dword := $84;
		WM_NCLBUTTONDBLCLK 			:dword := $A3;
		WM_NCLBUTTONDOWN 			:dword := $A1;
		WM_NCLBUTTONUP 				:dword := $A2;
		WM_NCMBUTTONDBLCLK 			:dword := $A9;
		WM_NCMBUTTONDOWN 			:dword := $A7;
		WM_NCMBUTTONUP 				:dword := $A8;
		WM_NCMOUSEMOVE 				:dword := $A0;
		WM_NCPAINT 					:dword := $85;
		WM_NCRBUTTONDBLCLK 			:dword := $A6;
		WM_NCRBUTTONDOWN 			:dword := $A4;
		WM_NCRBUTTONUP 				:dword := $A5;
		WM_NEXTDLGCTL 				:dword := $28;
		WM_NEXTMENU 				:dword := $213;
		WM_NOTIFY 					:dword := $4E;
		WM_NOTIFYFORMAT 			:dword := $55;
		WM_NULL 					:dword := $0;
		WM_OTHERWINDOWCREATED 		:dword := $42;
		WM_OTHERWINDOWDESTROYED 	:dword := $43;
		WM_PAINT 					:dword := $F;
		WM_PAINTCLIPBOARD 			:dword := $309;
		WM_PAINTICON 				:dword := $26;
		WM_PALETTECHANGED 			:dword := $311;
		WM_PALETTEISCHANGING 		:dword := $310;
		WM_PARENTNOTIFY 			:dword := $210;
		WM_PASTE 					:dword := $302;
		WM_PENWINFIRST 				:dword := $380;
		WM_PENWINLAST 				:dword := $38F;
		WM_POWER 					:dword := $48;
		WM_POWERBROADCAST 			:dword := $218;
		WM_PRINT 					:dword := $317;
		WM_PRINTCLIENT 				:dword := $318;
		WM_QUERYDRAGICON 			:dword := $37;
		WM_QUERYENDSESSION 			:dword := $11;
		WM_QUERYNEWPALETTE 			:dword := $30F;
		WM_QUERYOPEN 				:dword := $13;
		WM_QUEUESYNC 				:dword := $23;
		WM_QUIT 					:dword := $12;
		WM_RBUTTONDBLCLK 			:dword := $206;
		WM_RBUTTONDOWN 				:dword := $204;
		WM_RBUTTONUP 				:dword := $205;
		WM_RENDERALLFORMATS 		:dword := $306;
		WM_RENDERFORMAT 			:dword := $305;
		WM_SETCURSOR 				:dword := $20;
		WM_SETFOCUS 				:dword := $7;
		WM_SETFONT 					:dword := $30;
		WM_SETHOTKEY 				:dword := $32;
		WM_SETICON 					:dword := $80;
		WM_SETREDRAW 				:dword := $B;
		WM_SETTEXT 					:dword := $C;
		WM_SETTINGCHANGE 			:dword := $1A;
		WM_SHOWWINDOW 				:dword := $18;
		WM_SIZE 					:dword := $5;
		WM_SIZECLIPBOARD 			:dword := $30B;
		WM_SIZING 					:dword := $214;
		WM_SPOOLERSTATUS 			:dword := $2A;
		WM_STYLECHANGED 			:dword := $7D;
		WM_STYLECHANGING 			:dword := $7C;
		WM_SYSCHAR 					:dword := $106;
		WM_SYSCOLORCHANGE 			:dword := $15;
		WM_SYSCOMMAND 				:dword := $112;
		WM_SYSDEADCHAR 				:dword := $107;
		WM_SYSKEYDOWN 				:dword := $104;
		WM_SYSKEYUP 				:dword := $105;
		WM_TCARD 					:dword := $52;
		WM_TIMECHANGE 				:dword := $1E;
		WM_TIMER 					:dword := $113;
		WM_UNDO 					:dword := $304;
		WM_USER 					:dword := $400;
		WM_CHOOSEFONT_GETLOGFONT 	:dword := (WM_USER+1);
		WM_CHOOSEFONT_SETFLAGS 		:dword := (WM_USER+$102);
		WM_CHOOSEFONT_SETLOGFONT 	:dword := (WM_USER+$101);
		WM_PSD_ENVSTAMPRECT 		:dword := (WM_USER+5);
		WM_PSD_FULLPAGERECT 		:dword := (WM_USER+1);
		WM_PSD_GREEKTEXTRECT 		:dword := (WM_USER+4);
		WM_PSD_MARGINRECT 			:dword := (WM_USER+3);
		WM_PSD_MINMARGINRECT 		:dword := (WM_USER+2);
		WM_PSD_PAGESETUPDLG 		:dword := (WM_USER);
		WM_PSD_YAFULLPAGERECT 		:dword := (WM_USER+6);
		WM_USERCHANGED 				:dword := $54;
		WM_VKEYTOITEM 				:dword := $2E;
		WM_VSCROLL 					:dword := $115;
		WM_VSCROLLCLIPBOARD 		:dword := $30A;
		WM_WINDOWPOSCHANGED 		:dword := $47;
		WM_WINDOWPOSCHANGING 		:dword := $46;
		WM_WININICHANGE 			:dword := $1A;

		// Window style constants

		WS_BORDER 					:= $800000;
		WS_CAPTION 					:= $C00000;
		WS_CHILD 					:= $40000000;
		WS_CLIPCHILDREN 			:= $2000000;
		WS_CLIPSIBLINGS 			:= $4000000;
		WS_DISABLED 				:= $8000000;
		WS_DLGFRAME 				:= $400000;
		WS_EX_ACCEPTFILES 			:= $10;
		WS_EX_APPWINDOW 			:= $40000;
		WS_EX_CLIENTEDGE 			:= $200;
		WS_EX_CONTEXTHELP 			:= $400;
		WS_EX_CONTROLPARENT 		:= $10000;
		WS_EX_DLGMODALFRAME 		:= $1;
		WS_EX_LEFT 					:= $0;
		WS_EX_LEFTSCROLLBAR 		:= $4000;
		WS_EX_LTRREADING 			:= $0;
		WS_EX_MDICHILD 				:= $40;
		WS_EX_NOPARENTNOTIFY 		:= $4;
		WS_EX_RIGHT 				:= $1000;
		WS_EX_RIGHTSCROLLBAR 		:= $0;
		WS_EX_RTLREADING 			:= $2000;
		WS_EX_STATICEDGE 			:= $20000;
		WS_EX_TOOLWINDOW 			:= $80;
		WS_EX_TOPMOST 				:= $8;
		WS_EX_TRANSPARENT 			:= $20;
		WS_EX_WINDOWEDGE 			:= $100;
		WS_GROUP 					:= $20000;
		WS_HSCROLL 					:= $100000;
		WS_MAXIMIZE 				:= $1000000;
		WS_MAXIMIZEBOX 				:= $10000;
		WS_MINIMIZE 				:= $20000000;
		WS_MINIMIZEBOX 				:= $20000;
		WS_OVERLAPPED 				:= $0;
		WS_POPUP 					:= $80000000;
		WS_SYSMENU 					:= $80000;
		WS_TABSTOP 					:= $10000;
		WS_THICKFRAME 				:= $40000;
		WS_VISIBLE 					:= $10000000;
		WS_VSCROLL 					:= $200000;
									
		WS_CHILDWINDOW 				:= (WS_CHILD);
		WS_OVERLAPPEDWINDOW 		:= (
											WS_OVERLAPPED 
										|	WS_CAPTION 
										| 	WS_SYSMENU
										|	WS_THICKFRAME
										|	WS_MINIMIZEBOX
										|	WS_MAXIMIZEBOX
									   );

		WS_TILED 					:= WS_OVERLAPPED;
		WS_TILEDWINDOW 				:= WS_OVERLAPPEDWINDOW;
		WS_POPUPWINDOW 				:= (WS_POPUP | WS_BORDER | WS_SYSMENU);
		WS_SIZEBOX 					:= WS_THICKFRAME;
		WS_ICONIC 					:= WS_MINIMIZE;


		ES_AUTOHSCROLL 				:= $80;
		ES_AUTOVSCROLL 				:= $40;
		ES_CENTER 					:= $1;
		ES_LEFT 					:= $0;
		ES_LOWERCASE 				:= $10;
		ES_MULTILINE 				:= $4;
		ES_NOHIDESEL 				:= $100;
		ES_NUMBER 					:= $2000;	
		ES_OEMCONVERT 				:= $400;
		ES_PASSWORD 				:= $20;
		ES_READONLY 				:= $800;
		ES_RIGHT 					:= $2;
		ES_UPPERCASE 				:= $8;
		ES_WANTRETURN 				:= $1000;


		CS_BYTEALIGNCLIENT 			:= $1000;
		CS_BYTEALIGNWINDOW 			:= $2000;
		CS_CLASSDC 					:= $40;
		CS_DBLCLKS 					:= $8;
		CS_HREDRAW 					:= $2;
		CS_IME 						:= $10000;
		CS_INSERTCHAR 				:= $2000;
		CS_KEYCVTWINDOW 			:= $4;
		CS_NOCLOSE 					:= $200;
		CS_NOKEYCVT 				:= $100;
		CS_NOMOVECARET 				:= $4000;
		CS_OWNDC 					:= $20;
		CS_PARENTDC 				:= $80;
		CS_PUBLICCLASS 				:= $4000;
		CS_SAVEBITS 				:= $800;
		CS_VREDRAW 					:= $1;

		COLOR_3DDKSHADOW 			:= 21;
		COLOR_3DLIGHT 				:= 22;
		COLOR_ACTIVEBORDER 			:= 10;
		COLOR_ACTIVECAPTION 		:= 2;
		COLOR_ADJ_MAX 				:= 100;
		COLOR_ADJ_MIN 				:= -100;
		COLOR_APPWORKSPACE 			:= 12;
		COLOR_BTNFACE 				:= 15;
		COLOR_BTNHIGHLIGHT 			:= 20;
		COLOR_BTNSHADOW 			:= 16;
		COLOR_BTNTEXT 				:= 18;
		COLOR_CAPTIONTEXT 			:= 9;
		COLOR_GRAYTEXT 				:= 17;
		COLOR_HIGHLIGHT 			:= 13;
		COLOR_HIGHLIGHTTEXT 		:= 14;
		COLOR_INACTIVEBORDER 		:= 11;
		COLOR_INACTIVECAPTION 		:= 3;
		COLOR_INACTIVECAPTIONTEXT 	:= 19;
		COLOR_INFOBK 				:= 24;
		COLOR_INFOTEXT 				:= 23;
		COLOR_MENU 					:= 4;
		COLOR_MENUTEXT 				:= 7;
		COLOR_SCROLLBAR 			:= 0;
		COLOR_WINDOW 				:= 5;
		COLOR_WINDOWFRAME 			:= 6;
		COLOR_WINDOWTEXT 			:= 8;
									
		COLOR_3DSHADOW 				:= COLOR_BTNSHADOW;
		COLOR_3DFACE 				:= COLOR_BTNFACE;
		COLOR_3DHIGHLIGHT 			:= COLOR_BTNHIGHLIGHT;
		COLOR_3DHILIGHT 			:= COLOR_BTNHIGHLIGHT;
		COLOR_BTNHILIGHT 			:= COLOR_BTNHIGHLIGHT;


		CW_USEDEFAULT 				:= $80000000;


		IDI_APPLICATION 			:= 32512;
		IDI_ASTERISK 				:= 32516;
		IDI_EXCLAMATION 			:= 32515;
		IDI_HAND 					:= 32513;
		IDI_QUESTION 				:= 32514;
		IDI_WINLOGO 				:= 32517;
		IDI_ERROR 					:= IDI_HAND;
		IDI_INFORMATION 			:= IDI_ASTERISK;
		IDI_WARNING 				:= IDI_EXCLAMATION;

		IDC_APPSTARTING 			:= 32650;
		IDC_ARROW 					:= 32512;
		IDC_CROSS 					:= 32515;
		IDC_HELP 					:= 32651;
		IDC_IBEAM 					:= 32513;
		IDC_ICON 					:= 32641;
		IDC_NO 						:= 32648;
		IDC_SIZE 					:= 32640;
		IDC_SIZEALL 				:= 32646;
		IDC_SIZENESW 				:= 32643;
		IDC_SIZENS 					:= 32645;
		IDC_SIZENWSE 				:= 32642;
		IDC_SIZEWE 					:= 32644;
		IDC_UPARROW 				:= 32516;
		IDC_WAIT 					:= 32514;



		// DrawText constants:

		DT_BOTTOM 					:= $8;
		DT_CALCRECT 				:= $400;
		DT_CENTER 					:= $1;
		DT_CHARSTREAM 				:= $4;
		DT_DISPFILE 				:= $6;
		DT_EDITCONTROL 				:= $2000;
		DT_END_ELLIPSIS 			:= $8000;
		DT_EXPANDTABS 				:= $40;
		DT_EXTERNALLEADING 			:= $200;
		DT_INTERNAL 				:= $1000;
		DT_LEFT 					:= $0;
		DT_METAFILE 				:= $5;
		DT_MODIFYSTRING 			:= $10000;
		DT_NOCLIP 					:= $100;
		DT_NOPREFIX 				:= $800;
		DT_PATH_ELLIPSIS 			:= $4000;
		DT_PLOTTER 					:= $0;
		DT_RASCAMERA 				:= $3;
		DT_RASDISPLAY 				:= $1;
		DT_RASPRINTER 				:= $2;
		DT_RIGHT 					:= $2;
		DT_RTLREADING 				:= $20000;
		DT_SINGLELINE 				:= $20;
		DT_TABSTOP 					:= $80;
		DT_TOP 						:= $0;
		DT_VCENTER 					:= $4;
		DT_WORD_ELLIPSIS 			:= $40000;
		DT_WORDBREAK 				:= $10;


		// Font related constants:

		DEFAULT_CHARSET 			:= 1;
		DEFAULT_GUI_FONT 			:= 17;
		DEFAULT_PALETTE 			:= 15;
		DEFAULT_PITCH 				:= 0;
		DEFAULT_QUALITY 			:= 0;

		CLIP_CHARACTER_PRECIS 		:= 1;
		CLIP_DEFAULT_PRECIS 		:= 0;
		CLIP_EMBEDDED 				:= 128;
		CLIP_LH_ANGLES 				:= 16;
		CLIP_MASK 					:= $F;
		CLIP_STROKE_PRECIS 			:= 2;
		CLIP_TO_PATH 				:= 4097;
		CLIP_TT_ALWAYS 				:= 32;

		OUT_CHARACTER_PRECIS 		:= 2;
		OUT_DEFAULT_PRECIS 			:= 0;
		OUT_DEVICE_PRECIS 			:= 5;
		OUT_OUTLINE_PRECIS 			:= 8;
		OUT_RASTER_PRECIS 			:= 6;
		OUT_STRING_PRECIS 			:= 1;
		OUT_STROKE_PRECIS 			:= 3;
		OUT_TT_ONLY_PRECIS 			:= 7;
		OUT_TT_PRECIS 				:= 4;

		FF_DECORATIVE 				:= 80;
		FF_DONTCARE 				:= 0;
		FF_MODERN 					:= 48;
		FF_ROMAN 					:= 16;
		FF_SCRIPT 					:= 64;
		FF_SWISS 					:= 32;

		OEM_CHARSET 				:= 255;
		OEM_FIXED_FONT 				:= 10;


		// Button Styles:

		BS_3STATE 					:= $5;
		BS_AUTO3STATE 				:= $6;
		BS_AUTOCHECKBOX 			:= $3;
		BS_AUTORADIOBUTTON 			:= $9;
		BS_BITMAP 					:= $80;
		BS_BOTTOM 					:= $0800;
		BS_CENTER 					:= $0300;
		BS_CHECKBOX 				:= $2;
		BS_DEFPUSHBUTTON 			:= $1;
		BS_DIBPATTERN 				:= $5;
		BS_DIBPATTERN8X8 			:= $8;
		BS_DIBPATTERNPT 			:= $6;
		BS_FLAT 					:= $8000;
		BS_GROUPBOX 				:= $7;
		BS_HATCHED 					:= $2;
		BS_ICON 					:= $40;
		BS_INDEXED 					:= $4;
		BS_LEFT 					:= $0100;
		BS_LEFTTEXT 				:= $20;
		BS_MULTILINE 				:= $2000;
		BS_NOTIFY 					:= $4000;
		BS_NULL 					:= $1;
		BS_OWNERDRAW 				:= $B;
		BS_PATTERN 					:= $3;
		BS_PATTERN8X8 				:= $7;
		BS_PUSHBUTTON 				:= $0;
		BS_PUSHLIKE 				:= $1000;
		BS_RADIOBUTTON 				:= $4;
		BS_RIGHT 					:= $0200;
		BS_RIGHTBUTTON 				:= $20;
		BS_SOLID 					:= $0;
		BS_TEXT 					:= $0;
		BS_TOP 						:= $0400;
		BS_USERBUTTON 				:= $8;
		BS_VCENTER 					:= $0C00;

		BS_HOLLOW 					:= BS_NULL;


		BN_CLICKED 					:= $0;
		BN_DISABLE 					:= $4;
		BN_DOUBLECLICKED 			:= $5;
		BN_HILITE 					:= $2;
		BN_KILLFOCUS 				:= $7;
		BN_PAINT 					:= $1;
		BN_SETFOCUS 				:= $6;
		BN_UNHILITE 				:= $3;

		BN_DBLCLK 					:= BN_DOUBLECLICKED;
		BN_PUSHED 					:= BN_HILITE;
		BN_UNPUSHED 				:= BN_UNHILITE;

		// Virtual Key Codes:

		VK_ADD 			:= $6B;
		VK_ATTN 		:= $F6;
		VK_BACK 		:= $8;
		VK_CANCEL 		:= $3;
		VK_CAPITAL 		:= $14;
		VK_CLEAR 		:= $C;
		VK_CONTROL 		:= $11;
		VK_CRSEL 		:= $F7;
		VK_DECIMAL 		:= $6E;
		VK_DELETE 		:= $2E;
		VK_DIVIDE 		:= $6F;
		VK_DOWN 		:= $28;
		VK_END 			:= $23;
		VK_EREOF 		:= $F9;
		VK_ESCAPE 		:= $1B;
		VK_EXECUTE 		:= $2B;
		VK_EXSEL 		:= $F8;
		VK_F1 			:= $70;
		VK_F10 			:= $79;
		VK_F11 			:= $7A;
		VK_F12 			:= $7B;
		VK_F13 			:= $7C;
		VK_F14 			:= $7D;
		VK_F15 			:= $7E;
		VK_F16 			:= $7F;
		VK_F17 			:= $80;
		VK_F18 			:= $81;
		VK_F19 			:= $82;
		VK_F2 			:= $71;
		VK_F20 			:= $83;
		VK_F21 			:= $84;
		VK_F22 			:= $85;
		VK_F23 			:= $86;
		VK_F24 			:= $87;
		VK_F3 			:= $72;
		VK_F4 			:= $73;
		VK_F5 			:= $74;
		VK_F6 			:= $75;
		VK_F7 			:= $76;
		VK_F8 			:= $77;
		VK_F9 			:= $78;
		VK_HELP 		:= $2F;
		VK_HOME 		:= $24;
		VK_INSERT 		:= $2D;
		VK_LBUTTON 		:= $1;
		VK_LCONTROL 	:= $A2;
		VK_LEFT 		:= $25;
		VK_LMENU 		:= $A4;
		VK_LSHIFT 		:= $A0;
		VK_MBUTTON 		:= $4;
		VK_MENU 		:= $12;
		VK_MULTIPLY 	:= $6A;
		VK_NEXT 		:= $22;
		VK_NONAME 		:= $FC;
		VK_NUMLOCK 		:= $90;
		VK_NUMPAD0 		:= $60;
		VK_NUMPAD1 		:= $61;
		VK_NUMPAD2 		:= $62;
		VK_NUMPAD3 		:= $63;
		VK_NUMPAD4 		:= $64;
		VK_NUMPAD5 		:= $65;
		VK_NUMPAD6 		:= $66;
		VK_NUMPAD7 		:= $67;
		VK_NUMPAD8 		:= $68;
		VK_NUMPAD9 		:= $69;
		VK_OEM_CLEAR 	:= $FE;
		VK_PA1 			:= $FD;
		VK_PAUSE 		:= $13;
		VK_PLAY 		:= $FA;
		VK_PRINT 		:= $2A;
		VK_PRIOR 		:= $21;
		VK_PROCESSKEY 	:= $E5;
		VK_RBUTTON 		:= $2;
		VK_RCONTROL 	:= $A3;
		VK_RETURN 		:= $D;
		VK_RIGHT 		:= $27;
		VK_RMENU 		:= $A5;
		VK_RSHIFT 		:= $A1;
		VK_SCROLL 		:= $91;
		VK_SELECT 		:= $29;
		VK_SEPARATOR 	:= $6C;
		VK_SHIFT 		:= $10;
		VK_SNAPSHOT 	:= $2C;
		VK_SPACE 		:= $20;
		VK_SUBTRACT 	:= $6D;
		VK_TAB 			:= $9;
		VK_UP 			:= $26;



		// System Metrics Constants:

		SM_ARRANGE				:= 56;
		SM_CLEANBOOT			:= 67;
		SM_CMETRICS				:= 44;
		SM_CMOUSEBUTTONS		:= 43;
		SM_CXBORDER				:= 5;
		SM_CXCURSOR				:= 13;
		SM_CXDLGFRAME			:= 7;
		SM_CXDOUBLECLK			:= 36;
		SM_CXDRAG				:= 68;
		SM_CXEDGE				:= 45;
		SM_CXFRAME				:= 32;
		SM_CXFULLSCREEN			:= 16;
		SM_CXHSCROLL			:= 21;
		SM_CXHTHUMB				:= 10;
		SM_CXICON				:= 11;
		SM_CXICONSPACING		:= 38;
		SM_CXMAXIMIZED			:= 61;
		SM_CXMAXTRACK			:= 59;
		SM_CXMENUCHECK			:= 71;
		SM_CXMENUSIZE			:= 54;
		SM_CXMIN				:= 28;
		SM_CXMINIMIZED			:= 57;
		SM_CXMINSPACING			:= 47;
		SM_CXMINTRACK			:= 34;
		SM_CXSCREEN				:= 0;
		SM_CXSIZE				:= 30;
		SM_CXSMICON				:= 49;
		SM_CXSMSIZE				:= 52;
		SM_CXVSCROLL			:= 2;
		SM_CYBORDER				:= 6;
		SM_CYCAPTION			:= 4;
		SM_CYCURSOR				:= 14;
		SM_CYDLGFRAME			:= 8;
		SM_CYDOUBLECLK			:= 37;
		SM_CYDRAG				:= 69;
		SM_CYEDGE				:= 46;
		SM_CYFRAME				:= 33;
		SM_CYFULLSCREEN			:= 17;
		SM_CYHSCROLL			:= 3;
		SM_CYICON				:= 12;
		SM_CYICONSPACING		:= 39;
		SM_CYKANJIWINDOW		:= 18;
		SM_CYMAXIMIZED			:= 62;
		SM_CYMAXTRACK			:= 60;
		SM_CYMENU				:= 15;
		SM_CYMENUCHECK			:= 72;
		SM_CYMENUSIZE			:= 55;
		SM_CYMIN				:= 29;
		SM_CYMINIMIZED			:= 58;
		SM_CYMINSPACING			:= 48;
		SM_CYMINTRACK			:= 35;
		SM_CYSCREEN				:= 1;
		SM_CYSIZE				:= 31;
		SM_CYSMCAPTION			:= 51;
		SM_CYSMICON				:= 50;
		SM_CYSMSIZE				:= 53;
		SM_CYVSCROLL			:= 20;
		SM_CYVTHUMB				:= 9;
		SM_DBCSENABLED			:= 42;
		SM_DEBUG				:= 22;
		SM_MENUDROPALIGNMENT	:= 40;
		SM_MIDEASTENABLED		:= 74;
		SM_MOUSEPRESENT			:= 19;
		SM_NETWORK				:= 63;
		SM_PENWINDOWS			:= 41;
		SM_RESERVED1			:= 24;
		SM_RESERVED2			:= 25;
		SM_RESERVED3			:= 26;
		SM_RESERVED4			:= 27;
		SM_SECURE				:= 44;
		SM_SLOWMACHINE			:= 73;
		SM_SWAPBUTTON			:= 23;

		SM_CXFIXEDFRAME			:= SM_CXDLGFRAME;
		SM_CXSIZEFRAME			:= SM_CXFRAME;
		SM_CYFIXEDFRAME			:= SM_CYDLGFRAME;
		SM_CYSIZEFRAME			:= SM_CYFRAME;



	// DefWindowProc_p- Calls the default window procedure.
	// DefWindowProc-   Macro to reverse parameter list for us.

	static DefWindowProc_p:
				procedure
				(
					lParam:	dword; 	//Second message parameter.
					wParam:	dword; 	//First message parameter.
					MsgID:	uns32;	//Message identifier.
					hWnd:	dword	// Handle to window.
				);	@global:_hla._ext( "__imp__DefWindowProcA@16" );


	#macro DefWindowProc( _hWnd_, _MsgID_, _wParam_, _lParam_ );

		win.DefWindowProc_p( _lParam_, _wParam_, _MsgID_, _hWnd_ )

	#endmacro;



	// LoadIcon- Loads icon data from the EXE file associated
	// with the handle.

	static 	LoadIcon_p:procedure
			( 
				lpIconName:dword; // handle to application instance
				hInstance:dword	   // icon-name string or icon resource ID 
			);
			@global:_hla._ext( "__imp__LoadIconA@8" );

	#macro LoadIcon( _hInstance_, _lpIconName_ );
	
		win.LoadIcon_p( _lpIconName_, _hInstance_ )
		
	#endmacro;



	// LoadCursor- Loads cursor data from the EXE file associated
	// with the handle.

	static 	LoadCursor_p:procedure
			( 
				lpCursorName:dword;   // handle to application instance
				hInstance:dword	      // cursor name or cursor resource ID 
			);
			@global:_hla._ext( "__imp__LoadCursorA@8" );

	#macro LoadCursor( _hInstance_, _lpCursorName_ );
	
		win.LoadCursor_p( _lpCursorName_, _hInstance_ )
		
	#endmacro;
	 

	// CreateWindowEx- This function creates a window object.

	static CreateWindowEx_p:procedure
			(
				lpParam:		dword;	// pointer to window-creation data
				hInstance:		dword;	// handle to application instance
				hMenu:			dword;	// handle to menu, or child identifier
				hWndParent:		dword;	// handle to parent or owner window
				nHeight:		dword;	// window height
				nWidth:			dword;	// window width
				y:				dword;	// Vertical window position.
				x:				dword;	// Horizontal window position.
				dwStyle:		dword;	// window style
				lpWindowName:	string;	// pointer to window name
				lpClassName:	string;	// pointer to registered class name
				dwExStyle:		dword	// Extended window style.
			); @global:_hla._ext( "__imp__CreateWindowExA@48" );


	#macro CreateWindowEx
	(
		_dwExStyle_,
		_lpClassName_,
		_lpWindowName_,
		_dwStyle_,
		_x_,
		_y_,
		_nWidth_,
		_nHeight_,
		_hWndParent_,
		_hMenu_,
		_hInstance_,
		_lpParam_
	);

		win.CreateWindowEx_p
		(
			_lpParam_,
			_hInstance_,
			_hMenu_,
			_hWndParent_,
			_nHeight_,
			_nWidth_,
			_y_,
			_x_,
			_dwStyle_,
			_lpWindowName_,
			_lpClassName_,
			_dwExStyle_
		)
 

	#endmacro;



	// ShowWindow function:

	static ShowWindow_p:procedure( nCmdShow:dword; hWnd:dword );
			@global:_hla._ext( "__imp__ShowWindow@8" );

	#macro ShowWindow( _hWnd_, _nCmdShow_ );

		win.ShowWindow_p( _nCmdShow_, _hWnd_ )

	#endmacro;


	// GetMessage function:

	static GetMessage_p:procedure
	(
		wMsgFilterMax:	uns32;
		wMsgFilterMin:	uns32;
		hWnd:			dword;
		var lpMsg:		MSG
	);	@global:_hla._ext( "__imp__GetMessageA@16" );

	#macro GetMessage( _lpMsg_, _hWnd_, _wMsgFilterMin_, _wMsgFilterMax_ );

		win.GetMessage_p( _wMsgFilterMax_, _wMsgFilterMin_, _hWnd_, _lpMsg_ )

	#endmacro;




	// BeginPaint Function:

	static BeginPaint_p:procedure( var lpPaint: PAINTSTRUCT; hWnd:dword );
		@global:_hla._ext( "__imp__BeginPaint@8" );

	#macro BeginPaint( _hWnd_, _lpPaint_ );

		win.BeginPaint_p( _lpPaint_, _hWnd_ )

	#endmacro;
 


	// EndPaint Function:

	static EndPaint_p:procedure( var lpPaint: PAINTSTRUCT; hWnd:dword );
		@global:_hla._ext( "__imp__EndPaint@8" );

	#macro EndPaint( _hWnd_, _lpPaint_ );

		win.EndPaint_p( _lpPaint_, _hWnd_ )

	#endmacro;
 


	// GetClientRect Function:

	static GetClientRect_p:procedure( var lpPaint: PAINTSTRUCT; hWnd:dword );
		@global:_hla._ext( "__imp__GetClientRect@8" );

	#macro GetClientRect( _hWnd_, _lpPaint_ );

		win.GetClientRect_p( _lpPaint_, _hWnd_ )

	#endmacro;
 

	// DrawText Function:
	 
	static DrawText_p:
		procedure
		(
				uFormat:	uns32;
			var	lpRect:		RECT;
				nCount:		int32;
				lpString:	string;
				hDC:		dword
		);
		@global:_hla._ext( "__imp__DrawTextA@20" );

	#macro DrawText( _hDC_, _lpString_, _nCount_, _lpRect_, _uFormat_ );

		win.DrawText_p( _uFormat_, _lpRect_, _nCount_, _lpString_, _hDC_ )

	#endmacro;




	// CreateFont function:

	static CreateFont_p:procedure
	(
	  lpszFace				:string;	// pointer to typeface name string
	  fdwPitchAndFamily		:dword;		// pitch and family
	  fdwQuality			:dword;		// output quality
	  fdwClipPrecision		:dword;		// clipping precision
	  fdwOutputPrecision	:dword;		// output precision
	  fdwCharSet			:dword;		// character set identifier
	  fdwStrikeOut			:dword;		// strikeout attribute flag
	  fdwUnderline			:dword;		// underline attribute flag
	  fdwItalic				:dword;		// italic attribute flag
	  fnWeight				:dword;		// font weight
	  nOrientation			:dword;		// base-line orientation angle
	  nEscapement			:dword;		// angle of escapement
	  nWidth				:dword;		// logical average character width
	  nHeight				:dword		// logical height of font
	); @global:_hla._ext( "__imp__CreateFontA@56" );
 

	// CreateFont function

	#macro CreateFont
	(
		_nHeight_,				
		_nWidth_,
		_nEscapement_,
		_nOrientation_,
		_fnWeight_,
		_fdwItalic_,				
		_fdwUnderline_,
		_fdwStrikeOut_,			
		_fdwCharSet_,			
		_fdwOutputPrecision_,
		_fdwClipPrecision_,
		_fdwQuality_,			
		_fdwPitchAndFamily_,		
		_lpszFace_
	);				
		win.CreateFont_p
		(
		  _lpszFace_,
		  _fdwPitchAndFamily_,
		  _fdwQuality_,
		  _fdwClipPrecision_,
		  _fdwOutputPrecision_,
		  _fdwCharSet_,
		  _fdwStrikeOut_,
		  _fdwUnderline_,
		  _fdwItalic_,
		  _fnWeight_,
		  _nOrientation_,
		  _nEscapement_,
		  _nWidth_,
		  _nHeight_
		);

	#endmacro;


	// SelectObject function:

	static SelectObject_p:procedure
	(
		hgdiobj:	dword;
		hdc:		dword
	);	@global:_hla._ext( "__imp__SelectObject@8" );

	#macro SelectObject( _hdc_, _hgdiobj_ );

		win.SelectObject_p( _hgdiobj_, _hdc_ );

	#endmacro;


	// SetTextColor function:

	static SetTextColor_p:procedure
	(
		color:	dword;
		hdc:	dword
	);	@global:_hla._ext( "__imp__SetTextColor@8" );

	#macro SetTextColor( _hdc_, _color_ );

		win.SetTextColor_p( _color_, _hdc_ );

	#endmacro;


	// SetBkColor function:

	static SetBkColor_p:procedure
	(
		color:	dword;
		hdc:	dword
	);	@global:_hla._ext( "__imp__SetBkColor@8" );

	#macro SetBkColor( _hdc_, _color_ );

		win.SetBkColor_p( _color_, _hdc_ );

	#endmacro;


	// TextOut function:

	static TextOut_p:procedure
	(
		cbString:	dword;
		lpString:	string;
		nYStart:	dword;
		nXStart:	dword;
		hdc:		dword
	);	@global:_hla._ext( "__imp__TextOutA@20" );

	#macro TextOut( _hdc_, _nXStart_, _nYStart_, _lpString_, _cpString_ );

		win.TextOut_p( _cpString_, _lpString_, _nYStart_, _nXStart_, _hdc_ );

	#endmacro;

 
	// InvalidateRect function:

	type ptrToRect: pointer to RECT;

	static InvalidateRect_p:procedure
	(
		bErase:		boolean;	// erase-background flag
		lpRect:		ptrToRect;	// address of rectangle coordinates
		hWnd:		dword		// handle of window with changed update region
	);	@global:_hla._ext( "__imp__InvalidateRect@12" );

	#macro InvalidateRect( _hWnd_, _lpRect_, _bErase_ );

		win.InvalidateRect_p( _bErase_, _lpRect_, _hWnd_ )

	#endmacro;
 

	// DestroyWindow function:

	static DestroyWindow:procedure( hWnd:dword ); 
			@global:_hla._ext( "__imp__DestroyWindow@4" );


	// LoadMenu function:

	static LoadMenu_p:procedure( MenuName:string; hInst:dword );
			@global:_hla._ext( "__imp__LoadMenuA@8" );

	#macro LoadMenu( _hInst_, _MenuName_ );

		win.LoadMenu_p( _MenuName_, _hInst_ )

	#endmacro;


	// SetFocus function:

	static SetFocus:procedure( hwnd:dword );
			@global:_hla._ext( "__imp__SetFocus@4" );


	// Get/Set WindowText functions:

	static SetWindowText_p:procedure( TestStr:string; hwndEdit:dword );
			@global:_hla._ext( "__imp__SetWindowTextA@8" );

	static GetWindowText_p:procedure
	( 
			MaxSize:uns32; 
		var buffer:char; 
		hwndEdit:dword 
	);
	@global:_hla._ext( "__imp__GetWindowTextA@12" );

	#macro SetWindowText( _hwndEdit_, _TestStr_ );
	
		win.SetWindowText_p( _TestStr_, _hwndEdit_ );
		
	#endmacro;
	
	#macro GetWindowText( _hwndEdit_, _buffer_, _MaxSize_ );
	
		win.GetWindowText_p( _MaxSize_, _buffer_, _hwndEdit_ );
		
	#endmacro;


	// SendMessage and PostMessage functions:

	static SendMessage_p:procedure
	(
		lParam:		dword;
		wParam:		dword;
		msg2send:	uns32;
		hwnd:		dword
	);
	@global:_hla._ext( "__imp__SendMessageA@16" );

	static PostMessage_p:procedure
	(
		lParam: 	dword;
		wParam: 	dword;
		msg2send:	uns32;
		hwnd:		dword
	);
	@global:_hla._ext( "__imp__PostMessageA@16" );


	#macro SendMessage( _hwnd_, _msg_, _wParam_, _lParam_ );

		win.SendMessage_p( _lParam_, _wParam_, _msg_, _hwnd_ );

	#endmacro;


	#macro PostMessage( _hwnd_, _msg_, _wParam_, _lParam_ );

		win.PostMessage_p( _lParam_, _wParam_, _msg_, _hwnd_ );

	#endmacro;



	static Sleep:procedure( msec:uns32 );
		@global:_hla._ext( "__imp__Sleep@4" );



end win;



namespace win32cons;

	procedure info( var csbi:@global:win.CONSOLE_SCREEN_BUFFER_INFO );
			@@global:_hla._ext( "WIN32CONS_INFO" );



	procedure getX; @returns( "eax" ); @@global:_hla._ext( "WIN32CONS_GETX" );
	procedure getY; @returns( "eax" ); @@global:_hla._ext( "WIN32CONS_GETY" );
	procedure gotoxy( y:word; x:word ); @@global:_hla._ext( "WIN32CONS_GOTOXY" );
	
	procedure clrToEOLN; @@global:_hla._ext( "WIN32CONS_CLRTOEOLN" );
	procedure clrToEOScrn; @@global:_hla._ext( "WIN32CONS_CLRTOEOSCRN" );

	procedure insertChars( n:word ); @@global:_hla._ext( "WIN32CONS_INSERTCHARS" );
	procedure insertLn; @@global:_hla._ext( "WIN32CONS_INSERTLN" );
	procedure insertLines( n:word ); @@global:_hla._ext( "WIN32CONS_INSERTLINES" );
	
	procedure deleteChars( n:word ); @@global:_hla._ext( "WIN32CONS_DELETECHARS" );
	procedure deleteLn; @@global:_hla._ext( "WIN32CONS_DELETELN" );
	procedure deleteLines( n:word ); @@global:_hla._ext( "WIN32CONS_DELETELINES" );


	procedure cls; @@global:_hla._ext( "WIN32CONS_CLS" );
	procedure fillRect
	( 
		top:			word; 
		left:			word; 
		bottom:			word;
		right:			word; 
		charToWrite:	char;
		Attribute:		word

	);		@@global:_hla._ext( "WIN32CONS_FILLRECT" );

	procedure fillRectAttr
	( 
		top:			word; 
		left:			word; 
		bottom:			word;
		right:			word; 
		Attribute:		word

	);		@@global:_hla._ext( "WIN32CONS_FILLRECTATTR" );

	procedure setOutputAttr( Attribute:word ); 
			@@global:_hla._ext( "WIN32CONS_SETOUTPUTATTR" );

	procedure setTitle( title:string ); @@global:_hla._ext( "WIN32CONS_SETTITLE" );
	procedure getTitle( title:string ); @@global:_hla._ext( "WIN32CONS_GETTITLE" );

	procedure a_getTitle; 
			@returns( "eax" );
			@@global:_hla._ext( "WIN32CONS_A_GETTITLE" );

	procedure peekInput( var input: @global:win.INPUT_RECORD );
			@use eax; 
			@returns( "eax" );
			@@global:_hla._ext( "WIN32CONS_PEEKINPUT" );

	procedure readInput( var input: @global:win.INPUT_RECORD );
			@use eax; 
			@returns( "eax" );
			@@global:_hla._ext( "WIN32CONS_READINPUT" );


	procedure flushInput; @@global:_hla._ext( "WIN32CONS_FLUSHINPUT" );

	procedure getMode; @returns( "eax" ); @@global:_hla._ext( "WIN32CONS_GETMODE" );
	procedure setMode( theMode:dword ); @@global:_hla._ext( "WIN32CONS_SETMODE" );

	procedure numButtons; @returns( "eax" ); @@global:_hla._ext( "WIN32CONS_NUMBUTTONS" );

	procedure puts( y:word; x:word; s:string ); @@global:_hla._ext( "WIN32CONS_PUTS" );
	procedure putsx( y:word; x:word; attr:word; len:word; s:string );
			@@global:_hla._ext( "WIN32CONS_PUTSX" );

	procedure putRect
	( 
			top:word; 
			left:word; 
			bottom:word; 
			right:word;
		var	buf:byte
	);	@@global:_hla._ext( "WIN32CONS_PUTRECT" );



	procedure getRect
	( 
			top:word; 
			left:word; 
			bottom:word; 
			right:word;
		var	buf:byte
	);	@@global:_hla._ext( "WIN32CONS_GETRECT" );


	procedure a_getRect
	( 
		top:word; 
		left:word; 
		bottom:word; 
		right:word
	);	@returns( "eax" );
		@@global:_hla._ext( "WIN32CONS_A_GETRECT" );



	procedure getc( y:dword; x:dword ); 
			@returns( "al" );
			@@global:_hla._ext( "WIN32CONS_GETC" );

	procedure gets( y:dword; x:dword; len:dword; s:string );
			@@global:_hla._ext( "WIN32CONS_GETS" );

	procedure a_gets( y:dword; x:dword; len:dword );
			@returns( "eax" );
			@@global:_hla._ext( "WIN32CONS_A_GETS" );

	procedure scrollUp; @@global:_hla._ext( "WIN32CONS_SCROLLUP" );
	procedure scrollUpN( n:uns16 ); @@global:_hla._ext( "WIN32CONS_SCROLLUPN" );
	procedure scrollUpx( fill:char; attr:word; n:uns16 );
			@@global:_hla._ext( "WIN32CONS_SCROLLUPX" );

	procedure scrollUpRect
	( 
		n:uns16;
		fill:char;
		attr:word; 
		top:word; 
		left:word; 
		bottom:word; 
		right:word 
	);		@@global:_hla._ext( "WIN32CONS_SCROLLUPRECT" );

	procedure scrollUpRectv
	( 
			n:		uns16;
			fill:	char;
			attr:	word; 
		var rect:	@global:win.small_rect 
	);		@@global:_hla._ext( "WIN32CONS_SCROLLUPRECTV" );


	procedure scrollDn; @@global:_hla._ext( "WIN32CONS_SCROLLDN" );
	procedure scrollDnN( n:uns16 ); @@global:_hla._ext( "WIN32CONS_SCROLLDNN" );
	procedure scrollDnx( fill:char; attr:word; n:uns16 );
			@@global:_hla._ext( "WIN32CONS_SCROLLDNX" );

	procedure scrollDnRect
	( 
		n:uns16; 
		fill:char;
		attr:word; 
		top:word; 
		left:word; 
		bottom:word; 
		right:word 
	);		@@global:_hla._ext( "WIN32CONS_SCROLLDNRECT" );

	procedure scrollDnRectv
	( 
			n:		uns16;
			fill:	char;
			attr:	word; 
		var rect:	@global:win.small_rect
	);		@@global:_hla._ext( "WIN32CONS_SCROLLDNRECTV" );


end win32cons;

#endif

